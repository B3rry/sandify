{"version":3,"sources":["features/app/logo.svg","features/app/reactGA.js","features/app/Header.js","features/shapes/shapesSlice.js","components/InputOption.js","components/DropdownOption.js","components/CheckboxOption.js","shapes/Transform.js","features/transforms/transformsSlice.js","common/Geometry.js","shapes/Shape.js","shapes/Polygon.js","shapes/Circle.js","shapes/Star.js","shapes/Heart.js","shapes/Reuleaux.js","shapes/Epicycloid.js","shapes/Hypocycloid.js","shapes/Rose.js","shapes/input_text/raysol_cursive.js","shapes/input_text/raysol_sanserif.js","shapes/input_text/Fonts.js","common/LimitEnforcer.js","shapes/input_text/InputText.js","shapes/Wiper.js","shapes/v1_engineering/Vicious1Vertices.js","shapes/v1_engineering/V1Engineering.js","shapes/fractal_spirograph/Orbit.js","shapes/fractal_spirograph/FractalSpirograph.js","common/PriorityQueue.js","common/Graph.js","shapes/tessellation_twist/TessellationTwist.js","common/eulerianTrail.js","common/util.js","common/registeredShapes.js","features/shapes/selectors.js","features/transforms/ScaleTransform.js","features/transforms/RotationTransform.js","features/transforms/TrackTransform.js","features/transforms/Transforms.js","features/shapes/Shape.js","features/shapes/ShapeList.js","features/theta_rho/fileSlice.js","features/theta_rho/ThetaRho.js","features/machine/machineSlice.js","features/machine/RectSettings.js","features/machine/PolarSettings.js","features/machine/MachineSettings.js","features/app/Footer.js","features/app/appSlice.js","features/app/InputTabs.js","common/Computer.js","features/machine/selectors.js","features/machine/PreviewWindow.js","features/gcode/gCodeSlice.js","features/gcode/selectors.js","features/gcode/GCodeGenerator.js","features/machine/MachinePreview.js","features/app/store.js","features/app/App.js","index.js"],"names":["module","exports","ReactGA","initialize","debug","pageview","window","location","pathname","search","Header","className","src","logo","alt","Component","shapesSlice","createSlice","name","initialState","currentId","byId","allIds","reducers","addShape","state","action","shape","payload","id","push","setCurrentShape","event","category","localStorage","setItem","updateShape","actions","InputOption","option","this","props","options","optionKey","model","optionType","type","minimum","parseFloat","min","maximum","max","Row","Col","sm","Form","Label","htmlFor","title","Control","as","step","isNaN","value","onChange","attrs","target","DropdownOption","currentChoice","key","index","label","choice","choices","map","CheckboxOption","checked","transformOptions","offsetX","offsetY","numLoops","transformMethod","growValue","spinValue","spinSwitchbacks","trackValue","trackNumLoops","trackLength","trackGrow","Transform","repeatEnabled","growEnabled","spinEnabled","trackEnabled","trackGrowEnabled","transformsSlice","addTransform","transform","meta","getInitialState","updateTransform","toggleRepeat","toggleGrow","toggleSpin","toggleTrack","toggleTrackGrow","Vertex","x","y","speed","f","shapeOptions","startingSize","Shape","canTransform","selectGroup","polygonSides","Polygon","points","i","angle","Math","PI","cos","sin","circleLobes","Circle","starRatio","Star","star_scale","Heart","scale","pow","reuleauxSides","Reuleaux","corners","coverageAngle","halfCoverageAngle","c","startAngle","length","corn","epicycloidA","epicycloidB","Epicycloid","link","a","b","hypocycloidA","hypocycloidB","roseN","roseD","Rose","n","parseInt","d","thetaClose","resolution","theta","r","raysol_cursive","raysol_sanserif","billsey","curve","Array","keys","billseyConverter","vertices","newVertices","prevPoint","forEach","vertex","width","abs","height","concat","cv","reverse","maxX","raysolConverter","MonospaceFont","ch","upper","toUpperCase","hasOwnProperty","CursiveFont","pointLocation","point","size_x","size_y","intersection","line_start","line_end","side_start","side_end","line","clone","subtract","side","lineCrossSidePerp","diff","t","u","add","multiply","Victor","clipLine","quadrant_start","quadrant_end","nearestVertex","boundPoint","sides","intersections","s","int_point","fromObject","console","log","Error","lengthSq","temp","midpoint","good","bad","dx","dy","fixed","distance","traceCircle","endAngle","size","deltaAngle","tracePoints","onSegment","start","end","clipLineCircle","rad_start","magnitude","rad_end","nearestVertexCircle","direction","normalize","distanceToLine","dt","sqrt","point1","point2","on","getIntersections","other_point","inputText","inputFont","rotateDir","getMaxX","InputText","prevLetter","lines","chi","nextLetter","undefined","vi","textPoints","connectorPoints","widthOffset","lastTheta","rPerY","thetaCenter","rOffset","maxY","rOffsetPerLine","thetaPerX","endTheta","wiperAngleDeg","wiperSize","outOfBounds","nearEnough","Wiper","outputVertices","machine","rectangular","minY","minX","maxRadius","startLocation","cosa","sina","orig_delta_w","orig_delta_h","delta_w","delta_h","endLocation","nextWidthPoint","nextHeightPoint","emergency_break","corner","Vicious1Vertices","V1Engineering","Orbit","level","settings","parent","child","sign","alternateRotation","velocity","newr","relativeSize","newx","newy","rsum","fractalSpirographVelocity","fractalSpirographResolution","fractalSpirographNumCircles","fractalSpirographRelativeSize","fractalSpirographAlternateRotation","FractalSpirograph","numCircles","sun","next","addChild","j","update","PriorityQueue","collection","element","isEmpty","added","splice","shift","mix","v","result","vec2","args","Graph","nodes","adjacencyList","edges","node","node1","node2","weight","toString","sort","startNode","endNode","times","backtrace","pq","Infinity","enqueue","currentNode","dequeue","neighbor","time","path","lastStep","unshift","vec_triangle","vec_square","getEdges","count","da","db","dc","ab","ac","bc","rotate","ap","bp","cp","tessellationTwistNumSides","tessellationTwistIterations","tessellationTwistRotate","TessellationTwist","numSides","angle2","tessellation","slice","getShapeVertices","vertexMap","Map","edgeMap","edge","v1","v2","set","graph","addNode","addEdge","prevKey","trail","g","edgePointer","edgeUsed","idReverse","idCount","getId","pushEdge","deg","inDeg","outDeg","directed","check","oddVertex","odd","checkDirected","checkUndirected","dfs","to","eulerianTrail","from","values","walkedVertices","walkedEdges","Set","c1","c2","missingEdges","filter","includes","reduce","hash","split","get","edgeKey","dijkstraShortestPath","walkedKey","walkedVertex","missingVertex","registeredShapes","polygon","star","circle","heart","reuleaux","epicycloid","hypocycloid","Hypocycloid","rose","v1Engineering","fractal_spirograph","tessellation_twist","wiper","getShapes","shapes","getCurrentShapeId","getShapesSelector","createSelector","getCurrentShapeSelector","getCurrentTransformSelector","transforms","getShape","ScaleTransform","activeClassName","active","activeKey","Accordion","defaultActiveKey","Card","Toggle","eventKey","onClick","onGrow","Collapse","Body","connect","ownProps","getOptions","dispatch","RotationTransform","onSpin","TrackTransform","activeGrowClassName","activeGrow","activeGrowKey","onTrack","onTrackGrow","Transforms","onRepeat","ToggleButtonGroup","ontransformMethodChange","ToggleButton","variant","optionsRender","Object","optionsListRender","entries","linkRender","rel","href","Button","onRestoreDefaults","metashape","getShapeById","metatransform","tAttrs","customStyles","control","base","minHeight","ShapeList","groupOptions","optionLabel","found","group","newOptions","selectedOption","currentShape","styles","maxMenuHeight","selected","fileSlice","comments","zoom","aspectRatio","setFileVertices","setFileName","setFileComments","setFileZoom","toggleFileAspectRatio","ThetaRho","commentsRender","comment","style","cursor","accept","setVertices","display","toggleAspectRatio","setZoom","file","parseThrFile","rv","reader","FileReader","onload","startTime","performance","now","has_vertex","ii","trim","indexOf","pointStrings","thetaRhos","previous","max_angle","rhoStep","rho","convertToXY","endTime","timing","variable","readAsText","files","localMinX","getItem","localMaxX","localMinY","localMaxY","localMaxRadius","machineSlice","rectExpanded","polarExpanded","rectOrigin","polarStartPoint","polarEndPoint","canvasWidth","canvasHeight","sliderValue","updateMachine","assign","toggleMachineRectExpanded","toggleMachinePolarExpanded","setMachineRectOrigin","newValue","setMachineSize","RectSettings","activeCallback","FormControl","onMinXChange","onMaxXChange","onMinYChange","onMaxYChange","origin","onOriginChange","expanded","PolarSettings","onMaxRadiusChange","startPoint","onStartPointChange","endPoint","onEndPointChange","MachineSettings","Footer","appSlice","sandifyVersion","input","chooseInput","InputTabs","Tabs","onSelect","handleSelect","bind","Tab","angleDeg","scale_perc","offset","track","data","loop_index","radius","amount","trackIndex","transformedVertex","loopPeriod","stage","spinAmount","getVertices","pop","buildTrackLoop","numTrackLoops","nextTrackVertex","backtrack","numVertices","trackVertices","trackDistances","trackVertex","minIdx","minD","Number","MAX_SAFE_INTEGER","idx","polishVertices","outPoint","first","last","vFirst","vLast","nextCorner","addRectEndpoints","cleanVertices","pt","cleanerVertices","enforceRectLimits","enforcePolarLimits","addPolarEndpoints","gcode","throttledReportTiming","throttle","trailing","transformShapes","app","x_scale","y_scale","thetaRho","getVerticesStats","numPoints","floor","getTrackVertices","currentTransform","PreviewWindow","canvas","ReactDOM","findDOMNode","context","getContext","bigBox","document","getElementById","throttledResize","resize","addEventListener","setTimeout","visible","paint","clearRect","machine_x","machine_y","use_rect","scale_x","scale_y","min_scale","mmToPixelsScale","in_mm","mmToPixels","moveTo","lineTo","arc","fillStyle","strokeStyle","fill","begin_fraction","end_fraction","begin_vertex","round","end_vertex","save","beginPath","lineWidth","moveTo_mm","lineTo_mm","stroke","drawing_vertices","slice_vertices","showTrack","startColor","Color","colorStep","strokeColor","lighten","hex","dot_mm","sliderEndPoint","restore","getComputedStyle","getPropertyValue","onResize","visibilityClass","gCodeSlice","filename","pre","post","show","setGCodeFilename","setGCodePre","setGCodePost","setGCodeShow","toggleGCodeReverse","getComments","download","text","createElement","blob","Blob","navigator","msSaveOrOpenBlob","URL","createObjectURL","createEvent","initEvent","dispatchEvent","click","revokeObjectURL","command","toFixed","thetarho","GCodeGenerator","fileType","savedCode","content","join","gaRecord","close","subsampledVertices","delta","deltaSegment","trVertices","previousTheta","previousRawTheta","rawTheta","atan2","deltaTheta","open","Modal","onHide","closeButton","Title","Group","controlId","setFilename","setPre","setPost","toggleReverse","generateGCode","generateThetaRho","MachinePreview","verticesStats","onSlider","store","configureStore","reducer","combineReducers","appReducer","shapesReducer","transformsReducer","fileReducer","gcodeReducer","machineReducer","storedShape","App","render"],"mappings":"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AAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,IAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,IAAQ,CAAC,KAAM,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,M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,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC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C,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAChtC,EAAM,CAAE,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OACh4B,EAAM,CAAE,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OAChhC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC90B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,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AO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OAC3gC,KAAO,CAAE,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjrC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC9iC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,C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AO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAC10B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACz1C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAA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,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OACt8C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OACllC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,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MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAChuB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAC91C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OAC79B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OAC94B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OAC9yB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAM,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC7kC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,EAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OAC9e,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,IAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OAC9gC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OAC7wB,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAChY,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,M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","file":"static/js/main.8df1cb6b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a6ab37e6.svg\";","import ReactGA from 'react-ga'\n\nReactGA.initialize('UA-126702426-1', {\n  debug: false // Set to true to see debug info in the console\n})\nReactGA.pageview(window.location.pathname + window.location.search)\n","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './Header.scss'\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <img src={logo} className=\"app-logo mr-2\" alt=\"logo\" />\n          <h1 className=\"d-inline m-0\">sandify</h1>\n          <p className=\"ml-4 d-none d-lg-block\">create patterns for robots that draw in sand with ball bearings</p>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default Header\n","import { createSlice } from '@reduxjs/toolkit'\nimport ReactGA from 'react-ga'\n\nconst shapesSlice = createSlice({\n  name: 'shape',\n  initialState: {\n    currentId: null,\n    byId: {},\n    allIds: []\n  },\n  reducers: {\n    addShape(state, action) {\n      let shape = { ...action.payload }\n      state.byId[shape.id] = shape\n      state.allIds.push(shape.id)\n    },\n    setCurrentShape(state, action) {\n      state.currentId = action.payload\n      ReactGA.event({\n        category: 'Shapes',\n        action: 'setCurrentShape: ' + action.payload,\n      })\n      localStorage.setItem('currentShape', state.currentId)\n    },\n    updateShape(state, action) {\n      const shape = action.payload\n      state.byId[shape.id] = {...state.byId[shape.id], ...shape}\n    }\n  }\n})\n\nexport const {\n  addShape,\n  setCurrentShape,\n  updateShape\n} = shapesSlice.actions\n\nexport default shapesSlice.reducer\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Form,\n  Row\n} from 'react-bootstrap'\n\nclass InputOption extends Component {\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n    const optionType = option.type || 'number'\n    const minimum = parseFloat(option.min)\n    const maximum = parseFloat(option.max)\n\n    return (\n      <Row className=\"align-items-center pb-1\">\n        <Col sm={5}>\n        <Form.Label htmlFor=\"options-step\">\n          {option.title}\n        </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Form.Control\n            id=\"options-step\"\n            as={optionType===\"textarea\" ? \"textarea\" : \"input\"}\n            type={optionType}\n            step={option.step ? option.step : 1}\n            min={!isNaN(minimum) ? minimum : ''}\n            max={!isNaN(maximum) ? maximum : ''}\n            value={model[this.props.optionKey]}\n            onChange={(event) => {\n              let attrs = {}\n              let value = event.target.value\n\n              if (optionType === 'number') value = value === '' ? '' : parseFloat(value)\n              attrs[this.props.optionKey] = value\n              this.props.onChange(attrs)\n            }} />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default InputOption\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Form,\n  Row\n} from 'react-bootstrap'\nimport Select from 'react-select'\n\nclass DropdownOption extends Component {\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n    const currentChoice = model[this.props.optionKey]\n\n    return (\n      <Row className=\"align-items-center pb-2\" key={this.props.index}>\n        <Col sm={5}>\n          <Form.Label htmlFor=\"options-dropdown\">\n            {option.title}\n          </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Select\n            value={{value: currentChoice, label: currentChoice}}\n            onChange={(choice) => {\n              const value = choice.value\n              let attrs = {}\n              attrs[this.props.optionKey] = value\n              this.props.onChange(attrs)\n            }}\n            options={option.choices.map((choice) => {\n              return { value: choice, label: choice}\n            })}\n            />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default DropdownOption\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Row,\n  Form,\n} from 'react-bootstrap'\nimport Switch from 'react-switch'\n\nclass CheckboxOption extends Component {\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n\n    return (\n      <Row className=\"align-items-center pb-2\">\n        <Col sm={5}>\n        <Form.Label htmlFor=\"options-step\">\n          {option.title}\n        </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Switch\n            checked={model[this.props.optionKey]}\n            onChange={(checked) => {\n              let attrs = {}\n              attrs[this.props.optionKey] = checked\n              this.props.onChange(attrs)\n            }} />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default CheckboxOption\n","const transformOptions = {\n  offsetX: {\n    title: 'X offset',\n  },\n  offsetY: {\n    title: 'Y offset',\n  },\n  numLoops: {\n    title: 'Number of loops',\n    min: 1\n  },\n  transformMethod: {\n    title: 'Transform after each',\n    type: 'dropdown',\n    choices: ['smear', 'intact'],\n  },\n  growValue: {\n    title: 'Scale step (+/-)',\n  },\n  spinValue: {\n    title: 'Spin step (+/-)',\n    step: 0.1\n  },\n  spinSwitchbacks: {\n    title: 'Switchbacks',\n  },\n  trackValue: {\n    title: 'Track size',\n  },\n  trackNumLoops: {\n    title: 'Number of loops at each track position',\n    min: 1\n  },\n  trackLength: {\n    title: 'Track length',\n    step: 0.05\n  },\n  trackGrow: {\n    title: 'Scale step (+/-)',\n  },\n}\n\nexport default class Transform {\n  getInitialState() {\n    return {\n      offsetX: 0.0,\n      offsetY: 0.0,\n      numLoops: 10,\n      transformMethod: 'smear',\n      repeatEnabled: true,\n      growEnabled: true,\n      growValue: 100,\n      spinEnabled: false,\n      spinValue: 2,\n      spinSwitchbacks: 0,\n      trackEnabled: false,\n      trackGrowEnabled: false,\n      trackValue: 10,\n      trackLength: 0.2,\n      trackNumLoops: 1,\n      trackGrow: 50.0\n    }\n  }\n\n  getOptions() {\n    return transformOptions\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport Transform from '../../shapes/Transform'\n\nconst transformsSlice = createSlice({\n  name: 'transforms',\n  initialState: {\n    byId: {},\n    allIds: []\n  },\n  reducers: {\n    addTransform(state, action) {\n      const transform = action.payload\n      const meta = new Transform()\n      state.byId[transform.id] = {...meta.getInitialState(), ...transform}\n      state.allIds.push(transform.id)\n    },\n    updateTransform(state, action) {\n      const transform = action.payload\n      state.byId[transform.id] = {...state.byId[transform.id], ...transform}\n    },\n    toggleRepeat(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].repeatEnabled = !state.byId[transform.id].repeatEnabled\n    },\n    toggleGrow(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].growEnabled = !state.byId[transform.id].growEnabled\n    },\n    toggleSpin(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].spinEnabled = !state.byId[transform.id].spinEnabled\n    },\n    toggleTrack(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].trackEnabled = !state.byId[transform.id].trackEnabled\n    },\n    toggleTrackGrow(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].trackGrowEnabled = !state.byId[transform.id].trackGrowEnabled\n    },\n  }\n})\n\nexport const {\n  addTransform,\n  updateTransform,\n  toggleRepeat,\n  toggleSpin,\n  toggleGrow,\n  toggleTrack,\n  toggleTrackGrow,\n} = transformsSlice.actions\n\nexport default transformsSlice.reducer\n","// A simple struct that we can use everywhere we need vertices. I don't see a\n// problem letting this bloat a little.\nexport const Vertex = (x, y, speed=0) => {\n  return {\n    x: x,\n    y: y,\n    f: speed\n  }\n}\n\n// convert degrees to radians\nexport const degToRad = (deg) => {\n  return deg / 180.0 * Math.PI\n}\n\n// convert radians to degrees\nexport const radToDeg = (rad) => {\n  return rad * 180.0 / Math.PI\n}\n\nexport const distance = (v1, v2) => {\n  return Math.sqrt(Math.pow(v1.x - v2.x, 2.0) + Math.pow(v1.y - v2.y, 2.0))\n}\n","export const shapeOptions = {\n  startingSize: {\n    title: 'Starting size',\n    min: 1\n  }\n}\n\nexport default class Shape {\n  constructor(name) {\n    this.name = name\n  }\n\n  getInitialState() {\n    return {\n      repeatEnabled: true,\n      canTransform: true,\n      selectGroup: \"Shapes\",\n      startingSize: 10\n    }\n  }\n\n  getOptions() {\n    return shapeOptions\n  }\n\n  getVertices() {\n    return []\n  }\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    polygonSides: {\n      title: 'Number of sides',\n      min: 3\n    }\n  }\n}\n\nexport default class Polygon extends Shape {\n  constructor() {\n    super('Polygon')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'polygon',\n        polygonSides: 4\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<=state.shape.polygonSides; i++) {\n      let angle = Math.PI * 2.0 / state.shape.polygonSides * (0.5 + i)\n      points.push(Vertex(Math.cos(angle), Math.sin(angle)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    circleLobes: {\n      title: 'Number of lobes',\n      min: 1\n    }\n  }\n}\n\nexport default class Circle extends Shape {\n  constructor() {\n    super('Circle')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'circle',\n        circleLobes: 1\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<=128; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      points.push(Vertex(Math.cos(angle), Math.sin(state.shape.circleLobes * angle)/state.shape.circleLobes))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    points: {\n      title: 'Number of points',\n      min: 2\n    },\n    starRatio: {\n      title: 'Size of points',\n      step: 0.05,\n      min: 0.05\n    },\n  }\n}\n\nexport default class Star extends Shape {\n  constructor() {\n    super('Star')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'star',\n        points: 5,\n        starRatio: 0.5\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<=state.shape.points * 2; i++) {\n      let angle = Math.PI * 2.0 / (2.0 * state.shape.points) * i\n      let star_scale = 1.0\n      if (i % 2 === 0) {\n        star_scale *= state.shape.starRatio\n      }\n      points.push(Vertex(star_scale * Math.cos(angle), star_scale * Math.sin(angle)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape from './Shape'\n\nexport default class Heart extends Shape {\n  constructor() {\n    super('Heart')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'heart',\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<128; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      let scale = 0.9\n      // heart equation from: http://mathworld.wolfram.com/HeartCurve.html\n      points.push(Vertex(scale * 1.0 * Math.pow(Math.sin(angle), 3),\n                         scale * (13.0/16.0 * Math.cos(angle) +\n                                    -5.0/16.0 * Math.cos(2.0 * angle) +\n                                    -2.0/16.0 * Math.cos(3.0 * angle) +\n                                    -1.0/16.0 * Math.cos(4.0 * angle))))\n    }\n    return points\n  }\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    reuleauxSides: {\n      title: 'Number of sides',\n      step: 1,\n      min: 2\n    },\n  }\n}\n\nexport default class Reuleaux extends Shape {\n  constructor() {\n    super('Reuleaux')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'reuleaux',\n        reuleauxSides: 3\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    // Construct an equalateral triangle\n    let corners = []\n    // Initial location at PI/2\n    let angle = Math.PI/2.0\n    // How much of the circle in one side?\n    let coverageAngle = Math.PI/state.shape.reuleauxSides\n    let halfCoverageAngle = 0.5 * coverageAngle\n    for (let c=0; c<state.shape.reuleauxSides; c++) {\n      let startAngle = angle + Math.PI - halfCoverageAngle\n      corners.push( [Vertex(Math.cos(angle), Math.sin(angle)), startAngle] )\n      angle += 2.0 * Math.PI / state.shape.reuleauxSides\n    }\n    let length = 0.5 / Math.cos(Math.PI/2.0/state.shape.reuleauxSides)\n    const scale = 1.7\n    for (let corn=0; corn < corners.length; corn++) {\n      for (let i=0; i<128; i++) {\n        let angle = coverageAngle  * (i / 128.0) + corners[corn][1]\n        points.push(Vertex(scale * (length * corners[corn][0].x + Math.cos(angle)),\n                           scale * (length * corners[corn][0].y + Math.sin(angle))))\n      }\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    epicycloidA: {\n      title: \"Large circle radius\",\n      step: 0.1,\n    },\n    epicycloidB: {\n      title: \"Small circle radius\",\n      step: 0.1,\n    },\n  }\n}\n\nexport default class Epicycloid extends Shape {\n  constructor() {\n    super('Clover')\n    this.link = 'http://mathworld.wolfram.com/Epicycloid.html'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'epicycloid',\n        epicycloidA: 1.0,\n        epicycloidB: .25\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = parseFloat(state.shape.epicycloidA)\n    let b = parseFloat(state.shape.epicycloidB)\n\n    for (let i=0; i<128; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      let scale = 0.65\n      points.push(Vertex(scale * (a + b) * Math.cos(angle) - scale * b * Math.cos(((a + b) / b) * angle),\n                         scale * (a + b) * Math.sin(angle) - scale * b * Math.sin(((a + b) / b) * angle)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    hypocycloidA: {\n      title: 'Large circle radius',\n      step: 0.1,\n    },\n    hypocycloidB: {\n      title: 'Small circle radius',\n      step: 0.1,\n    },\n  }\n}\n\nexport default class Star extends Shape {\n  constructor() {\n    super('Web')\n    this.link = 'http://mathworld.wolfram.com/Hypocycloid.html'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'hypocycloid',\n        hypocycloidA: 1.5,\n        hypocycloidB: 0.25\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = parseFloat(state.shape.hypocycloidA)\n    let b = parseFloat(state.shape.hypocycloidB)\n\n    for (let i=0; i<128; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      let scale = 0.65\n      points.push(Vertex(scale * (a - b) * Math.cos(angle) + scale * b * Math.cos(((a - b) / b) * angle),\n                         scale * (a - b) * Math.sin(angle) - scale * b * Math.sin(((a - b) / b) * angle)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    roseN: {\n      title: 'Numerator',\n      step: 1,\n      min: 1\n    },\n    roseD: {\n      title: 'Denominator',\n      step: 1,\n      min: 1\n    },\n  }\n}\n\nexport default class Rose extends Shape {\n  constructor() {\n    super('Rose')\n    this.link = 'http://mathworld.wolfram.com/Rose.html'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'rose',\n        roseN: 3,\n        roseD: 2\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = 2\n    let n = parseInt(state.shape.roseN)\n    let d = parseInt(state.shape.roseD)\n    let p = (n * d % 2 === 0) ? 2 : 1\n    let thetaClose = d * p * 32 * n\n    let resolution = 64 * n\n\n    for (let i=0; i<thetaClose+1; i++) {\n      let theta = Math.PI * 2.0 / (resolution) * i\n      let r = 0.5 * a * Math.sin((n / d) * theta)\n      points.push(Vertex(r * Math.cos(theta), r * Math.sin(theta)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export let raysol_cursive = {\n  ' ' : [ [0.000,-0.786], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786],  ],\n  '0' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.549,-0.786], [0.570,-0.779], [0.641,-0.741], [0.729,-0.673], [0.754,-0.642], [0.799,-0.548], [0.833,-0.422], [0.833,-0.317], [0.833,-0.211], [0.833,-0.106], [0.833,-0.001], [0.833,0.105], [0.833,0.210], [0.833,0.315], [0.833,0.421], [0.833,0.531], [0.810,0.599], [0.779,0.645], [0.749,0.690], [0.711,0.738], [0.629,0.786], [0.570,0.786], [0.513,0.786], [0.442,0.738], [0.374,0.690], [0.340,0.645], [0.315,0.599], [0.289,0.531], [0.289,0.422], [0.289,0.313], [0.289,0.204], [0.289,0.095], [0.289,-0.014], [0.289,-0.123], [0.289,-0.232], [0.289,-0.341], [0.289,-0.450], [0.315,-0.559], [0.351,-0.655], [0.388,-0.701], [0.449,-0.742], [0.489,-0.762], [0.549,-0.786], [0.655,-0.786], [0.731,-0.786], [0.816,-0.786], [0.901,-0.786], [0.986,-0.786], [1.071,-0.786], [1.156,-0.786],  ],\n  '1' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.629], [0.340,-0.472], [0.340,-0.315], [0.340,-0.157], [0.340,-0.000], [0.340,0.157], [0.340,0.314], [0.340,0.472], [0.340,0.629], [0.340,0.786], [0.340,0.629], [0.340,0.472], [0.340,0.314], [0.340,0.157], [0.340,-0.000], [0.340,-0.157], [0.340,-0.315], [0.340,-0.472], [0.340,-0.629], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786],  ],\n  '2' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.702], [0.442,-0.537], [0.544,-0.330], [0.624,-0.174], [0.660,0.032], [0.687,0.212], [0.698,0.295], [0.708,0.427], [0.714,0.514], [0.708,0.595], [0.690,0.659], [0.677,0.702], [0.663,0.726], [0.629,0.752], [0.587,0.769], [0.544,0.760], [0.493,0.744], [0.442,0.727], [0.374,0.701], [0.306,0.625], [0.247,0.574], [0.306,0.625], [0.374,0.701], [0.442,0.727], [0.493,0.744], [0.544,0.760], [0.587,0.769], [0.629,0.752], [0.663,0.726], [0.677,0.702], [0.690,0.659], [0.708,0.595], [0.714,0.514], [0.708,0.427], [0.698,0.295], [0.687,0.212], [0.660,0.032], [0.624,-0.174], [0.544,-0.330], [0.442,-0.537], [0.340,-0.702], [0.425,-0.701], [0.544,-0.633], [0.612,-0.599], [0.680,-0.574], [0.765,-0.591], [0.850,-0.616], [0.935,-0.667], [1.020,-0.744], [1.105,-0.786],  ],\n  '3' : [ [0.085,-0.786], [0.170,-0.786], [0.272,-0.786], [0.330,-0.786], [0.405,-0.786], [0.442,-0.786], [0.493,-0.772], [0.559,-0.752], [0.612,-0.718], [0.648,-0.683], [0.677,-0.653], [0.707,-0.618], [0.731,-0.548], [0.764,-0.473], [0.782,-0.396], [0.784,-0.312], [0.775,-0.241], [0.765,-0.181], [0.751,-0.123], [0.700,-0.029], [0.620,0.021], [0.544,0.038], [0.425,0.056], [0.557,0.087], [0.586,0.111], [0.640,0.165], [0.697,0.234], [0.734,0.337], [0.749,0.431], [0.741,0.516], [0.726,0.600], [0.712,0.659], [0.672,0.740], [0.641,0.777], [0.586,0.786], [0.537,0.777], [0.485,0.769], [0.412,0.744], [0.331,0.710], [0.412,0.744], [0.485,0.769], [0.537,0.777], [0.586,0.786], [0.641,0.777], [0.672,0.740], [0.712,0.659], [0.726,0.600], [0.741,0.516], [0.749,0.431], [0.734,0.337], [0.697,0.234], [0.640,0.165], [0.586,0.111], [0.557,0.087], [0.484,0.056], [0.544,0.038], [0.620,0.021], [0.700,-0.029], [0.751,-0.123], [0.765,-0.181], [0.775,-0.241], [0.784,-0.312], [0.782,-0.396], [0.764,-0.473], [0.731,-0.548], [0.707,-0.618], [0.677,-0.653], [0.648,-0.683], [0.612,-0.718], [0.559,-0.752], [0.493,-0.772], [0.425,-0.761], [0.357,-0.744], [0.289,-0.718], [0.221,-0.616], [0.289,-0.718], [0.357,-0.744], [0.425,-0.761], [0.493,-0.772], [0.559,-0.752], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  '4' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.765,-0.629], [0.765,-0.472], [0.765,-0.315], [0.765,-0.157], [0.765,-0.000], [0.765,0.157], [0.765,0.314], [0.765,0.472], [0.765,0.629], [0.765,0.786], [0.680,0.655], [0.595,0.524], [0.510,0.393], [0.425,0.262], [0.340,0.131], [0.255,-0.000], [0.356,-0.000], [0.457,-0.000], [0.558,-0.000], [0.659,-0.000], [0.760,-0.000], [0.861,-0.000], [0.962,-0.000], [1.062,-0.000], [1.139,-0.000], [1.062,-0.000], [0.962,-0.000], [0.861,-0.000], [0.760,-0.000], [0.765,-0.157], [0.765,-0.315], [0.765,-0.472], [0.765,-0.629], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786],  ],\n  '5' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.438,-0.786], [0.520,-0.786], [0.607,-0.786], [0.659,-0.783], [0.730,-0.749], [0.796,-0.698], [0.853,-0.612], [0.884,-0.497], [0.892,-0.319], [0.887,-0.167], [0.850,-0.064], [0.795,0.038], [0.744,0.100], [0.680,0.122], [0.608,0.144], [0.540,0.123], [0.441,0.081], [0.378,0.043], [0.302,-0.014], [0.302,0.145], [0.302,0.303], [0.302,0.461], [0.302,0.619], [0.302,0.727], [0.359,0.727], [0.415,0.727], [0.471,0.727], [0.528,0.727], [0.584,0.727], [0.640,0.727], [0.731,0.727], [0.850,0.727], [0.731,0.727], [0.640,0.727], [0.584,0.727], [0.528,0.727], [0.471,0.727], [0.415,0.727], [0.359,0.727], [0.302,0.727], [0.302,0.619], [0.302,0.461], [0.302,0.303], [0.302,0.145], [0.302,-0.014], [0.378,0.043], [0.441,0.081], [0.540,0.123], [0.608,0.144], [0.680,0.122], [0.744,0.100], [0.795,0.038], [0.850,-0.064], [0.887,-0.167], [0.892,-0.319], [0.884,-0.497], [0.853,-0.612], [0.796,-0.698], [0.730,-0.749], [0.659,-0.783], [0.607,-0.786], [0.520,-0.786], [0.425,-0.752], [0.357,-0.701], [0.289,-0.616], [0.238,-0.531], [0.187,-0.489], [0.153,-0.472], [0.187,-0.489], [0.238,-0.531], [0.289,-0.616], [0.357,-0.701], [0.425,-0.752], [0.520,-0.786], [0.607,-0.786], [0.659,-0.786], [0.816,-0.786], [0.901,-0.786], [0.986,-0.786], [1.071,-0.786], [1.156,-0.786], [1.241,-0.786], [1.326,-0.786],  ],\n  '6' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.449,-0.742], [0.489,-0.762], [0.549,-0.786], [0.655,-0.779], [0.726,-0.741], [0.814,-0.673], [0.839,-0.642], [0.866,-0.607], [0.924,-0.422], [0.926,-0.323], [0.911,-0.213], [0.895,-0.168], [0.864,-0.099], [0.834,-0.053], [0.796,-0.005], [0.720,0.034], [0.619,0.042], [0.557,0.034], [0.513,0.025], [0.453,-0.002], [0.332,-0.071], [0.373,0.033], [0.414,0.137], [0.455,0.241], [0.496,0.345], [0.538,0.449], [0.579,0.553], [0.620,0.657], [0.661,0.761], [0.620,0.657], [0.579,0.553], [0.538,0.449], [0.496,0.345], [0.455,0.241], [0.414,0.137], [0.373,0.033], [0.332,-0.071], [0.276,-0.200], [0.263,-0.274], [0.255,-0.347], [0.274,-0.489], [0.306,-0.559], [0.351,-0.655], [0.391,-0.701], [0.489,-0.762], [0.549,-0.786], [0.655,-0.779], [0.731,-0.786], [0.816,-0.786], [0.901,-0.786], [0.986,-0.786], [1.071,-0.786], [1.156,-0.786],  ],\n  '7' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.391,-0.629], [0.442,-0.472], [0.493,-0.315], [0.544,-0.157], [0.595,-0.000], [0.646,0.157], [0.697,0.314], [0.748,0.472], [0.799,0.629], [0.850,0.786], [0.776,0.786], [0.701,0.786], [0.627,0.786], [0.552,0.786], [0.478,0.786], [0.404,0.786], [0.329,0.786], [0.255,0.786], [0.329,0.786], [0.404,0.786], [0.478,0.786], [0.552,0.786], [0.627,0.786], [0.701,0.786], [0.776,0.786], [0.850,0.786], [0.799,0.629], [0.748,0.472], [0.697,0.314], [0.646,0.157], [0.595,-0.000], [0.544,-0.157], [0.493,-0.315], [0.442,-0.472], [0.391,-0.629], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '8' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.556,-0.784], [0.618,-0.786], [0.695,-0.763], [0.756,-0.733], [0.795,-0.664], [0.853,-0.560], [0.878,-0.429], [0.870,-0.334], [0.846,-0.267], [0.797,-0.132], [0.740,-0.033], [0.674,0.065], [0.643,0.098], [0.611,0.132], [0.561,0.166], [0.527,0.200], [0.493,0.247], [0.459,0.293], [0.425,0.361], [0.391,0.446], [0.408,0.545], [0.459,0.644], [0.510,0.701], [0.570,0.734], [0.643,0.760], [0.716,0.734], [0.777,0.701], [0.828,0.644], [0.879,0.545], [0.896,0.446], [0.862,0.361], [0.828,0.293], [0.794,0.247], [0.760,0.200], [0.726,0.166], [0.676,0.132], [0.579,0.098], [0.548,0.065], [0.481,-0.033], [0.425,-0.132], [0.376,-0.267], [0.352,-0.334], [0.344,-0.429], [0.369,-0.560], [0.427,-0.664], [0.466,-0.733], [0.527,-0.763], [0.603,-0.786], [0.666,-0.784], [0.695,-0.763], [0.756,-0.733], [0.795,-0.664], [0.853,-0.560], [0.878,-0.429], [0.870,-0.334], [0.846,-0.267], [0.797,-0.132], [0.740,-0.033], [0.797,-0.132], [0.846,-0.267], [0.870,-0.334], [0.878,-0.429], [0.853,-0.560], [0.795,-0.664], [0.756,-0.733], [0.695,-0.763], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '9' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.714,-0.786], [0.717,-0.612], [0.717,-0.455], [0.717,-0.297], [0.717,-0.139], [0.717,0.019], [0.717,0.177], [0.717,0.335], [0.717,0.493], [0.717,0.650], [0.717,0.786], [0.648,0.786], [0.521,0.786], [0.415,0.744], [0.340,0.659], [0.306,0.523], [0.292,0.364], [0.299,0.230], [0.317,0.147], [0.339,0.086], [0.387,-0.030], [0.442,-0.063], [0.509,-0.055], [0.558,-0.030], [0.618,-0.004], [0.663,0.013], [0.717,0.019], [0.717,-0.139], [0.717,-0.297], [0.717,-0.455], [0.717,-0.612], [0.714,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  'A' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.459,-0.781], [0.534,-0.759], [0.623,-0.711], [0.715,-0.601], [0.793,-0.507], [0.715,-0.601], [0.623,-0.711], [0.534,-0.759], [0.459,-0.781], [0.383,-0.743], [0.308,-0.661], [0.250,-0.586], [0.206,-0.475], [0.173,-0.322], [0.170,-0.191], [0.187,-0.003], [0.227,0.147], [0.284,0.286], [0.339,0.375], [0.435,0.509], [0.521,0.596], [0.637,0.685], [0.790,0.761], [0.865,0.786], [0.863,0.706], [0.861,0.583], [0.859,0.460], [0.857,0.337], [0.855,0.213], [0.853,0.090], [0.851,-0.033], [0.849,-0.156], [0.848,-0.280], [0.846,-0.403], [0.847,-0.466], [0.868,-0.563], [0.954,-0.635], [1.033,-0.701], [1.109,-0.744], [1.213,-0.786],  ],\n  'B' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.255,-0.629], [0.255,-0.471], [0.255,-0.313], [0.255,-0.155], [0.255,0.002], [0.255,0.160], [0.255,0.318], [0.255,0.476], [0.255,0.633], [0.281,0.659], [0.327,0.701], [0.380,0.744], [0.445,0.773], [0.501,0.777], [0.552,0.777], [0.589,0.761], [0.646,0.726], [0.699,0.680], [0.733,0.630], [0.764,0.556], [0.761,0.455], [0.748,0.389], [0.723,0.285], [0.689,0.191], [0.621,0.106], [0.517,0.064], [0.476,0.064], [0.517,0.064], [0.596,0.025], [0.650,-0.037], [0.680,-0.062], [0.748,-0.148], [0.791,-0.248], [0.809,-0.312], [0.814,-0.452], [0.811,-0.490], [0.796,-0.566], [0.780,-0.620], [0.697,-0.718], [0.622,-0.762], [0.572,-0.786], [0.476,-0.786], [0.374,-0.786], [0.255,-0.786], [0.374,-0.786], [0.476,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  'C' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.752], [0.459,-0.693], [0.397,-0.605], [0.357,-0.548], [0.332,-0.452], [0.306,-0.327], [0.298,-0.208], [0.298,-0.106], [0.298,0.016], [0.318,0.183], [0.338,0.310], [0.385,0.442], [0.462,0.585], [0.548,0.675], [0.652,0.746], [0.776,0.786], [0.872,0.767], [0.963,0.643], [1.019,0.491], [1.040,0.351], [1.019,0.491], [0.963,0.643], [0.872,0.767], [0.776,0.786], [0.652,0.746], [0.548,0.675], [0.462,0.585], [0.385,0.442], [0.338,0.310], [0.318,0.183], [0.298,0.016], [0.298,-0.106], [0.298,-0.208], [0.306,-0.327], [0.332,-0.452], [0.397,-0.605], [0.459,-0.693], [0.544,-0.748], [0.682,-0.786], [0.777,-0.786], [0.850,-0.786], [0.884,-0.786], [0.953,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786],  ],\n  'D' : [ [0.123,-0.786], [0.213,-0.786], [0.321,-0.786], [0.401,-0.786], [0.465,-0.786], [0.544,-0.786], [0.639,-0.786], [0.772,-0.764], [0.918,-0.711], [0.955,-0.676], [1.020,-0.592], [1.072,-0.460], [1.090,-0.357], [1.104,-0.199], [1.103,-0.111], [1.082,0.035], [1.062,0.183], [1.037,0.271], [1.009,0.356], [0.982,0.435], [0.899,0.546], [0.816,0.633], [0.748,0.684], [0.646,0.741], [0.566,0.766], [0.496,0.761], [0.425,0.733], [0.425,0.604], [0.425,0.526], [0.425,0.343], [0.425,0.149], [0.425,-0.030], [0.425,-0.156], [0.425,-0.442], [0.425,-0.544], [0.425,-0.701], [0.465,-0.786], [0.544,-0.786], [0.639,-0.786], [0.748,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786],  ],\n  'E' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.701], [0.381,-0.614], [0.317,-0.487], [0.277,-0.361], [0.274,-0.221], [0.309,-0.157], [0.356,-0.115], [0.405,-0.072], [0.493,-0.030], [0.563,0.006], [0.629,0.027], [0.714,0.027], [0.629,0.027], [0.570,0.064], [0.509,0.120], [0.474,0.143], [0.386,0.229], [0.331,0.313], [0.291,0.438], [0.293,0.552], [0.320,0.660], [0.383,0.743], [0.478,0.786], [0.564,0.786], [0.629,0.786], [0.675,0.786], [0.723,0.786], [0.799,0.786], [0.723,0.786], [0.675,0.786], [0.629,0.786], [0.564,0.786], [0.478,0.786], [0.383,0.743], [0.320,0.660], [0.293,0.552], [0.291,0.438], [0.331,0.313], [0.386,0.229], [0.474,0.143], [0.509,0.120], [0.570,0.064], [0.629,0.027], [0.714,0.027], [0.629,0.027], [0.563,0.006], [0.493,-0.030], [0.405,-0.072], [0.356,-0.115], [0.309,-0.157], [0.274,-0.221], [0.277,-0.361], [0.317,-0.487], [0.381,-0.614], [0.443,-0.698], [0.500,-0.735], [0.583,-0.769], [0.695,-0.781], [0.786,-0.780], [0.864,-0.780], [0.935,-0.779],  ],\n  'F' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.578,-0.786], [0.663,-0.786], [0.724,-0.767], [0.792,-0.699], [0.852,-0.558], [0.853,-0.440], [0.854,-0.321], [0.855,-0.203], [0.856,-0.085], [0.857,0.034], [0.858,0.152], [0.859,0.270], [0.860,0.389], [0.861,0.507], [0.863,0.625], [0.969,0.608], [1.076,0.588], [1.173,0.616], [1.282,0.654], [1.394,0.701], [1.282,0.654], [1.173,0.616], [1.076,0.588], [0.969,0.608], [0.863,0.625], [0.763,0.663], [0.633,0.713], [0.466,0.713], [0.317,0.628], [0.247,0.404], [0.317,0.628], [0.466,0.713], [0.633,0.713], [0.763,0.663], [0.863,0.625], [0.861,0.507], [0.860,0.389], [0.859,0.270], [0.858,0.152], [0.857,0.034], [0.742,0.037], [0.631,0.054], [0.442,0.071], [0.631,0.054], [0.742,0.037], [0.857,0.034], [0.960,0.035], [1.075,0.043], [1.224,0.052], [1.075,0.043], [0.960,0.035], [0.857,0.034], [0.856,-0.085], [0.855,-0.203], [0.854,-0.321], [0.854,-0.395], [0.850,-0.506], [0.852,-0.558], [0.833,-0.650], [0.773,-0.713], [0.663,-0.769], [0.591,-0.766], [0.564,-0.774], [0.537,-0.774], [0.501,-0.766], [0.452,-0.701], [0.420,-0.650], [0.413,-0.583], [0.422,-0.519], [0.474,-0.465], [0.511,-0.442], [0.573,-0.438], [0.653,-0.442], [0.740,-0.496], [0.866,-0.616], [0.927,-0.687], [1.035,-0.756], [1.079,-0.803], [1.211,-0.837], [1.310,-0.829], [1.406,-0.820], [1.491,-0.786],  ],\n  'G' : [ [0.085,-0.786], [0.171,-0.761], [0.245,-0.712], [0.316,-0.660], [0.389,-0.609], [0.489,-0.507], [0.573,-0.398], [0.610,-0.341], [0.658,-0.254], [0.708,-0.125], [0.757,0.004], [0.782,0.082], [0.819,0.177], [0.837,0.274], [0.857,0.392], [0.880,0.508], [0.884,0.597], [0.881,0.711], [0.842,0.799], [0.762,0.772], [0.720,0.745], [0.697,0.705], [0.640,0.590], [0.631,0.560], [0.612,0.445], [0.607,0.395], [0.628,0.243], [0.653,0.178], [0.695,0.088], [0.834,-0.031], [0.931,-0.028], [1.047,0.038], [1.117,0.106], [1.179,0.236], [1.262,0.405], [1.246,0.225], [1.209,-0.096], [1.181,-0.235], [1.140,-0.389], [1.103,-0.495], [1.032,-0.625], [0.956,-0.707], [0.865,-0.758], [0.770,-0.787], [0.681,-0.782], [0.598,-0.762], [0.500,-0.710], [0.455,-0.632], [0.427,-0.556], [0.380,-0.481], [0.324,-0.330], [0.465,-0.389], [0.637,-0.468], [0.784,-0.548], [0.909,-0.586], [1.032,-0.625], [1.141,-0.663], [1.245,-0.677], [1.351,-0.699], [1.489,-0.744], [1.611,-0.786],  ],\n  'H' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.496,-0.786], [0.496,-0.609], [0.496,-0.479], [0.496,-0.348], [0.496,-0.217], [0.496,-0.086], [0.496,0.044], [0.496,0.175], [0.496,0.306], [0.496,0.404], [0.496,0.508], [0.476,0.604], [0.453,0.687], [0.391,0.744], [0.272,0.786], [0.391,0.744], [0.453,0.687], [0.476,0.604], [0.496,0.508], [0.496,0.404], [0.496,0.306], [0.496,0.175], [0.496,0.044], [0.635,0.071], [0.774,0.097], [0.913,0.123], [1.051,0.149], [1.105,0.175], [1.105,0.306], [1.105,0.404], [1.105,0.508], [1.105,0.616], [1.122,0.701], [1.165,0.760], [1.275,0.786], [1.165,0.760], [1.122,0.701], [1.105,0.616], [1.105,0.508], [1.105,0.404], [1.105,0.306], [1.105,0.175], [1.105,0.044], [1.105,-0.086], [1.105,-0.217], [1.105,-0.348], [1.105,-0.479], [1.105,-0.609], [1.139,-0.701], [1.190,-0.761], [1.275,-0.778], [1.360,-0.786], [1.445,-0.786], [1.530,-0.786],  ],\n  'I' : [ [0.085,-0.786], [0.170,-0.786], [0.289,-0.786], [0.425,-0.786], [0.515,-0.773], [0.596,-0.794], [0.685,-0.801], [0.782,-0.773], [0.838,-0.602], [0.914,-0.473], [0.876,-0.349], [0.832,-0.152], [0.789,0.006], [0.773,0.196], [0.765,0.298], [0.773,0.517], [0.799,0.650], [0.833,0.740], [0.884,0.802], [1.020,0.804], [1.071,0.800], [1.120,0.702], [1.151,0.628], [1.189,0.387], [1.198,0.208], [1.180,-0.065], [1.165,-0.166], [1.100,-0.403], [1.046,-0.509], [1.007,-0.577], [0.899,-0.681], [0.782,-0.773], [0.685,-0.801], [0.596,-0.794], [0.515,-0.773], [0.420,-0.719], [0.381,-0.640], [0.357,-0.564], [0.317,-0.488], [0.271,-0.336], [0.408,-0.397], [0.574,-0.479], [0.716,-0.562], [0.838,-0.602], [0.958,-0.643], [1.064,-0.683], [1.168,-0.699], [1.271,-0.722], [1.408,-0.761], [1.529,-0.786],  ],\n  'J' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.457,-0.733], [0.593,-0.715], [0.428,-0.508], [0.343,-0.336], [0.301,-0.096], [0.292,0.057], [0.286,0.286], [0.316,0.532], [0.382,0.703], [0.439,0.754], [0.506,0.780], [0.591,0.790], [0.690,0.782], [0.734,0.739], [0.789,0.616], [0.802,0.553], [0.814,0.386], [0.818,0.209], [0.808,-0.059], [0.799,-0.253], [0.787,-0.441], [0.780,-0.614], [0.767,-0.807], [0.752,-0.952], [0.760,-1.127], [0.737,-1.292], [0.712,-1.438], [0.661,-1.505], [0.604,-1.531], [0.426,-1.533], [0.365,-1.508], [0.310,-1.439], [0.298,-1.296], [0.310,-1.143], [0.346,-0.955], [0.397,-0.844], [0.457,-0.733], [0.588,-0.715], [0.675,-0.731], [0.762,-0.748], [0.849,-0.764], [0.935,-0.780], [1.021,-0.779], [1.106,-0.779], [1.188,-0.786],  ],\n  'K' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.540,-0.627], [0.551,-0.494], [0.562,-0.360], [0.574,-0.227], [0.585,-0.094], [0.596,0.040], [0.580,0.158], [0.563,0.276], [0.547,0.393], [0.530,0.511], [0.514,0.629], [0.497,0.747], [0.442,0.744], [0.382,0.736], [0.317,0.679], [0.268,0.607], [0.223,0.532], [0.268,0.607], [0.317,0.679], [0.382,0.736], [0.442,0.744], [0.497,0.747], [0.514,0.629], [0.530,0.511], [0.547,0.393], [0.563,0.276], [0.580,0.158], [0.596,0.040], [0.689,0.087], [0.752,0.165], [0.815,0.242], [0.878,0.320], [0.941,0.397], [1.004,0.475], [1.067,0.553], [1.130,0.630], [1.149,0.740], [1.130,0.630], [1.067,0.553], [1.004,0.475], [0.941,0.397], [0.878,0.320], [0.815,0.242], [0.752,0.165], [0.689,0.087], [0.626,0.010], [0.675,-0.067], [0.725,-0.143], [0.775,-0.219], [0.825,-0.295], [0.875,-0.371], [0.925,-0.448], [0.974,-0.524], [1.024,-0.600], [1.074,-0.676], [1.124,-0.761], [1.220,-0.786], [1.299,-0.786], [1.363,-0.786], [1.442,-0.786], [1.526,-0.786],  ],\n  'L' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.323,-0.778], [0.370,-0.766], [0.406,-0.774], [0.433,-0.774], [0.460,-0.766], [0.520,-0.743], [0.558,-0.713], [0.629,-0.650], [0.681,-0.570], [0.717,-0.506], [0.723,-0.395], [0.739,-0.305], [0.748,-0.179], [0.751,-0.045], [0.743,0.148], [0.741,0.224], [0.757,0.263], [0.749,0.353], [0.776,0.537], [0.788,0.600], [0.824,0.711], [0.872,0.783], [0.894,0.827], [0.968,0.850], [1.027,0.795], [1.061,0.723], [1.082,0.596], [1.071,0.517], [1.050,0.464], [0.971,0.366], [0.940,0.343], [0.848,0.288], [0.808,0.275], [0.660,0.257], [0.624,0.259], [0.500,0.288], [0.386,0.343], [0.285,0.410], [0.386,0.343], [0.500,0.288], [0.624,0.259], [0.660,0.257], [0.808,0.275], [0.848,0.288], [0.940,0.343], [0.971,0.366], [1.050,0.464], [1.071,0.517], [1.082,0.596], [1.061,0.723], [1.027,0.795], [0.968,0.850], [0.894,0.827], [0.872,0.783], [0.824,0.711], [0.788,0.600], [0.776,0.537], [0.749,0.353], [0.757,0.263], [0.741,0.224], [0.743,0.148], [0.751,-0.045], [0.748,-0.179], [0.739,-0.305], [0.723,-0.395], [0.717,-0.506], [0.681,-0.570], [0.629,-0.650], [0.558,-0.713], [0.520,-0.743], [0.460,-0.766], [0.433,-0.774], [0.406,-0.774], [0.370,-0.766], [0.320,-0.701], [0.289,-0.650], [0.282,-0.583], [0.291,-0.519], [0.343,-0.465], [0.379,-0.442], [0.442,-0.438], [0.521,-0.442], [0.609,-0.496], [0.734,-0.616], [0.796,-0.687], [0.904,-0.756], [0.948,-0.786], [1.080,-0.786], [1.179,-0.786], [1.275,-0.786], [1.360,-0.786],  ],\n  'M' : [ [0.085,-0.786], [0.213,-0.786], [0.340,-0.786], [0.468,-0.786], [0.583,-0.736], [0.593,-0.622], [0.603,-0.507], [0.613,-0.393], [0.623,-0.278], [0.633,-0.164], [0.643,-0.049], [0.653,0.065], [0.663,0.180], [0.673,0.294], [0.683,0.409], [0.655,0.534], [0.628,0.634], [0.592,0.749], [0.500,0.795], [0.412,0.754], [0.321,0.685], [0.238,0.576], [0.321,0.685], [0.412,0.754], [0.500,0.795], [0.592,0.749], [0.628,0.634], [0.655,0.534], [0.683,0.409], [0.673,0.294], [0.663,0.180], [0.653,0.065], [0.643,-0.049], [0.633,-0.164], [0.623,-0.278], [0.613,-0.393], [0.603,-0.507], [0.593,-0.622], [0.583,-0.736], [0.593,-0.622], [0.603,-0.507], [0.613,-0.393], [0.623,-0.278], [0.633,-0.164], [0.643,-0.049], [0.653,0.065], [0.663,0.180], [0.673,0.294], [0.683,0.409], [0.727,0.575], [0.800,0.719], [0.921,0.793], [1.057,0.807], [1.122,0.730], [1.162,0.644], [1.188,0.569], [1.233,0.406], [1.223,0.292], [1.214,0.178], [1.205,0.063], [1.196,-0.051], [1.187,-0.166], [1.177,-0.280], [1.168,-0.394], [1.159,-0.509], [1.150,-0.623], [1.140,-0.737], [1.150,-0.623], [1.159,-0.509], [1.168,-0.394], [1.177,-0.280], [1.187,-0.166], [1.196,-0.051], [1.205,0.063], [1.214,0.178], [1.223,0.292], [1.233,0.406], [1.281,0.599], [1.354,0.743], [1.398,0.797], [1.480,0.835], [1.620,0.831], [1.673,0.767], [1.711,0.694], [1.737,0.619], [1.750,0.543], [1.747,0.420], [1.743,0.297], [1.740,0.174], [1.737,0.051], [1.733,-0.072], [1.730,-0.195], [1.726,-0.318], [1.723,-0.441], [1.719,-0.564], [1.716,-0.687], [1.815,-0.746], [1.921,-0.786], [2.001,-0.786], [2.085,-0.786], [2.186,-0.786],  ],\n  'N' : [ [0.128,-0.786], [0.255,-0.786], [0.425,-0.786], [0.568,-0.765], [0.577,-0.710], [0.580,-0.603], [0.584,-0.497], [0.587,-0.390], [0.590,-0.283], [0.593,-0.177], [0.597,-0.070], [0.600,0.037], [0.603,0.143], [0.607,0.250], [0.610,0.357], [0.582,0.537], [0.557,0.637], [0.528,0.747], [0.471,0.804], [0.406,0.800], [0.333,0.745], [0.282,0.665], [0.234,0.577], [0.282,0.665], [0.333,0.745], [0.406,0.800], [0.471,0.804], [0.528,0.747], [0.557,0.637], [0.582,0.537], [0.610,0.357], [0.607,0.250], [0.603,0.143], [0.600,0.037], [0.597,-0.070], [0.593,-0.177], [0.590,-0.283], [0.587,-0.390], [0.584,-0.497], [0.580,-0.603], [0.577,-0.710], [0.568,-0.765], [0.577,-0.710], [0.580,-0.603], [0.584,-0.497], [0.587,-0.390], [0.590,-0.283], [0.593,-0.177], [0.597,-0.070], [0.600,0.037], [0.603,0.143], [0.607,0.250], [0.610,0.357], [0.635,0.471], [0.659,0.604], [0.712,0.723], [0.759,0.795], [0.841,0.825], [0.947,0.826], [1.010,0.775], [1.078,0.692], [1.108,0.617], [1.130,0.465], [1.141,0.300], [1.141,0.199], [1.140,0.099], [1.139,-0.001], [1.138,-0.101], [1.137,-0.201], [1.136,-0.302], [1.136,-0.402], [1.135,-0.502], [1.134,-0.602], [1.133,-0.703], [1.197,-0.754], [1.234,-0.786], [1.306,-0.786], [1.355,-0.786], [1.420,-0.786], [1.505,-0.786],  ],\n  'O' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.565,-0.770], [0.621,-0.775], [0.714,-0.769], [0.806,-0.733], [0.867,-0.701], [0.912,-0.644], [0.959,-0.587], [1.028,-0.429], [1.061,-0.246], [1.067,-0.145], [1.065,0.024], [1.046,0.265], [1.037,0.379], [0.986,0.518], [0.918,0.668], [0.782,0.786], [0.714,0.786], [0.649,0.760], [0.572,0.699], [0.502,0.656], [0.435,0.572], [0.380,0.494], [0.332,0.378], [0.295,0.296], [0.271,0.169], [0.255,0.064], [0.255,-0.026], [0.255,-0.106], [0.266,-0.206], [0.307,-0.371], [0.340,-0.446], [0.373,-0.519], [0.417,-0.592], [0.451,-0.668], [0.509,-0.727], [0.565,-0.770], [0.621,-0.775], [0.714,-0.769], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786],  ],\n  'P' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.786], [0.289,-0.786], [0.289,-0.641], [0.289,-0.495], [0.289,-0.349], [0.289,-0.204], [0.289,-0.058], [0.314,-0.055], [0.410,-0.085], [0.476,-0.099], [0.603,-0.071], [0.676,-0.039], [0.777,0.051], [0.800,0.075], [0.856,0.217], [0.862,0.248], [0.866,0.337], [0.862,0.388], [0.856,0.463], [0.829,0.525], [0.776,0.636], [0.749,0.673], [0.688,0.748], [0.655,0.772], [0.603,0.786], [0.561,0.786], [0.493,0.769], [0.439,0.737], [0.400,0.701], [0.354,0.651], [0.323,0.599], [0.289,0.525], [0.289,0.379], [0.289,0.234], [0.289,0.088], [0.289,-0.058], [0.289,-0.204], [0.289,-0.349], [0.289,-0.495], [0.289,-0.641], [0.289,-0.786], [0.374,-0.786], [0.459,-0.786], [0.544,-0.786], [0.629,-0.786], [0.714,-0.786], [0.799,-0.786], [0.884,-0.786], [0.969,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  'Q' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.621,-0.786], [0.565,-0.770], [0.509,-0.727], [0.451,-0.668], [0.417,-0.592], [0.373,-0.519], [0.340,-0.446], [0.307,-0.371], [0.266,-0.206], [0.255,-0.106], [0.255,-0.026], [0.255,0.064], [0.271,0.169], [0.295,0.296], [0.332,0.378], [0.380,0.494], [0.435,0.572], [0.502,0.656], [0.572,0.710], [0.649,0.760], [0.714,0.786], [0.816,0.777], [0.918,0.668], [0.986,0.518], [1.037,0.379], [1.062,0.191], [1.065,0.024], [1.067,-0.145], [1.061,-0.246], [1.028,-0.429], [0.959,-0.587], [0.912,-0.644], [0.867,-0.701], [0.806,-0.733], [0.714,-0.769], [0.621,-0.786], [0.565,-0.770], [0.509,-0.727], [0.451,-0.668], [0.417,-0.592], [0.443,-0.531], [0.479,-0.481], [0.550,-0.430], [0.674,-0.430], [0.773,-0.472], [0.860,-0.532], [0.914,-0.595], [1.011,-0.667], [1.092,-0.732], [1.182,-0.786], [1.260,-0.786], [1.351,-0.786],  ],\n  'R' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.323,-0.786], [0.408,-0.786], [0.408,-0.640], [0.408,-0.494], [0.408,-0.348], [0.408,-0.201], [0.408,-0.055], [0.408,0.091], [0.408,0.237], [0.408,0.384], [0.408,0.530], [0.408,0.727], [0.480,0.744], [0.552,0.744], [0.648,0.744], [0.731,0.744], [0.816,0.744], [0.895,0.703], [0.966,0.616], [1.005,0.544], [1.026,0.494], [1.054,0.378], [1.051,0.276], [1.036,0.191], [0.998,0.132], [0.940,0.069], [0.850,0.004], [0.738,-0.016], [0.629,-0.030], [0.561,-0.034], [0.509,-0.037], [0.433,-0.032], [0.450,-0.091], [0.527,-0.191], [0.595,-0.319], [0.655,-0.400], [0.681,-0.437], [0.719,-0.487], [0.757,-0.536], [0.795,-0.585], [0.850,-0.650], [0.892,-0.710], [0.932,-0.769], [0.969,-0.803], [1.008,-0.820], [1.082,-0.829], [1.131,-0.820], [1.190,-0.786], [1.275,-0.786],  ],\n  'S' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.761], [0.306,-0.718], [0.357,-0.676], [0.391,-0.599], [0.433,-0.497], [0.493,-0.327], [0.544,-0.191], [0.620,-0.064], [0.689,0.064], [0.790,0.154], [0.833,0.234], [0.876,0.335], [0.909,0.429], [0.919,0.520], [0.922,0.614], [0.905,0.690], [0.871,0.749], [0.825,0.777], [0.739,0.786], [0.654,0.777], [0.584,0.760], [0.549,0.734], [0.525,0.681], [0.514,0.605], [0.507,0.548], [0.509,0.463], [0.517,0.404], [0.544,0.306], [0.587,0.174], [0.689,0.064], [0.790,-0.021], [0.872,-0.190], [0.944,-0.302], [0.918,-0.440], [0.884,-0.506], [0.850,-0.574], [0.765,-0.684], [0.680,-0.748], [0.579,-0.761], [0.519,-0.766], [0.476,-0.774], [0.425,-0.774], [0.344,-0.766], [0.298,-0.718], [0.264,-0.650], [0.256,-0.583], [0.265,-0.519], [0.313,-0.465], [0.354,-0.442], [0.423,-0.429], [0.501,-0.429], [0.581,-0.442], [0.669,-0.496], [0.794,-0.616], [0.855,-0.687], [0.963,-0.756], [1.046,-0.803], [1.140,-0.837], [1.239,-0.829], [1.335,-0.786],  ],\n  'T' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.440,-0.786], [0.514,-0.786], [0.578,-0.769], [0.621,-0.750], [0.683,-0.702], [0.717,-0.659], [0.759,-0.567], [0.790,-0.489], [0.809,-0.361], [0.820,-0.229], [0.830,-0.097], [0.840,0.035], [0.851,0.168], [0.861,0.300], [0.871,0.432], [0.882,0.564], [0.882,0.697], [0.920,0.681], [0.986,0.659], [1.052,0.655], [1.123,0.659], [1.188,0.681], [1.275,0.718], [1.394,0.759], [1.275,0.718], [1.188,0.681], [1.123,0.659], [1.052,0.655], [0.986,0.659], [0.920,0.681], [0.882,0.697], [0.785,0.730], [0.731,0.747], [0.679,0.762], [0.595,0.769], [0.471,0.728], [0.340,0.652], [0.471,0.728], [0.595,0.769], [0.679,0.762], [0.731,0.747], [0.785,0.730], [0.882,0.697], [0.882,0.564], [0.871,0.432], [0.861,0.300], [0.851,0.168], [0.840,0.035], [0.830,-0.097], [0.820,-0.229], [0.809,-0.361], [0.790,-0.489], [0.579,-0.761], [0.519,-0.766], [0.476,-0.774], [0.425,-0.774], [0.344,-0.766], [0.298,-0.718], [0.264,-0.650], [0.256,-0.583], [0.265,-0.519], [0.313,-0.465], [0.354,-0.442], [0.423,-0.429], [0.501,-0.429], [0.581,-0.442], [0.669,-0.496], [0.794,-0.616], [0.855,-0.687], [0.963,-0.756], [1.046,-0.803], [1.140,-0.837], [1.239,-0.829], [1.335,-0.820], [1.419,-0.803], [1.504,-0.786], [1.589,-0.786],  ],\n  'U' : [ [0.085,-0.786], [0.170,-0.785], [0.255,-0.783], [0.340,-0.781], [0.421,-0.745], [0.502,-0.709], [0.549,-0.661], [0.521,-0.621], [0.492,-0.535], [0.487,-0.355], [0.503,-0.237], [0.518,-0.119], [0.534,-0.001], [0.549,0.117], [0.565,0.234], [0.581,0.352], [0.596,0.470], [0.612,0.588], [0.594,0.643], [0.539,0.730], [0.499,0.755], [0.403,0.729], [0.349,0.658], [0.289,0.554], [0.252,0.493], [0.195,0.440], [0.252,0.493], [0.289,0.554], [0.349,0.658], [0.403,0.729], [0.499,0.755], [0.539,0.730], [0.594,0.643], [0.612,0.588], [0.596,0.470], [0.581,0.352], [0.565,0.234], [0.549,0.117], [0.534,-0.001], [0.518,-0.119], [0.503,-0.237], [0.487,-0.355], [0.492,-0.535], [0.521,-0.621], [0.549,-0.661], [0.591,-0.715], [0.678,-0.759], [0.764,-0.770], [0.837,-0.738], [0.902,-0.687], [0.936,-0.651], [0.967,-0.594], [1.005,-0.551], [1.061,-0.494], [1.073,-0.316], [1.088,-0.195], [1.103,-0.073], [1.117,0.049], [1.132,0.170], [1.147,0.292], [1.162,0.413], [1.177,0.535], [1.192,0.657], [1.217,0.817], [1.192,0.657], [1.177,0.535], [1.162,0.413], [1.147,0.292], [1.132,0.170], [1.117,0.049], [1.103,-0.073], [1.088,-0.195], [1.073,-0.316], [1.066,-0.418], [1.061,-0.494], [1.073,-0.609], [1.096,-0.659], [1.126,-0.710], [1.202,-0.752], [1.275,-0.761], [1.357,-0.786], [1.442,-0.786], [1.530,-0.786],  ],\n  'V' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.778], [0.425,-0.769], [0.510,-0.744], [0.595,-0.718], [0.646,-0.659], [0.682,-0.590], [0.717,-0.650], [0.751,-0.689], [0.790,-0.735], [0.867,-0.786], [0.969,-0.761], [1.022,-0.716], [1.085,-0.571], [1.118,-0.425], [1.135,-0.300], [1.152,-0.175], [1.169,-0.049], [1.186,0.076], [1.202,0.202], [1.219,0.327], [1.236,0.452], [1.253,0.578], [1.270,0.703], [1.287,0.786], [1.343,0.744], [1.420,0.688], [1.486,0.674], [1.543,0.699], [1.615,0.735], [1.543,0.699], [1.486,0.674], [1.420,0.688], [1.343,0.744], [1.287,0.786], [1.270,0.703], [1.253,0.578], [1.236,0.452], [1.219,0.327], [1.202,0.202], [1.186,0.076], [1.169,-0.049], [1.152,-0.175], [1.135,-0.300], [1.118,-0.425], [1.085,-0.571], [1.022,-0.716], [0.969,-0.761], [0.867,-0.786], [0.790,-0.735], [0.751,-0.689], [0.717,-0.650], [0.682,-0.590], [0.642,-0.426], [0.642,-0.262], [0.642,-0.097], [0.642,0.067], [0.642,0.231], [0.642,0.395], [0.626,0.588], [0.592,0.664], [0.552,0.735], [0.505,0.786], [0.459,0.760], [0.414,0.718], [0.371,0.667], [0.323,0.621], [0.255,0.542], [0.323,0.621], [0.371,0.667], [0.414,0.718], [0.459,0.760], [0.505,0.786], [0.552,0.735], [0.592,0.664], [0.626,0.588], [0.642,0.395], [0.642,0.231], [0.642,0.067], [0.642,-0.097], [0.642,-0.262], [0.642,-0.426], [0.682,-0.590], [0.717,-0.650], [0.751,-0.689], [0.790,-0.735], [0.867,-0.786], [0.969,-0.761], [1.022,-0.716], [1.105,-0.752], [1.190,-0.769], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786], [1.530,-0.786], [1.615,-0.786], [1.700,-0.786], [1.785,-0.786],  ],\n  'W' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.552,-0.739], [0.516,-0.647], [0.487,-0.569], [0.458,-0.430], [0.454,-0.354], [0.450,-0.252], [0.456,-0.096], [0.463,0.061], [0.469,0.218], [0.475,0.374], [0.481,0.531], [0.478,0.660], [0.459,0.724], [0.413,0.803], [0.357,0.775], [0.306,0.659], [0.238,0.531], [0.306,0.659], [0.357,0.775], [0.413,0.803], [0.459,0.724], [0.478,0.660], [0.481,0.531], [0.475,0.374], [0.469,0.218], [0.463,0.061], [0.456,-0.096], [0.450,-0.252], [0.454,-0.354], [0.458,-0.430], [0.487,-0.569], [0.516,-0.647], [0.552,-0.739], [0.599,-0.760], [0.652,-0.766], [0.726,-0.753], [0.788,-0.724], [0.856,-0.681], [0.912,-0.581], [0.949,-0.494], [0.987,-0.275], [0.990,-0.164], [0.993,-0.052], [0.996,0.060], [0.999,0.172], [1.002,0.283], [1.005,0.395], [1.008,0.507], [1.011,0.619], [1.014,0.730], [1.018,0.786], [1.014,0.730], [1.011,0.619], [1.008,0.507], [1.005,0.395], [1.002,0.283], [0.999,0.172], [0.996,0.060], [0.993,-0.052], [0.990,-0.164], [0.987,-0.275], [0.990,-0.543], [1.025,-0.644], [1.080,-0.695], [1.158,-0.761], [1.249,-0.761], [1.335,-0.718], [1.401,-0.672], [1.437,-0.622], [1.446,-0.474], [1.455,-0.326], [1.464,-0.179], [1.473,-0.031], [1.482,0.117], [1.491,0.265], [1.500,0.413], [1.509,0.561], [1.518,0.708], [1.527,0.786], [1.518,0.708], [1.509,0.561], [1.500,0.413], [1.491,0.265], [1.482,0.117], [1.473,-0.031], [1.464,-0.179], [1.455,-0.326], [1.446,-0.474], [1.437,-0.622], [1.514,-0.678], [1.602,-0.718], [1.688,-0.752], [1.774,-0.786], [1.861,-0.786], [1.945,-0.786],  ],\n  'X' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.321,-0.682], [0.388,-0.578], [0.454,-0.473], [0.520,-0.369], [0.586,-0.264], [0.653,-0.160], [0.719,-0.055], [0.785,0.049], [0.852,0.154], [0.918,0.258], [0.984,0.363], [1.050,0.467], [1.117,0.572], [1.183,0.676], [1.249,0.781], [1.183,0.676], [1.117,0.572], [1.050,0.467], [0.984,0.363], [0.918,0.258], [0.852,0.154], [0.781,0.144], [0.761,0.265], [0.741,0.387], [0.721,0.508], [0.701,0.629], [0.637,0.768], [0.512,0.730], [0.425,0.642], [0.370,0.577], [0.308,0.475], [0.370,0.577], [0.425,0.642], [0.512,0.730], [0.637,0.768], [0.701,0.629], [0.721,0.508], [0.741,0.387], [0.761,0.265], [0.781,0.144], [0.801,0.023], [0.821,-0.099], [0.841,-0.220], [0.861,-0.341], [0.881,-0.463], [0.901,-0.584], [0.947,-0.685], [0.984,-0.782], [1.037,-0.786], [1.036,-0.786], [1.117,-0.786], [1.214,-0.786], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786],  ],\n  'Y' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.365,-0.701], [0.387,-0.581], [0.375,-0.466], [0.383,-0.340], [0.404,-0.134], [0.426,0.071], [0.447,0.276], [0.468,0.481], [0.473,0.634], [0.445,0.749], [0.410,0.786], [0.340,0.777], [0.255,0.752], [0.340,0.777], [0.410,0.786], [0.445,0.749], [0.473,0.634], [0.468,0.481], [0.447,0.276], [0.426,0.071], [0.404,-0.134], [0.383,-0.340], [0.375,-0.466], [0.387,-0.581], [0.423,-0.684], [0.467,-0.750], [0.521,-0.756], [0.573,-0.733], [0.628,-0.686], [0.685,-0.624], [0.731,-0.548], [0.790,-0.489], [0.866,-0.430], [0.886,-0.303], [0.906,-0.176], [0.927,-0.050], [0.947,0.077], [0.968,0.204], [0.988,0.331], [1.009,0.458], [1.029,0.585], [1.050,0.701], [1.070,0.786], [1.050,0.701], [1.029,0.585], [1.009,0.458], [0.988,0.331], [0.968,0.204], [0.947,0.077], [0.927,-0.050], [0.906,-0.176], [0.886,-0.303], [0.866,-0.430], [0.847,-0.571], [0.829,-0.712], [0.810,-0.852], [0.792,-0.993], [0.773,-1.134], [0.755,-1.275], [0.724,-1.403], [0.679,-1.484], [0.620,-1.509], [0.562,-1.522], [0.476,-1.534], [0.408,-1.484], [0.376,-1.419], [0.367,-1.306], [0.392,-1.217], [0.442,-1.109], [0.510,-0.999], [0.570,-0.891], [0.626,-0.833], [0.714,-0.786], [0.782,-0.786], [0.833,-0.786], [0.929,-0.786], [0.986,-0.786], [1.054,-0.786], [1.139,-0.786], [1.224,-0.786],  ],\n  'Z' : [ [0.085,-0.786], [0.170,-0.786], [0.245,-0.786], [0.323,-0.701], [0.395,-0.577], [0.488,-0.462], [0.626,-0.240], [0.699,-0.091], [0.750,0.051], [0.784,0.192], [0.797,0.370], [0.762,0.534], [0.748,0.571], [0.701,0.657], [0.628,0.747], [0.561,0.752], [0.446,0.715], [0.342,0.625], [0.314,0.592], [0.255,0.530], [0.314,0.592], [0.342,0.625], [0.446,0.715], [0.561,0.752], [0.628,0.747], [0.701,0.657], [0.748,0.571], [0.762,0.534], [0.797,0.370], [0.784,0.192], [0.750,0.051], [0.699,-0.091], [0.626,-0.240], [0.488,-0.462], [0.395,-0.577], [0.323,-0.701], [0.384,-0.684], [0.417,-0.665], [0.532,-0.661], [0.562,-0.686], [0.666,-0.950], [0.652,-1.118], [0.645,-1.167], [0.586,-1.385], [0.570,-1.429], [0.499,-1.570], [0.379,-1.580], [0.305,-1.560], [0.274,-1.523], [0.251,-1.475], [0.234,-1.358], [0.247,-1.211], [0.311,-1.087], [0.375,-0.970], [0.442,-0.871], [0.502,-0.799], [0.595,-0.761], [0.646,-0.769], [0.714,-0.786], [0.792,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  'a' : [ [0.085,-0.718], [0.146,-0.557], [0.146,-0.500], [0.153,-0.455], [0.180,-0.395], [0.204,-0.353], [0.219,-0.319], [0.246,-0.276], [0.272,-0.234], [0.298,-0.191], [0.333,-0.157], [0.379,-0.132], [0.432,-0.098], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.561,-0.718], [0.501,-0.773], [0.425,-0.801], [0.357,-0.820], [0.279,-0.801], [0.230,-0.754], [0.213,-0.731], [0.184,-0.681], [0.151,-0.616], [0.146,-0.557], [0.146,-0.500], [0.153,-0.455], [0.180,-0.395], [0.204,-0.353], [0.219,-0.319], [0.246,-0.276], [0.272,-0.234], [0.298,-0.191], [0.333,-0.157], [0.379,-0.132], [0.432,-0.098], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.678,-0.744], [0.729,-0.801], [0.781,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  'b' : [ [0.043,-0.786], [0.085,-0.761], [0.128,-0.727], [0.170,-0.693], [0.199,-0.667], [0.227,-0.625], [0.256,-0.574], [0.285,-0.497], [0.313,-0.429], [0.342,-0.361], [0.371,-0.268], [0.399,-0.191], [0.428,-0.106], [0.457,-0.004], [0.485,0.064], [0.514,0.140], [0.543,0.241], [0.571,0.320], [0.587,0.399], [0.588,0.510], [0.572,0.602], [0.529,0.674], [0.473,0.743], [0.432,0.750], [0.397,0.739], [0.367,0.724], [0.343,0.686], [0.323,0.627], [0.318,0.497], [0.316,0.368], [0.315,0.238], [0.313,0.108], [0.316,-0.022], [0.318,-0.152], [0.320,-0.282], [0.321,-0.412], [0.323,-0.542], [0.333,-0.672], [0.352,-0.718], [0.381,-0.771], [0.412,-0.786], [0.463,-0.786], [0.500,-0.782], [0.537,-0.764], [0.564,-0.746], [0.590,-0.688], [0.604,-0.634], [0.622,-0.573], [0.636,-0.514], [0.655,-0.446], [0.662,-0.377], [0.670,-0.293], [0.672,-0.200], [0.674,-0.112], [0.743,-0.140], [0.790,-0.157], [0.842,-0.149],  ],\n  'c' : [ [0.034,-0.769], [0.051,-0.735], [0.076,-0.676], [0.097,-0.599], [0.113,-0.565], [0.136,-0.514], [0.163,-0.446], [0.210,-0.344], [0.246,-0.268], [0.272,-0.222], [0.296,-0.191], [0.329,-0.152], [0.360,-0.123], [0.396,-0.094], [0.442,-0.081], [0.485,-0.072], [0.529,-0.064], [0.595,-0.064], [0.646,-0.106], [0.680,-0.191], [0.646,-0.106], [0.595,-0.064], [0.529,-0.064], [0.485,-0.072], [0.442,-0.081], [0.396,-0.094], [0.360,-0.123], [0.329,-0.152], [0.296,-0.191], [0.272,-0.222], [0.246,-0.268], [0.199,-0.407], [0.199,-0.497], [0.202,-0.565], [0.220,-0.657], [0.246,-0.708], [0.263,-0.731], [0.279,-0.754], [0.306,-0.795], [0.355,-0.829], [0.446,-0.846], [0.561,-0.829], [0.637,-0.820], [0.697,-0.812], [0.765,-0.803], [0.850,-0.795], [0.935,-0.786],  ],\n  'd' : [ [0.085,-0.786], [0.136,-0.769], [0.181,-0.701], [0.238,-0.616], [0.279,-0.557], [0.282,-0.500], [0.289,-0.455], [0.298,-0.395], [0.313,-0.319], [0.333,-0.242], [0.357,-0.191], [0.425,-0.123], [0.469,-0.089], [0.515,-0.072], [0.629,-0.043], [0.697,-0.036], [0.782,-0.036], [0.697,-0.036], [0.629,-0.043], [0.515,-0.072], [0.469,-0.089], [0.425,-0.123], [0.357,-0.191], [0.333,-0.242], [0.313,-0.319], [0.298,-0.395], [0.289,-0.455], [0.282,-0.500], [0.279,-0.557], [0.287,-0.616], [0.320,-0.681], [0.366,-0.754], [0.415,-0.801], [0.459,-0.810], [0.510,-0.808], [0.561,-0.801], [0.637,-0.773], [0.697,-0.718], [0.799,-0.650], [0.867,-0.639], [0.867,-0.592], [0.867,-0.489], [0.867,-0.404], [0.867,-0.293], [0.867,-0.149], [0.867,0.064], [0.867,0.234], [0.867,0.404], [0.867,0.574], [0.867,0.744], [0.867,0.574], [0.867,0.404], [0.867,0.234], [0.867,0.064], [0.867,-0.149], [0.867,-0.293], [0.867,-0.404], [0.867,-0.489], [0.867,-0.592], [0.867,-0.639], [0.875,-0.701], [0.899,-0.744], [0.950,-0.801], [1.002,-0.824], [1.068,-0.815], [1.122,-0.812], [1.190,-0.786],  ],\n  'e' : [ [0.085,-0.786], [0.170,-0.786], [0.290,-0.744], [0.378,-0.693], [0.459,-0.659], [0.503,-0.616], [0.537,-0.548], [0.561,-0.497], [0.571,-0.446], [0.576,-0.404], [0.579,-0.336], [0.576,-0.276], [0.568,-0.229], [0.559,-0.191], [0.551,-0.160], [0.534,-0.106], [0.517,-0.072], [0.486,-0.047], [0.444,-0.030], [0.401,-0.021], [0.359,-0.030], [0.316,-0.047], [0.286,-0.072], [0.269,-0.106], [0.252,-0.160], [0.243,-0.191], [0.235,-0.229], [0.226,-0.276], [0.223,-0.336], [0.226,-0.404], [0.231,-0.446], [0.241,-0.497], [0.265,-0.548], [0.299,-0.616], [0.342,-0.659], [0.422,-0.701], [0.510,-0.744], [0.605,-0.761], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786],  ],\n  'f' : [ [0.043,-0.786], [0.076,-0.779], [0.107,-0.773], [0.145,-0.744], [0.192,-0.710], [0.225,-0.684], [0.264,-0.667], [0.321,-0.642], [0.374,-0.592], [0.425,-0.548], [0.451,-0.446], [0.468,-0.361], [0.485,-0.276], [0.501,-0.191], [0.518,-0.106], [0.535,-0.038], [0.552,0.047], [0.565,0.131], [0.582,0.212], [0.605,0.299], [0.619,0.402], [0.632,0.506], [0.614,0.607], [0.578,0.667], [0.535,0.680], [0.485,0.684], [0.425,0.671], [0.374,0.652], [0.329,0.619], [0.298,0.531], [0.294,0.428], [0.292,0.299], [0.294,0.169], [0.296,-0.000], [0.296,-0.172], [0.296,-0.276], [0.298,-0.385], [0.297,-0.489], [0.296,-0.598], [0.295,-0.710], [0.295,-0.829], [0.292,-0.931], [0.289,-1.041], [0.286,-1.126], [0.281,-1.254], [0.281,-1.356], [0.279,-1.466], [0.272,-1.602], [0.323,-1.602], [0.374,-1.601], [0.423,-1.594], [0.474,-1.551], [0.510,-1.509], [0.542,-1.466], [0.550,-1.381], [0.542,-1.296], [0.533,-1.211], [0.522,-1.126], [0.508,-1.041], [0.491,-0.956], [0.468,-0.888], [0.442,-0.846], [0.383,-0.752], [0.420,-0.769], [0.468,-0.803], [0.510,-0.829], [0.567,-0.812], [0.639,-0.803], [0.723,-0.795], [0.807,-0.786], [0.892,-0.786],  ],\n  'g' : [ [0.033,-0.778], [0.067,-0.761], [0.117,-0.727], [0.145,-0.706], [0.204,-0.662], [0.238,-0.633], [0.284,-0.592], [0.317,-0.557], [0.350,-0.506], [0.384,-0.458], [0.400,-0.430], [0.434,-0.384], [0.467,-0.337], [0.500,-0.291], [0.527,-0.251], [0.559,-0.217], [0.601,-0.175], [0.633,-0.149], [0.678,-0.132], [0.729,-0.115], [0.780,-0.098], [0.831,-0.086], [0.883,-0.089], [0.901,-0.123], [0.898,-0.191], [0.894,-0.259], [0.891,-0.327], [0.887,-0.395], [0.884,-0.463], [0.881,-0.531], [0.877,-0.599], [0.874,-0.667], [0.870,-0.735], [0.816,-0.761], [0.763,-0.786], [0.678,-0.812], [0.610,-0.824], [0.527,-0.812], [0.457,-0.786], [0.400,-0.754], [0.355,-0.676], [0.334,-0.592], [0.317,-0.557], [0.350,-0.506], [0.384,-0.458], [0.400,-0.430], [0.434,-0.384], [0.467,-0.337], [0.500,-0.291], [0.527,-0.251], [0.559,-0.217], [0.601,-0.175], [0.633,-0.149], [0.678,-0.132], [0.729,-0.115], [0.780,-0.098], [0.831,-0.086], [0.883,-0.089], [0.901,-0.123], [0.898,-0.191], [0.894,-0.259], [0.891,-0.327], [0.887,-0.395], [0.884,-0.463], [0.881,-0.531], [0.877,-0.599], [0.874,-0.667], [0.870,-0.735], [0.867,-0.803], [0.864,-0.871], [0.860,-0.939], [0.857,-1.007], [0.853,-1.075], [0.850,-1.143], [0.847,-1.211], [0.843,-1.279], [0.840,-1.347], [0.836,-1.415], [0.833,-1.484], [0.830,-1.551], [0.826,-1.619], [0.765,-1.615], [0.697,-1.608], [0.646,-1.598], [0.595,-1.568], [0.544,-1.526], [0.493,-1.466], [0.459,-1.398], [0.442,-1.347], [0.425,-1.279], [0.433,-1.228], [0.459,-1.186], [0.500,-1.125], [0.530,-1.084], [0.567,-1.041], [0.627,-0.990], [0.695,-0.948], [0.746,-0.914], [0.800,-0.871], [0.873,-0.829], [0.949,-0.820], [1.037,-0.812], [1.105,-0.803], [1.190,-0.786],  ],\n  'h' : [ [0.046,-0.710], [0.072,-0.666], [0.110,-0.611], [0.134,-0.564], [0.169,-0.515], [0.197,-0.467], [0.221,-0.419], [0.250,-0.374], [0.277,-0.327], [0.303,-0.276], [0.326,-0.242], [0.349,-0.200], [0.383,-0.155], [0.432,-0.083], [0.483,-0.038], [0.508,0.013], [0.549,0.064], [0.575,0.131], [0.602,0.202], [0.617,0.249], [0.641,0.297], [0.651,0.370], [0.660,0.438], [0.662,0.523], [0.651,0.616], [0.641,0.693], [0.599,0.742], [0.542,0.769], [0.483,0.769], [0.406,0.738], [0.355,0.702], [0.321,0.636], [0.295,0.511], [0.295,0.425], [0.295,0.339], [0.295,0.227], [0.295,0.114], [0.295,0.001], [0.295,-0.111], [0.295,-0.224], [0.295,-0.336], [0.295,-0.449], [0.295,-0.561], [0.295,-0.674], [0.295,-0.786], [0.299,-0.674], [0.302,-0.561], [0.329,-0.514], [0.368,-0.447], [0.392,-0.386], [0.420,-0.307], [0.447,-0.255], [0.475,-0.185], [0.507,-0.149], [0.564,-0.132], [0.625,-0.123], [0.678,-0.132], [0.743,-0.166], [0.767,-0.229], [0.760,-0.307], [0.755,-0.375], [0.748,-0.453], [0.748,-0.533], [0.761,-0.623], [0.786,-0.717], [0.845,-0.766], [0.920,-0.794], [1.005,-0.786],  ],\n  'i' : [ [0.085,-0.791], [0.173,-0.803], [0.256,-0.811], [0.289,-0.765], [0.316,-0.712], [0.331,-0.635], [0.333,-0.550], [0.335,-0.508], [0.341,-0.431], [0.346,-0.372], [0.352,-0.287], [0.352,-0.202], [0.354,-0.143], [0.357,-0.032], [0.357,-0.143], [0.358,-0.202], [0.356,-0.287], [0.360,-0.372], [0.364,-0.432], [0.368,-0.508], [0.369,-0.551], [0.370,-0.636], [0.384,-0.712], [0.409,-0.765], [0.441,-0.811], [0.518,-0.829], [0.585,-0.795], [0.677,-0.786],  ],\n  'j' : [ [0.042,-0.761], [0.098,-0.734], [0.131,-0.693], [0.159,-0.658], [0.188,-0.613], [0.199,-0.589], [0.225,-0.548], [0.250,-0.516], [0.272,-0.468], [0.295,-0.420], [0.317,-0.360], [0.334,-0.299], [0.343,-0.264], [0.360,-0.195], [0.373,-0.100], [0.383,-0.049], [0.383,-0.099], [0.383,-0.167], [0.383,-0.276], [0.383,-0.395], [0.383,-0.513], [0.383,-0.632], [0.383,-0.751], [0.383,-0.869], [0.383,-0.988], [0.383,-1.107], [0.383,-1.225], [0.383,-1.344], [0.368,-1.405], [0.349,-1.466], [0.326,-1.514], [0.296,-1.530], [0.255,-1.534], [0.218,-1.518], [0.196,-1.496], [0.172,-1.406], [0.162,-1.296], [0.159,-1.211], [0.173,-1.126], [0.196,-1.053], [0.218,-1.005], [0.241,-0.957], [0.263,-0.909], [0.286,-0.861], [0.301,-0.837], [0.328,-0.808], [0.356,-0.780], [0.384,-0.753], [0.408,-0.742], [0.439,-0.734], [0.473,-0.733], [0.509,-0.750], [0.552,-0.767], [0.595,-0.786],  ],\n  'k' : [ [0.043,-0.744], [0.076,-0.701], [0.106,-0.659], [0.136,-0.616], [0.170,-0.548], [0.206,-0.500], [0.239,-0.453], [0.272,-0.407], [0.298,-0.384], [0.337,-0.305], [0.384,-0.226], [0.431,-0.147], [0.479,-0.069], [0.526,0.010], [0.555,0.056], [0.584,0.103], [0.605,0.149], [0.622,0.195], [0.659,0.261], [0.677,0.309], [0.695,0.356], [0.713,0.404], [0.732,0.451], [0.750,0.499], [0.765,0.565], [0.771,0.635], [0.737,0.676], [0.695,0.684], [0.654,0.684], [0.603,0.684], [0.552,0.676], [0.501,0.659], [0.451,0.612], [0.400,0.562], [0.357,0.466], [0.340,0.369], [0.340,0.273], [0.340,0.176], [0.340,0.079], [0.340,0.010], [0.340,-0.066], [0.340,-0.143], [0.340,-0.219], [0.340,-0.296], [0.340,-0.372], [0.340,-0.449], [0.340,-0.525], [0.340,-0.601], [0.340,-0.678], [0.340,-0.754], [0.340,-0.847], [0.340,-0.754], [0.340,-0.678], [0.340,-0.601], [0.340,-0.525], [0.340,-0.449], [0.354,-0.372], [0.397,-0.361], [0.465,-0.353], [0.533,-0.344], [0.618,-0.327], [0.686,-0.302], [0.754,-0.276], [0.797,-0.234], [0.822,-0.198], [0.812,-0.140], [0.788,-0.089], [0.758,-0.059], [0.720,-0.032], [0.652,-0.055], [0.601,-0.106], [0.516,-0.191], [0.465,-0.276], [0.431,-0.336], [0.383,-0.378], [0.414,-0.421], [0.455,-0.453], [0.489,-0.500], [0.522,-0.546], [0.554,-0.592], [0.577,-0.639], [0.591,-0.662], [0.622,-0.708], [0.655,-0.754], [0.688,-0.801], [0.729,-0.846], [0.771,-0.871], [0.814,-0.863], [0.856,-0.846], [0.899,-0.829], [0.941,-0.812], [0.971,-0.803], [1.011,-0.786], [1.065,-0.803], [1.105,-0.786],  ],\n  'l' : [ [0.060,-0.744], [0.097,-0.694], [0.124,-0.646], [0.145,-0.616], [0.171,-0.574], [0.194,-0.526], [0.224,-0.477], [0.255,-0.429], [0.289,-0.381], [0.306,-0.332], [0.340,-0.286], [0.377,-0.238], [0.403,-0.191], [0.435,-0.115], [0.459,-0.055], [0.483,0.013], [0.501,0.056], [0.510,0.095], [0.524,0.140], [0.534,0.190], [0.548,0.237], [0.554,0.284], [0.566,0.351], [0.578,0.404], [0.585,0.480], [0.594,0.566], [0.595,0.613], [0.585,0.682], [0.550,0.734], [0.515,0.771], [0.480,0.782], [0.451,0.786], [0.400,0.781], [0.347,0.767], [0.324,0.719], [0.315,0.672], [0.308,0.632], [0.304,0.574], [0.304,0.488], [0.304,0.401], [0.304,0.314], [0.304,0.227], [0.304,0.141], [0.304,0.054], [0.304,-0.033], [0.304,-0.119], [0.303,-0.206], [0.303,-0.293], [0.303,-0.380], [0.303,-0.466], [0.303,-0.553], [0.303,-0.640], [0.311,-0.702], [0.343,-0.752], [0.383,-0.778], [0.434,-0.784], [0.483,-0.807], [0.538,-0.821], [0.603,-0.803], [0.677,-0.795], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  'm' : [ [0.066,-0.744], [0.100,-0.708], [0.116,-0.685], [0.150,-0.639], [0.166,-0.615], [0.200,-0.569], [0.216,-0.546], [0.233,-0.523], [0.250,-0.500], [0.270,-0.463], [0.295,-0.412], [0.316,-0.384], [0.324,-0.361], [0.334,-0.337], [0.349,-0.314], [0.372,-0.276], [0.389,-0.251], [0.416,-0.222], [0.449,-0.175], [0.466,-0.152], [0.482,-0.129], [0.499,-0.106], [0.527,-0.081], [0.567,-0.069], [0.603,-0.055], [0.649,-0.059], [0.665,-0.083], [0.669,-0.103], [0.674,-0.154], [0.679,-0.205], [0.685,-0.256], [0.690,-0.307], [0.695,-0.358], [0.686,-0.402], [0.676,-0.447], [0.666,-0.491], [0.657,-0.535], [0.647,-0.579], [0.637,-0.624], [0.628,-0.668], [0.618,-0.712], [0.608,-0.756], [0.599,-0.801], [0.608,-0.756], [0.618,-0.712], [0.628,-0.668], [0.637,-0.624], [0.647,-0.579], [0.657,-0.535], [0.666,-0.491], [0.676,-0.447], [0.686,-0.402], [0.695,-0.358], [0.715,-0.314], [0.743,-0.276], [0.765,-0.245], [0.782,-0.222], [0.798,-0.198], [0.815,-0.175], [0.832,-0.152], [0.848,-0.129], [0.882,-0.089], [0.916,-0.064], [0.966,-0.044], [1.015,-0.036], [1.031,-0.059], [1.048,-0.083], [1.065,-0.106], [1.075,-0.143], [1.085,-0.180], [1.095,-0.217], [1.105,-0.254], [1.114,-0.291], [1.103,-0.340], [1.091,-0.388], [1.080,-0.437], [1.068,-0.486], [1.056,-0.534], [1.045,-0.583], [1.033,-0.632], [1.021,-0.680], [1.010,-0.729], [1.009,-0.777], [1.010,-0.729], [1.021,-0.680], [1.033,-0.632], [1.045,-0.583], [1.056,-0.534], [1.068,-0.486], [1.080,-0.437], [1.091,-0.388], [1.103,-0.340], [1.114,-0.291], [1.131,-0.268], [1.156,-0.234], [1.181,-0.198], [1.198,-0.175], [1.215,-0.140], [1.248,-0.106], [1.264,-0.083], [1.290,-0.059], [1.358,-0.038], [1.431,-0.059], [1.464,-0.106], [1.480,-0.129], [1.497,-0.175], [1.489,-0.224], [1.480,-0.272], [1.472,-0.320], [1.464,-0.369], [1.455,-0.417], [1.447,-0.466], [1.439,-0.514], [1.431,-0.562], [1.422,-0.611], [1.414,-0.659], [1.414,-0.708], [1.447,-0.754], [1.464,-0.777], [1.496,-0.803], [1.580,-0.812], [1.630,-0.812], [1.677,-0.799], [1.730,-0.795], [1.785,-0.786],  ],\n  'n' : [ [0.033,-0.786], [0.067,-0.786], [0.085,-0.744], [0.102,-0.701], [0.119,-0.625], [0.145,-0.531], [0.170,-0.446], [0.196,-0.361], [0.221,-0.234], [0.255,-0.106], [0.292,0.010], [0.332,0.064], [0.374,0.038], [0.400,-0.013], [0.414,-0.059], [0.423,-0.106], [0.431,-0.149], [0.435,-0.198], [0.430,-0.254], [0.430,-0.310], [0.430,-0.365], [0.430,-0.421], [0.430,-0.476], [0.430,-0.532], [0.430,-0.588], [0.430,-0.643], [0.430,-0.699], [0.430,-0.754], [0.430,-0.699], [0.430,-0.643], [0.430,-0.588], [0.430,-0.532], [0.430,-0.476], [0.430,-0.421], [0.430,-0.365], [0.430,-0.310], [0.430,-0.254], [0.459,-0.242], [0.485,-0.217], [0.508,-0.198], [0.525,-0.175], [0.542,-0.152], [0.558,-0.129], [0.587,-0.098], [0.620,-0.059], [0.656,-0.013], [0.691,0.010], [0.741,0.010], [0.774,-0.013], [0.791,-0.036], [0.808,-0.059], [0.816,-0.106], [0.825,-0.149], [0.825,-0.234], [0.825,-0.293], [0.825,-0.361], [0.825,-0.421], [0.825,-0.480], [0.825,-0.523], [0.825,-0.574], [0.825,-0.616], [0.825,-0.662], [0.825,-0.708], [0.833,-0.761], [0.865,-0.812], [0.924,-0.820], [0.967,-0.812], [1.024,-0.786],  ],\n  'o' : [ [0.085,-0.727], [0.134,-0.659], [0.162,-0.608], [0.187,-0.557], [0.204,-0.514], [0.214,-0.480], [0.238,-0.430], [0.256,-0.395], [0.267,-0.361], [0.289,-0.319], [0.314,-0.268], [0.331,-0.245], [0.346,-0.222], [0.372,-0.183], [0.397,-0.152], [0.414,-0.129], [0.431,-0.106], [0.447,-0.083], [0.482,-0.072], [0.525,-0.055], [0.584,-0.055], [0.627,-0.072], [0.647,-0.083], [0.669,-0.106], [0.685,-0.123], [0.697,-0.149], [0.714,-0.175], [0.720,-0.224], [0.719,-0.272], [0.724,-0.320], [0.723,-0.368], [0.716,-0.417], [0.711,-0.465], [0.702,-0.513], [0.689,-0.562], [0.671,-0.610], [0.654,-0.658], [0.643,-0.701], [0.620,-0.752], [0.595,-0.795], [0.552,-0.829], [0.510,-0.846], [0.459,-0.854], [0.397,-0.842], [0.372,-0.820], [0.347,-0.791], [0.314,-0.754], [0.298,-0.731], [0.281,-0.708], [0.264,-0.685], [0.253,-0.659], [0.236,-0.616], [0.219,-0.574], [0.207,-0.531], [0.214,-0.480], [0.238,-0.430], [0.256,-0.395], [0.267,-0.361], [0.289,-0.319], [0.314,-0.268], [0.331,-0.245], [0.346,-0.222], [0.372,-0.183], [0.397,-0.152], [0.414,-0.129], [0.431,-0.106], [0.447,-0.083], [0.482,-0.072], [0.524,-0.106], [0.544,-0.149], [0.570,-0.183], [0.595,-0.200], [0.629,-0.217], [0.663,-0.225], [0.697,-0.225], [0.731,-0.225], [0.765,-0.225], [0.799,-0.221], [0.833,-0.217], [0.867,-0.208], [0.901,-0.191], [0.935,-0.174], [0.969,-0.149],  ],\n  'p' : [ [0.069,-0.801], [0.130,-0.767], [0.181,-0.693], [0.211,-0.610], [0.232,-0.524], [0.253,-0.438], [0.274,-0.352], [0.291,-0.300], [0.316,-0.257], [0.337,-0.179], [0.364,-0.136], [0.372,-0.215], [0.370,-0.323], [0.368,-0.431], [0.367,-0.539], [0.365,-0.646], [0.363,-0.754], [0.361,-0.862], [0.359,-0.970], [0.357,-1.078], [0.355,-1.186], [0.353,-1.294], [0.352,-1.402], [0.350,-1.510], [0.352,-1.402], [0.353,-1.294], [0.355,-1.186], [0.357,-1.078], [0.359,-0.970], [0.361,-0.862], [0.363,-0.754], [0.365,-0.646], [0.367,-0.539], [0.368,-0.431], [0.370,-0.323], [0.372,-0.215], [0.374,-0.107], [0.364,-0.136], [0.407,-0.091], [0.438,-0.048], [0.478,-0.020], [0.510,-0.002], [0.534,0.007], [0.564,0.017], [0.610,0.010], [0.662,-0.011], [0.709,-0.077], [0.722,-0.104], [0.753,-0.170], [0.771,-0.282], [0.771,-0.357], [0.774,-0.469], [0.760,-0.538], [0.748,-0.616], [0.726,-0.654], [0.691,-0.694], [0.651,-0.714], [0.589,-0.754], [0.531,-0.747], [0.476,-0.744], [0.425,-0.727], [0.476,-0.744], [0.531,-0.747], [0.589,-0.754], [0.625,-0.748], [0.678,-0.763], [0.763,-0.777], [0.814,-0.783], [0.878,-0.803], [0.935,-0.803], [0.996,-0.795], [1.054,-0.786],  ],\n  'q' : [ [0.033,-0.778], [0.067,-0.761], [0.117,-0.727], [0.145,-0.706], [0.183,-0.662], [0.216,-0.615], [0.233,-0.592], [0.275,-0.548], [0.299,-0.506], [0.333,-0.458], [0.349,-0.430], [0.383,-0.384], [0.416,-0.337], [0.449,-0.291], [0.476,-0.251], [0.508,-0.217], [0.550,-0.175], [0.582,-0.149], [0.627,-0.132], [0.678,-0.115], [0.729,-0.098], [0.780,-0.086], [0.832,-0.089], [0.850,-0.123], [0.847,-0.191], [0.843,-0.259], [0.840,-0.327], [0.836,-0.395], [0.833,-0.463], [0.830,-0.531], [0.826,-0.599], [0.823,-0.667], [0.819,-0.735], [0.765,-0.761], [0.712,-0.786], [0.627,-0.812], [0.559,-0.824], [0.476,-0.812], [0.406,-0.786], [0.349,-0.754], [0.304,-0.676], [0.283,-0.592], [0.299,-0.506], [0.333,-0.458], [0.349,-0.430], [0.383,-0.384], [0.416,-0.337], [0.449,-0.291], [0.476,-0.251], [0.508,-0.217], [0.550,-0.175], [0.582,-0.149], [0.627,-0.132], [0.678,-0.115], [0.729,-0.098], [0.780,-0.086], [0.832,-0.089], [0.850,-0.123], [0.847,-0.191], [0.843,-0.259], [0.840,-0.327], [0.836,-0.395], [0.833,-0.463], [0.830,-0.531], [0.826,-0.599], [0.823,-0.667], [0.819,-0.735], [0.816,-0.803], [0.813,-0.871], [0.809,-0.939], [0.806,-1.007], [0.802,-1.075], [0.799,-1.143], [0.796,-1.211], [0.792,-1.279], [0.789,-1.347], [0.785,-1.415], [0.782,-1.484], [0.779,-1.551], [0.775,-1.619], [0.816,-1.615], [0.867,-1.608], [0.901,-1.598], [0.935,-1.568], [0.969,-1.526], [1.003,-1.466], [1.037,-1.398], [1.054,-1.347], [1.062,-1.279], [1.054,-1.228], [1.037,-1.186], [1.003,-1.125], [0.969,-1.084], [0.935,-1.041], [0.901,-0.990], [0.867,-0.948], [0.850,-0.914], [0.850,-0.854], [0.898,-0.829], [0.952,-0.812], [1.003,-0.795], [1.054,-0.786], [1.139,-0.786], [1.224,-0.786],  ],\n  'r' : [ [0.085,-0.786], [0.170,-0.752], [0.221,-0.701], [0.255,-0.659], [0.289,-0.616], [0.309,-0.531], [0.332,-0.446], [0.349,-0.353], [0.362,-0.293], [0.374,-0.234], [0.389,-0.166], [0.400,-0.106], [0.527,-0.106], [0.612,-0.106], [0.697,-0.106], [0.782,-0.106], [0.867,-0.106], [0.867,-0.149], [0.859,-0.234], [0.850,-0.319], [0.833,-0.404], [0.816,-0.489], [0.807,-0.574], [0.833,-0.659], [0.867,-0.701], [0.935,-0.744], [1.020,-0.769], [1.122,-0.786], [1.241,-0.786],  ],\n  's' : [ [0.066,-0.769], [0.134,-0.731], [0.168,-0.701], [0.200,-0.667], [0.255,-0.615], [0.313,-0.531], [0.383,-0.446], [0.417,-0.378], [0.442,-0.319], [0.451,-0.242], [0.451,-0.191], [0.425,-0.064], [0.510,-0.140], [0.561,-0.191], [0.612,-0.234], [0.653,-0.276], [0.697,-0.319], [0.731,-0.402], [0.748,-0.446], [0.756,-0.490], [0.765,-0.534], [0.756,-0.578], [0.739,-0.622], [0.714,-0.666], [0.680,-0.710], [0.632,-0.747], [0.567,-0.786], [0.517,-0.801], [0.468,-0.803], [0.417,-0.801], [0.374,-0.786], [0.306,-0.761], [0.238,-0.727], [0.306,-0.761], [0.374,-0.786], [0.417,-0.801], [0.468,-0.803], [0.517,-0.801], [0.567,-0.786], [0.632,-0.747], [0.678,-0.769], [0.720,-0.786], [0.763,-0.786], [0.805,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  't' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.786], [0.298,-0.786], [0.374,-0.786], [0.445,-0.786], [0.484,-0.759], [0.499,-0.605], [0.514,-0.452], [0.529,-0.299], [0.543,-0.146], [0.558,0.008], [0.573,0.161], [0.588,0.314], [0.552,0.314], [0.522,0.314], [0.467,0.314], [0.411,0.314], [0.340,0.314], [0.255,0.314], [0.170,0.314], [0.255,0.314], [0.340,0.314], [0.411,0.314], [0.467,0.314], [0.522,0.314], [0.552,0.314], [0.633,0.314], [0.688,0.314], [0.729,0.314], [0.784,0.314], [0.840,0.314], [0.895,0.314], [0.978,0.314], [1.062,0.314], [0.978,0.314], [0.895,0.314], [0.840,0.314], [0.784,0.314], [0.729,0.314], [0.688,0.314], [0.633,0.314], [0.588,0.314], [0.602,0.467], [0.617,0.621], [0.632,0.774], [0.632,0.621], [0.632,0.467], [0.632,0.314], [0.632,0.161], [0.632,0.008], [0.632,-0.146], [0.632,-0.299], [0.632,-0.452], [0.632,-0.605], [0.632,-0.759], [0.659,-0.805], [0.720,-0.816], [0.807,-0.799], [0.894,-0.791], [0.978,-0.786], [1.062,-0.786], [1.147,-0.786], [1.232,-0.786],  ],\n  'u' : [ [0.043,-0.761], [0.085,-0.744], [0.128,-0.727], [0.156,-0.710], [0.179,-0.690], [0.204,-0.646], [0.221,-0.602], [0.238,-0.557], [0.255,-0.506], [0.286,-0.491], [0.293,-0.442], [0.299,-0.392], [0.306,-0.343], [0.312,-0.294], [0.319,-0.245], [0.325,-0.195], [0.332,-0.146], [0.338,-0.097], [0.344,-0.048], [0.338,-0.097], [0.332,-0.146], [0.325,-0.195], [0.319,-0.245], [0.312,-0.294], [0.306,-0.343], [0.299,-0.392], [0.293,-0.442], [0.286,-0.491], [0.280,-0.540], [0.273,-0.589], [0.267,-0.639], [0.260,-0.688], [0.254,-0.737], [0.260,-0.786], [0.289,-0.803], [0.332,-0.812], [0.383,-0.803], [0.425,-0.795], [0.461,-0.778], [0.501,-0.761], [0.544,-0.744], [0.583,-0.727], [0.616,-0.710], [0.646,-0.684], [0.671,-0.650], [0.682,-0.605], [0.686,-0.558], [0.689,-0.511], [0.693,-0.464], [0.697,-0.416], [0.700,-0.369], [0.704,-0.322], [0.708,-0.275], [0.711,-0.228], [0.715,-0.180], [0.719,-0.133], [0.723,-0.074], [0.726,-0.023], [0.723,-0.074], [0.719,-0.133], [0.715,-0.180], [0.711,-0.228], [0.708,-0.275], [0.704,-0.322], [0.700,-0.369], [0.697,-0.416], [0.693,-0.464], [0.712,-0.529], [0.719,-0.582], [0.731,-0.633], [0.748,-0.684], [0.756,-0.735], [0.790,-0.786], [0.845,-0.803], [0.901,-0.803], [0.944,-0.795], [1.020,-0.786],  ],\n  'v' : [ [0.030,-0.784], [0.050,-0.735], [0.070,-0.687], [0.091,-0.639], [0.111,-0.591], [0.131,-0.543], [0.151,-0.494], [0.172,-0.431], [0.184,-0.375], [0.204,-0.327], [0.224,-0.279], [0.245,-0.231], [0.265,-0.182], [0.285,-0.134], [0.321,-0.085], [0.348,-0.060], [0.388,-0.046], [0.430,-0.054], [0.455,-0.076], [0.476,-0.097], [0.488,-0.134], [0.498,-0.176], [0.508,-0.212], [0.509,-0.244], [0.505,-0.280], [0.503,-0.321], [0.501,-0.363], [0.498,-0.404], [0.496,-0.446], [0.493,-0.487], [0.491,-0.528], [0.488,-0.570], [0.486,-0.611], [0.493,-0.657], [0.509,-0.707], [0.525,-0.749], [0.554,-0.790], [0.593,-0.814], [0.635,-0.793], [0.674,-0.766], [0.689,-0.723], [0.703,-0.680], [0.718,-0.637], [0.733,-0.594], [0.737,-0.547], [0.753,-0.502], [0.759,-0.450], [0.769,-0.408], [0.780,-0.331], [0.791,-0.255], [0.803,-0.179], [0.814,-0.102], [0.886,-0.110], [0.960,-0.130], [1.015,-0.143], [1.058,-0.149],  ],\n  'w' : [ [0.030,-0.781], [0.050,-0.754], [0.083,-0.708], [0.102,-0.684], [0.123,-0.659], [0.146,-0.611], [0.170,-0.564], [0.193,-0.516], [0.216,-0.468], [0.240,-0.420], [0.262,-0.361], [0.284,-0.290], [0.306,-0.219], [0.328,-0.148], [0.350,-0.077], [0.361,-0.041], [0.356,-0.126], [0.352,-0.210], [0.348,-0.294], [0.343,-0.379], [0.339,-0.463], [0.342,-0.517], [0.351,-0.602], [0.359,-0.670], [0.390,-0.738], [0.433,-0.783], [0.495,-0.799], [0.565,-0.776], [0.589,-0.728], [0.612,-0.680], [0.636,-0.632], [0.655,-0.585], [0.673,-0.537], [0.689,-0.490], [0.704,-0.442], [0.711,-0.358], [0.719,-0.274], [0.726,-0.190], [0.734,-0.105], [0.741,-0.064], [0.753,-0.120], [0.765,-0.219], [0.777,-0.317], [0.789,-0.416], [0.801,-0.515], [0.812,-0.614], [0.824,-0.712], [0.867,-0.780], [0.911,-0.786], [0.952,-0.775], [0.988,-0.723], [1.014,-0.682], [1.037,-0.634], [1.061,-0.587], [1.073,-0.530], [1.085,-0.448], [1.091,-0.403], [1.101,-0.314], [1.112,-0.224], [1.122,-0.135], [1.133,-0.064], [1.188,-0.072], [1.244,-0.089], [1.298,-0.106], [1.356,-0.149],  ],\n  'x' : [ [0.085,-0.786], [0.170,-0.786], [0.220,-0.721], [0.262,-0.667], [0.304,-0.614], [0.346,-0.560], [0.388,-0.506], [0.430,-0.452], [0.471,-0.398], [0.522,-0.337], [0.555,-0.291], [0.597,-0.237], [0.639,-0.183], [0.681,-0.129], [0.723,-0.075], [0.765,-0.021], [0.799,0.021], [0.765,-0.021], [0.723,-0.075], [0.681,-0.129], [0.639,-0.183], [0.597,-0.237], [0.555,-0.291], [0.522,-0.337], [0.445,-0.429], [0.417,-0.383], [0.380,-0.315], [0.343,-0.248], [0.306,-0.181], [0.269,-0.114], [0.232,-0.046], [0.196,0.021], [0.232,-0.046], [0.269,-0.114], [0.306,-0.181], [0.343,-0.248], [0.380,-0.315], [0.417,-0.383], [0.445,-0.429], [0.491,-0.517], [0.528,-0.585], [0.565,-0.652], [0.602,-0.719], [0.639,-0.786], [0.680,-0.824], [0.718,-0.830], [0.763,-0.846], [0.799,-0.842], [0.834,-0.837], [0.863,-0.820], [0.901,-0.808], [0.935,-0.795], [0.986,-0.786],  ],\n  'y' : [ [0.033,-0.778], [0.066,-0.760], [0.099,-0.739], [0.124,-0.720], [0.145,-0.684], [0.166,-0.648], [0.187,-0.612], [0.208,-0.576], [0.229,-0.540], [0.251,-0.504], [0.272,-0.468], [0.293,-0.431], [0.314,-0.395], [0.335,-0.359], [0.357,-0.323], [0.378,-0.287], [0.399,-0.251], [0.420,-0.215], [0.441,-0.179], [0.462,-0.143], [0.513,-0.123], [0.547,-0.123], [0.586,-0.138], [0.604,-0.161], [0.611,-0.198], [0.606,-0.241], [0.601,-0.279], [0.585,-0.358], [0.570,-0.437], [0.554,-0.515], [0.539,-0.594], [0.523,-0.672], [0.521,-0.735], [0.531,-0.788], [0.549,-0.811], [0.568,-0.834], [0.586,-0.857], [0.609,-0.878], [0.635,-0.895], [0.669,-0.902], [0.703,-0.902], [0.773,-0.893], [0.838,-0.857], [0.870,-0.823], [0.943,-0.745], [0.950,-0.674], [0.957,-0.603], [0.964,-0.533], [0.971,-0.462], [0.977,-0.391], [0.984,-0.320], [0.991,-0.249], [0.998,-0.179], [1.005,-0.132], [0.998,-0.179], [0.991,-0.249], [0.984,-0.320], [0.977,-0.391], [0.971,-0.462], [0.964,-0.533], [0.957,-0.603], [0.950,-0.674], [0.943,-0.745], [0.936,-0.816], [0.929,-0.887], [0.923,-0.957], [0.916,-1.028], [0.909,-1.099], [0.902,-1.170], [0.895,-1.241], [0.888,-1.311], [0.881,-1.382], [0.875,-1.453], [0.868,-1.524], [0.838,-1.571], [0.787,-1.584], [0.720,-1.593], [0.652,-1.601], [0.590,-1.593], [0.543,-1.576], [0.524,-1.553], [0.506,-1.530], [0.488,-1.507], [0.472,-1.476], [0.466,-1.438], [0.473,-1.387], [0.497,-1.348], [0.511,-1.314], [0.534,-1.275], [0.548,-1.241], [0.567,-1.205], [0.582,-1.181], [0.597,-1.158], [0.612,-1.134], [0.627,-1.111], [0.642,-1.087], [0.657,-1.064], [0.698,-1.038], [0.747,-1.012], [0.796,-0.986], [0.846,-0.959], [0.983,-0.897], [1.038,-0.858], [1.094,-0.827], [1.151,-0.809], [1.207,-0.791], [1.258,-0.786],  ],\n  'z' : [ [0.034,-0.752], [0.067,-0.708], [0.083,-0.685], [0.116,-0.639], [0.133,-0.615], [0.166,-0.569], [0.183,-0.546], [0.216,-0.500], [0.233,-0.476], [0.266,-0.430], [0.287,-0.395], [0.316,-0.353], [0.333,-0.327], [0.366,-0.285], [0.389,-0.251], [0.440,-0.191], [0.491,-0.123], [0.516,-0.083], [0.549,-0.047], [0.576,-0.030], [0.615,-0.036], [0.649,-0.059], [0.665,-0.083], [0.682,-0.106], [0.699,-0.129], [0.708,-0.191], [0.699,-0.245], [0.678,-0.319], [0.652,-0.386], [0.615,-0.453], [0.582,-0.500], [0.542,-0.574], [0.499,-0.639], [0.466,-0.685], [0.449,-0.708], [0.399,-0.777], [0.383,-0.801], [0.399,-0.777], [0.449,-0.708], [0.466,-0.685], [0.499,-0.639], [0.549,-0.639], [0.576,-0.667], [0.599,-0.708], [0.615,-0.731], [0.642,-0.769], [0.665,-0.824], [0.669,-0.847], [0.665,-0.870], [0.665,-0.916], [0.665,-0.963], [0.652,-1.084], [0.627,-1.169], [0.602,-1.243], [0.582,-1.287], [0.566,-1.310], [0.532,-1.380], [0.516,-1.403], [0.493,-1.432], [0.459,-1.495], [0.432,-1.519], [0.401,-1.534], [0.366,-1.519], [0.349,-1.495], [0.304,-1.441], [0.283,-1.403], [0.270,-1.356], [0.283,-1.310], [0.303,-1.267], [0.333,-1.218], [0.349,-1.194], [0.366,-1.171], [0.383,-1.148], [0.399,-1.125], [0.416,-1.102], [0.432,-1.079], [0.449,-1.055], [0.466,-1.032], [0.501,-1.002], [0.536,-0.965], [0.571,-0.931], [0.605,-0.897], [0.640,-0.871], [0.675,-0.846], [0.710,-0.829], [0.745,-0.812], [0.780,-0.803], [0.815,-0.791], [0.850,-0.786], [0.892,-0.778], [0.935,-0.778], [0.978,-0.786],  ],\n  'a*' : [ [0.068,-0.174], [0.136,-0.149], [0.204,-0.132], [0.272,-0.098], [0.340,-0.089], [0.432,-0.081], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.561,-0.718], [0.501,-0.773], [0.425,-0.801], [0.357,-0.820], [0.279,-0.801], [0.230,-0.754], [0.213,-0.731], [0.184,-0.681], [0.151,-0.616], [0.146,-0.557], [0.146,-0.500], [0.153,-0.455], [0.180,-0.395], [0.204,-0.353], [0.219,-0.319], [0.246,-0.276], [0.272,-0.234], [0.298,-0.191], [0.333,-0.157], [0.379,-0.132], [0.432,-0.081], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.678,-0.744], [0.729,-0.801], [0.781,-0.786], [0.850,-0.786],  ],\n  'b*' : [ [0.043,-0.157], [0.085,-0.166], [0.128,-0.157], [0.179,-0.157], [0.230,-0.162], [0.281,-0.157], [0.332,-0.140], [0.365,-0.115], [0.391,-0.064], [0.414,-0.004], [0.443,0.064], [0.472,0.140], [0.500,0.241], [0.529,0.320], [0.544,0.399], [0.546,0.510], [0.530,0.602], [0.487,0.674], [0.431,0.743], [0.390,0.750], [0.355,0.739], [0.324,0.724], [0.300,0.686], [0.281,0.627], [0.275,0.497], [0.274,0.368], [0.272,0.238], [0.270,0.108], [0.274,-0.022], [0.275,-0.152], [0.277,-0.282], [0.279,-0.412], [0.281,-0.542], [0.291,-0.672], [0.309,-0.718], [0.339,-0.771], [0.369,-0.786], [0.420,-0.786], [0.457,-0.782], [0.494,-0.764], [0.522,-0.746], [0.548,-0.688], [0.562,-0.634], [0.580,-0.573], [0.594,-0.514], [0.613,-0.446], [0.619,-0.377], [0.628,-0.293], [0.630,-0.200], [0.631,-0.112], [0.701,-0.140], [0.748,-0.157], [0.799,-0.149],  ],\n  'c*' : [ [0.085,-0.140], [0.175,-0.132], [0.243,-0.123], [0.311,-0.106], [0.367,-0.089], [0.413,-0.081], [0.456,-0.072], [0.500,-0.064], [0.566,-0.064], [0.617,-0.106], [0.651,-0.191], [0.617,-0.106], [0.566,-0.064], [0.500,-0.064], [0.456,-0.072], [0.413,-0.081], [0.367,-0.094], [0.331,-0.123], [0.300,-0.152], [0.267,-0.191], [0.243,-0.222], [0.217,-0.268], [0.170,-0.407], [0.170,-0.497], [0.173,-0.565], [0.191,-0.657], [0.217,-0.708], [0.234,-0.731], [0.251,-0.754], [0.277,-0.795], [0.326,-0.829], [0.417,-0.846], [0.532,-0.829], [0.609,-0.820], [0.668,-0.812], [0.736,-0.803], [0.821,-0.795], [0.906,-0.786],  ],\n  'd*' : [ [0.068,-0.157], [0.136,-0.166], [0.204,-0.157], [0.272,-0.140], [0.340,-0.123], [0.425,-0.123], [0.469,-0.089], [0.515,-0.072], [0.629,-0.043], [0.697,-0.036], [0.782,-0.036], [0.697,-0.036], [0.629,-0.043], [0.515,-0.072], [0.469,-0.089], [0.425,-0.123], [0.357,-0.191], [0.333,-0.242], [0.313,-0.319], [0.298,-0.395], [0.289,-0.455], [0.282,-0.500], [0.279,-0.557], [0.287,-0.616], [0.320,-0.681], [0.366,-0.754], [0.415,-0.801], [0.459,-0.810], [0.510,-0.808], [0.561,-0.801], [0.637,-0.773], [0.697,-0.718], [0.799,-0.650], [0.867,-0.639], [0.867,-0.592], [0.867,-0.489], [0.867,-0.404], [0.867,-0.293], [0.867,-0.149], [0.867,0.064], [0.867,0.234], [0.867,0.404], [0.867,0.574], [0.867,0.744], [0.867,0.574], [0.867,0.404], [0.867,0.234], [0.867,0.064], [0.867,-0.149], [0.867,-0.293], [0.867,-0.404], [0.867,-0.489], [0.867,-0.592], [0.867,-0.639], [0.875,-0.701], [0.899,-0.744], [0.950,-0.801], [1.002,-0.824], [1.068,-0.815], [1.122,-0.812], [1.190,-0.795], [1.275,-0.786],  ],\n  'e*' : [ [0.085,-0.149], [0.136,-0.162], [0.170,-0.174], [0.204,-0.191], [0.231,-0.208], [0.264,-0.242], [0.315,-0.276], [0.383,-0.327], [0.451,-0.344], [0.501,-0.336], [0.552,-0.268], [0.566,-0.229], [0.568,-0.191], [0.559,-0.160], [0.542,-0.106], [0.525,-0.072], [0.495,-0.047], [0.452,-0.030], [0.410,-0.021], [0.367,-0.030], [0.325,-0.047], [0.294,-0.072], [0.260,-0.106], [0.235,-0.149], [0.231,-0.208], [0.231,-0.268], [0.231,-0.327], [0.235,-0.404], [0.240,-0.446], [0.250,-0.497], [0.260,-0.548], [0.281,-0.616], [0.298,-0.667], [0.332,-0.701], [0.365,-0.735], [0.417,-0.761], [0.485,-0.769], [0.552,-0.778], [0.620,-0.786], [0.680,-0.786], [0.765,-0.786],  ],\n  'f*' : [ [0.043,-0.191], [0.076,-0.234], [0.111,-0.310], [0.145,-0.395], [0.179,-0.446], [0.213,-0.489], [0.247,-0.531], [0.281,-0.574], [0.321,-0.642], [0.374,-0.592], [0.425,-0.548], [0.451,-0.446], [0.468,-0.361], [0.485,-0.276], [0.501,-0.191], [0.518,-0.106], [0.535,-0.038], [0.552,0.047], [0.565,0.131], [0.582,0.212], [0.605,0.299], [0.619,0.402], [0.632,0.506], [0.614,0.607], [0.578,0.667], [0.535,0.680], [0.485,0.684], [0.425,0.671], [0.374,0.652], [0.329,0.619], [0.298,0.531], [0.294,0.428], [0.292,0.299], [0.294,0.169], [0.296,-0.000], [0.296,-0.172], [0.296,-0.276], [0.298,-0.385], [0.297,-0.489], [0.296,-0.598], [0.295,-0.710], [0.295,-0.829], [0.292,-0.931], [0.289,-1.041], [0.286,-1.126], [0.281,-1.254], [0.281,-1.356], [0.279,-1.466], [0.272,-1.602], [0.323,-1.602], [0.374,-1.601], [0.423,-1.594], [0.474,-1.551], [0.510,-1.509], [0.542,-1.466], [0.550,-1.381], [0.542,-1.296], [0.533,-1.211], [0.522,-1.126], [0.508,-1.041], [0.491,-0.956], [0.468,-0.888], [0.442,-0.846], [0.383,-0.752], [0.420,-0.769], [0.468,-0.803], [0.510,-0.829], [0.567,-0.812], [0.639,-0.803], [0.723,-0.795], [0.807,-0.786],  ],\n  'g*' : [ [0.068,-0.157], [0.136,-0.166], [0.204,-0.174], [0.272,-0.183], [0.340,-0.174], [0.391,-0.179], [0.448,-0.175], [0.480,-0.149], [0.525,-0.132], [0.576,-0.115], [0.627,-0.098], [0.678,-0.086], [0.730,-0.089], [0.748,-0.123], [0.745,-0.191], [0.741,-0.259], [0.738,-0.327], [0.734,-0.395], [0.731,-0.463], [0.728,-0.531], [0.724,-0.599], [0.721,-0.667], [0.717,-0.735], [0.663,-0.761], [0.610,-0.786], [0.525,-0.812], [0.457,-0.824], [0.374,-0.812], [0.304,-0.786], [0.247,-0.754], [0.202,-0.676], [0.181,-0.592], [0.177,-0.548], [0.197,-0.506], [0.231,-0.458], [0.247,-0.430], [0.281,-0.384], [0.314,-0.337], [0.347,-0.291], [0.374,-0.251], [0.406,-0.217], [0.448,-0.175], [0.480,-0.149], [0.525,-0.132], [0.576,-0.115], [0.627,-0.098], [0.678,-0.086], [0.730,-0.089], [0.748,-0.123], [0.745,-0.191], [0.741,-0.259], [0.738,-0.327], [0.734,-0.395], [0.731,-0.463], [0.728,-0.531], [0.724,-0.599], [0.721,-0.667], [0.717,-0.735], [0.714,-0.803], [0.711,-0.871], [0.707,-0.939], [0.704,-1.007], [0.700,-1.075], [0.697,-1.143], [0.694,-1.211], [0.690,-1.279], [0.687,-1.347], [0.683,-1.415], [0.680,-1.484], [0.677,-1.551], [0.673,-1.619], [0.612,-1.615], [0.544,-1.608], [0.493,-1.598], [0.442,-1.568], [0.391,-1.526], [0.340,-1.466], [0.306,-1.398], [0.289,-1.347], [0.272,-1.279], [0.281,-1.228], [0.306,-1.186], [0.347,-1.125], [0.377,-1.084], [0.414,-1.041], [0.474,-0.990], [0.542,-0.948], [0.593,-0.914], [0.647,-0.871], [0.720,-0.829], [0.796,-0.820], [0.884,-0.812], [0.969,-0.803], [1.054,-0.786],  ],\n  'h*' : [ [0.068,-0.174], [0.136,-0.200], [0.204,-0.217], [0.272,-0.225], [0.323,-0.217], [0.303,-0.276], [0.326,-0.242], [0.349,-0.200], [0.383,-0.155], [0.432,-0.083], [0.483,-0.038], [0.508,0.013], [0.549,0.064], [0.575,0.131], [0.602,0.202], [0.617,0.249], [0.641,0.297], [0.651,0.370], [0.660,0.438], [0.662,0.523], [0.651,0.616], [0.641,0.693], [0.599,0.742], [0.542,0.769], [0.483,0.769], [0.406,0.738], [0.355,0.702], [0.321,0.636], [0.295,0.511], [0.295,0.425], [0.295,0.339], [0.295,0.227], [0.295,0.114], [0.295,0.001], [0.295,-0.111], [0.295,-0.224], [0.295,-0.336], [0.295,-0.449], [0.295,-0.561], [0.295,-0.674], [0.295,-0.786], [0.299,-0.674], [0.302,-0.561], [0.329,-0.514], [0.368,-0.447], [0.392,-0.386], [0.420,-0.307], [0.447,-0.255], [0.475,-0.185], [0.507,-0.149], [0.564,-0.132], [0.625,-0.123], [0.678,-0.132], [0.743,-0.166], [0.767,-0.229], [0.760,-0.307], [0.755,-0.375], [0.748,-0.453], [0.748,-0.533], [0.761,-0.623], [0.786,-0.717], [0.845,-0.766], [0.920,-0.794], [1.005,-0.786],  ],\n  'i*' : [ [0.051,-0.166], [0.084,-0.167], [0.118,-0.160], [0.154,-0.143], [0.192,-0.084], [0.233,-0.026], [0.227,-0.136], [0.224,-0.195], [0.218,-0.280], [0.216,-0.365], [0.216,-0.425], [0.216,-0.501], [0.216,-0.544], [0.214,-0.629], [0.219,-0.706], [0.241,-0.759], [0.271,-0.806], [0.347,-0.827], [0.431,-0.803],  ],\n  'j*' : [ [0.034,-0.155], [0.061,-0.162], [0.095,-0.166], [0.129,-0.174], [0.163,-0.157], [0.197,-0.140], [0.231,-0.115], [0.265,-0.089], [0.299,-0.072], [0.316,-0.055], [0.333,-0.050], [0.357,-0.038], [0.383,-0.049], [0.383,-0.099], [0.383,-0.167], [0.383,-0.276], [0.383,-0.395], [0.383,-0.513], [0.383,-0.632], [0.383,-0.751], [0.383,-0.869], [0.383,-0.988], [0.383,-1.107], [0.383,-1.225], [0.383,-1.344], [0.368,-1.405], [0.349,-1.466], [0.326,-1.514], [0.296,-1.530], [0.255,-1.534], [0.218,-1.518], [0.196,-1.496], [0.172,-1.406], [0.162,-1.296], [0.159,-1.211], [0.173,-1.126], [0.196,-1.053], [0.218,-1.005], [0.241,-0.957], [0.263,-0.909], [0.286,-0.861], [0.301,-0.837], [0.328,-0.808], [0.356,-0.780], [0.384,-0.753], [0.408,-0.742], [0.439,-0.734], [0.473,-0.733], [0.509,-0.750], [0.552,-0.767], [0.595,-0.786],  ],\n  'k*' : [ [0.043,-0.166], [0.085,-0.191], [0.119,-0.208], [0.153,-0.251], [0.187,-0.276], [0.221,-0.276], [0.272,-0.259], [0.323,-0.234], [0.337,-0.305], [0.384,-0.226], [0.431,-0.147], [0.479,-0.069], [0.526,0.010], [0.555,0.056], [0.584,0.103], [0.605,0.149], [0.622,0.195], [0.659,0.261], [0.677,0.309], [0.695,0.356], [0.713,0.404], [0.732,0.451], [0.750,0.499], [0.765,0.565], [0.771,0.635], [0.737,0.676], [0.695,0.684], [0.654,0.684], [0.603,0.684], [0.552,0.676], [0.501,0.659], [0.451,0.612], [0.400,0.562], [0.357,0.466], [0.340,0.369], [0.340,0.273], [0.340,0.176], [0.340,0.079], [0.340,0.010], [0.340,-0.066], [0.340,-0.143], [0.340,-0.219], [0.340,-0.296], [0.340,-0.372], [0.340,-0.449], [0.340,-0.525], [0.340,-0.601], [0.340,-0.678], [0.340,-0.754], [0.340,-0.847], [0.340,-0.754], [0.340,-0.678], [0.340,-0.601], [0.340,-0.525], [0.340,-0.449], [0.354,-0.372], [0.397,-0.361], [0.465,-0.353], [0.533,-0.344], [0.618,-0.327], [0.686,-0.302], [0.754,-0.276], [0.797,-0.234], [0.822,-0.198], [0.812,-0.140], [0.788,-0.089], [0.758,-0.059], [0.720,-0.032], [0.652,-0.055], [0.601,-0.106], [0.516,-0.191], [0.465,-0.276], [0.431,-0.336], [0.383,-0.378], [0.414,-0.421], [0.455,-0.453], [0.489,-0.500], [0.522,-0.546], [0.554,-0.592], [0.577,-0.639], [0.591,-0.662], [0.622,-0.708], [0.655,-0.754], [0.688,-0.801], [0.729,-0.846], [0.771,-0.871], [0.814,-0.863], [0.856,-0.846], [0.899,-0.829], [0.941,-0.812], [0.971,-0.803], [1.011,-0.786], [1.065,-0.786], [1.105,-0.786],  ],\n  'l*' : [ [0.031,-0.157], [0.054,-0.174], [0.088,-0.191], [0.122,-0.234], [0.156,-0.276], [0.207,-0.302], [0.241,-0.319], [0.284,-0.327], [0.306,-0.332], [0.340,-0.286], [0.377,-0.238], [0.403,-0.191], [0.435,-0.115], [0.459,-0.055], [0.483,0.013], [0.501,0.056], [0.510,0.095], [0.524,0.140], [0.534,0.190], [0.548,0.237], [0.554,0.284], [0.566,0.351], [0.578,0.404], [0.585,0.480], [0.594,0.566], [0.595,0.613], [0.585,0.682], [0.550,0.734], [0.515,0.771], [0.480,0.782], [0.451,0.786], [0.400,0.781], [0.347,0.767], [0.324,0.719], [0.315,0.672], [0.308,0.632], [0.304,0.574], [0.304,0.488], [0.304,0.401], [0.304,0.314], [0.304,0.227], [0.304,0.141], [0.304,0.054], [0.304,-0.033], [0.304,-0.119], [0.303,-0.206], [0.303,-0.293], [0.303,-0.380], [0.303,-0.466], [0.303,-0.553], [0.303,-0.640], [0.311,-0.702], [0.343,-0.752], [0.383,-0.778], [0.434,-0.784], [0.483,-0.807], [0.538,-0.821], [0.603,-0.803], [0.677,-0.795], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  'm*' : [ [0.034,-0.149], [0.085,-0.140], [0.136,-0.140], [0.187,-0.132], [0.238,-0.123], [0.272,-0.106], [0.315,-0.072], [0.349,-0.055], [0.394,-0.059], [0.410,-0.083], [0.414,-0.103], [0.419,-0.154], [0.424,-0.205], [0.430,-0.256], [0.435,-0.307], [0.440,-0.358], [0.431,-0.402], [0.421,-0.447], [0.411,-0.491], [0.402,-0.535], [0.392,-0.579], [0.382,-0.624], [0.373,-0.668], [0.363,-0.712], [0.353,-0.756], [0.344,-0.801], [0.353,-0.756], [0.363,-0.712], [0.373,-0.668], [0.382,-0.624], [0.392,-0.579], [0.402,-0.535], [0.411,-0.491], [0.421,-0.447], [0.431,-0.402], [0.440,-0.358], [0.460,-0.314], [0.488,-0.276], [0.510,-0.245], [0.527,-0.222], [0.543,-0.198], [0.560,-0.175], [0.577,-0.152], [0.593,-0.129], [0.627,-0.089], [0.661,-0.064], [0.711,-0.044], [0.760,-0.036], [0.776,-0.059], [0.793,-0.083], [0.810,-0.106], [0.820,-0.143], [0.830,-0.180], [0.840,-0.217], [0.850,-0.254], [0.859,-0.291], [0.848,-0.340], [0.836,-0.388], [0.825,-0.437], [0.813,-0.486], [0.801,-0.534], [0.790,-0.583], [0.778,-0.632], [0.766,-0.680], [0.755,-0.729], [0.754,-0.777], [0.755,-0.729], [0.766,-0.680], [0.778,-0.632], [0.790,-0.583], [0.801,-0.534], [0.813,-0.486], [0.825,-0.437], [0.836,-0.388], [0.848,-0.340], [0.859,-0.291], [0.876,-0.268], [0.901,-0.234], [0.926,-0.198], [0.943,-0.175], [0.961,-0.140], [0.993,-0.106], [1.009,-0.083], [1.035,-0.059], [1.103,-0.038], [1.176,-0.059], [1.209,-0.106], [1.225,-0.129], [1.242,-0.175], [1.234,-0.224], [1.225,-0.272], [1.217,-0.320], [1.209,-0.369], [1.200,-0.417], [1.192,-0.466], [1.184,-0.514], [1.176,-0.562], [1.167,-0.611], [1.159,-0.659], [1.159,-0.708], [1.192,-0.754], [1.209,-0.777], [1.241,-0.803], [1.325,-0.812], [1.375,-0.812], [1.422,-0.803], [1.475,-0.799], [1.564,-0.795], [1.649,-0.786],  ],\n  'n*' : [ [0.051,-0.132], [0.102,-0.115], [0.153,-0.098], [0.204,-0.047], [0.238,-0.004], [0.264,0.021], [0.291,0.038], [0.332,0.064], [0.374,0.038], [0.400,-0.013], [0.414,-0.059], [0.423,-0.106], [0.431,-0.149], [0.435,-0.198], [0.430,-0.254], [0.430,-0.310], [0.430,-0.365], [0.430,-0.421], [0.430,-0.476], [0.430,-0.532], [0.430,-0.588], [0.430,-0.643], [0.430,-0.699], [0.430,-0.754], [0.430,-0.699], [0.430,-0.643], [0.430,-0.588], [0.430,-0.532], [0.430,-0.476], [0.430,-0.421], [0.430,-0.365], [0.430,-0.310], [0.430,-0.254], [0.459,-0.242], [0.485,-0.217], [0.508,-0.198], [0.525,-0.175], [0.542,-0.152], [0.558,-0.129], [0.587,-0.098], [0.620,-0.059], [0.656,-0.013], [0.691,0.010], [0.741,0.010], [0.774,-0.013], [0.791,-0.036], [0.808,-0.059], [0.816,-0.106], [0.825,-0.149], [0.825,-0.234], [0.825,-0.293], [0.825,-0.361], [0.825,-0.421], [0.825,-0.480], [0.825,-0.523], [0.825,-0.574], [0.825,-0.616], [0.825,-0.662], [0.825,-0.708], [0.833,-0.761], [0.865,-0.812], [0.924,-0.820], [0.967,-0.812], [1.024,-0.786], [1.088,-0.786],  ],\n  'o*' : [ [0.051,-0.170], [0.102,-0.174], [0.153,-0.166], [0.204,-0.157], [0.255,-0.149], [0.306,-0.140], [0.346,-0.152], [0.363,-0.129], [0.380,-0.106], [0.396,-0.083], [0.431,-0.072], [0.474,-0.055], [0.533,-0.055], [0.576,-0.072], [0.596,-0.083], [0.618,-0.106], [0.634,-0.123], [0.646,-0.149], [0.663,-0.175], [0.669,-0.224], [0.668,-0.272], [0.673,-0.320], [0.671,-0.368], [0.665,-0.417], [0.660,-0.465], [0.651,-0.513], [0.637,-0.562], [0.620,-0.610], [0.603,-0.658], [0.592,-0.701], [0.570,-0.752], [0.544,-0.795], [0.501,-0.829], [0.459,-0.846], [0.408,-0.854], [0.346,-0.842], [0.321,-0.820], [0.296,-0.791], [0.263,-0.754], [0.247,-0.731], [0.230,-0.708], [0.213,-0.685], [0.202,-0.659], [0.185,-0.616], [0.168,-0.574], [0.156,-0.531], [0.163,-0.480], [0.187,-0.430], [0.205,-0.395], [0.216,-0.361], [0.238,-0.319], [0.263,-0.268], [0.280,-0.245], [0.295,-0.222], [0.321,-0.183], [0.346,-0.152], [0.363,-0.129], [0.380,-0.106], [0.396,-0.083], [0.431,-0.072], [0.473,-0.106], [0.493,-0.149], [0.518,-0.183], [0.544,-0.200], [0.578,-0.217], [0.612,-0.225], [0.646,-0.225], [0.680,-0.225], [0.714,-0.225], [0.748,-0.221], [0.782,-0.217], [0.816,-0.208], [0.850,-0.191], [0.884,-0.174], [0.918,-0.149],  ],\n  'p*' : [ [0.043,-0.153], [0.085,-0.157], [0.136,-0.157], [0.187,-0.157], [0.238,-0.140], [0.279,-0.136], [0.287,-0.215], [0.285,-0.323], [0.283,-0.431], [0.282,-0.539], [0.280,-0.646], [0.278,-0.754], [0.276,-0.862], [0.274,-0.970], [0.272,-1.078], [0.270,-1.186], [0.268,-1.294], [0.267,-1.402], [0.265,-1.510], [0.267,-1.402], [0.268,-1.294], [0.270,-1.186], [0.272,-1.078], [0.274,-0.970], [0.276,-0.862], [0.278,-0.754], [0.280,-0.646], [0.282,-0.539], [0.283,-0.431], [0.285,-0.323], [0.287,-0.215], [0.289,-0.107], [0.279,-0.136], [0.322,-0.091], [0.353,-0.048], [0.393,-0.020], [0.425,-0.002], [0.449,0.007], [0.479,0.017], [0.525,0.010], [0.577,-0.011], [0.624,-0.077], [0.637,-0.104], [0.668,-0.170], [0.686,-0.282], [0.686,-0.357], [0.689,-0.469], [0.675,-0.538], [0.663,-0.616], [0.641,-0.654], [0.606,-0.694], [0.566,-0.714], [0.504,-0.754], [0.446,-0.747], [0.391,-0.744], [0.340,-0.727], [0.391,-0.744], [0.446,-0.747], [0.504,-0.754], [0.540,-0.748], [0.593,-0.763], [0.678,-0.777], [0.729,-0.783], [0.793,-0.803], [0.850,-0.803], [0.911,-0.795], [0.969,-0.786],  ],\n  'q*' : [ [0.051,-0.153], [0.102,-0.157], [0.153,-0.162], [0.204,-0.166], [0.255,-0.183], [0.306,-0.200], [0.357,-0.191], [0.408,-0.183], [0.459,-0.166], [0.514,-0.149], [0.559,-0.132], [0.610,-0.115], [0.661,-0.098], [0.712,-0.086], [0.764,-0.089], [0.782,-0.123], [0.779,-0.191], [0.775,-0.259], [0.772,-0.327], [0.768,-0.395], [0.765,-0.463], [0.762,-0.531], [0.758,-0.599], [0.755,-0.667], [0.751,-0.735], [0.697,-0.761], [0.644,-0.786], [0.559,-0.812], [0.491,-0.824], [0.408,-0.812], [0.338,-0.786], [0.281,-0.754], [0.236,-0.676], [0.215,-0.592], [0.207,-0.548], [0.231,-0.506], [0.265,-0.458], [0.281,-0.430], [0.315,-0.384], [0.348,-0.337], [0.381,-0.291], [0.408,-0.251], [0.440,-0.217], [0.482,-0.175], [0.514,-0.149], [0.559,-0.132], [0.610,-0.115], [0.661,-0.098], [0.712,-0.086], [0.764,-0.089], [0.782,-0.123], [0.779,-0.191], [0.775,-0.259], [0.772,-0.327], [0.768,-0.395], [0.765,-0.463], [0.762,-0.531], [0.758,-0.599], [0.755,-0.667], [0.751,-0.735], [0.748,-0.803], [0.745,-0.871], [0.741,-0.939], [0.738,-1.007], [0.734,-1.075], [0.731,-1.143], [0.728,-1.211], [0.724,-1.279], [0.721,-1.347], [0.717,-1.415], [0.714,-1.484], [0.711,-1.551], [0.707,-1.619], [0.748,-1.615], [0.799,-1.608], [0.833,-1.598], [0.867,-1.568], [0.901,-1.526], [0.935,-1.466], [0.969,-1.398], [0.986,-1.347], [0.995,-1.279], [0.986,-1.228], [0.969,-1.186], [0.935,-1.125], [0.901,-1.084], [0.867,-1.041], [0.833,-0.990], [0.799,-0.948], [0.782,-0.914], [0.782,-0.854], [0.830,-0.829], [0.884,-0.812], [0.935,-0.803], [0.986,-0.799], [1.020,-0.795], [1.105,-0.791], [1.207,-0.786],  ],\n  'r*' : [ [0.085,-0.174], [0.170,-0.183], [0.170,-0.064], [0.255,-0.064], [0.340,-0.064], [0.425,-0.064], [0.510,-0.064], [0.510,-0.149], [0.501,-0.234], [0.493,-0.319], [0.476,-0.404], [0.459,-0.489], [0.451,-0.574], [0.476,-0.659], [0.510,-0.701], [0.578,-0.744], [0.663,-0.769], [0.765,-0.786],  ],\n  's*' : [ [0.085,-0.149], [0.170,-0.157], [0.221,-0.174], [0.272,-0.200], [0.323,-0.234], [0.374,-0.234], [0.425,-0.225], [0.476,-0.217], [0.527,-0.200], [0.561,-0.191], [0.603,-0.166], [0.663,-0.145], [0.748,-0.119], [0.819,-0.106], [0.820,-0.174], [0.830,-0.222], [0.842,-0.289], [0.855,-0.353], [0.867,-0.402], [0.867,-0.446], [0.867,-0.490], [0.859,-0.534], [0.850,-0.578], [0.842,-0.622], [0.825,-0.666], [0.782,-0.710], [0.657,-0.769], [0.611,-0.757], [0.547,-0.735], [0.497,-0.684], [0.447,-0.616], [0.397,-0.531], [0.354,-0.446], [0.332,-0.361], [0.323,-0.276], [0.332,-0.361], [0.354,-0.446], [0.397,-0.531], [0.447,-0.616], [0.497,-0.684], [0.547,-0.735], [0.611,-0.757], [0.657,-0.769], [0.700,-0.786], [0.742,-0.795], [0.785,-0.803], [0.850,-0.812], [0.935,-0.803], [1.020,-0.795], [1.105,-0.786],  ],\n  't*' : [ [0.085,-0.191], [0.170,-0.234], [0.255,-0.276], [0.340,-0.259], [0.425,-0.191], [0.510,-0.106], [0.558,0.008], [0.573,0.161], [0.588,0.314], [0.552,0.314], [0.522,0.314], [0.467,0.314], [0.411,0.314], [0.340,0.314], [0.255,0.314], [0.170,0.314], [0.255,0.314], [0.340,0.314], [0.411,0.314], [0.467,0.314], [0.522,0.314], [0.552,0.314], [0.633,0.314], [0.688,0.314], [0.729,0.314], [0.784,0.314], [0.840,0.314], [0.895,0.314], [0.978,0.314], [1.062,0.314], [0.978,0.314], [0.895,0.314], [0.840,0.314], [0.784,0.314], [0.729,0.314], [0.688,0.314], [0.633,0.314], [0.588,0.314], [0.602,0.467], [0.617,0.621], [0.632,0.774], [0.632,0.621], [0.632,0.467], [0.632,0.314], [0.632,0.161], [0.632,0.008], [0.632,-0.146], [0.632,-0.299], [0.632,-0.452], [0.632,-0.605], [0.632,-0.759], [0.659,-0.805], [0.720,-0.816], [0.807,-0.799], [0.894,-0.791], [0.978,-0.786], [1.062,-0.786], [1.147,-0.786], [1.232,-0.786],  ],\n  'u*' : [ [0.043,-0.157], [0.085,-0.166], [0.128,-0.157], [0.162,-0.157], [0.196,-0.140], [0.230,-0.106], [0.272,-0.081], [0.306,-0.055], [0.344,-0.048], [0.338,-0.097], [0.332,-0.146], [0.325,-0.195], [0.319,-0.245], [0.312,-0.294], [0.306,-0.343], [0.299,-0.392], [0.293,-0.442], [0.286,-0.491], [0.280,-0.540], [0.273,-0.589], [0.267,-0.639], [0.260,-0.688], [0.254,-0.737], [0.260,-0.786], [0.289,-0.803], [0.332,-0.812], [0.383,-0.803], [0.425,-0.795], [0.461,-0.778], [0.501,-0.761], [0.544,-0.744], [0.583,-0.727], [0.616,-0.710], [0.646,-0.684], [0.671,-0.650], [0.682,-0.605], [0.686,-0.558], [0.689,-0.511], [0.693,-0.464], [0.697,-0.416], [0.700,-0.369], [0.704,-0.322], [0.708,-0.275], [0.711,-0.228], [0.715,-0.180], [0.719,-0.133], [0.723,-0.074], [0.726,-0.023], [0.723,-0.074], [0.719,-0.133], [0.715,-0.180], [0.711,-0.228], [0.708,-0.275], [0.704,-0.322], [0.700,-0.369], [0.697,-0.416], [0.693,-0.464], [0.712,-0.529], [0.719,-0.582], [0.731,-0.633], [0.748,-0.684], [0.756,-0.735], [0.790,-0.786], [0.845,-0.803], [0.901,-0.803], [0.944,-0.795], [1.020,-0.786],  ],\n  'v*' : [ [0.051,-0.157], [0.102,-0.140], [0.136,-0.123], [0.162,-0.098], [0.187,-0.081], [0.211,-0.055], [0.243,-0.054], [0.268,-0.076], [0.289,-0.097], [0.301,-0.134], [0.311,-0.176], [0.321,-0.212], [0.322,-0.244], [0.318,-0.280], [0.316,-0.321], [0.314,-0.363], [0.311,-0.404], [0.309,-0.446], [0.306,-0.487], [0.304,-0.528], [0.301,-0.570], [0.299,-0.611], [0.306,-0.657], [0.322,-0.707], [0.338,-0.749], [0.367,-0.790], [0.406,-0.814], [0.448,-0.793], [0.487,-0.766], [0.502,-0.723], [0.516,-0.680], [0.531,-0.637], [0.546,-0.594], [0.550,-0.547], [0.566,-0.502], [0.572,-0.450], [0.582,-0.408], [0.593,-0.331], [0.604,-0.255], [0.616,-0.179], [0.627,-0.102], [0.699,-0.110], [0.773,-0.130], [0.828,-0.143], [0.871,-0.149],  ],\n  'w*' : [ [0.051,-0.128], [0.102,-0.115], [0.153,-0.081], [0.187,-0.064], [0.225,-0.041], [0.220,-0.126], [0.216,-0.210], [0.212,-0.294], [0.207,-0.379], [0.203,-0.463], [0.206,-0.517], [0.215,-0.602], [0.223,-0.670], [0.254,-0.738], [0.297,-0.783], [0.359,-0.799], [0.429,-0.776], [0.453,-0.728], [0.476,-0.680], [0.500,-0.632], [0.519,-0.585], [0.537,-0.537], [0.553,-0.490], [0.568,-0.442], [0.575,-0.358], [0.583,-0.274], [0.590,-0.190], [0.598,-0.105], [0.605,-0.064], [0.617,-0.120], [0.629,-0.219], [0.641,-0.317], [0.653,-0.416], [0.665,-0.515], [0.676,-0.614], [0.688,-0.712], [0.731,-0.780], [0.775,-0.786], [0.816,-0.775], [0.852,-0.723], [0.878,-0.682], [0.901,-0.634], [0.925,-0.587], [0.937,-0.530], [0.949,-0.448], [0.955,-0.403], [0.965,-0.314], [0.976,-0.224], [0.986,-0.135], [0.997,-0.064], [1.052,-0.072], [1.108,-0.089], [1.162,-0.106], [1.220,-0.149],  ],\n  'x*' : [ [0.043,-0.106], [0.085,-0.064], [0.128,-0.004], [0.196,0.021], [0.232,-0.046], [0.269,-0.114], [0.306,-0.181], [0.343,-0.248], [0.380,-0.315], [0.417,-0.383], [0.445,-0.429], [0.430,-0.452], [0.388,-0.506], [0.346,-0.560], [0.304,-0.614], [0.262,-0.667], [0.220,-0.721], [0.170,-0.786], [0.220,-0.721], [0.262,-0.667], [0.304,-0.614], [0.346,-0.560], [0.388,-0.506], [0.430,-0.452], [0.471,-0.398], [0.522,-0.337], [0.555,-0.291], [0.597,-0.237], [0.639,-0.183], [0.681,-0.129], [0.723,-0.075], [0.765,-0.021], [0.799,0.021], [0.765,-0.021], [0.723,-0.075], [0.681,-0.129], [0.639,-0.183], [0.597,-0.237], [0.555,-0.291], [0.522,-0.337], [0.471,-0.398], [0.445,-0.429], [0.491,-0.517], [0.528,-0.585], [0.565,-0.652], [0.602,-0.719], [0.639,-0.786], [0.680,-0.824], [0.718,-0.830], [0.763,-0.846], [0.799,-0.842], [0.834,-0.837], [0.863,-0.820], [0.901,-0.808], [0.935,-0.795], [0.986,-0.786],  ],\n  'y*' : [ [0.043,-0.157], [0.085,-0.166], [0.128,-0.157], [0.162,-0.157], [0.196,-0.149], [0.230,-0.140], [0.264,-0.123], [0.306,-0.123], [0.340,-0.123], [0.379,-0.138], [0.397,-0.161], [0.405,-0.198], [0.399,-0.241], [0.394,-0.279], [0.378,-0.358], [0.363,-0.437], [0.347,-0.515], [0.332,-0.594], [0.317,-0.672], [0.315,-0.735], [0.325,-0.788], [0.343,-0.811], [0.361,-0.834], [0.379,-0.857], [0.402,-0.878], [0.428,-0.895], [0.462,-0.902], [0.496,-0.902], [0.566,-0.893], [0.632,-0.857], [0.663,-0.823], [0.737,-0.745], [0.743,-0.674], [0.750,-0.603], [0.757,-0.533], [0.764,-0.462], [0.771,-0.391], [0.778,-0.320], [0.785,-0.249], [0.791,-0.179], [0.799,-0.132], [0.791,-0.179], [0.785,-0.249], [0.778,-0.320], [0.771,-0.391], [0.764,-0.462], [0.757,-0.533], [0.750,-0.603], [0.743,-0.674], [0.737,-0.745], [0.730,-0.816], [0.723,-0.887], [0.716,-0.957], [0.709,-1.028], [0.702,-1.099], [0.695,-1.170], [0.689,-1.241], [0.682,-1.311], [0.675,-1.382], [0.668,-1.453], [0.661,-1.524], [0.631,-1.571], [0.580,-1.584], [0.513,-1.593], [0.446,-1.601], [0.383,-1.593], [0.336,-1.576], [0.318,-1.553], [0.300,-1.530], [0.281,-1.507], [0.265,-1.476], [0.260,-1.438], [0.267,-1.387], [0.291,-1.348], [0.304,-1.314], [0.327,-1.275], [0.342,-1.241], [0.360,-1.205], [0.375,-1.181], [0.390,-1.158], [0.405,-1.134], [0.420,-1.111], [0.435,-1.087], [0.450,-1.064], [0.491,-1.038], [0.541,-1.012], [0.590,-0.986], [0.639,-0.959], [0.777,-0.897], [0.832,-0.858], [0.888,-0.827], [0.944,-0.809], [1.001,-0.791], [1.052,-0.786],  ],\n  'z*' : [ [0.043,-0.157], [0.085,-0.166], [0.136,-0.174], [0.187,-0.174], [0.238,-0.174], [0.289,-0.174], [0.340,-0.157], [0.374,-0.140], [0.406,-0.115], [0.431,-0.083], [0.464,-0.047], [0.491,-0.030], [0.530,-0.036], [0.564,-0.059], [0.595,-0.083], [0.612,-0.106], [0.629,-0.149], [0.623,-0.191], [0.614,-0.245], [0.593,-0.319], [0.567,-0.386], [0.530,-0.453], [0.497,-0.500], [0.457,-0.574], [0.414,-0.639], [0.381,-0.685], [0.364,-0.708], [0.314,-0.777], [0.298,-0.801], [0.314,-0.777], [0.364,-0.708], [0.381,-0.685], [0.414,-0.639], [0.464,-0.639], [0.491,-0.667], [0.514,-0.708], [0.530,-0.731], [0.557,-0.769], [0.580,-0.824], [0.584,-0.847], [0.580,-0.870], [0.580,-0.916], [0.580,-0.963], [0.567,-1.084], [0.542,-1.169], [0.517,-1.243], [0.497,-1.287], [0.481,-1.310], [0.447,-1.380], [0.431,-1.403], [0.408,-1.432], [0.374,-1.495], [0.347,-1.519], [0.316,-1.534], [0.281,-1.519], [0.264,-1.495], [0.219,-1.441], [0.198,-1.403], [0.185,-1.356], [0.198,-1.310], [0.218,-1.267], [0.248,-1.218], [0.264,-1.194], [0.281,-1.171], [0.298,-1.148], [0.314,-1.125], [0.331,-1.102], [0.347,-1.079], [0.364,-1.055], [0.381,-1.032], [0.416,-1.002], [0.451,-0.965], [0.486,-0.931], [0.520,-0.897], [0.555,-0.871], [0.590,-0.846], [0.625,-0.829], [0.660,-0.812], [0.695,-0.803], [0.730,-0.791], [0.765,-0.786], [0.816,-0.778], [0.867,-0.778], [0.918,-0.786],  ],\n  ',' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.357,-0.701], [0.391,-0.616], [0.459,-0.701], [0.476,-0.786], [0.493,-0.871], [0.493,-0.956], [0.459,-1.041], [0.425,-1.126], [0.357,-1.211], [0.255,-1.296], [0.357,-1.211], [0.425,-1.126], [0.459,-1.041], [0.493,-0.956], [0.493,-0.871], [0.476,-0.786], [0.459,-0.701], [0.391,-0.616], [0.459,-0.701], [0.476,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786],  ],\n  '?' : [ [0.085,-0.786], [0.170,-0.786], [0.272,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.786], [0.425,-0.701], [0.425,-0.616], [0.425,-0.531], [0.425,-0.446], [0.425,-0.361], [0.425,-0.276], [0.425,-0.191], [0.425,-0.064], [0.527,-0.038], [0.586,-0.021], [0.640,0.004], [0.697,0.080], [0.734,0.149], [0.749,0.252], [0.748,0.387], [0.741,0.516], [0.726,0.600], [0.712,0.659], [0.672,0.740], [0.641,0.777], [0.586,0.786], [0.537,0.794], [0.485,0.786], [0.412,0.744], [0.340,0.701], [0.213,0.616], [0.340,0.701], [0.412,0.744], [0.485,0.786], [0.537,0.794], [0.586,0.786], [0.641,0.777], [0.672,0.740], [0.712,0.659], [0.726,0.600], [0.741,0.516], [0.748,0.387], [0.749,0.252], [0.734,0.149], [0.697,0.080], [0.640,0.004], [0.586,-0.021], [0.527,-0.038], [0.425,-0.064], [0.425,-0.191], [0.425,-0.276], [0.425,-0.361], [0.425,-0.446], [0.425,-0.531], [0.425,-0.616], [0.425,-0.701], [0.425,-0.786], [0.612,-0.786], [0.561,-0.659], [0.425,-0.574], [0.289,-0.659], [0.238,-0.786], [0.289,-0.914], [0.425,-0.999], [0.561,-0.914], [0.612,-0.786], [0.425,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '&' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.786], [0.344,-0.778], [0.425,-0.774], [0.501,-0.774], [0.630,-0.761], [0.731,-0.748], [0.816,-0.684], [0.901,-0.574], [0.969,-0.506], [1.020,-0.440], [1.105,-0.319], [1.207,-0.191], [1.105,-0.319], [1.020,-0.440], [0.969,-0.506], [0.901,-0.574], [0.816,-0.684], [0.731,-0.748], [0.630,-0.761], [0.501,-0.774], [0.425,-0.774], [0.344,-0.778], [0.298,-0.718], [0.272,-0.676], [0.255,-0.599], [0.247,-0.497], [0.255,-0.327], [0.306,-0.191], [0.408,-0.064], [0.493,0.004], [0.544,0.047], [0.663,0.089], [0.756,0.154], [0.799,0.234], [0.842,0.335], [0.875,0.429], [0.885,0.520], [0.888,0.614], [0.871,0.690], [0.837,0.749], [0.790,0.777], [0.706,0.786], [0.637,0.786], [0.570,0.777], [0.499,0.760], [0.464,0.734], [0.440,0.681], [0.429,0.605], [0.422,0.548], [0.424,0.463], [0.432,0.404], [0.459,0.306], [0.501,0.174], [0.578,0.064], [0.646,-0.106], [0.714,-0.276], [0.765,-0.446], [0.816,-0.616], [0.867,-0.786], [0.935,-0.829], [1.020,-0.829], [1.097,-0.803], [1.191,-0.786], [1.290,-0.786], [1.385,-0.786], [1.462,-0.786],  ],\n  '$' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-1.041], [0.510,-0.786], [0.510,-0.531], [0.510,-0.276], [0.510,-0.021], [0.510,0.234], [0.510,0.489], [0.510,0.829], [0.544,0.829], [0.544,0.489], [0.544,0.234], [0.544,-0.021], [0.544,-0.276], [0.544,-0.531], [0.544,-0.786], [0.544,-1.041], [0.544,-0.786], [0.652,-0.786], [0.729,-0.778], [0.790,-0.733], [0.829,-0.664], [0.887,-0.560], [0.912,-0.429], [0.904,-0.334], [0.880,-0.267], [0.831,-0.191], [0.774,-0.140], [0.708,-0.140], [0.629,-0.140], [0.544,-0.140], [0.475,-0.140], [0.408,-0.132], [0.340,-0.098], [0.306,-0.072], [0.272,-0.030], [0.221,0.038], [0.187,0.115], [0.170,0.242], [0.187,0.341], [0.238,0.440], [0.289,0.497], [0.349,0.530], [0.425,0.548], [0.510,0.548], [0.592,0.548], [0.680,0.548], [0.765,0.548], [0.850,0.548], [0.765,0.548], [0.680,0.548], [0.592,0.548], [0.510,0.548], [0.425,0.548], [0.349,0.530], [0.289,0.497], [0.238,0.440], [0.187,0.341], [0.170,0.242], [0.187,0.115], [0.221,0.038], [0.272,-0.030], [0.306,-0.072], [0.340,-0.098], [0.408,-0.132], [0.475,-0.140], [0.544,-0.140], [0.629,-0.140], [0.708,-0.140], [0.774,-0.140], [0.831,-0.191], [0.880,-0.267], [0.904,-0.334], [0.912,-0.429], [0.887,-0.560], [0.829,-0.664], [0.790,-0.733], [0.729,-0.778], [0.652,-0.786], [0.510,-0.786], [0.425,-0.786], [0.340,-0.786], [0.255,-0.786], [0.170,-0.786], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '!' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.531], [0.510,-0.276], [0.510,-0.021], [0.510,0.234], [0.510,0.489], [0.510,0.786], [0.510,0.489], [0.510,0.234], [0.510,-0.021], [0.510,-0.276], [0.510,-0.531], [0.510,-0.786], [0.697,-0.786], [0.646,-0.659], [0.510,-0.574], [0.374,-0.659], [0.323,-0.786], [0.374,-0.914], [0.510,-0.999], [0.646,-0.914], [0.697,-0.786], [0.510,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n}\n","export let raysol_sanserif = {\n  ' ' : [ [0.000,-0.786], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '0' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.544,-0.691], [0.629,-0.595], [0.680,-0.500], [0.723,-0.404], [0.765,-0.308], [0.799,-0.213], [0.833,-0.117], [0.840,-0.009], [0.833,0.117], [0.799,0.212], [0.765,0.308], [0.723,0.404], [0.680,0.499], [0.629,0.595], [0.544,0.690], [0.425,0.786], [0.306,0.690], [0.221,0.595], [0.170,0.499], [0.128,0.404], [0.085,0.308], [0.051,0.212], [0.017,0.117], [0.010,-0.009], [0.017,-0.117], [0.051,-0.213], [0.085,-0.308], [0.128,-0.404], [0.170,-0.500], [0.221,-0.595], [0.306,-0.691], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  '1' : [ [0.085,-0.786], [0.085,-0.629], [0.085,-0.472], [0.085,-0.315], [0.085,-0.157], [0.085,-0.000], [0.085,0.157], [0.085,0.314], [0.085,0.472], [0.085,0.629], [0.085,0.786], [0.085,0.629], [0.085,0.472], [0.085,0.314], [0.085,0.157], [0.085,-0.000], [0.085,-0.157], [0.085,-0.315], [0.085,-0.472], [0.085,-0.629], [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  '2' : [ [0.085,-0.786], [0.170,-0.786], [0.085,-0.786], [0.177,-0.599], [0.269,-0.412], [0.360,-0.225], [0.452,-0.038], [0.544,0.149], [0.612,0.276], [0.654,0.404], [0.663,0.531], [0.637,0.616], [0.587,0.701], [0.527,0.752], [0.451,0.782], [0.383,0.786], [0.315,0.782], [0.238,0.752], [0.179,0.701], [0.128,0.616], [0.085,0.531], [0.128,0.616], [0.179,0.701], [0.238,0.752], [0.315,0.782], [0.383,0.786], [0.451,0.782], [0.527,0.752], [0.587,0.701], [0.637,0.616], [0.663,0.531], [0.654,0.404], [0.612,0.276], [0.544,0.149], [0.452,-0.038], [0.360,-0.225], [0.269,-0.412], [0.177,-0.599], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.765,-0.786], [0.850,-0.574], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  '3' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.786], [0.408,-0.782], [0.485,-0.752], [0.544,-0.701], [0.595,-0.616], [0.620,-0.531], [0.612,-0.404], [0.570,-0.276], [0.476,-0.149], [0.340,0.064], [0.255,0.064], [0.340,0.064], [0.501,0.149], [0.570,0.276], [0.612,0.404], [0.620,0.531], [0.595,0.616], [0.544,0.701], [0.485,0.752], [0.408,0.782], [0.340,0.786], [0.272,0.782], [0.196,0.752], [0.136,0.701], [0.085,0.616], [0.043,0.531], [0.085,0.616], [0.136,0.701], [0.196,0.752], [0.272,0.782], [0.340,0.786], [0.408,0.782], [0.485,0.752], [0.544,0.701], [0.595,0.616], [0.620,0.531], [0.612,0.404], [0.570,0.276], [0.501,0.149], [0.340,0.064], [0.255,0.064], [0.340,0.064], [0.476,-0.149], [0.570,-0.276], [0.612,-0.404], [0.620,-0.531], [0.595,-0.616], [0.544,-0.701], [0.485,-0.752], [0.408,-0.782], [0.340,-0.786], [0.272,-0.782], [0.196,-0.752], [0.136,-0.701], [0.085,-0.616], [0.043,-0.531], [0.000,-0.438], [0.043,-0.531], [0.085,-0.616], [0.136,-0.701], [0.196,-0.752], [0.272,-0.782], [0.340,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '4' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.595,-0.616], [0.595,-0.446], [0.595,-0.276], [0.595,-0.106], [0.595,-0.000], [0.510,-0.000], [0.425,-0.000], [0.340,-0.000], [0.255,-0.000], [0.170,-0.000], [0.068,-0.000], [0.085,0.064], [0.085,0.234], [0.085,0.404], [0.085,0.574], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.574], [0.085,0.404], [0.085,0.234], [0.085,0.064], [0.085,-0.000], [0.170,-0.000], [0.255,-0.000], [0.340,-0.000], [0.425,-0.000], [0.510,-0.000], [0.595,-0.000], [0.680,-0.000], [0.807,-0.000], [0.935,-0.000], [0.807,-0.000], [0.680,-0.000], [0.595,-0.000], [0.595,0.064], [0.595,0.234], [0.595,0.404], [0.595,0.574], [0.595,0.744], [0.595,0.786], [0.595,0.744], [0.595,0.574], [0.595,0.404], [0.595,0.234], [0.595,0.064], [0.595,-0.000], [0.595,-0.106], [0.595,-0.276], [0.595,-0.446], [0.595,-0.616], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  '5' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.744], [0.493,-0.740], [0.570,-0.710], [0.629,-0.659], [0.680,-0.574], [0.706,-0.489], [0.714,-0.361], [0.697,-0.191], [0.654,-0.064], [0.561,0.064], [0.425,0.174], [0.272,0.166], [0.136,0.140], [0.153,0.302], [0.170,0.463], [0.187,0.625], [0.204,0.786], [0.289,0.786], [0.374,0.786], [0.459,0.786], [0.544,0.786], [0.680,0.786], [0.799,0.786], [0.680,0.786], [0.544,0.786], [0.459,0.786], [0.374,0.786], [0.289,0.786], [0.204,0.786], [0.187,0.625], [0.170,0.463], [0.153,0.302], [0.136,0.140], [0.272,0.166], [0.425,0.174], [0.561,0.064], [0.654,-0.064], [0.697,-0.191], [0.714,-0.361], [0.706,-0.489], [0.680,-0.574], [0.629,-0.659], [0.570,-0.710], [0.493,-0.740], [0.425,-0.744], [0.357,-0.740], [0.281,-0.710], [0.221,-0.659], [0.170,-0.616], [0.128,-0.548], [0.076,-0.421], [0.128,-0.548], [0.170,-0.616], [0.221,-0.659], [0.281,-0.710], [0.357,-0.740], [0.425,-0.744], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  '6' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.357,-0.744], [0.425,-0.740], [0.501,-0.710], [0.561,-0.659], [0.612,-0.574], [0.637,-0.489], [0.629,-0.361], [0.587,-0.234], [0.510,-0.106], [0.442,-0.038], [0.357,-0.021], [0.272,-0.038], [0.442,-0.038], [0.357,-0.021], [0.272,-0.038], [0.204,-0.106], [0.128,-0.234], [0.085,-0.361], [0.112,-0.247], [0.139,-0.132], [0.167,-0.017], [0.194,0.098], [0.221,0.212], [0.248,0.327], [0.275,0.442], [0.303,0.557], [0.330,0.671], [0.357,0.786], [0.330,0.671], [0.303,0.557], [0.275,0.442], [0.248,0.327], [0.221,0.212], [0.194,0.098], [0.167,-0.017], [0.139,-0.132], [0.112,-0.247], [0.085,-0.361], [0.076,-0.489], [0.102,-0.574], [0.153,-0.659], [0.213,-0.710], [0.289,-0.740], [0.357,-0.744], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '7' : [ [0.085,-0.786], [0.170,-0.786], [0.221,-0.629], [0.272,-0.472], [0.323,-0.315], [0.374,-0.157], [0.425,-0.000], [0.476,0.157], [0.527,0.314], [0.578,0.472], [0.629,0.629], [0.680,0.786], [0.606,0.786], [0.531,0.786], [0.457,0.786], [0.383,0.786], [0.308,0.786], [0.234,0.786], [0.159,0.786], [0.043,0.786], [0.159,0.786], [0.234,0.786], [0.308,0.786], [0.383,0.786], [0.457,0.786], [0.531,0.786], [0.606,0.786], [0.680,0.786], [0.629,0.629], [0.578,0.472], [0.527,0.314], [0.476,0.157], [0.425,-0.000], [0.374,-0.157], [0.323,-0.315], [0.272,-0.472], [0.221,-0.629], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  '8' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.744], [0.408,-0.740], [0.485,-0.710], [0.544,-0.659], [0.595,-0.574], [0.620,-0.489], [0.612,-0.361], [0.570,-0.234], [0.493,-0.106], [0.425,0.021], [0.340,0.021], [0.255,0.021], [0.179,0.149], [0.111,0.276], [0.068,0.404], [0.060,0.531], [0.085,0.616], [0.136,0.701], [0.196,0.752], [0.272,0.782], [0.340,0.786], [0.408,0.782], [0.485,0.752], [0.544,0.701], [0.595,0.616], [0.620,0.531], [0.612,0.404], [0.570,0.276], [0.501,0.149], [0.425,0.021], [0.340,0.021], [0.255,0.021], [0.187,-0.106], [0.111,-0.234], [0.068,-0.361], [0.060,-0.489], [0.085,-0.574], [0.136,-0.659], [0.196,-0.710], [0.272,-0.740], [0.340,-0.744], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '9' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.646,-0.786], [0.646,-0.616], [0.646,-0.446], [0.646,-0.276], [0.646,-0.106], [0.646,0.064], [0.646,0.234], [0.646,0.404], [0.595,0.276], [0.527,0.149], [0.365,0.064], [0.204,0.149], [0.136,0.276], [0.093,0.404], [0.085,0.531], [0.111,0.616], [0.162,0.701], [0.221,0.752], [0.298,0.782], [0.365,0.786], [0.433,0.782], [0.510,0.752], [0.570,0.701], [0.620,0.616], [0.646,0.531], [0.646,0.404], [0.646,0.234], [0.646,0.064], [0.646,-0.106], [0.646,-0.276], [0.646,-0.446], [0.646,-0.616], [0.646,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'A' : [ [0.085,-0.786], [0.128,-0.629], [0.170,-0.472], [0.213,-0.315], [0.255,-0.157], [0.298,-0.000], [0.340,0.157], [0.383,0.314], [0.425,0.472], [0.468,0.629], [0.510,0.786], [0.552,0.629], [0.595,0.472], [0.637,0.314], [0.680,0.157], [0.723,-0.000], [0.765,-0.157], [0.680,-0.157], [0.595,-0.157], [0.510,-0.157], [0.425,-0.157], [0.340,-0.157], [0.255,-0.157], [0.340,-0.157], [0.425,-0.157], [0.510,-0.157], [0.595,-0.157], [0.680,-0.157], [0.765,-0.157], [0.807,-0.315], [0.850,-0.472], [0.892,-0.629], [0.935,-0.786], [1.275,-0.786],  ],\n  'B' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.459,0.777], [0.510,0.752], [0.561,0.701], [0.595,0.667], [0.629,0.616], [0.663,0.531], [0.697,0.446], [0.697,0.404], [0.663,0.319], [0.629,0.234], [0.595,0.183], [0.561,0.149], [0.510,0.098], [0.459,0.072], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.459,0.055], [0.510,0.030], [0.561,-0.021], [0.595,-0.055], [0.629,-0.106], [0.663,-0.191], [0.697,-0.276], [0.714,-0.361], [0.697,-0.446], [0.663,-0.531], [0.629,-0.616], [0.595,-0.667], [0.561,-0.701], [0.510,-0.752], [0.459,-0.778], [0.425,-0.786], [0.357,-0.786], [0.289,-0.786], [0.221,-0.786], [0.153,-0.786], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.561,-0.786], [0.646,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'C' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.442,-0.740], [0.365,-0.710], [0.306,-0.659], [0.255,-0.574], [0.213,-0.489], [0.170,-0.395], [0.136,-0.276], [0.102,-0.132], [0.085,0.021], [0.102,0.174], [0.136,0.319], [0.170,0.438], [0.213,0.531], [0.255,0.616], [0.306,0.701], [0.365,0.752], [0.442,0.782], [0.510,0.786], [0.578,0.782], [0.654,0.752], [0.714,0.701], [0.765,0.616], [0.807,0.531], [0.765,0.616], [0.714,0.701], [0.654,0.752], [0.578,0.782], [0.510,0.786], [0.442,0.782], [0.365,0.752], [0.306,0.701], [0.255,0.616], [0.213,0.531], [0.170,0.438], [0.136,0.319], [0.102,0.174], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.765,-0.574], [0.714,-0.659], [0.654,-0.710], [0.578,-0.740], [0.510,-0.744], [0.510,-0.786], [0.425,-0.786], [0.374,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'D' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.408,-0.740], [0.485,-0.710], [0.544,-0.659], [0.595,-0.574], [0.637,-0.489], [0.680,-0.395], [0.714,-0.276], [0.748,-0.132], [0.765,0.021], [0.748,0.174], [0.714,0.319], [0.680,0.438], [0.637,0.531], [0.595,0.616], [0.544,0.701], [0.485,0.752], [0.408,0.782], [0.340,0.786], [0.272,0.786], [0.196,0.786], [0.136,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'E' : [ [0.085,-0.786], [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.629,0.064], [0.561,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.493,0.786], [0.561,0.786], [0.629,0.786], [0.629,0.701], [0.629,0.531], [0.629,0.701], [0.561,0.786], [0.493,0.786], [0.425,0.786], [0.357,0.786], [0.289,0.786], [0.221,0.786], [0.153,0.786], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.493,-0.786], [0.561,-0.786], [0.629,-0.701], [0.629,-0.531], [0.629,-0.701], [0.629,-0.786], [0.714,-0.786], [1.054,-0.786],  ],\n  'F' : [ [0.085,-0.786], [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.085,0.064], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.493,0.786], [0.561,0.786], [0.629,0.786], [0.561,0.786], [0.493,0.786], [0.425,0.786], [0.357,0.786], [0.289,0.786], [0.221,0.786], [0.153,0.786], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.493,-0.786], [0.561,-0.786], [0.629,-0.786], [0.969,-0.786],  ],\n  'G' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.744], [0.493,-0.740], [0.570,-0.710], [0.629,-0.659], [0.680,-0.574], [0.723,-0.489], [0.765,-0.395], [0.799,-0.276], [0.833,-0.132], [0.850,0.021], [0.765,0.021], [0.680,0.021], [0.595,0.021], [0.510,0.021], [0.425,0.021], [0.510,0.021], [0.595,0.021], [0.680,0.021], [0.765,0.021], [0.850,0.021], [0.833,-0.132], [0.799,-0.276], [0.765,-0.395], [0.723,-0.489], [0.680,-0.574], [0.629,-0.659], [0.570,-0.710], [0.493,-0.740], [0.425,-0.744], [0.357,-0.740], [0.281,-0.710], [0.221,-0.659], [0.170,-0.574], [0.128,-0.489], [0.085,-0.395], [0.051,-0.276], [0.017,-0.132], [0.000,0.021], [0.017,0.174], [0.051,0.319], [0.085,0.438], [0.128,0.531], [0.170,0.616], [0.221,0.701], [0.281,0.752], [0.357,0.782], [0.425,0.786], [0.493,0.782], [0.570,0.752], [0.629,0.701], [0.680,0.616], [0.629,0.701], [0.570,0.752], [0.493,0.782], [0.425,0.786], [0.357,0.782], [0.281,0.752], [0.221,0.701], [0.170,0.616], [0.128,0.531], [0.085,0.438], [0.051,0.319], [0.017,0.174], [0.000,0.021], [0.017,-0.132], [0.051,-0.276], [0.085,-0.395], [0.128,-0.489], [0.170,-0.574], [0.221,-0.659], [0.281,-0.710], [0.357,-0.740], [0.425,-0.744], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'H' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.629,0.064], [0.697,0.064], [0.765,0.064], [0.765,0.149], [0.765,0.234], [0.765,0.319], [0.765,0.404], [0.765,0.489], [0.765,0.574], [0.765,0.659], [0.765,0.744], [0.765,0.786], [0.765,0.744], [0.765,0.659], [0.765,0.574], [0.765,0.489], [0.765,0.404], [0.765,0.319], [0.765,0.234], [0.765,0.149], [0.765,0.064], [0.697,0.064], [0.629,0.064], [0.561,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.629,0.064], [0.697,0.064], [0.765,0.064], [0.765,-0.021], [0.765,-0.106], [0.765,-0.191], [0.765,-0.276], [0.765,-0.361], [0.765,-0.446], [0.765,-0.531], [0.765,-0.616], [0.765,-0.701], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'I' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.701], [0.340,-0.616], [0.340,-0.531], [0.340,-0.446], [0.340,-0.361], [0.340,-0.276], [0.340,-0.191], [0.340,-0.106], [0.340,-0.021], [0.340,0.064], [0.340,0.149], [0.340,0.234], [0.340,0.319], [0.340,0.404], [0.340,0.489], [0.340,0.574], [0.340,0.659], [0.340,0.744], [0.340,0.786], [0.255,0.786], [0.170,0.786], [0.085,0.786], [0.170,0.786], [0.255,0.786], [0.340,0.786], [0.425,0.786], [0.510,0.786], [0.595,0.786], [0.510,0.786], [0.425,0.786], [0.340,0.744], [0.340,0.659], [0.340,0.574], [0.340,0.489], [0.340,0.404], [0.340,0.319], [0.340,0.234], [0.340,0.149], [0.340,0.064], [0.340,-0.021], [0.340,-0.106], [0.340,-0.191], [0.340,-0.276], [0.340,-0.361], [0.340,-0.446], [0.340,-0.531], [0.340,-0.616], [0.340,-0.701], [0.340,-0.786], [0.255,-0.701], [0.170,-0.701], [0.085,-0.701], [0.170,-0.701], [0.255,-0.701], [0.340,-0.701], [0.425,-0.701], [0.510,-0.701], [0.595,-0.701], [0.510,-0.701], [0.425,-0.701], [0.340,-0.701], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  'J' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.391,-0.786], [0.425,-0.778], [0.476,-0.752], [0.527,-0.701], [0.561,-0.667], [0.595,-0.616], [0.629,-0.531], [0.663,-0.446], [0.680,-0.361], [0.680,-0.276], [0.680,-0.191], [0.680,-0.106], [0.680,-0.021], [0.680,0.064], [0.680,0.149], [0.680,0.234], [0.680,0.319], [0.680,0.404], [0.680,0.489], [0.680,0.574], [0.680,0.659], [0.680,0.744], [0.680,0.786], [0.680,0.744], [0.680,0.659], [0.680,0.574], [0.680,0.489], [0.680,0.404], [0.680,0.319], [0.680,0.234], [0.680,0.149], [0.680,0.064], [0.680,-0.021], [0.680,-0.106], [0.680,-0.191], [0.680,-0.276], [0.680,-0.361], [0.663,-0.446], [0.629,-0.531], [0.595,-0.616], [0.561,-0.667], [0.527,-0.701], [0.476,-0.752], [0.425,-0.778], [0.391,-0.786], [0.340,-0.786], [0.289,-0.786], [0.255,-0.778], [0.204,-0.752], [0.153,-0.701], [0.119,-0.667], [0.085,-0.616], [0.051,-0.531], [0.017,-0.446], [0.000,-0.361], [0.017,-0.446], [0.051,-0.531], [0.085,-0.616], [0.119,-0.667], [0.153,-0.701], [0.204,-0.752], [0.255,-0.778], [0.289,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'K' : [ [0.085,-0.786], [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.224,0.136], [0.279,0.208], [0.333,0.280], [0.388,0.353], [0.442,0.425], [0.496,0.497], [0.551,0.569], [0.605,0.642], [0.660,0.714], [0.714,0.786], [0.660,0.714], [0.605,0.642], [0.551,0.569], [0.496,0.497], [0.442,0.425], [0.388,0.353], [0.333,0.280], [0.279,0.208], [0.224,0.136], [0.170,0.064], [0.224,-0.021], [0.279,-0.106], [0.333,-0.191], [0.388,-0.276], [0.442,-0.361], [0.496,-0.446], [0.551,-0.531], [0.605,-0.616], [0.660,-0.701], [0.714,-0.786], [0.799,-0.786], [1.139,-0.786],  ],\n  'L' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.765,-0.574], [0.765,-0.446], [0.765,-0.574], [0.765,-0.701], [0.765,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'M' : [ [0.085,-0.786], [0.085,-0.786], [0.119,-0.629], [0.153,-0.472], [0.187,-0.315], [0.221,-0.157], [0.255,-0.000], [0.289,0.157], [0.323,0.314], [0.357,0.472], [0.391,0.629], [0.425,0.786], [0.459,0.629], [0.493,0.472], [0.527,0.314], [0.561,0.157], [0.595,-0.000], [0.629,-0.157], [0.663,-0.315], [0.697,-0.472], [0.731,-0.629], [0.765,-0.786], [0.799,-0.629], [0.833,-0.472], [0.867,-0.315], [0.901,-0.157], [0.935,-0.000], [0.969,0.157], [1.003,0.314], [1.037,0.472], [1.071,0.629], [1.105,0.786], [1.139,0.629], [1.173,0.472], [1.207,0.314], [1.241,0.157], [1.275,-0.000], [1.309,-0.157], [1.343,-0.315], [1.377,-0.472], [1.411,-0.629], [1.445,-0.786], [1.530,-0.786], [1.870,-0.786],  ],\n  'N' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.170,0.629], [0.255,0.472], [0.340,0.314], [0.425,0.157], [0.510,-0.000], [0.595,-0.157], [0.680,-0.315], [0.765,-0.472], [0.850,-0.629], [0.935,-0.786], [0.935,-0.701], [0.935,-0.616], [0.935,-0.531], [0.935,-0.446], [0.935,-0.361], [0.935,-0.276], [0.935,-0.191], [0.935,-0.106], [0.935,-0.021], [0.935,0.064], [0.935,0.149], [0.935,0.234], [0.935,0.319], [0.935,0.404], [0.935,0.489], [0.935,0.574], [0.935,0.659], [0.935,0.744], [0.935,0.786], [0.935,0.744], [0.935,0.659], [0.935,0.574], [0.935,0.489], [0.935,0.404], [0.935,0.319], [0.935,0.234], [0.935,0.149], [0.935,0.064], [0.935,-0.021], [0.935,-0.106], [0.935,-0.191], [0.935,-0.276], [0.935,-0.361], [0.935,-0.446], [0.935,-0.531], [0.935,-0.616], [0.935,-0.701], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'O' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.850,-0.395], [0.884,-0.276], [0.918,-0.132], [0.935,0.021], [0.918,0.174], [0.884,0.319], [0.850,0.438], [0.807,0.531], [0.765,0.616], [0.714,0.701], [0.654,0.752], [0.578,0.782], [0.510,0.786], [0.442,0.782], [0.365,0.752], [0.306,0.701], [0.255,0.616], [0.213,0.531], [0.170,0.438], [0.136,0.319], [0.102,0.174], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'P' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.459,0.072], [0.510,0.098], [0.561,0.149], [0.595,0.183], [0.629,0.234], [0.663,0.319], [0.697,0.404], [0.697,0.446], [0.663,0.531], [0.629,0.616], [0.595,0.667], [0.561,0.701], [0.510,0.752], [0.459,0.777], [0.425,0.786], [0.357,0.786], [0.289,0.786], [0.221,0.786], [0.153,0.786], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.493,-0.786], [0.561,-0.786], [0.629,-0.786], [0.697,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'Q' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.850,-0.395], [0.884,-0.276], [0.918,-0.132], [0.935,0.021], [0.918,0.174], [0.884,0.319], [0.850,0.438], [0.807,0.531], [0.765,0.616], [0.714,0.701], [0.654,0.752], [0.578,0.782], [0.510,0.786], [0.442,0.782], [0.365,0.752], [0.306,0.701], [0.255,0.616], [0.213,0.531], [0.170,0.438], [0.136,0.319], [0.102,0.174], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.799,-0.854], [0.833,-0.922], [0.867,-0.990], [0.765,-0.786], [0.765,-0.786], [0.867,-0.990], [0.833,-0.922], [0.799,-0.854], [0.765,-0.786], [0.731,-0.718], [0.697,-0.650], [0.663,-0.582], [0.629,-0.514], [0.595,-0.446], [0.629,-0.514], [0.663,-0.582], [0.697,-0.650], [0.731,-0.718], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'R' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.459,0.777], [0.510,0.752], [0.561,0.701], [0.595,0.667], [0.629,0.616], [0.663,0.531], [0.697,0.446], [0.697,0.404], [0.663,0.319], [0.629,0.234], [0.595,0.183], [0.561,0.149], [0.510,0.098], [0.459,0.072], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.391,-0.021], [0.425,-0.106], [0.459,-0.191], [0.493,-0.276], [0.527,-0.361], [0.561,-0.446], [0.595,-0.531], [0.629,-0.616], [0.663,-0.701], [0.697,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'S' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.744], [0.493,-0.740], [0.570,-0.710], [0.629,-0.659], [0.680,-0.574], [0.706,-0.489], [0.697,-0.361], [0.654,-0.234], [0.561,-0.106], [0.425,0.021], [0.289,0.149], [0.196,0.276], [0.153,0.404], [0.145,0.531], [0.170,0.616], [0.221,0.701], [0.281,0.752], [0.357,0.782], [0.425,0.786], [0.493,0.782], [0.570,0.752], [0.629,0.701], [0.680,0.616], [0.723,0.531], [0.680,0.616], [0.629,0.701], [0.570,0.752], [0.493,0.782], [0.425,0.786], [0.357,0.782], [0.281,0.752], [0.221,0.701], [0.170,0.616], [0.145,0.531], [0.153,0.404], [0.196,0.276], [0.289,0.149], [0.425,0.021], [0.561,-0.106], [0.654,-0.234], [0.697,-0.361], [0.706,-0.489], [0.680,-0.574], [0.629,-0.659], [0.570,-0.710], [0.493,-0.740], [0.425,-0.744], [0.357,-0.740], [0.281,-0.710], [0.221,-0.659], [0.170,-0.574], [0.128,-0.489], [0.085,-0.395], [0.128,-0.489], [0.170,-0.574], [0.221,-0.659], [0.281,-0.710], [0.357,-0.740], [0.425,-0.744], [0.425,-0.786], [0.425,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'T' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.595,-0.701], [0.595,-0.616], [0.595,-0.531], [0.595,-0.446], [0.595,-0.361], [0.595,-0.276], [0.595,-0.191], [0.595,-0.106], [0.595,-0.021], [0.595,0.064], [0.595,0.149], [0.595,0.234], [0.595,0.319], [0.595,0.404], [0.595,0.489], [0.595,0.574], [0.595,0.659], [0.595,0.744], [0.595,0.786], [0.510,0.786], [0.425,0.786], [0.340,0.786], [0.255,0.786], [0.170,0.786], [0.085,0.786], [0.170,0.786], [0.255,0.786], [0.340,0.786], [0.425,0.786], [0.510,0.786], [0.595,0.786], [0.680,0.786], [0.765,0.786], [0.850,0.786], [0.935,0.786], [1.020,0.786], [1.105,0.786], [1.020,0.786], [0.935,0.786], [0.850,0.786], [0.765,0.786], [0.680,0.786], [0.595,0.744], [0.595,0.659], [0.595,0.574], [0.595,0.489], [0.595,0.404], [0.595,0.319], [0.595,0.234], [0.595,0.149], [0.595,0.064], [0.595,-0.021], [0.595,-0.106], [0.595,-0.191], [0.595,-0.276], [0.595,-0.361], [0.595,-0.446], [0.595,-0.531], [0.595,-0.616], [0.595,-0.701], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.445,-0.786],  ],\n  'U' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.850,-0.395], [0.884,-0.276], [0.918,-0.132], [0.935,0.021], [0.935,0.106], [0.935,0.191], [0.935,0.276], [0.935,0.361], [0.935,0.446], [0.935,0.531], [0.935,0.616], [0.935,0.701], [0.935,0.786], [0.935,0.701], [0.935,0.616], [0.935,0.531], [0.935,0.446], [0.935,0.361], [0.935,0.276], [0.935,0.191], [0.935,0.106], [0.935,0.021], [0.918,-0.132], [0.884,-0.276], [0.850,-0.395], [0.807,-0.489], [0.765,-0.574], [0.714,-0.659], [0.654,-0.710], [0.578,-0.740], [0.510,-0.744], [0.442,-0.740], [0.365,-0.710], [0.306,-0.659], [0.255,-0.574], [0.213,-0.489], [0.170,-0.395], [0.136,-0.276], [0.102,-0.132], [0.085,0.021], [0.085,0.106], [0.085,0.191], [0.085,0.276], [0.085,0.361], [0.085,0.446], [0.085,0.531], [0.085,0.616], [0.085,0.701], [0.085,0.786], [0.085,0.701], [0.085,0.616], [0.085,0.531], [0.085,0.446], [0.085,0.361], [0.085,0.276], [0.085,0.191], [0.085,0.106], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'V' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.646,-0.629], [0.697,-0.472], [0.748,-0.315], [0.799,-0.157], [0.850,-0.000], [0.901,0.157], [0.952,0.314], [1.003,0.472], [1.054,0.629], [1.105,0.786], [1.054,0.629], [1.003,0.472], [0.952,0.314], [0.901,0.157], [0.850,-0.000], [0.799,-0.157], [0.748,-0.315], [0.697,-0.472], [0.646,-0.629], [0.595,-0.786], [0.544,-0.629], [0.493,-0.472], [0.442,-0.315], [0.391,-0.157], [0.340,-0.000], [0.289,0.157], [0.238,0.314], [0.187,0.472], [0.136,0.629], [0.085,0.786], [0.136,0.629], [0.187,0.472], [0.238,0.314], [0.289,0.157], [0.340,-0.000], [0.391,-0.157], [0.442,-0.315], [0.493,-0.472], [0.544,-0.629], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'W' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.786], [0.391,-0.629], [0.357,-0.472], [0.323,-0.315], [0.289,-0.157], [0.255,-0.000], [0.221,0.157], [0.187,0.314], [0.153,0.472], [0.119,0.629], [0.085,0.786], [0.119,0.629], [0.153,0.472], [0.187,0.314], [0.221,0.157], [0.255,-0.000], [0.289,-0.157], [0.323,-0.315], [0.357,-0.472], [0.391,-0.629], [0.425,-0.786], [0.459,-0.629], [0.493,-0.472], [0.527,-0.315], [0.561,-0.157], [0.595,-0.000], [0.629,0.157], [0.663,0.314], [0.697,0.472], [0.731,0.629], [0.765,0.786], [0.799,0.629], [0.833,0.472], [0.867,0.314], [0.901,0.157], [0.935,-0.000], [0.969,-0.157], [1.003,-0.315], [1.037,-0.472], [1.071,-0.629], [1.105,-0.786], [1.139,-0.629], [1.173,-0.472], [1.207,-0.315], [1.241,-0.157], [1.275,-0.000], [1.309,0.157], [1.343,0.314], [1.377,0.472], [1.411,0.629], [1.445,0.786], [1.411,0.629], [1.377,0.472], [1.343,0.314], [1.309,0.157], [1.275,-0.000], [1.241,-0.157], [1.207,-0.315], [1.173,-0.472], [1.139,-0.629], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786], [1.530,-0.786], [1.870,-0.786],  ],\n  'X' : [ [0.085,-0.786], [0.187,-0.629], [0.289,-0.472], [0.391,-0.315], [0.493,-0.157], [0.595,-0.000], [0.697,0.157], [0.799,0.314], [0.901,0.472], [1.003,0.629], [1.105,0.786], [1.003,0.629], [0.901,0.472], [0.799,0.314], [0.697,0.157], [0.595,-0.000], [0.493,0.157], [0.391,0.314], [0.289,0.472], [0.187,0.629], [0.085,0.786], [0.187,0.629], [0.289,0.472], [0.391,0.314], [0.493,0.157], [0.595,-0.000], [0.697,-0.157], [0.799,-0.315], [0.901,-0.472], [1.003,-0.629], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'Y' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.595,-0.701], [0.595,-0.616], [0.595,-0.531], [0.595,-0.446], [0.595,-0.361], [0.595,-0.276], [0.595,-0.191], [0.595,-0.106], [0.595,-0.021], [0.595,-0.000], [0.697,0.157], [0.799,0.314], [0.901,0.472], [1.003,0.629], [1.105,0.786], [1.003,0.629], [0.901,0.472], [0.799,0.314], [0.697,0.157], [0.595,-0.000], [0.493,0.157], [0.391,0.314], [0.289,0.472], [0.187,0.629], [0.085,0.786], [0.187,0.629], [0.289,0.472], [0.391,0.314], [0.493,0.157], [0.595,-0.000], [0.595,-0.021], [0.595,-0.106], [0.595,-0.191], [0.595,-0.276], [0.595,-0.361], [0.595,-0.446], [0.595,-0.531], [0.595,-0.616], [0.595,-0.701], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'Z' : [ [0.085,-0.786], [0.187,-0.629], [0.289,-0.472], [0.391,-0.315], [0.493,-0.157], [0.595,-0.000], [0.697,0.157], [0.799,0.314], [0.901,0.472], [1.003,0.629], [1.105,0.786], [0.935,0.786], [0.765,0.786], [0.595,0.786], [0.425,0.786], [0.255,0.786], [0.085,0.786], [0.255,0.786], [0.425,0.786], [0.595,0.786], [0.765,0.786], [0.935,0.786], [1.105,0.786], [1.003,0.629], [0.901,0.472], [0.799,0.314], [0.697,0.157], [0.595,-0.000], [0.493,-0.157], [0.391,-0.315], [0.289,-0.472], [0.187,-0.629], [0.085,-0.769], [0.255,-0.769], [0.425,-0.769], [0.595,-0.769], [0.765,-0.769], [0.935,-0.769], [1.105,-0.769], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'a' : [ [0.068,-0.786], [0.153,-0.786], [0.238,-0.786], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.646,-0.701], [0.646,-0.616], [0.646,-0.531], [0.646,-0.446], [0.646,-0.361], [0.646,-0.276], [0.646,-0.191], [0.646,-0.106], [0.646,-0.021], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.731,-0.786], [1.071,-0.786],  ],\n  'b' : [ [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.459,-0.778], [0.510,-0.752], [0.561,-0.701], [0.595,-0.667], [0.629,-0.616], [0.663,-0.531], [0.697,-0.446], [0.714,-0.361], [0.697,-0.276], [0.663,-0.191], [0.629,-0.106], [0.595,-0.055], [0.561,-0.021], [0.510,0.030], [0.459,0.055], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.017,-0.786], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.561,-0.786], [0.646,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'c' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.340,-0.778], [0.289,-0.752], [0.238,-0.701], [0.204,-0.667], [0.170,-0.616], [0.136,-0.531], [0.102,-0.446], [0.085,-0.361], [0.102,-0.276], [0.136,-0.191], [0.170,-0.106], [0.204,-0.055], [0.238,-0.021], [0.289,0.030], [0.340,0.055], [0.374,0.064], [0.442,0.064], [0.510,0.064], [0.578,0.064], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.986,-0.786],  ],\n  'd' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.714,-0.786], [0.714,-0.701], [0.714,-0.616], [0.714,-0.531], [0.714,-0.446], [0.714,-0.361], [0.714,-0.276], [0.714,-0.191], [0.714,-0.106], [0.714,-0.021], [0.714,0.064], [0.714,0.149], [0.714,0.234], [0.714,0.319], [0.714,0.404], [0.714,0.489], [0.714,0.574], [0.714,0.659], [0.714,0.744], [0.714,0.786], [0.714,0.744], [0.714,0.659], [0.714,0.574], [0.714,0.489], [0.714,0.404], [0.714,0.319], [0.714,0.234], [0.714,0.149], [0.714,0.064], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.714,-0.786], [0.799,-0.786], [1.139,-0.786],  ],\n  'e' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.340,-0.778], [0.289,-0.752], [0.238,-0.701], [0.204,-0.667], [0.170,-0.616], [0.128,-0.531], [0.102,-0.446], [0.094,-0.361], [0.179,-0.361], [0.255,-0.361], [0.332,-0.361], [0.408,-0.361], [0.476,-0.361], [0.518,-0.361], [0.595,-0.361], [0.671,-0.361], [0.748,-0.361], [0.723,-0.276], [0.706,-0.191], [0.663,-0.106], [0.629,-0.055], [0.595,-0.021], [0.544,0.030], [0.493,0.055], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.128,-0.191], [0.102,-0.276], [0.102,-0.446], [0.128,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.714,-0.786], [0.816,-0.786], [1.156,-0.786],  ],\n  'f' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.701], [0.425,-0.616], [0.425,-0.531], [0.425,-0.446], [0.425,-0.361], [0.425,-0.276], [0.425,-0.191], [0.425,-0.106], [0.425,-0.021], [0.425,0.064], [0.510,0.064], [0.595,0.064], [0.680,0.064], [0.807,0.064], [0.680,0.064], [0.595,0.064], [0.510,0.064], [0.425,0.064], [0.340,0.064], [0.255,0.064], [0.170,0.064], [0.043,0.064], [0.170,0.064], [0.255,0.064], [0.340,0.064], [0.425,0.064], [0.425,0.149], [0.425,0.234], [0.425,0.319], [0.442,0.446], [0.468,0.531], [0.510,0.616], [0.544,0.667], [0.578,0.701], [0.629,0.752], [0.680,0.777], [0.714,0.786], [0.782,0.786], [0.850,0.786], [0.782,0.786], [0.714,0.786], [0.680,0.777], [0.629,0.752], [0.578,0.701], [0.544,0.667], [0.510,0.616], [0.468,0.531], [0.442,0.446], [0.425,0.319], [0.425,0.234], [0.425,0.149], [0.425,0.064], [0.425,-0.021], [0.425,-0.106], [0.425,-0.191], [0.425,-0.276], [0.425,-0.361], [0.425,-0.446], [0.425,-0.531], [0.425,-0.616], [0.425,-0.701], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'g' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.646,-0.871], [0.646,-0.956], [0.646,-1.041], [0.646,-1.126], [0.629,-1.254], [0.603,-1.339], [0.561,-1.424], [0.527,-1.475], [0.493,-1.509], [0.442,-1.560], [0.391,-1.585], [0.357,-1.594], [0.289,-1.594], [0.221,-1.594], [0.153,-1.594], [0.221,-1.594], [0.289,-1.594], [0.357,-1.594], [0.391,-1.585], [0.442,-1.560], [0.493,-1.509], [0.527,-1.475], [0.561,-1.424], [0.603,-1.339], [0.629,-1.254], [0.646,-1.126], [0.646,-1.041], [0.646,-0.956], [0.646,-0.871], [0.646,-0.786], [0.646,-0.701], [0.646,-0.616], [0.646,-0.531], [0.646,-0.446], [0.646,-0.361], [0.646,-0.276], [0.646,-0.191], [0.646,-0.106], [0.646,-0.021], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.714,-0.786], [1.054,-0.786],  ],\n  'h' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.744], [0.085,0.786], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.106], [0.102,-0.064], [0.153,-0.030], [0.238,0.021], [0.323,0.064], [0.425,0.064], [0.510,0.021], [0.595,-0.030], [0.646,-0.064], [0.663,-0.106], [0.663,-0.191], [0.663,-0.276], [0.663,-0.361], [0.663,-0.446], [0.663,-0.531], [0.663,-0.616], [0.663,-0.701], [0.663,-0.786], [0.748,-0.786], [1.088,-0.786],  ],\n  'i' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'j' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.493,-0.786], [0.493,-0.701], [0.493,-0.616], [0.493,-0.531], [0.493,-0.446], [0.493,-0.361], [0.493,-0.276], [0.493,-0.191], [0.493,-0.106], [0.493,-0.021], [0.493,0.064], [0.493,-0.021], [0.493,-0.106], [0.493,-0.191], [0.493,-0.276], [0.493,-0.361], [0.493,-0.446], [0.493,-0.531], [0.493,-0.616], [0.493,-0.701], [0.493,-0.786], [0.493,-0.871], [0.493,-0.956], [0.493,-1.041], [0.493,-1.126], [0.476,-1.254], [0.451,-1.339], [0.408,-1.424], [0.374,-1.475], [0.340,-1.509], [0.289,-1.560], [0.238,-1.585], [0.204,-1.594], [0.136,-1.594], [0.068,-1.594], [0.000,-1.594], [0.068,-1.594], [0.136,-1.594], [0.204,-1.594], [0.238,-1.585], [0.289,-1.560], [0.340,-1.509], [0.374,-1.475], [0.408,-1.424], [0.451,-1.339], [0.476,-1.254], [0.493,-1.126], [0.493,-1.041], [0.493,-0.956], [0.493,-0.871], [0.493,-0.786], [0.442,-0.786], [0.493,-0.786], [0.578,-0.786], [0.918,-0.786],  ],\n  'k' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.744], [0.085,0.786], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.184,-0.295], [0.283,-0.228], [0.383,-0.162], [0.482,-0.095], [0.581,-0.029], [0.680,0.038], [0.581,-0.029], [0.482,-0.095], [0.383,-0.162], [0.283,-0.228], [0.184,-0.295], [0.085,-0.361], [0.184,-0.432], [0.283,-0.503], [0.383,-0.574], [0.482,-0.645], [0.581,-0.716], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'l' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.744], [0.085,0.786], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'm' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.153,0.004], [0.255,0.030], [0.323,0.047], [0.391,0.047], [0.459,0.030], [0.561,0.004], [0.612,-0.021], [0.629,-0.106], [0.629,-0.191], [0.629,-0.276], [0.629,-0.361], [0.629,-0.446], [0.629,-0.531], [0.629,-0.616], [0.629,-0.701], [0.629,-0.808], [0.629,-0.701], [0.629,-0.616], [0.629,-0.531], [0.629,-0.446], [0.629,-0.361], [0.629,-0.276], [0.629,-0.191], [0.629,-0.106], [0.646,-0.021], [0.697,0.004], [0.799,0.030], [0.867,0.047], [0.935,0.047], [1.003,0.030], [1.105,0.004], [1.156,-0.021], [1.173,-0.106], [1.173,-0.191], [1.173,-0.276], [1.173,-0.361], [1.173,-0.446], [1.173,-0.531], [1.173,-0.616], [1.173,-0.701], [1.173,-0.786], [1.258,-0.786], [1.598,-0.786],  ],\n  'n' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.153,0.004], [0.255,0.030], [0.323,0.047], [0.391,0.047], [0.459,0.030], [0.561,0.004], [0.612,-0.021], [0.629,-0.106], [0.629,-0.191], [0.629,-0.276], [0.629,-0.361], [0.629,-0.446], [0.629,-0.531], [0.629,-0.616], [0.629,-0.701], [0.629,-0.786], [0.714,-0.786], [1.054,-0.786],  ],\n  'o' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.646,-0.786], [0.680,-0.778], [0.731,-0.752], [0.782,-0.701], [0.816,-0.667], [0.850,-0.616], [0.884,-0.531], [0.918,-0.446], [0.935,-0.361], [0.918,-0.276], [0.884,-0.191], [0.850,-0.106], [0.816,-0.055], [0.782,-0.021], [0.731,0.030], [0.680,0.055], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'p' : [ [0.085,-0.786], [0.085,-0.871], [0.085,-0.956], [0.085,-1.041], [0.085,-1.126], [0.085,-1.211], [0.085,-1.296], [0.085,-1.381], [0.085,-1.466], [0.085,-1.551], [0.085,-1.211], [0.085,-1.551], [0.085,-1.466], [0.085,-1.381], [0.085,-1.296], [0.085,-1.211], [0.085,-1.126], [0.085,-1.041], [0.085,-0.956], [0.085,-0.871], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.391,-0.778], [0.442,-0.752], [0.493,-0.701], [0.527,-0.667], [0.561,-0.616], [0.595,-0.531], [0.629,-0.446], [0.646,-0.361], [0.629,-0.276], [0.595,-0.191], [0.561,-0.106], [0.527,-0.055], [0.493,-0.021], [0.442,0.030], [0.391,0.055], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.493,-0.786], [0.578,-0.786], [0.663,-0.786], [0.731,-0.786], [1.071,-0.786],  ],\n  'q' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.646,-0.871], [0.646,-0.956], [0.646,-1.041], [0.646,-1.126], [0.663,-1.254], [0.689,-1.339], [0.731,-1.424], [0.765,-1.475], [0.799,-1.509], [0.850,-1.560], [0.901,-1.585], [0.935,-1.594], [1.003,-1.594], [1.071,-1.594], [1.139,-1.594], [1.071,-1.594], [1.003,-1.594], [0.935,-1.594], [0.901,-1.585], [0.850,-1.560], [0.799,-1.509], [0.765,-1.475], [0.731,-1.424], [0.689,-1.339], [0.663,-1.254], [0.646,-1.126], [0.646,-1.041], [0.646,-0.956], [0.646,-0.871], [0.646,-0.786], [0.646,-0.701], [0.646,-0.616], [0.646,-0.531], [0.646,-0.446], [0.646,-0.361], [0.646,-0.276], [0.646,-0.191], [0.646,-0.106], [0.646,-0.021], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.714,-0.786], [0.816,-0.786], [0.918,-0.786], [1.020,-0.786], [1.105,-0.786], [1.224,-0.786], [1.564,-0.786],  ],\n  'r' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,-0.021], [0.085,0.149], [0.085,0.191], [0.085,0.149], [0.085,-0.021], [0.153,0.004], [0.255,0.030], [0.323,0.055], [0.391,0.064], [0.459,0.055], [0.527,0.030], [0.595,-0.021], [0.527,0.030], [0.459,0.055], [0.391,0.064], [0.323,0.055], [0.255,0.030], [0.153,0.004], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  's' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.561,-0.786], [0.595,-0.778], [0.646,-0.752], [0.697,-0.701], [0.731,-0.667], [0.765,-0.616], [0.756,-0.565], [0.731,-0.531], [0.663,-0.489], [0.595,-0.446], [0.510,-0.404], [0.425,-0.361], [0.340,-0.319], [0.255,-0.276], [0.187,-0.234], [0.119,-0.191], [0.102,-0.115], [0.119,-0.055], [0.153,-0.021], [0.204,0.030], [0.255,0.055], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.595,0.055], [0.646,0.030], [0.697,-0.021], [0.731,-0.055], [0.697,-0.021], [0.646,0.030], [0.595,0.055], [0.561,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.255,0.055], [0.204,0.030], [0.153,-0.021], [0.119,-0.055], [0.102,-0.115], [0.119,-0.191], [0.187,-0.234], [0.255,-0.276], [0.340,-0.319], [0.425,-0.361], [0.510,-0.404], [0.595,-0.446], [0.663,-0.489], [0.731,-0.531], [0.756,-0.565], [0.765,-0.616], [0.731,-0.667], [0.697,-0.701], [0.646,-0.752], [0.595,-0.778], [0.561,-0.786], [0.510,-0.786], [0.425,-0.786], [0.340,-0.786], [0.289,-0.786], [0.255,-0.778], [0.204,-0.752], [0.153,-0.701], [0.119,-0.667], [0.060,-0.616], [0.119,-0.667], [0.153,-0.701], [0.204,-0.752], [0.255,-0.778], [0.289,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  't' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.374,-0.786], [0.374,-0.701], [0.374,-0.616], [0.374,-0.531], [0.374,-0.446], [0.374,-0.361], [0.374,-0.276], [0.374,-0.191], [0.374,-0.106], [0.374,-0.021], [0.374,0.064], [0.374,0.149], [0.374,0.234], [0.374,0.319], [0.374,0.361], [0.374,0.446], [0.306,0.446], [0.238,0.446], [0.170,0.446], [0.043,0.446], [0.170,0.446], [0.238,0.446], [0.306,0.446], [0.374,0.446], [0.442,0.446], [0.510,0.446], [0.578,0.446], [0.706,0.446], [0.578,0.446], [0.510,0.446], [0.442,0.446], [0.374,0.446], [0.374,0.531], [0.374,0.616], [0.374,0.701], [0.374,0.786], [0.374,0.701], [0.374,0.616], [0.374,0.531], [0.374,0.446], [0.374,0.361], [0.374,0.319], [0.374,0.234], [0.374,0.149], [0.374,0.064], [0.374,-0.021], [0.374,-0.106], [0.374,-0.191], [0.374,-0.276], [0.374,-0.361], [0.374,-0.446], [0.374,-0.531], [0.374,-0.616], [0.374,-0.701], [0.374,-0.786], [0.459,-0.786], [0.544,-0.786], [0.663,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'u' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.323,-0.769], [0.255,-0.752], [0.153,-0.727], [0.102,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.102,-0.701], [0.153,-0.727], [0.255,-0.752], [0.323,-0.769], [0.391,-0.786], [0.459,-0.769], [0.527,-0.752], [0.629,-0.727], [0.680,-0.701], [0.697,-0.701], [0.697,-0.616], [0.697,-0.531], [0.697,-0.446], [0.697,-0.361], [0.697,-0.276], [0.697,-0.191], [0.697,-0.106], [0.697,-0.021], [0.697,0.064], [0.697,-0.021], [0.697,-0.106], [0.697,-0.191], [0.697,-0.276], [0.697,-0.361], [0.697,-0.446], [0.697,-0.531], [0.697,-0.616], [0.697,-0.701], [0.697,-0.786], [0.782,-0.786], [1.122,-0.786],  ],\n  'v' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.468,-0.786], [0.429,-0.701], [0.391,-0.616], [0.353,-0.531], [0.315,-0.446], [0.276,-0.361], [0.238,-0.276], [0.200,-0.191], [0.162,-0.106], [0.123,-0.021], [0.085,0.064], [0.123,-0.021], [0.162,-0.106], [0.200,-0.191], [0.238,-0.276], [0.276,-0.361], [0.315,-0.446], [0.353,-0.531], [0.391,-0.616], [0.429,-0.701], [0.468,-0.786], [0.506,-0.701], [0.544,-0.616], [0.582,-0.531], [0.620,-0.446], [0.659,-0.361], [0.697,-0.276], [0.735,-0.191], [0.773,-0.106], [0.812,-0.021], [0.850,0.064], [0.812,-0.021], [0.773,-0.106], [0.735,-0.191], [0.697,-0.276], [0.659,-0.361], [0.620,-0.446], [0.582,-0.531], [0.544,-0.616], [0.506,-0.701], [0.468,-0.786], [0.552,-0.786], [0.663,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'w' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.315,-0.701], [0.289,-0.616], [0.264,-0.531], [0.238,-0.446], [0.213,-0.361], [0.187,-0.276], [0.162,-0.191], [0.136,-0.106], [0.111,-0.021], [0.085,0.064], [0.111,-0.021], [0.136,-0.106], [0.162,-0.191], [0.187,-0.276], [0.213,-0.361], [0.238,-0.446], [0.264,-0.531], [0.289,-0.616], [0.315,-0.701], [0.340,-0.786], [0.365,-0.701], [0.391,-0.616], [0.417,-0.531], [0.442,-0.446], [0.468,-0.361], [0.493,-0.276], [0.518,-0.191], [0.544,-0.106], [0.570,-0.021], [0.595,0.064], [0.620,-0.021], [0.646,-0.106], [0.671,-0.191], [0.697,-0.276], [0.723,-0.361], [0.748,-0.446], [0.773,-0.531], [0.799,-0.616], [0.825,-0.701], [0.850,-0.786], [0.875,-0.701], [0.901,-0.616], [0.926,-0.531], [0.952,-0.446], [0.978,-0.361], [1.003,-0.276], [1.028,-0.191], [1.054,-0.106], [1.079,-0.021], [1.105,0.064], [1.079,-0.021], [1.054,-0.106], [1.028,-0.191], [1.003,-0.276], [0.978,-0.361], [0.952,-0.446], [0.926,-0.531], [0.901,-0.616], [0.875,-0.701], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'x' : [ [0.076,-0.701], [0.153,-0.616], [0.230,-0.531], [0.306,-0.446], [0.383,-0.361], [0.459,-0.276], [0.535,-0.191], [0.612,-0.106], [0.689,-0.021], [0.765,0.064], [0.689,-0.021], [0.612,-0.106], [0.535,-0.191], [0.459,-0.276], [0.383,-0.361], [0.306,-0.276], [0.230,-0.191], [0.153,-0.106], [0.076,-0.021], [0.000,0.064], [0.076,-0.021], [0.153,-0.106], [0.230,-0.191], [0.306,-0.276], [0.383,-0.361], [0.459,-0.446], [0.535,-0.531], [0.612,-0.616], [0.689,-0.701], [0.765,-0.786], [1.105,-0.786],  ],\n  'y' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.468,-0.786], [0.429,-0.701], [0.391,-0.616], [0.353,-0.531], [0.315,-0.446], [0.276,-0.361], [0.238,-0.276], [0.200,-0.191], [0.162,-0.106], [0.123,-0.021], [0.085,0.064], [0.123,-0.021], [0.162,-0.106], [0.200,-0.191], [0.238,-0.276], [0.276,-0.361], [0.315,-0.446], [0.353,-0.531], [0.391,-0.616], [0.429,-0.701], [0.468,-0.786], [0.506,-0.701], [0.544,-0.616], [0.582,-0.531], [0.620,-0.446], [0.659,-0.361], [0.697,-0.276], [0.735,-0.191], [0.773,-0.106], [0.812,-0.021], [0.850,0.064], [0.812,-0.021], [0.773,-0.106], [0.735,-0.191], [0.697,-0.276], [0.659,-0.361], [0.620,-0.446], [0.582,-0.531], [0.544,-0.616], [0.506,-0.701], [0.468,-0.786], [0.429,-0.871], [0.391,-0.956], [0.353,-1.041], [0.315,-1.126], [0.276,-1.211], [0.238,-1.296], [0.200,-1.381], [0.238,-1.296], [0.276,-1.211], [0.315,-1.126], [0.353,-1.041], [0.391,-0.956], [0.429,-0.871], [0.468,-0.786], [0.552,-0.786], [0.637,-0.786], [0.723,-0.786], [0.807,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'z' : [ [0.085,-0.786], [0.162,-0.701], [0.238,-0.616], [0.315,-0.531], [0.391,-0.446], [0.468,-0.361], [0.544,-0.276], [0.620,-0.191], [0.697,-0.106], [0.773,-0.021], [0.850,0.064], [0.765,0.064], [0.680,0.064], [0.595,0.064], [0.510,0.064], [0.425,0.064], [0.340,0.064], [0.255,0.064], [0.170,0.064], [0.085,0.064], [0.170,0.064], [0.255,0.064], [0.340,0.064], [0.425,0.064], [0.510,0.064], [0.595,0.064], [0.680,0.064], [0.765,0.064], [0.850,0.064], [0.773,-0.021], [0.697,-0.106], [0.620,-0.191], [0.544,-0.276], [0.468,-0.361], [0.391,-0.446], [0.315,-0.531], [0.238,-0.616], [0.162,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'a*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'b*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'c*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'd*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'e*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'f*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'g*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'h*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'i*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'j*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'k*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'l*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'm*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'n*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'o*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'p*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'q*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'r*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  's*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  't*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'u*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'v*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'w*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'x*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'y*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'z*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  ',' : [ [0.085,-0.786], [0.170,-0.786], [0.187,-0.701], [0.221,-0.616], [0.289,-0.701], [0.306,-0.786], [0.323,-0.871], [0.323,-0.956], [0.289,-1.041], [0.255,-1.126], [0.187,-1.211], [0.085,-1.296], [0.187,-1.211], [0.255,-1.126], [0.289,-1.041], [0.323,-0.956], [0.323,-0.871], [0.306,-0.786], [0.289,-0.701], [0.221,-0.616], [0.289,-0.701], [0.306,-0.786], [0.425,-0.786], [0.765,-0.786],  ],\n  '?' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.701], [0.425,-0.616], [0.425,-0.531], [0.425,-0.446], [0.425,-0.361], [0.425,-0.276], [0.425,-0.191], [0.425,-0.106], [0.425,-0.081], [0.452,-0.038], [0.476,0.004], [0.510,0.072], [0.544,0.149], [0.578,0.208], [0.612,0.276], [0.629,0.319], [0.646,0.361], [0.654,0.404], [0.660,0.472], [0.663,0.531], [0.654,0.574], [0.637,0.616], [0.620,0.659], [0.587,0.701], [0.561,0.735], [0.527,0.752], [0.485,0.773], [0.451,0.782], [0.417,0.786], [0.383,0.786], [0.340,0.783], [0.315,0.782], [0.272,0.769], [0.238,0.752], [0.204,0.731], [0.179,0.701], [0.150,0.659], [0.128,0.616], [0.102,0.574], [0.085,0.531], [0.102,0.574], [0.128,0.616], [0.150,0.659], [0.179,0.701], [0.204,0.731], [0.238,0.752], [0.272,0.769], [0.315,0.782], [0.340,0.783], [0.383,0.786], [0.417,0.786], [0.451,0.782], [0.485,0.773], [0.527,0.752], [0.561,0.735], [0.587,0.701], [0.620,0.659], [0.637,0.616], [0.654,0.574], [0.663,0.531], [0.660,0.472], [0.654,0.404], [0.646,0.361], [0.629,0.319], [0.612,0.276], [0.578,0.208], [0.544,0.149], [0.510,0.072], [0.476,0.004], [0.452,-0.038], [0.425,-0.081], [0.425,-0.106], [0.425,-0.149], [0.425,-0.191], [0.425,-0.234], [0.425,-0.276], [0.425,-0.319], [0.425,-0.361], [0.425,-0.404], [0.425,-0.446], [0.425,-0.489], [0.425,-0.531], [0.425,-0.574], [0.425,-0.616], [0.425,-0.659], [0.425,-0.701], [0.425,-0.744], [0.425,-0.786], [0.340,-0.786], [0.425,-0.786], [0.612,-0.786], [0.561,-0.659], [0.425,-0.574], [0.289,-0.659], [0.238,-0.786], [0.289,-0.914], [0.425,-0.999], [0.561,-0.914], [0.612,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '&' : [ [0.085,-0.786], [0.174,-0.778], [0.255,-0.774], [0.332,-0.774], [0.460,-0.761], [0.561,-0.748], [0.646,-0.684], [0.731,-0.574], [0.799,-0.506], [0.850,-0.440], [0.935,-0.319], [1.037,-0.191], [0.935,-0.319], [0.850,-0.440], [0.799,-0.506], [0.731,-0.574], [0.646,-0.684], [0.561,-0.748], [0.460,-0.761], [0.332,-0.774], [0.255,-0.774], [0.174,-0.778], [0.128,-0.718], [0.102,-0.676], [0.085,-0.599], [0.076,-0.497], [0.085,-0.327], [0.136,-0.191], [0.238,-0.064], [0.323,0.004], [0.374,0.047], [0.493,0.089], [0.587,0.154], [0.629,0.234], [0.672,0.335], [0.706,0.429], [0.715,0.520], [0.718,0.614], [0.701,0.690], [0.667,0.749], [0.620,0.777], [0.535,0.786], [0.468,0.786], [0.400,0.777], [0.329,0.760], [0.294,0.734], [0.270,0.681], [0.259,0.605], [0.252,0.548], [0.254,0.463], [0.262,0.404], [0.289,0.306], [0.332,0.174], [0.408,0.064], [0.476,-0.106], [0.544,-0.276], [0.595,-0.446], [0.646,-0.616], [0.697,-0.786], [0.765,-0.829], [0.850,-0.829], [0.926,-0.803], [1.021,-0.786], [1.120,-0.786], [1.460,-0.786],  ],\n  '$' : [ [0.102,-0.786], [0.221,-0.786], [0.306,-0.786], [0.391,-0.786], [0.476,-0.786], [0.476,-0.786], [0.476,-1.126], [0.476,-0.786], [0.476,-0.531], [0.476,-0.276], [0.476,-0.021], [0.476,0.234], [0.476,0.489], [0.476,0.829], [0.510,0.829], [0.510,0.489], [0.510,0.234], [0.510,-0.021], [0.510,-0.276], [0.510,-0.531], [0.510,-0.786], [0.510,-1.126], [0.510,-0.786], [0.476,-0.786], [0.476,-0.871], [0.595,-0.910], [0.671,-0.880], [0.731,-0.829], [0.782,-0.744], [0.807,-0.659], [0.799,-0.531], [0.756,-0.404], [0.663,-0.276], [0.476,-0.149], [0.289,-0.021], [0.196,0.106], [0.153,0.234], [0.145,0.361], [0.170,0.446], [0.221,0.531], [0.281,0.582], [0.357,0.612], [0.476,0.616], [0.595,0.612], [0.671,0.582], [0.731,0.531], [0.782,0.446], [0.825,0.361], [0.782,0.446], [0.731,0.531], [0.671,0.582], [0.595,0.612], [0.476,0.616], [0.357,0.612], [0.281,0.582], [0.221,0.531], [0.170,0.446], [0.145,0.361], [0.153,0.234], [0.196,0.106], [0.289,-0.021], [0.476,-0.149], [0.663,-0.276], [0.756,-0.404], [0.799,-0.531], [0.807,-0.659], [0.782,-0.744], [0.731,-0.829], [0.671,-0.880], [0.595,-0.910], [0.476,-0.914], [0.357,-0.910], [0.281,-0.880], [0.221,-0.829], [0.170,-0.744], [0.128,-0.659], [0.085,-0.565], [0.128,-0.659], [0.170,-0.744], [0.221,-0.829], [0.281,-0.880], [0.357,-0.910], [0.476,-0.914], [0.476,-0.786], [0.561,-0.786], [0.646,-0.786], [0.731,-0.786], [0.816,-0.786], [0.901,-0.786], [1.241,-0.786],  ],\n  '!' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.255,-0.531], [0.255,-0.276], [0.255,-0.021], [0.255,0.234], [0.255,0.489], [0.255,0.786], [0.255,0.489], [0.255,0.234], [0.255,-0.021], [0.255,-0.276], [0.255,-0.531], [0.255,-0.786], [0.442,-0.786], [0.391,-0.659], [0.255,-0.574], [0.119,-0.659], [0.068,-0.786], [0.119,-0.914], [0.255,-0.999], [0.391,-0.914], [0.442,-0.786], [0.255,-0.786], [0.425,-0.786], [0.510,-0.786], [0.850,-0.786],  ],\n}\n","import { Vertex } from '../../common/Geometry'\nimport { raysol_cursive } from './raysol_cursive'\nimport { raysol_sanserif } from './raysol_sanserif'\n\nconst fontSpacing = 1.5\n\n// Format for vertices: [x,y,b] where in a 0:7(8) by -1:7 grid defining x,y and b defines the line or curve.\n// Bulge directions could be represented by a 0:4 list starting at none, then NE and going clockwise.\n// 4  1\n// 3  2\nlet billsey = {\n  ' ': [ [8,-1,0] ],\n  'A': [ [0,0,0], [3.5,7,0], [7,0,0], [5,3.5,0], [2,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'B': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [0,3.5,0], [3.5,3.5,0], [7,1.75,1], [3.5,0,2], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'C': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,3.5,4], [3.5,0,3], [7,1.75,2], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'D': [ [0,0,0], [0,7,0], [3.5,7,0], [7,3.5,1], [3.5,0,2], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'E': [ [0,0,0], [0,7,0], [7,7,0], [0,7,0], [0,3.5,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [7,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'F': [ [0,0,0], [0,7,0], [7,7,0], [0,7,0], [0,3.5,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'G': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,3.5,4], [3.5,0,3], [7,1.75,2], [5.25,1.75,0], [7,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'H': [ [0,0,0], [0,7,0], [0,3.5,0], [7,3.5,0], [7,7,0], [7,0,0], [7,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'I': [ [3.5,-1,0], [3.5,7,0], [0,7,0], [7,7,0], [3.5,7,0], [3.5,0,0], [0,0,0], [7,0,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'J': [ [3.5,-1,0], [3.5,0,0], [0,1.75,3], [3.5,0,3], [7,1.75,2], [7,7,0], [7,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'K': [ [0,0,0], [0,7,0], [0,1.75,0], [3.5,3.5,0], [7,7,0], [3.5,3.5,0], [7,0,0], [3.5,3.5,0], [0,1.75,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'L': [ [0,0,0], [0,7,0], [0,0,0], [7,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'M': [ [0,0,0], [0,7,0], [3.5,0,0], [7,7,0], [7,0,0], [7,7,0], [3.5,0,0], [0,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'N': [ [0,0,0], [0,7,0], [7,0,0], [7,7,0], [7,0,0], [0,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'O': [ [3.5,-1,0], [3.5, 0, 0], [0, 3.5, 3], [3.5, 7, 4], [7.0, 3.5, 1], [3.5, 0, 2], [3.5, -1, 0], [8, -1, 0] ],\n  'P': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'Q': [ [3.5,-1,0], [3.5, 0, 0], [0, 3.5, 3], [3.5, 7, 4], [7.0, 3.5, 1], [3.5, 0, 2], [4.325,0.5,4], [6.075,0,0], [7,0.5,2], [6.075,0,2], [4.325,0.5,0], [3.5,0,4], [3.5, -1, 0], [8, -1, 0] ],\n  'R': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [7,0,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'S': [ [3.5,-1,0], [3.5,0,0], [0,1.75,3], [3.5,0,3], [7,1.75,2], [3.5,3.5,1], [0,5.25,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,5.25,4], [3.5,3.5,3], [7,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'T': [ [3.5,-1,0], [3.5,7,0], [0,7,0], [7,7,0], [3.5,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'U': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [0,7,0], [0,3.5,0], [3.5,0,3], [7,3.5,2], [7,7,0], [7,3.5,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'V': [ [3.5,-1,0], [3.5,0,0], [0,7,0], [3.5,0,0], [7,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'W': [ [1.75,-1,0], [1.75,0,0], [0,7,0], [1.75,0,0], [3.5,7,0], [5.25,0,0], [7,7,0], [5.25,0,0], [3.5,7,0], [1.75,0,0], [1.75,-1,0], [8,-1,0] ],\n  'X': [ [0,0,0], [7,7,0], [3.5,3.5,0], [0,7,0], [7,0,0], [3.5,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'Y': [ [3.5,-1,0], [3.5,3.5,0], [0,7,0], [3.5,3.5,0], [7,7,0], [3.5,3.5,0], [3.5,-1,0], [8,-1,0] ],\n  'Z': [ [0,0,0], [7,0,0], [0,0,0], [7,7,0], [0,7,0], [7,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  '0': [ [3.5,-1,0], [3.5,0,0], [6,3.5,2], [3.5,7,1], [1,3.5,4], [3.5,0,3], [3.5,-1,0], [8,-1,0] ],\n  '1': [ [0,-1,0], [0,0,0], [0,0,0], [7,0,0], [3.5,0,0], [3.5,7,0], [1.5,6,2], [3.5,7,2], [3.5,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  '2': [ [1,-1,0], [1,0,0], [6,5.25,0], [3.5,7,1], [1,5.25,4], [3.5,7,4], [6,5.25,1], [1,0,0], [6,0,0], [1,0,0], [1,-1,0], [8,-1,0] ],\n  '3': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [3.5,0,3], [6,1.75,2], [3.5,3.5,1], [6,5.25,2], [3.5,7,1], [1,5.25,4], [3.5,7,4], [6,5.25,1], [3.5,3.5,2], [6,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '4': [ [3.5,-1,0], [3.5,0,0], [3.5,7,0], [1,3.5,0], [6,3.5,0], [3.5,3.5,0], [3.5,-1,0], [8,-1,0] ],\n  '5': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [3.5,0,3], [6,1.75,2], [3.5,3.5,1],[1,3.5,0], [1,7,0], [6,7,0], [1,7,0], [1,3.5,0], [3.5,3.5,0], [6,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '6': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [5.25,7,4], [1,1.75,4], [3.5,0,3],[6,1.75,2], [3.5,3.5,1], [1,1.75,4], [3.5,0,3], [3.5,-1,0], [8,-1,0] ],\n  '7': [ [3.5,-1,0], [3.5,0,0], [6,7,0], [1,7,0], [6,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  '8': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [6,5.25,0], [3.5,7,1], [1,5.25,4], [6,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '9': [ [3.5,-1,0], [3.5,0,0], [6,5.25,2], [3.5,7,1], [1,5.25,4], [3.5,3.5,3], [6,5.25,2], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '$': [ [3.5,-1,0], [3.5,0.5,0], [0,2.00,3], [3.5,0.5,3], [7,2.00,2], [3.5,3.5,1], [0,5.00,3], [3.5,6.5,4], [7,5.00,1], [3.5,6.5,1], [3.5, 7, 0], [3.5, 0, 0], [3.5,-1,0], [8,-1,0] ],\n  '.': [ [3.5,-1,0], [3.5,0.5,0], [3,1,3], [3.5,1.5,4], [4,1,1], [3.5,0.5,2], [3.5,-1,0], [8,-1,0] ],\n}\n\n// This is a clever way to create a range from 0..32, and then compute an x,y for each of those\n// points on the unit circle from zero to pi/2.\nconst curve = [...Array(32).keys()].map((index) => {\n  let angle = (index+1) * Math.PI/2.0/32.0\n  return Vertex(Math.cos(angle), Math.sin(angle))\n})\n\nconst billseyConverter = (vertices) => {\n  let newVertices = []\n  let prevPoint = Vertex(0,0)\n  vertices.forEach( (vertex) => {\n    switch (vertex[2]) {\n    case 0:\n    default:\n      newVertices.push(Vertex(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 1: // NE\n      if (vertex[1] < prevPoint[1]) { // clockwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      } else { // ccwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      }\n      newVertices.push(Vertex(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 2: // SE\n      if (vertex[1] < prevPoint[1]) { // clockwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      } else { // ccwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      }\n      newVertices.push(Vertex(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 3: // SW\n      if (vertex[1] > prevPoint[1]) { // clockwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      } else { // ccwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      }\n      newVertices.push(Vertex(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 4: // NW\n      if (vertex[1] > prevPoint[1]) { // clockwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      } else { // ccwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      }\n      newVertices.push(Vertex(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    }\n    prevPoint = vertex\n  })\n\n  const scale = 0.6;\n  const offset_y = -0.5\n  const scaledVertices = newVertices.map( vertex => {\n    return Vertex(scale * vertex.x, scale * vertex.y + offset_y)\n  })\n  return {\n    maxX: fontSpacing,\n    vertices: scaledVertices,\n  }\n}\n\nconst raysolConverter = (vertices) => {\n  let newVertices = []\n  vertices.forEach( (vertex) => {\n    newVertices.push(Vertex(vertex[0], vertex[1]))\n  })\n\n  return {\n    maxX: fontSpacing,\n    vertices: newVertices,\n  }\n}\n\nexport const MonospaceFont = (ch) => {\n  let upper = ch.toUpperCase()\n  if (billsey.hasOwnProperty(upper)) {\n    return billseyConverter(billsey[upper])\n  } else {\n    return billseyConverter(billsey[' '])\n  }\n}\n\nexport const CursiveFont = (ch) => {\n  if (raysol_cursive.hasOwnProperty(ch)) {\n    return raysolConverter(raysol_cursive[ch])\n  } else {\n    return raysolConverter(raysol_cursive[' '])\n  }\n}\n\nexport const SansSerifFont = (ch) => {\n  if (raysol_cursive.hasOwnProperty(ch)) {\n    return raysolConverter(raysol_sanserif[ch])\n  } else {\n    return raysolConverter(raysol_sanserif[' '])\n  }\n}\n","import { Vertex } from './Geometry'\nimport Victor from 'victor'\n\n// Determines which of 8 neighbor areas the point is in:\n//   https://stackoverflow.com/questions/3746274/line-intersection-with-aabb-rectangle\n//\n//           |          |\n//   0b1001  |  0b0001  |  0b0101\n//           |          |\n// ------------------------------ y_max\n//           |          |\n//   0b1000  |  0b0000  |  0b0100\n//           |          |\n// ------------------------------ y_min\n//           |          |\n//   0b1010  |  0b0010  |  0b0110\n//           |          |\n//         x_min      x_max\n//\nfunction pointLocation(point, size_x, size_y) {\n  var location = 0b0\n  if (point.x < -size_x) {\n    location += 0b1000\n  } else if (point.x > size_x) {\n    location += 0b0100\n  }\n\n  if (point.y < -size_y) {\n    location += 0b0001\n  } else if (point.y > size_y) {\n    location += 0b0010\n  }\n\n  return location\n}\n\n// Determine intersection with one of the sides\nfunction intersection(line_start, line_end, side_start, side_end) {\n  var line = line_end.clone().subtract(line_start)\n  var side = side_end.clone().subtract(side_start)\n  var lineCrossSidePerp = line.x * side.y - line.y * side.x\n\n  // if line Cross side === 0, it means the lines are parallel so have infinite intersection points\n  if (lineCrossSidePerp === 0) {\n    return null\n  }\n\n  var diff = side_start.clone().subtract(line_start)\n  var t = (diff.x * side.y - diff.y * side.x) / lineCrossSidePerp\n  if (t < 0 || t >= 1) {\n    return null\n  }\n\n  var u = (diff.x * line.y - diff.y * line.x) / lineCrossSidePerp\n  if (u < 0 || u >= 1) {\n    return null\n  }\n\n  var intersection = line_start.clone().add(line.clone().multiply(Victor(t, t)))\n  return intersection\n}\n\n// This method is the guts of logic for this limits enforcer. It will take a single line (defined by\n// start and end) and if the line goes out of bounds, returns the vertices around the outside edge\n// to follow around without messing up the shape of the vertices.\n//\nfunction clipLine(line_start, line_end, size_x, size_y) {\n  var quadrant_start = pointLocation(line_start, size_x, size_y)\n  var quadrant_end = pointLocation(line_end, size_x, size_y)\n\n  if (quadrant_start === 0b0000 && quadrant_end === 0b0000) {\n    // The line is inside the boundaries\n    return [line_start, line_end]\n  }\n\n  if (quadrant_start === quadrant_end) {\n    // We are in the same box, and we are out of bounds.\n    return [nearestVertex(line_start, size_x, size_y), nearestVertex(line_end, size_x, size_y)]\n  }\n\n  if (quadrant_start & quadrant_end) {\n    // These points are all on one side of the box.\n    return [nearestVertex(line_start, size_x, size_y), nearestVertex(line_end, size_x, size_y)]\n  }\n\n  if (quadrant_start === 0b000) {\n    // We are exiting the box. Return the start, the intersection with the boundary, and the closest\n    // boundary point to the exited point.\n    var line = [line_start]\n    line.push(boundPoint(line_start, line_end, size_x, size_y))\n    line.push(nearestVertex(line_end, size_x, size_y))\n    return line\n  }\n\n  if (quadrant_end === 0b000) {\n    // We are re-entering the box.\n    return [boundPoint(line_end, line_start, size_x, size_y), line_end]\n  }\n\n  // We have reached a terrible place, where both points are oob, but it might intersect with the\n  // work area.\n\n  // First, define the boundaries as lines.\n  const sides = [\n    // left\n    [Victor(-size_x, -size_y), Victor(-size_x, size_y)],\n    // right\n    [Victor(size_x, -size_y), Victor(size_x, size_y)],\n    // bottom\n    [Victor(-size_x, -size_y), Victor(size_x, -size_y)],\n    // top\n    [Victor(-size_x, size_y), Victor(size_x, size_y)],\n  ]\n\n  // Count up the number of boundary lines intersect with our line segment.\n  var intersections = []\n  for (var s=0; s<sides.length; s++) {\n    var int_point = intersection(Victor.fromObject(line_start),\n                                 Victor.fromObject(line_end),\n                                 sides[s][0],\n                                 sides[s][1])\n    if (int_point) {\n      intersections.push(Vertex(int_point.x, int_point.y))\n    }\n  }\n\n  if (intersections.length !== 0) {\n    if (intersections.length !== 2) {\n      // We should never get here. How would we have something other than 2 or 0 intersections with\n      // a box?\n      console.log(intersections)\n      throw Error(\"Software Geometry Error\")\n    }\n\n    // The intersections are tested in some normal order, but the line could be going through them\n    // in any direction. This check will flip the intersections if they are reversed somehow.\n    if (Victor.fromObject(intersections[0]).subtract(Victor.fromObject(line_start)).lengthSq() >\n        Victor.fromObject(intersections[1]).subtract(Victor.fromObject(line_start)).lengthSq()) {\n      var temp = intersections[0]\n      intersections[0] = intersections[1]\n      intersections[1] = temp\n    }\n    return [...intersections, nearestVertex(line_end, size_x, size_y)]\n  }\n\n  // Damn. We got here because we have a start and end that are failing different boundary checks,\n  // and the line segment doesn't intersect the box. We have to crawl around the outside of the\n  // box until we reach the other point.\n  //\n  // Here, I'm going to split this line into two parts, and send each half line segment back\n  // through the clipLine algorithm. Eventually, that should result in only one of the other cases.\n  var midpoint = Victor.fromObject(line_start).add(Victor.fromObject(line_end)).multiply(Victor(0.5, 0.5))\n  // recurse, and find smaller segments until we don't end up in this place again.\n  return [...clipLine(line_start, midpoint, size_x, size_y),\n          ...clipLine(midpoint,   line_end, size_x, size_y)]\n}\n\n// Finds the nearest vertex that is in the bounds. This will change the shape. i.e. this doesn't\n// care about the line segment, only about the point.\nfunction nearestVertex(vertex, size_x, size_y) {\n  return Vertex(Math.min(size_x, Math.max(-size_x, vertex.x)),\n                Math.min(size_y, Math.max(-size_y, vertex.y)))\n}\n\n// Intersect the line with the boundary, and return the point exactly on the boundary.\n// This will keep the shape. i.e. It will follow the line segment, and return the point on that line\n// segment.\nfunction boundPoint(good, bad, size_x, size_y) {\n  var dx = good.x - bad.x\n  var dy = good.y - bad.y\n\n  var fixed = Vertex(bad.x, bad.y)\n  var distance = 0\n  if (bad.x < -size_x || bad.x > size_x) {\n    if (bad.x < -size_x) {\n      // we are leaving the left\n      fixed.x = -size_x\n    } else {\n      // we are leaving the right\n      fixed.x = size_x\n    }\n    distance = (fixed.x - good.x) / dx\n    fixed.y = good.y + distance * dy\n    // We fixed x, but y might have the same problem, so we'll rerun this, with different points.\n    return boundPoint(good, fixed, size_x, size_y)\n  }\n  if (bad.y < -size_y || bad.y > size_y) {\n    if (bad.y < -size_y) {\n      // we are leaving the bottom\n      fixed.y = -size_y\n    } else {\n      // we are leaving the top\n      fixed.y = size_y\n    }\n    distance = (fixed.y - good.y) / dy\n    fixed.x = good.x + distance * dx\n  }\n  return fixed\n}\n\n// Returns points along the circle from the start to the end, tracing a circle of radius size.\nexport const traceCircle = function(startAngle, endAngle, size) {\n  let resolution = (Math.PI*2.0) / 128.0 // 128 segments per circle. Enough?\n  let deltaAngle = ((endAngle - startAngle) + 2.0 * Math.PI) % (2.0 * Math.PI)\n  if (deltaAngle > Math.PI) {\n    deltaAngle -= 2.0 * Math.PI\n  }\n  if (deltaAngle < 0.0) {\n    resolution *= -1.0\n  }\n\n  var tracePoints = []\n  for (var step = 0; step < (deltaAngle/resolution) ; step++) {\n    tracePoints.push(Victor(size * Math.cos(resolution * step + startAngle),\n                            size * Math.sin(resolution * step + startAngle)))\n  }\n  return tracePoints\n}\n\nfunction onSegment(start, end, point) {\n  if (start.distance(point) + end.distance(point) - start.distance(end) < 0.001) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction getIntersections(start, end, size) {\n  var direction = end.clone().subtract(start).clone().normalize()\n\n  var t = direction.x * -1.0 * start.x + direction.y * -1.0 * start.y\n  var e = direction.clone().multiply(Victor(t,t)).add(start)\n\n  var distanceToLine = e.magnitude()\n\n  if (distanceToLine >= size)\n  {\n    return {\n      intersection: false,\n      points: [],\n    }\n  }\n\n  var dt = Math.sqrt(size*size - distanceToLine*distanceToLine)\n  var point1 = direction.clone().multiply(Victor(t - dt,t - dt)).add(start)\n  var point2 = direction.clone().multiply(Victor(t + dt,t + dt)).add(start)\n\n  return {\n    intersection: true,\n    points: [\n      {\n        point: point1,\n        on: onSegment(start, end, point1),\n      },\n      {\n        point: point2,\n        on: onSegment(start, end, point2),\n      }\n    ]}\n}\n\n// This method is the guts of logic for this limits enforcer. It will take a single line (defined by\n// start and end) and if the line goes out of bounds, returns the vertices around the outside edge\n// to follow around without messing up the shape of the vertices.\n//\nfunction clipLineCircle(line_start, line_end, size) {\n  // Cases:\n  // 1 - Entire line is inside\n  //     return start, end\n  // 2 - Entire line is outside\n  //     trace from start to end\n  // 3 - only start is inside\n  //     find the intersection\n  //     include start\n  //     include intersection\n  //     trace from intersection to closest to end point\n  // 4 - only end is inside\n  //     do reverse of 3\n  // 4 - Neither end is inside, but there is some line segment inside\n  //     find both intersections\n  //     trace from start to first intersction\n  //     trace from second intersection to end\n\n  // Helper objects\n  const start = Victor.fromObject(line_start)\n  const end = Victor.fromObject(line_end)\n\n  // I'll need these\n  const rad_start = start.magnitude()\n  const rad_end = end.magnitude()\n\n  // Check the easy case\n  if (rad_start <= size && rad_end <= size) {\n    // The whole segment is inside\n    return [line_start, line_end]\n  }\n\n  // Check for the odd case of coincident points\n  if (start.distance(end) < 0.00001) {\n     return [nearestVertexCircle(start, size)]\n  }\n\n  var intersections = getIntersections(start, end, size)\n\n  if ( !intersections.intersection )\n  {\n    // The whole line is outside, just trace.\n    return traceCircle(start.angle(), end.angle(), size)\n  }\n\n  // if neither point is on the segment, then it should just be a trace\n  if (!intersections.points[0].on && ! intersections.points[1].on) {\n    return traceCircle(start.angle(), end.angle(), size)\n  }\n\n  // If both points are outside, but there's an intersection\n  if (rad_start > size + 1.0e-9 && rad_end > size + 1.0e-9) {\n    let point = intersections.points[0].point\n    let other_point = intersections.points[1].point\n\n    return [\n      ...traceCircle(start.angle(), point.angle(), size),\n      point,\n      ...traceCircle(other_point.angle(), end.angle(), size)\n    ]\n  }\n\n  // If we're here, then one point is still in the circle.\n  if (rad_start <= size) {\n    var point1 = (intersections.points[0].on && Math.abs(intersections.points[0].point - start) > 0.0001) ? intersections.points[0].point : intersections.points[1].point\n    return [\n      start,\n      ...traceCircle(point1.angle(), end.angle(), size),\n      end\n    ]\n  } else {\n    point1 = intersections.points[0].on ? intersections.points[0].point : intersections.points[1].point\n    return [\n      ...traceCircle(start.angle(), point1.angle(), size),\n      point1,\n      end\n    ]\n  }\n}\n\n// Finds the nearest vertex that is in the bounds of the circle. This will change the shape. i.e. this doesn't\n// care about the line segment, only about the point.\nfunction nearestVertexCircle(vertex, size) {\n  const point = Victor.fromObject(vertex)\n  if ( point.length() > size) {\n    let scale = size / point.length()\n    return point.multiply(Victor(scale, scale))\n  } else {\n    return point\n  }\n}\n\n// Manipulates the points to make them all in bounds, while doing the least amount of damage to the\n// desired shape.\nexport const enforceRectLimits = function(vertices, size_x, size_y) {\n  var cleanVertices = []\n  var previous = null\n\n  if (size_x < 0) {\n    size_x *= -1.0\n  }\n  if (size_y < 0) {\n    size_y *= -1.0\n  }\n  for (var next=0; next<vertices.length; next++) {\n    var vertex = vertices[next]\n    if (previous) {\n      var line = clipLine(previous, vertex, size_x, size_y)\n      for (var pt=0; pt<line.length; pt++) {\n        if (line[pt] !== previous) {\n          cleanVertices.push(line[pt])\n        }\n      }\n    } else {\n      cleanVertices.push(nearestVertex(vertex, size_x, size_y))\n    }\n    previous = vertex\n  }\n\n  // Just for sanity, and cases that I haven't thought of, clean this list again, including removing\n  // duplicate points\n  previous = null\n  var cleanerVertices = []\n  for (var i=0; i<cleanVertices.length; i++) {\n    if (previous) {\n      let start = Victor.fromObject(cleanVertices[i])\n      let end = Victor.fromObject(previous)\n      if (start.distance(end) > 0.001) {\n        cleanerVertices.push(nearestVertex(cleanVertices[i], size_x, size_y))\n      }\n    } else {\n      cleanerVertices.push(nearestVertex(cleanVertices[i], size_x, size_y))\n    }\n    previous = cleanVertices[i]\n  }\n\n  return cleanerVertices\n}\n\nexport const enforcePolarLimits = function(vertices, size) {\n  var cleanVertices = []\n  var previous = null\n\n  for (var next=0; next<vertices.length; next++) {\n    var vertex = vertices[next]\n    if (previous) {\n      var line = clipLineCircle(previous, vertex, size)\n      for (var pt=0; pt<line.length; pt++) {\n        if (line[pt] !== previous) {\n          cleanVertices.push(line[pt])\n        }\n      }\n    } else {\n      cleanVertices.push(nearestVertexCircle(vertex, size))\n    }\n    previous = vertex\n  }\n\n  // Just for sanity, and cases that I haven't thought of, clean this list again, including removing\n  // duplicate points\n  previous = null\n  var cleanerVertices = []\n  for (var i=0; i<cleanVertices.length; i++) {\n    if (previous) {\n      let start = Victor.fromObject(cleanVertices[i])\n      let end = Victor.fromObject(previous)\n      if (start.distance(end) > 0.001) {\n        cleanerVertices.push(nearestVertexCircle(cleanVertices[i], size))\n      }\n    } else {\n      cleanerVertices.push(nearestVertexCircle(cleanVertices[i], size))\n    }\n    previous = cleanVertices[i]\n  }\n  return cleanerVertices\n}\n","import { CursiveFont, SansSerifFont, MonospaceFont } from './Fonts'\nimport { Vertex } from '../../common/Geometry'\nimport Shape, { shapeOptions } from '../Shape'\nimport { traceCircle } from '../../common/LimitEnforcer'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    inputText: {\n      title: 'Text',\n      type: 'textarea',\n    },\n    inputFont: {\n      title: 'Font',\n      type: 'dropdown',\n      choices: ['Cursive', 'Sans Serif', 'Monospace'],\n    },\n    rotateDir: {\n      title: 'Rotate',\n      type: 'dropdown',\n      choices: ['Top', 'Center', 'Bottom'],\n    },\n  }\n}\n\nfunction getMaxX(points) {\n  // Measure the width of the line\n  let maxX = 0\n  points.forEach( (point) => {\n    if (point.x > maxX) {\n      maxX = point.x\n    }\n  })\n  return maxX\n}\n\nexport default class InputText extends Shape {\n  constructor() {\n    super('Text')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'inputText',\n        inputText: 'Sandify',\n        inputFont: 'Cursive',\n        rotateDir: 'Center',\n        repeatEnabled: false,\n        startingSize: 25\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let prevLetter = ''\n    let x = 0.0\n    let lines = []\n    for (let chi = 0; chi < state.shape.inputText.length; chi++) {\n      var nextLetter = state.shape.inputText[chi]\n      if (prevLetter === 'b' || prevLetter === 'v' || prevLetter === 'o' || prevLetter === 'w') {\n        // Save this letter before we possibly add in a '*'\n        prevLetter = nextLetter\n        if (nextLetter.search('[a-z]+') !== -1 && state.shape.inputFont === 'Cursive')\n        {\n          nextLetter = nextLetter + '*'\n        }\n      }\n      else {\n        prevLetter = nextLetter\n      }\n\n      if (nextLetter === '\\n') {\n        // New line\n        lines.push(points)\n        points = []\n        x = 0.0\n        continue\n      }\n\n      var shape = undefined\n      if (state.shape.inputFont === 'Cursive') {\n        shape = CursiveFont(nextLetter)\n      } else if (state.shape.inputFont === 'Sans Serif') {\n        shape = SansSerifFont(nextLetter)\n      } else if (state.shape.inputFont === 'Monospace') {\n        shape = MonospaceFont(nextLetter)\n      } else {\n        // Internal error, but I'm going to just recover\n        shape = CursiveFont(nextLetter)\n      }\n\n      // TODO add in the \"Kern\" here.\n      for (let vi = 0; vi < shape.vertices.length; vi++) {\n        points.push(Vertex(shape.vertices[vi].x + x, shape.vertices[vi].y))\n      }\n      x += shape.vertices[shape.vertices.length-1].x\n    }\n    // Save the last line we were working on.\n    lines.push(points)\n\n    // The height of a row of text, including the space above.\n    const maxY = 2.4\n\n    if (state.shape.rotateDir === 'Center') {\n      // Starting Y offset\n      let y = (lines.length - 1) * maxY / 2.0\n      let textPoints = []\n\n      // Capture some wrap around points, to connect the lines.\n      let connectorPoints = []\n      lines.forEach( (points) => {\n        let maxX = getMaxX(points)\n        let widthOffset = maxX / 2.0\n\n        // Add in the connector points (if we have any)\n        textPoints = [...textPoints, ...connectorPoints]\n        connectorPoints = []\n\n        // offset the line's vertices\n        textPoints = [...textPoints, ...points.map( (point) => {\n          return Vertex(point.x - widthOffset, point.y + y)\n        })]\n\n        // Add in some points way off, so to wrap around for this line.\n        connectorPoints.push(Vertex(1e9, y))\n        connectorPoints.push(Vertex(1e9, -1e9))\n        connectorPoints.push(Vertex(-1e9, -1e9))\n        y -= maxY\n        connectorPoints.push(Vertex(-1e9, y))\n      })\n      return textPoints\n    } else {\n      // This variable controls \"Top\" vs. \"Bottom\"\n      let direction = 1.0\n      if (state.shape.rotateDir === 'Bottom') {\n        direction = -1.0\n        lines.reverse()\n      }\n\n      // These are the vertices we will be using.\n      let textPoints = []\n\n      // Some constants to rotate the letters.\n      //\n      // The \"lines\" object contains lines of words, in vertices.\n      // The vertices are in X, Y, the X starts at 0, the Y goes between -something and +something.\n      // The middle of the word is about at Y=0.\n      //\n      // We want the words to follow around a circle. We want them to stay about the same size, as\n      // if they were plotted in a line. We want them to be centered.\n      //\n      // r is the radius, theta is the angle.\n      // rPerY is the multiplier to get from Y to r.\n      // thetaPerX is the multiplier to get from X to theta.\n      //\n      // The Max is based on how far away from the center we start.\n      //\n      // Offset is because we want to start the row far away from the center.\n      //\n      // thetaCenter is how far off from the theta=0 we start the words.\n      //\n      const maxRPerY = 0.8\n      let rPerY = direction * maxRPerY\n      let thetaCenter = direction * Math.PI / 2.0\n      const maxROffset = maxY * 2.0\n      let rOffset = maxROffset\n      const rOffsetPerLine = rOffset / lines.length\n      let thetaPerX = -rPerY / rOffset\n\n      // This captures the previous angle, so we can track around for the next line.\n      let lastTheta\n\n      lines.forEach( (points) => {\n\n        let maxX = getMaxX(points)\n        // This widthOffset is in X.\n        let widthOffset = maxX / 2.0\n\n        // Scale the size of the words to fit within one circle.\n        if (Math.PI * 2.0 < Math.abs(thetaPerX * maxX)) {\n          // We are going to roll all the way around\n          thetaPerX = direction * -Math.PI * 2.0 / maxX\n          rPerY = -thetaPerX * rOffset\n        }\n\n        // Add in the connector points (if we have any)\n        if (lastTheta) {\n          let endTheta = thetaCenter + thetaPerX * -widthOffset\n\n          // Get the Y value of the first point in the next (this) line.\n          let r = rOffset + rPerY * 0.0\n          if (points.length > 0) {\n            r = rOffset + rPerY * points[0].y\n          }\n\n          textPoints = [...textPoints, ...traceCircle(lastTheta, endTheta, r)]\n        }\n\n        // Transform the points and add them to textPoints.\n        textPoints = [...textPoints, ...points.map( (point) => {\n          const r = rOffset + rPerY * point.y\n          lastTheta = thetaCenter + thetaPerX * (point.x - widthOffset)\n          return Vertex(r * Math.cos(lastTheta), r * Math.sin(lastTheta))\n        })]\n\n        // Set up for the next line.\n        rOffset -= rOffsetPerLine\n        rPerY = direction * Math.sqrt(maxRPerY * rOffset / maxROffset)\n        thetaPerX = -rPerY / rOffset\n      })\n      return textPoints\n    }\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { degToRad } from '../common/Geometry'\nimport Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    wiperAngleDeg: {\n      title: 'Wiper angle',\n    },\n    wiperSize: {\n      title: 'Wiper size',\n      min: 1\n    },\n  }\n}\n\nconst outOfBounds = (point, width, height) => {\n  if (point.x < -width/2.0) {\n    return true\n  }\n  if (point.y < -height/2.0) {\n    return true\n  }\n  if (point.x > width/2.0) {\n    return true\n  }\n  if (point.y > height/2.0) {\n    return true\n  }\n  return false\n}\n\n// Intersect the line with the boundary, and return the point exactly on the boundary.\n// This will keep the shape. i.e. It will follow the line segment, and return the point on that line\n// segment.\nfunction boundPoint(good, bad, size_x, size_y) {\n  var dx = good.x - bad.x\n  var dy = good.y - bad.y\n\n  var fixed = Victor(bad.x, bad.y)\n  var distance = 0\n  if (bad.x < -size_x || bad.x > size_x) {\n    if (bad.x < -size_x) {\n      // we are leaving the left\n      fixed.x = -size_x\n    } else {\n      // we are leaving the right\n      fixed.x = size_x\n    }\n    distance = (fixed.x - good.x) / dx\n    fixed.y = good.y + distance * dy\n    // We fixed x, but y might have the same problem, so we'll rerun this, with different points.\n    return boundPoint(good, fixed, size_x, size_y)\n  }\n  if (bad.y < -size_y || bad.y > size_y) {\n    if (bad.y < -size_y) {\n      // we are leaving the bottom\n      fixed.y = -size_y\n    } else {\n      // we are leaving the top\n      fixed.y = size_y\n    }\n    distance = (fixed.y - good.y) / dy\n    fixed.x = good.x + distance * dx\n  }\n  return fixed\n}\n\nfunction nearEnough(end, point) {\n  if (point.clone().subtract(end).length() < 0.01) {\n    return true\n  }\n  return false\n}\n\nexport default class Wiper extends Shape {\n  constructor() {\n    super('Wiper')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'wiper',\n        wiperAngleDeg: 15,\n        wiperSize: 12,\n        startingSize: 1,\n        repeatEnabled: false,\n        selectGroup: 'Erasers',\n        canTransform: false\n      }\n    }\n  }\n\n  getVertices(state) {\n    var outputVertices = []\n\n    // Get the angle between 0,180\n    let angle = (180.0 - (state.shape.wiperAngleDeg % 360)) % 180.0\n    if (angle < 0.0) {\n      angle += 180.0\n    }\n    angle = degToRad(angle)\n\n    // Start with the defaults for 0,45\n    let height = 1\n    let width = 1\n    let machine = state.machine\n    if (machine.rectangular) {\n      height = machine.maxY - machine.minY\n      width = machine.maxX - machine.minX\n    } else {\n      height = machine.maxRadius * 2.0\n      width = height\n    }\n\n    let startLocation = Victor(-width/2.0, height/2.0)\n    let cosa = Math.cos(angle)\n    let sina = Math.sin(angle)\n\n    // These can be zero, but infinity isn't great for out math, so let's just clip it.\n    if (Math.abs(cosa) < 1.0e-10) {\n      cosa = 1.0e-10\n    }\n    if (Math.abs(sina) < 1.0e-10) {\n      sina = 1.0e-10\n    }\n    let orig_delta_w = Victor(state.shape.wiperSize / cosa, 0.0)\n    let orig_delta_h = Victor(0.0, -state.shape.wiperSize / sina)\n\n    if (angle > Math.PI/4.0 && angle < 0.75 * Math.PI) {\n      // flip the logic of x,y\n      let temp = orig_delta_w.clone()\n      orig_delta_w = orig_delta_h.clone()\n      orig_delta_h = temp\n    }\n    if (angle > Math.PI/2.0) {\n      startLocation = Victor(-width/2.0, -height/2.0)\n      orig_delta_w = orig_delta_w.clone().multiply(Victor(-1.0, -1.0))\n      orig_delta_h = orig_delta_h.clone().multiply(Victor(-1.0, -1.0))\n    }\n    let delta_w = orig_delta_w\n    let delta_h = orig_delta_h\n    let endLocation = startLocation.clone().multiply(Victor(-1.0, -1.0))\n    outputVertices.push(startLocation)\n    let nextWidthPoint = startLocation\n    let nextHeightPoint = startLocation\n\n    let emergency_break = 0\n    while (emergency_break < 1000) {\n      emergency_break += 1\n\n      // \"right\"\n      nextWidthPoint = nextWidthPoint.clone().add(delta_w)\n      if (outOfBounds(nextWidthPoint, width, height)) {\n        let corner = boundPoint(nextWidthPoint.clone().subtract(delta_w), nextWidthPoint, width/2.0, height/2.0)\n        outputVertices.push(corner)\n        if (nearEnough(endLocation, corner)) {\n          break\n        }\n        nextWidthPoint = boundPoint(nextHeightPoint, nextWidthPoint, width/2.0, height/2.0)\n        delta_w = orig_delta_h\n      }\n      outputVertices.push(nextWidthPoint)\n      if (nearEnough(endLocation, nextWidthPoint)) {\n        break\n      }\n\n      // \"down-left\"\n      nextHeightPoint = nextHeightPoint.clone().add(delta_h)\n      if (outOfBounds(nextHeightPoint, width, height)) {\n        nextHeightPoint = boundPoint(nextWidthPoint, nextHeightPoint, width/2.0, height/2.0)\n        delta_h = orig_delta_w\n      }\n      outputVertices.push(nextHeightPoint)\n      if (nearEnough(endLocation, nextHeightPoint)) {\n        break\n      }\n\n      // \"down\"\n      nextHeightPoint = nextHeightPoint.clone().add(delta_h)\n      outputVertices.push(nextHeightPoint)\n      if (nearEnough(endLocation, nextHeightPoint)) {\n        break\n      }\n      if (outOfBounds(nextHeightPoint, width, height)) {\n        let corner = boundPoint(nextHeightPoint.clone().subtract(delta_h), nextHeightPoint, width/2.0, height/2.0)\n        outputVertices.push(corner)\n        if (nearEnough(endLocation, corner)) {\n          break\n        }\n        nextHeightPoint = boundPoint(nextWidthPoint, nextHeightPoint, width/2.0, height/2.0)\n        delta_h = orig_delta_w\n      }\n      outputVertices.push(nextHeightPoint)\n      if (nearEnough(endLocation, nextHeightPoint)) {\n        break\n      }\n\n      // \"up-right\"\n      nextWidthPoint = nextWidthPoint.clone().add(delta_w)\n      outputVertices.push(nextWidthPoint)\n      if (nearEnough(endLocation, nextWidthPoint)) {\n        break\n      }\n      if (outOfBounds(nextWidthPoint, width, height)) {\n        nextWidthPoint = boundPoint(nextHeightPoint, nextWidthPoint, width/2.0, height/2.0)\n        delta_w = orig_delta_h\n      }\n    }\n    return outputVertices\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { Vertex } from '../../common/Geometry'\n\nlet Vicious1Vertices = () => {\n  return [\n    Vertex(-0.745613252629, 0.342139688058),\n    Vertex(-0.722681883112, 0.350763810109),\n    Vertex(-0.700286039815, 0.359363989838),\n    Vertex(-0.683380317501, 0.365945196632),\n    Vertex(-0.666520036737, 0.372640251609),\n    Vertex(-0.649705686141, 0.379449643388),\n    Vertex(-0.632937754332, 0.386372394731),\n    Vertex(-0.61621672993, 0.393408994259),\n    Vertex(-0.59954407879, 0.400558464732),\n    Vertex(-0.582920289531, 0.40782080615),\n    Vertex(-0.566345850773, 0.415195529896),\n    Vertex(-0.549821739752, 0.42268214735),\n    Vertex(-0.533348933706, 0.430280658513),\n    Vertex(-0.516927921255, 0.437990574764),\n    Vertex(-0.500559191017, 0.445811896105),\n    Vertex(-0.484244208848, 0.453743645298),\n    Vertex(-0.467982974749, 0.461785822342),\n    Vertex(-0.451776954575, 0.46993793862),\n    Vertex(-0.435626636946, 0.478199505511),\n    Vertex(-0.417042020391, 0.487809171708),\n    Vertex(-0.398529230801, 0.497557117029),\n    Vertex(-0.380089734033, 0.507441875618),\n    Vertex(-0.361724018706, 0.517463936093),\n    Vertex(-0.343433550675, 0.527621343979),\n    Vertex(-0.325218818561, 0.537915076515),\n    Vertex(-0.307080799601, 0.548343667842),\n    Vertex(-0.289020959651, 0.558906629343),\n    Vertex(-0.271040275948, 0.569603472399),\n    Vertex(-0.253139237112, 0.580433708391),\n    Vertex(-0.235319797618, 0.591396360082),\n    Vertex(-0.217581468846, 0.60249142747),\n    Vertex(-0.199926693892, 0.61371793332),\n    Vertex(-0.182355472755, 0.625075389011),\n    Vertex(-0.164869271291, 0.636562817306),\n    Vertex(-0.147469066739, 0.648180218206),\n    Vertex(-0.130155347716, 0.659926125854),\n    Vertex(-0.112929580079, 0.671800540249),\n    Vertex(-0.0957922524482, 0.683802484155),\n    Vertex(-0.0787448306786, 0.695931957571),\n    Vertex(-0.0617878033894, 0.708187006022),\n    Vertex(-0.0449226364371, 0.720568118127),\n    Vertex(-0.0281493298216, 0.733074316648),\n    Vertex(-0.0114698380183, 0.745704624347),\n    Vertex(0.00511535035415, 0.758458552606),\n    Vertex(0.021605258058, 0.771335124187),\n    Vertex(0.0379993964745, 0.78433433909),\n    Vertex(0.0542962997473, 0.79745424284),\n    Vertex(0.0689143087782, 0.809362371934),\n    Vertex(0.0834609794625, 0.821357963795),\n    Vertex(0.0979358231812, 0.833440041186),\n    Vertex(0.112337862697, 0.845608604107),\n    Vertex(0.12666660939, 0.857863652558),\n    Vertex(0.140921574643, 0.870203720682),\n    Vertex(0.155102758455, 0.882629297099),\n    Vertex(0.169209183589, 0.895138915952),\n    Vertex(0.181539967956, 0.906207597924),\n    Vertex(0.193955771996, 0.91718051061),\n    Vertex(0.206455618473, 0.928057165389),\n    Vertex(0.219038530147, 0.938837562262),\n    Vertex(0.22146207946, 0.940840899396),\n    Vertex(0.223916411758, 0.942806124262),\n    Vertex(0.226401527041, 0.944732748242),\n    Vertex(0.228916936691, 0.946620282717),\n    Vertex(0.230887047745, 0.948104706671),\n    Vertex(0.232926054052, 0.949493361338),\n    Vertex(0.235029069424, 0.950783803623),\n    Vertex(0.237191207672, 0.951972124576),\n    Vertex(0.239407582608, 0.953055881104),\n    Vertex(0.241672819425, 0.954032630111),\n    Vertex(0.243982520555, 0.954900417123),\n    Vertex(0.246330822571, 0.955656799046),\n    Vertex(0.248847209458, 0.956426373676),\n    Vertex(0.251395845187, 0.957082100124),\n    Vertex(0.253971354951, 0.957622512531),\n    Vertex(0.256568363942, 0.958047610898),\n    Vertex(0.259181985973, 0.958355440751),\n    Vertex(0.261806846237, 0.958546002088),\n    Vertex(0.264437081308, 0.958618806291),\n    Vertex(0.267068293617, 0.958573364741),\n    Vertex(0.269695108356, 0.958410166058),\n    Vertex(0.2723116621, 0.95812921024),\n    Vertex(0.274913068661, 0.957731474526),\n    Vertex(0.277493953231, 0.957217447535),\n    Vertex(0.280048941005, 0.956588595122),\n    Vertex(0.282573634412, 0.955845405908),\n    Vertex(0.285062170027, 0.954989834366),\n    Vertex(0.287510150281, 0.954023834973),\n    Vertex(0.289695253613, 0.953107674698),\n    Vertex(0.291880845564, 0.952108937844),\n    Vertex(0.301388879047, 0.947138218659),\n    Vertex(0.310845118937, 0.942069775711),\n    Vertex(0.320249076614, 0.936904097619),\n    Vertex(0.329599286221, 0.931642650239),\n    Vertex(0.363485000908, 0.912453612212),\n    Vertex(0.397329182996, 0.8931922586),\n    Vertex(0.431132321104, 0.873858589404),\n    Vertex(0.464893926612, 0.854453093243),\n    Vertex(0.498613999522, 0.834975281497),\n    Vertex(0.532292539832, 0.815425642786),\n    Vertex(0.565929058925, 0.795804177109),\n    Vertex(0.599524045418, 0.776110884466),\n    Vertex(0.614195802519, 0.767461354237),\n    Vertex(0.628780096852, 0.758665238364),\n    Vertex(0.643274973942, 0.749722536847),\n    Vertex(0.657679456551, 0.740634715542),\n    Vertex(0.663100193664, 0.737124966608),\n    Vertex(0.668459853424, 0.733522380099),\n    Vertex(0.673756481358, 0.729827933253),\n    Vertex(0.678988611609, 0.72604211469),\n    Vertex(0.681833350338, 0.72394251965),\n    Vertex(0.684601864533, 0.721743246372),\n    Vertex(0.687290245243, 0.719446737951),\n    Vertex(0.689896049373, 0.717056903336),\n    Vertex(0.692415367973, 0.714576674241),\n    Vertex(0.694845269331, 0.71200800514),\n    Vertex(0.697182821733, 0.709355293604),\n    Vertex(0.699425093466, 0.706621471345),\n    Vertex(0.70031242523, 0.705263599663),\n    Vertex(0.70110301047, 0.703846605105),\n    Vertex(0.701792940234, 0.702378794191),\n    Vertex(0.702378794191, 0.700866030346),\n    Vertex(0.702858129247, 0.699316131471),\n    Vertex(0.703228502307, 0.697736426848),\n    Vertex(0.703487470278, 0.696135222997),\n    Vertex(0.703634544541, 0.694519360583),\n    Vertex(0.703808492838, 0.692484263226),\n    Vertex(0.704005894839, 0.688243540547),\n    Vertex(0.704113390977, 0.683999886156),\n    Vertex(0.704130981255, 0.679754765908),\n    Vertex(0.704059154289, 0.675510622897),\n    Vertex(0.703896932843, 0.671268434362),\n    Vertex(0.703645294154, 0.667031132015),\n    Vertex(0.703303749604, 0.662799693094),\n    Vertex(0.702872787811, 0.658576560692),\n    Vertex(0.701225165173, 0.648144060414),\n    Vertex(0.699422161753, 0.637737456933),\n    Vertex(0.697463288931, 0.627358704724),\n    Vertex(0.695350012565, 0.617010735501),\n    Vertex(0.693864122754, 0.60962184181),\n    Vertex(0.691242194203, 0.596705692105),\n    Vertex(0.688638833167, 0.58378514483),\n    Vertex(0.686055016884, 0.570860688605),\n    Vertex(0.683489768115, 0.557932812049),\n    Vertex(0.679173798139, 0.53578860744),\n    Vertex(0.675031287842, 0.513610688133),\n    Vertex(0.671063214461, 0.491401008603),\n    Vertex(0.667269089377, 0.469161523326),\n    Vertex(0.663649889828, 0.446892232301),\n    Vertex(0.660205127196, 0.424595578622),\n    Vertex(0.65693480148, 0.402273028147),\n    Vertex(0.653839889918, 0.379925069493),\n    Vertex(0.65092039251, 0.357553168517),\n    Vertex(0.648176309256, 0.335159768314),\n    Vertex(0.645608128774, 0.312745357501),\n    Vertex(0.643215362447, 0.290311401936),\n    Vertex(0.641387928086, 0.272862824121),\n    Vertex(0.640313455316, 0.262524627274),\n    Vertex(0.639318138793, 0.252178123907),\n    Vertex(0.638402467138, 0.241824779876),\n    Vertex(0.637566440349, 0.231464595183),\n    Vertex(0.636809569807, 0.221098058444),\n    Vertex(0.636132344132, 0.210726146899),\n    Vertex(0.635534763324, 0.200349349165),\n    Vertex(0.635016338763, 0.189968153863),\n    Vertex(0.634136336281, 0.166283334136),\n    Vertex(0.633371647838, 0.14259411684),\n    Vertex(0.632722273436, 0.118901479213),\n    Vertex(0.632187724454, 0.0952059098725),\n    Vertex(0.631768489513, 0.0715078974381),\n    Vertex(0.631464568611, 0.0478084191472),\n    Vertex(0.63127547313, 0.0241079636186),\n    Vertex(0.631201691689, 0.000406530852484),\n    Vertex(0.631270098323, -0.0222394852774),\n    Vertex(0.631441114908, -0.0448845241697),\n    Vertex(0.631715230062, -0.0675285858243),\n    Vertex(0.632092443786, -0.0901711816225),\n    Vertex(0.63257226746, -0.112811822945),\n    Vertex(0.633154701085, -0.135450021174),\n    Vertex(0.63384023328, -0.158085776309),\n    Vertex(0.634628864044, -0.180717622493),\n    Vertex(0.635306089719, -0.195449968327),\n    Vertex(0.636126969325, -0.210174984878),\n    Vertex(0.637091014243, -0.22489120629),\n    Vertex(0.638198713093, -0.239597655326),\n    Vertex(0.639449577254, -0.254292377511),\n    Vertex(0.640843606728, -0.268974395606),\n    Vertex(0.642380801514, -0.283642243756),\n    Vertex(0.644060672993, -0.298293967485),\n    Vertex(0.64612020129, -0.31581290641),\n    Vertex(0.6482320118, -0.333325493289),\n    Vertex(0.65039757038, -0.350831239505),\n    Vertex(0.652615411173, -0.368331122296),\n    Vertex(0.654741880247, -0.384873800832),\n    Vertex(0.656970959272, -0.401402798041),\n    Vertex(0.659303625486, -0.417918113923),\n    Vertex(0.661739390269, -0.434418282622),\n    Vertex(0.664278253622, -0.450902815519),\n    Vertex(0.666919726926, -0.467371223995),\n    Vertex(0.66966381018, -0.483822530812),\n    Vertex(0.672510992004, -0.500256735972),\n    Vertex(0.675460295159, -0.516672862235),\n    Vertex(0.678512696885, -0.533069932364),\n    Vertex(0.681666731323, -0.54944794636),\n    Vertex(0.684923375712, -0.565805926984),\n    Vertex(0.688253801542, -0.582478578124),\n    Vertex(0.691624294115, -0.599143411363),\n    Vertex(0.695033876193, -0.615799938082),\n    Vertex(0.698483036394, -0.632448158282),\n    Vertex(0.700362264349, -0.641257466863),\n    Vertex(0.702110053844, -0.650093649478),\n    Vertex(0.703725916259, -0.658955240272),\n    Vertex(0.705209362975, -0.667839796151),\n    Vertex(0.705560191283, -0.670609776202),\n    Vertex(0.705811829972, -0.673129583421),\n    Vertex(0.705988709982, -0.675296119238),\n    Vertex(0.706054184903, -0.677469495719),\n    Vertex(0.706007766116, -0.679642872199),\n    Vertex(0.70584945362, -0.681811362492),\n    Vertex(0.705579736035, -0.683968614552),\n    Vertex(0.705199590599, -0.686109253572),\n    Vertex(0.704709505929, -0.688227904745),\n    Vertex(0.704111436502, -0.690317727409),\n    Vertex(0.702891355326, -0.694066410943),\n    Vertex(0.701505632372, -0.697756460219),\n    Vertex(0.699955733497, -0.701380545956),\n    Vertex(0.698245567651, -0.704932316108),\n    Vertex(0.696378555166, -0.708403464156),\n    Vertex(0.694358116374, -0.711788126674),\n    Vertex(0.692188648844, -0.715079462999),\n    Vertex(0.689874061527, -0.718270143849),\n    Vertex(0.688711148751, -0.719521985248),\n    Vertex(0.687505237521, -0.720732294048),\n    Vertex(0.686256816453, -0.721899115774),\n    Vertex(0.684968817262, -0.723021473187),\n    Vertex(0.683641728566, -0.724097900432),\n    Vertex(0.68227750484, -0.725126443034),\n    Vertex(0.68087761194, -0.726106612373),\n    Vertex(0.679444492961, -0.727036942593),\n    Vertex(0.669607619016, -0.733287843069),\n    Vertex(0.659707713245, -0.739438576688),\n    Vertex(0.649746730121, -0.745489632069),\n    Vertex(0.639724669646, -0.751439054737),\n    Vertex(0.626066307964, -0.75960143201),\n    Vertex(0.588245257356, -0.781929357292),\n    Vertex(0.550379253818, -0.804180569421),\n    Vertex(0.512467808729, -0.826354091159),\n    Vertex(0.474510922092, -0.848449922505),\n    Vertex(0.436509082523, -0.87046806346),\n    Vertex(0.398462290023, -0.892408514024),\n    Vertex(0.360370544593, -0.914271274197),\n    Vertex(0.322234334851, -0.936056343978),\n    Vertex(0.311636192795, -0.942000391839),\n    Vertex(0.303639945919, -0.946411153865),\n    Vertex(0.301535464691, -0.947610713051),\n    Vertex(0.299393848434, -0.94874333146),\n    Vertex(0.29721754024, -0.949807054616),\n    Vertex(0.295008494586, -0.9508013939),\n    Vertex(0.292769154566, -0.951725372076),\n    Vertex(0.290501474654, -0.952577523286),\n    Vertex(0.288207897946, -0.95335784753),\n    Vertex(0.285890867534, -0.954064878953),\n    Vertex(0.282197886545, -0.955003515693),\n    Vertex(0.278465327432, -0.955768692754),\n    Vertex(0.274700519477, -0.956358455661),\n    Vertex(0.270912257819, -0.956772315796),\n    Vertex(0.267109337597, -0.957008318683),\n    Vertex(0.263299088092, -0.957066464322),\n    Vertex(0.259490304444, -0.956946752712),\n    Vertex(0.255691781792, -0.956649183855),\n    Vertex(0.251910849416, -0.956174246369),\n    Vertex(0.248156302456, -0.95552340611),\n    Vertex(0.244436447432, -0.954697640316),\n    Vertex(0.240758613626, -0.953699392081),\n    Vertex(0.240319833932, -0.953534238922),\n    Vertex(0.238502171947, -0.952568728147),\n    Vertex(0.236709918141, -0.951555821348),\n    Vertex(0.234945026988, -0.950496007142),\n    Vertex(0.233208964345, -0.949390262768),\n    Vertex(0.23150270745, -0.948239076844),\n    Vertex(0.22982723354, -0.94704293799),\n    Vertex(0.228184008471, -0.945803312061),\n    Vertex(0.226574009482, -0.944520687677),\n    Vertex(0.224074235635, -0.942570121375),\n    Vertex(0.212583875626, -0.933021043911),\n    Vertex(0.201218113415, -0.923323914947),\n    Vertex(0.189977926239, -0.913481666195),\n    Vertex(0.178866245811, -0.903494297655),\n    Vertex(0.161323853183, -0.887790577622),\n    Vertex(0.143655885521, -0.872228557044),\n    Vertex(0.125862831443, -0.856809213159),\n    Vertex(0.107946156805, -0.841533523206),\n    Vertex(0.0899073274635, -0.82640295304),\n    Vertex(0.0717468320377, -0.811418479899),\n    Vertex(0.0534666250026, -0.796580103784),\n    Vertex(0.0350671949772, -0.781890267787),\n    Vertex(0.0165500078179, -0.767348483291),\n    Vertex(-0.00208395923779, -0.752956704771),\n    Vertex(-0.0208327517145, -0.738715420845),\n    Vertex(-0.0396958809936, -0.724625608751),\n    Vertex(-0.0586718812184, -0.710688245726),\n    Vertex(-0.0777597751514, -0.69690382039),\n    Vertex(-0.0969580969362, -0.683274287218),\n    Vertex(-0.116265380716, -0.66979964621),\n    Vertex(-0.135680649254, -0.656480874603),\n    Vertex(-0.155202436693, -0.643318949635),\n    Vertex(-0.174829765796, -0.630314359925),\n    Vertex(-0.194561170706, -0.617469059948),\n    Vertex(-0.214395674185, -0.604782561085),\n    Vertex(-0.234331321759, -0.592256329193),\n    Vertex(-0.254367624808, -0.579891341509),\n    Vertex(-0.274502628858, -0.567688086652),\n    Vertex(-0.29394086248, -0.556123456584),\n    Vertex(-0.313469979201, -0.54471371868),\n    Vertex(-0.333088513165, -0.533458384321),\n    Vertex(-0.352795975753, -0.522359407981),\n    Vertex(-0.372590901108, -0.511416789662),\n    Vertex(-0.392471334756, -0.500631017982),\n    Vertex(-0.412437276696, -0.490003070179),\n    Vertex(-0.432486283835, -0.47953392349),\n    Vertex(-0.452617867553, -0.469224066534),\n    Vertex(-0.472830073375, -0.459073499311),\n    Vertex(-0.493122412682, -0.449083687678),\n    Vertex(-0.513493419618, -0.439255120252),\n    Vertex(-0.533941628327, -0.429588285654),\n    Vertex(-0.554465572951, -0.420083183884),\n    Vertex(-0.575064276254, -0.410741769415),\n    Vertex(-0.595736272379, -0.401563065011),\n    Vertex(-0.61648009547, -0.392549025148),\n    Vertex(-0.637294768288, -0.383699161205),\n    Vertex(-0.658179313597, -0.37501493904),\n    Vertex(-0.679131776921, -0.366496358653),\n    Vertex(-0.698898362385, -0.3585812225),\n    Vertex(-0.718729934152, -0.350830262268),\n    Vertex(-0.738624537745, -0.34324250072),\n    Vertex(-0.758581195928, -0.33581989233),\n    Vertex(-0.778598442844, -0.32856194848),\n    Vertex(-0.798674812635, -0.32146915779),\n    Vertex(-0.818809328066, -0.314542497496),\n    Vertex(-0.83900003466, -0.307782456217),\n    Vertex(-0.849647527216, -0.304229708827),\n    Vertex(-0.859482935305, -0.301024369413),\n    Vertex(-0.86930319621, -0.297772122593),\n    Vertex(-0.879107821313, -0.294472968367),\n    Vertex(-0.888896810615, -0.291126906735),\n    Vertex(-0.898669186876, -0.287733937697),\n    Vertex(-0.908425927336, -0.284294061253),\n    Vertex(-0.918165566137, -0.28080825464),\n    Vertex(-0.927888591898, -0.277275540622),\n    Vertex(-0.931015263683, -0.276110673371),\n    Vertex(-0.934077437785, -0.27478553915),\n    Vertex(-0.937066807683, -0.273304046909),\n    Vertex(-0.939975066859, -0.271669128361),\n    Vertex(-0.942794886029, -0.269885669693),\n    Vertex(-0.945518447293, -0.267958557094),\n    Vertex(-0.948138909988, -0.265892676752),\n    Vertex(-0.950648456212, -0.263693892093),\n    Vertex(-0.953040245302, -0.261368066543),\n    Vertex(-0.955308902451, -0.258921063527),\n    Vertex(-0.957447586996, -0.256360212328),\n    Vertex(-0.959450435511, -0.25369186499),\n    Vertex(-0.961260768213, -0.251131991028),\n    Vertex(-0.962993410524, -0.248518368997),\n    Vertex(-0.96464591935, -0.245853930609),\n    Vertex(-0.966217317453, -0.24314063034),\n    Vertex(-0.972878657732, -0.231316055063),\n    Vertex(-0.972926053757, -0.0130031238537),\n    Vertex(-0.972925565138, 0.00628803550555),\n    Vertex(-0.97291628138, 0.0249869888634),\n    Vertex(-0.972898202484, 0.0430570898088),\n    Vertex(-0.972858135742, 0.0776097691758),\n    Vertex(-0.972741844464, 0.112162448543),\n    Vertex(-0.972548351414, 0.146714639291),\n    Vertex(-0.972277656592, 0.181266341421),\n    Vertex(-0.972203875151, 0.189501034277),\n    Vertex(-0.972085629398, 0.197735727134),\n    Vertex(-0.971922919333, 0.205968954135),\n    Vertex(-0.971715256338, 0.214201692516),\n    Vertex(-0.971568670694, 0.217132916776),\n    Vertex(-0.971310679961, 0.220056811754),\n    Vertex(-0.970942749994, 0.222968491261),\n    Vertex(-0.970464880795, 0.225864534966),\n    Vertex(-0.969878049601, 0.228740056681),\n    Vertex(-0.96918274503, 0.231591636074),\n    Vertex(-0.968380432939, 0.234414875576),\n    Vertex(-0.967472090565, 0.237205866236),\n    Vertex(-0.966500716365, 0.23992551855),\n    Vertex(-0.965406210223, 0.242597774839),\n    Vertex(-0.964191015235, 0.245217260296),\n    Vertex(-0.962857085875, 0.247778600114),\n    Vertex(-0.961408331095, 0.250276908105),\n    Vertex(-0.959846705368, 0.252705832225),\n    Vertex(-0.958176117646, 0.255061463523),\n    Vertex(-0.956399499642, 0.257337938573),\n    Vertex(-0.954520760305, 0.259531348425),\n    Vertex(-0.952544297207, 0.261636318272),\n    Vertex(-0.950473530677, 0.263649427781),\n    Vertex(-0.948313346904, 0.265565790766),\n    Vertex(-0.946067654839, 0.267381009657),\n    Vertex(-0.94374134067, 0.269092641359),\n    Vertex(-0.941339779204, 0.270695799685),\n    Vertex(-0.93886736801, 0.27218804154),\n    Vertex(-0.936329481894, 0.273565946593),\n    Vertex(-0.933731007046, 0.274826094512),\n    Vertex(-0.93107829551, 0.27596701944),\n    Vertex(-0.928375744855, 0.276985301047),\n    Vertex(-0.913861323012, 0.282438287001),\n    Vertex(-0.899294130338, 0.287750550737),\n    Vertex(-0.884676121307, 0.292920137779),\n    Vertex(-0.870008761776, 0.297948025366),\n    Vertex(-0.854391527272, 0.303278856616),\n    Vertex(-0.838793348902, 0.308665390412),\n    Vertex(-0.823214226666, 0.314107138133),\n    Vertex(-0.807654649182, 0.319603611161),\n    Vertex(-0.792114127832, 0.325155298116),\n    Vertex(-0.776593639853, 0.330761710377),\n    Vertex(-0.761093185246, 0.336423336564),\n    Vertex(-0.745613252629, 0.342139688058),\n  ];\n}\n\nexport default Vicious1Vertices;\n","import Vicious1Vertices from './Vicious1Vertices'\nimport Shape from '../Shape'\n\nexport default class V1Engineering extends Shape {\n  constructor() {\n    super('V1Engineering')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'v1Engineering',\n      }\n    }\n  }\n\n  getVertices(state) {\n    return Vicious1Vertices()\n  }\n}\n","export default class Orbit {\n  constructor(x, y, r, level, settings, parent) {\n    this.x = x\n    this.y = y\n    this.r = r\n    this.child = null\n    this.angle = Math.PI/2\n    this.level = level\n    this.settings = settings\n\n    let sign = this.settings.alternateRotation ? -1 : 1\n    this.speed = Math.pow(settings.velocity * sign, this.level - 1) * Math.PI / 180 / settings.resolution\n    this.parent = parent\n  }\n\n  addChild() {\n    let newr = this.r / this.settings.relativeSize\n    let newx = this.x + this.r + newr\n    let newy = this.y\n    this.child = new Orbit(newx, newy, newr, this.level + 1, this.settings, this)\n    return this.child\n  }\n\n  update() {\n    if (this.parent) {\n      this.angle += this.speed\n\n      let rsum = this.r + this.parent.r\n      this.x = this.parent.x + rsum * Math.cos(this.angle)\n      this.y = this.parent.y + rsum * Math.sin(this.angle)\n    }\n  }\n}\n","import { Vertex } from '../../common/Geometry'\nimport Shape, { shapeOptions } from '../Shape'\nimport Orbit from './Orbit'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    fractalSpirographVelocity: {\n      title: 'Velocity',\n      min: 2\n    },\n    fractalSpirographResolution: {\n      title: 'Resolution',\n      min: 1\n    },\n    fractalSpirographNumCircles: {\n      title: 'Number of circles',\n      min: 1,\n      max: 6\n    },\n    fractalSpirographRelativeSize: {\n      title: 'Relative size (parent to child circle)',\n      min: 2,\n      max: 6\n    },\n    fractalSpirographAlternateRotation: {\n      title: 'Alternate rotation direction',\n      type: 'checkbox'\n    },\n  }\n}\n\n// Inspired/adapted from https://thecodingtrain.com/CodingChallenges/061-fractal-spirograph\nexport default class FractalSpirograph extends Shape {\n  constructor() {\n    super('Fractal Spirograph')\n    this.link = 'https://benice-equation.blogspot.com/2012/01/fractal-spirograph.html'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'fractal_spirograph',\n        repeatEnabled: false,\n        startingSize: 54,\n        fractalSpirographVelocity: 8,\n        fractalSpirographResolution: 2,\n        fractalSpirographNumCircles: 5,\n        fractalSpirographRelativeSize: 3,\n        fractalSpirographAlternateRotation: true\n      }\n    }\n  }\n\n  getVertices(state) {\n    let resolution = parseInt(state.shape.fractalSpirographResolution)\n    let settings = {\n      resolution: resolution,\n      velocity: parseInt(state.shape.fractalSpirographVelocity),\n      numCircles: parseInt(state.shape.fractalSpirographNumCircles),\n      relativeSize: parseInt(state.shape.fractalSpirographRelativeSize),\n      alternateRotation: state.shape.fractalSpirographAlternateRotation\n    }\n\n    let sun = new Orbit(0, 0, 1, 0, settings)\n    let next = sun\n    let end\n    let points = []\n\n    for (var i=0; i<settings.numCircles; i++) {\n      next = next.addChild()\n    }\n    end = next\n\n    for (let i=0; i<resolution; i++) {\n      for (let j=0; j<361; j++) {\n        let next = sun\n\n        while (next != null) {\n          next.update()\n          next = next.child\n        }\n\n        points.push(Vertex(end.x, end.y))\n      }\n    }\n\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export class PriorityQueue {\n  constructor() {\n    this.collection = []\n  }\n\n  enqueue(element) {\n    if (this.isEmpty()) {\n      this.collection.push(element)\n    } else {\n      let added = false\n      for (let i = 1; i <= this.collection.length; i++) {\n        if (element[1] < this.collection[i-1][1]){\n          this.collection.splice(i-1, 0, element)\n          added = true\n          break\n        }\n      }\n\n      if (!added) {\n        this.collection.push(element)\n      }\n    }\n  }\n\n  dequeue() {\n    let value = this.collection.shift()\n    return value\n  }\n\n  isEmpty() {\n    return (this.collection.length === 0)\n  }\n}\n","import { PriorityQueue } from './PriorityQueue.js'\n\nexport const mix = (u, v, s) => {\n  var result = []\n  for (var i = 0; i < u.length; ++i ) {\n    result.push((1.0 - s) * u[i] + s * v[i])\n  }\n\n  return result\n}\n\nexport const vec2 = (...args) => {\n  switch (args.length) {\n    case 0: args.push(0.0); break\n    default: args.push(0.0)\n  }\n\n  return args.splice(0, 2)\n}\n\nexport class Graph {\n  constructor() {\n    this.nodes = []\n    this.adjacencyList = {}\n    this.edges = []\n  }\n\n  addNode(node) {\n    this.nodes.push(node)\n    this.adjacencyList[node] = []\n  }\n\n  addEdge(node1, node2, weight=1) {\n    this.adjacencyList[node1].push({node:node2, weight: weight})\n    this.adjacencyList[node2].push({node:node1, weight: weight})\n    this.edges.push([node1.toString(), node2.toString()].sort().toString())\n  }\n\n  dijkstraShortestPath(startNode, endNode) {\n    let times = {}\n    let backtrace = {}\n    let pq = new PriorityQueue()\n\n    times[startNode] = 0\n\n    this.nodes.forEach(node => {\n      if (node !== startNode) {\n        times[node] = Infinity\n      }\n    })\n\n    pq.enqueue([startNode, 0])\n\n    while (!pq.isEmpty()) {\n      let shortestStep = pq.dequeue()\n      let currentNode = shortestStep[0]\n      this.adjacencyList[currentNode].forEach(neighbor => {\n        let time = times[currentNode] + neighbor.weight\n\n        if (time < times[neighbor.node]) {\n          times[neighbor.node] = time\n          backtrace[neighbor.node] = currentNode\n          pq.enqueue([neighbor.node, time])\n        }\n      })\n    }\n\n    let path = [endNode]\n    let lastStep = endNode\n    while(lastStep !== startNode) {\n      path.unshift(backtrace[lastStep])\n      lastStep = backtrace[lastStep]\n    }\n\n    return path\n  }\n}\n","import Victor from 'victor'\nimport { Graph, vec2, mix } from '../../common/Graph'\nimport eulerianTrail from '../../common/eulerianTrail'\nimport { difference } from '../../common/util'\nimport Shape, { shapeOptions } from '../Shape'\n\nconst vec_triangle = [\n  vec2(-0.85, -0.4907477295),\n  vec2(0.85, -0.4907477295),\n  vec2(0.0,  0.9814954573),\n]\n\nconst vec_square = [\n  vec2(-0.7, -0.7),\n  vec2( 0.7,  0.7),\n  vec2(-0.7,  0.7),\n\n  vec2(-0.7, -0.7),\n  vec2(0.7,  0.7),\n  vec2(0.7, -0.7)\n]\n\nfunction getEdges(edges, a, b, c, count, settings) {\n  let da, db, dc\n\n  if (count === 0) {\n    if (settings.rotate > 0) {\n      da = Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2)) * (settings.rotate * Math.PI / 180.0)\n      db = Math.sqrt(Math.pow(b[0], 2) + Math.pow(b[1], 2)) * (settings.rotate * Math.PI / 180.0)\n      dc = Math.sqrt(Math.pow(c[0], 2) + Math.pow(c[1], 2)) * (settings.rotate * Math.PI / 180.0)\n    } else {\n      da = (settings.rotate * Math.PI / 180.0)\n      db = (settings.rotate * Math.PI / 180.0)\n      dc = (settings.rotate * Math.PI / 180.0)\n    }\n\n    let ap = vec2(\n      (a[0] * Math.cos(da)) - (a[1] * Math.sin(da)),\n      (a[0] * Math.sin(da)) + (a[1] * Math.cos(da)))\n    let bp = vec2(\n      (b[0] * Math.cos(db)) - (b[1] * Math.sin(db)),\n      (b[0] * Math.sin(db)) + (b[1] * Math.cos(db)))\n    let cp = vec2(\n      (c[0] * Math.cos(dc)) - (c[1] * Math.sin(dc)),\n      (c[0] * Math.sin(dc)) + (c[1] * Math.cos(dc)))\n\n    edges.push([ap, bp], [ap, cp], [bp, cp])\n    return\n  }\n\n  let ab = mix(a, b, 0.5)\n  let ac = mix(a, c, 0.5)\n  let bc = mix(b, c, 0.5)\n\n  getEdges(edges, ab, ac, bc, count - 1, settings)\n  getEdges(edges, c, ac, bc, count - 1, settings)\n  getEdges(edges, b, bc, ab, count - 1, settings)\n  getEdges(edges, a, ab, ac, count - 1, settings)\n}\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    tessellationTwistNumSides: {\n      title: \"Number of sides\",\n      min: 3\n    },\n    tessellationTwistIterations: {\n      title: \"Iterations\",\n      min: 0,\n      max: 4\n    },\n    tessellationTwistRotate: {\n      title: \"Rotate and twist\",\n      step: 5,\n      min: 0\n    }\n  }\n}\n\n// Adapted from https://codepen.io/rafaelpascoalrodrigues/pen/KpBJve.\nexport default class TessellationTwist extends Shape {\n  constructor() {\n    super('Tessellation Twist')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'tessellation_twist',\n        startingSize: 110,\n        repeatEnabled: false,\n        tessellationTwistNumSides: 5,\n        tessellationTwistIterations: 2,\n        tessellationTwistRotate: 0\n      }\n    }\n  }\n\n  getShapeVertices(numSides) {\n    let vertices = []\n    for (let i=0; i<=numSides; i++) {\n      let angle = Math.PI * 2.0 / numSides * (0.5 + i)\n      let angle2 = Math.PI * 2.0 / numSides * (0.5 + ((i + 1) % numSides))\n\n      vertices.push(vec2(0, 0))\n      vertices.push(vec2(Math.cos(angle), Math.sin(angle)))\n      vertices.push(vec2(Math.cos(angle2), Math.sin(angle2)))\n    }\n    return vertices\n  }\n\n  getVertices(state) {\n    let vertices\n    let edges = []\n    const tessellation = parseInt(state.shape.tessellationTwistIterations)\n    const sides = parseInt(state.shape.tessellationTwistNumSides)\n\n    switch (sides) {\n      case 3:\n        vertices = vec_triangle.slice(0)\n        break\n      case 4:\n        vertices = vec_square.slice(0)\n        break\n      default:\n        vertices = this.getShapeVertices(sides)\n        break\n    }\n\n    // build our tessellations\n    for (var i = 0; i < vertices.length; i += 3) {\n      getEdges(edges, vertices[i + 0], vertices[i + 1], vertices[i + 2],\n        tessellation, { rotate: parseInt(state.shape.tessellationTwistRotate) })\n    }\n\n    // build edge and adjacency maps; this serves to ensure unique\n    // vertices and edges, and give us a string-based key to access and run\n    // algorithms on them.\n    let vertexMap = new Map()\n    let edgeMap = new Map()\n\n    edges.forEach((edge) => {\n      let v1 = edge[0]\n      let v2 = edge[1]\n      let value = [v1.toString(), v2.toString()]\n\n      vertexMap.set(v1.toString(), v1)\n      vertexMap.set(v2.toString(), v2)\n      edgeMap.set(value.sort().toString(), value)\n    })\n\n    // build a graph\n    let graph = new Graph()\n    vertexMap.forEach((vertex, key) => graph.addNode(key))\n    edgeMap.forEach((edge, key) => graph.addEdge(edge[0], edge[1]))\n\n    // find the eulerian trail that efficiently visits all of the vertices\n    let edges2 = Array.from(edgeMap.values())\n    let trail = eulerianTrail({edges: edges2})\n    let prevKey\n    let walkedVertices = []\n    var walkedEdges = []\n\n    // if there are nodes with an odd number of edges (as in pentagon and hexagon)\n    // there is not a eulerian trail that visits all of the nodes. So we need to identify\n    // the missing nodes and create edges for them. There is a complex algorithm\n    // (chinese postman) that can be used to do this for the general case, but\n    // it's computationally expensive and overkill for our situation.\n    for (i = 0; i < trail.length-1; i++) {\n      let edge = [trail[i], trail[i+1]].sort().toString()\n      walkedEdges.push(edge)\n    }\n    walkedEdges = Array.from(new Set(walkedEdges))\n    let missingEdges = difference(walkedEdges, graph.edges).reduce((hash, d) => {\n      d = d.split(',')\n      hash[d[0] + ',' + d[1]] = d[2] + ',' + d[3]\n      return hash\n    }, {})\n\n    trail.forEach((key, index) => {\n      let vertex = vertexMap.get(key)\n\n      if (prevKey) {\n        let edgeKey = [key, prevKey].sort().toString()\n\n        if (!edgeMap.get(edgeKey)) {\n          // non-eulerian move, so we'll walk the shortest valid path between them\n          let path = graph.dijkstraShortestPath(prevKey, key)\n          path.shift()\n          path.forEach((walkedKey) => {\n            let walkedVertex = vertexMap.get(walkedKey)\n            walkedVertices.push(Victor(walkedVertex[0], walkedVertex[1]))\n          })\n          walkedVertices.push(Victor(vertex[0], vertex[1]))\n        } else {\n          walkedVertices.push(Victor(vertex[0], vertex[1]))\n        }\n      } else {\n        walkedVertices.push(Victor(vertex[0], vertex[1]))\n      }\n\n      // add any missing edges\n      if (missingEdges[key]) {\n        let missingVertex = vertexMap.get(missingEdges[key])\n        let edgeKey = [key, missingEdges[key]].sort().toString()\n\n        if (edgeMap.get(edgeKey)) {\n          // only add valid edges\n          walkedVertices.push(Victor(missingVertex[0], missingVertex[1]))\n          walkedVertices.push(Victor(vertex[0], vertex[1]))\n        }\n        delete missingEdges[key]\n      }\n\n      prevKey = key\n    })\n\n    return walkedVertices\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","// adapted from https://github.com/mauriciopoppe/eulerian-trail/blob/master/lib/eulerian-trail.js\n// commented out thrown exceptions to return non-optimal eulerian paths\nexport default function(options) {\n  var g = []\n  var i\n  var edgePointer = []\n  var edgeUsed = []\n  var trail = []\n\n  var id = {}\n  var idReverse = []\n  var idCount = 0\n\n  function getId(x) {\n    if (!id.hasOwnProperty(x)) {\n      edgePointer[idCount] = 0\n      idReverse[idCount] = x\n      id[x] = idCount++\n    }\n    return id[x]\n  }\n\n  function dfs(v) {\n    for (; edgePointer[v] < g[v].length; edgePointer[v] += 1) {\n      var edge = g[v][edgePointer[v]]\n      var to = edge[0]\n      var id = edge[1]\n      if (!edgeUsed[id]) {\n        edgeUsed[id] = true\n        dfs(to)\n      }\n    }\n    trail.push(v)\n  }\n\n  function pushEdge(u, v, id) {\n    g[u] = g[u] || []\n    g[v] = g[v] || []\n    g[u].push([v, id])\n  }\n\n  var deg = []\n  var inDeg = [], outDeg = []\n\n  for (i = 0; i < options.edges.length; i += 1) {\n    var edge = options.edges[i]\n    var u = getId(edge[0])\n    var v = getId(edge[1])\n\n    pushEdge(u, v, i)\n    if (!options.directed) {\n      pushEdge(v, u, i)\n    }\n\n    if (options.directed) {\n      outDeg[u] = outDeg[u] || 0\n      inDeg[u] = inDeg[u] || 0\n      outDeg[v] = outDeg[v] || 0\n      inDeg[v] = inDeg[v] || 0\n      outDeg[u] += 1\n      inDeg[v] += 1\n    } else {\n      deg[u] = deg[u] || 0\n      deg[v] = deg[v] || 0\n      deg[u] += 1\n      deg[v] += 1\n    }\n  }\n\n  function checkDirected() {\n    var oddVertex = 0\n    var start = 0\n\n    for (i = 0; i < idCount; i += 1) {\n      if (outDeg[i] - inDeg[i] !== 0) {\n        if (outDeg[i] > inDeg[i]) {\n          start = i\n        }\n        oddVertex += 1\n      }\n    }\n    return {odd: oddVertex, start: start}\n  }\n\n  function checkUndirected() {\n    var oddVertex = 0\n    var start = 0\n\n    for (i = 0; i < idCount; i += 1) {\n      if (deg[i] % 2 !== 0) {\n        start = i\n        oddVertex += 1\n      }\n    }\n    return {odd: oddVertex, start: start}\n  }\n\n  var check = options.directed ? checkDirected() : checkUndirected()\n  if (check.odd % 2 !== 0 || check.odd > 2) {\n//    throw Error('the graph does not have an eulerian trail')\n  }\n  dfs(check.start)\n\n  if (trail.length !== options.edges.length + 1) {\n//    throw Error('the graph does not have an eulerian trail')\n  }\n\n  trail.reverse()\n\n  // id to input\n  return trail.map(function (id) {\n    return idReverse[id]\n  })\n}\n","export const difference = function(c1, c2) {\n  return c1.filter(x => !c2.includes(x)).concat(c2.filter(x => !c1.includes(x)))\n}\n","import Polygon from '../shapes/Polygon'\nimport Circle from '../shapes/Circle'\nimport Star from '../shapes/Star'\nimport Heart from '../shapes/Heart'\nimport Reuleaux from '../shapes/Reuleaux'\nimport Epicycloid from '../shapes/Epicycloid'\nimport Hypocycloid from '../shapes/Hypocycloid'\nimport Rose from '../shapes/Rose'\nimport InputText from '../shapes/input_text/InputText'\nimport Wiper from '../shapes/Wiper'\nimport V1Engineering from '../shapes/v1_engineering/V1Engineering'\nimport FractalSpirograph from '../shapes/fractal_spirograph/FractalSpirograph'\nimport TessellationTwist from '../shapes/tessellation_twist/TessellationTwist'\n\n/*----------------------------------------------\nSupported input shapes\n-----------------------------------------------*/\nexport const registeredShapes = {\n  polygon: new Polygon(),\n  star: new Star(),\n  circle: new Circle(),\n  heart: new Heart(),\n  reuleaux: new Reuleaux(),\n  epicycloid: new Epicycloid(),\n  hypocycloid: new Hypocycloid(),\n  rose: new Rose(),\n  v1Engineering: new V1Engineering(),\n  inputText: new InputText(),\n  fractal_spirograph: new FractalSpirograph(),\n  tessellation_twist: new TessellationTwist(),\n  wiper: new Wiper()\n}\n","import { createSelector } from 'reselect'\nimport { registeredShapes } from '../../common/registeredShapes'\n\nconst getShapes = state => state.shapes\nconst getTransforms = state => state.transforms\nconst getCurrentShapeId = state => state.shapes.currentId\n\nexport const getShapesSelector = createSelector(\n  [ getShapes ],\n  shapes => shapes.allIds.map(id => shapes.byId[id])\n)\nexport const getCurrentShapeSelector = createSelector(\n  [ getCurrentShapeId, getShapes ],\n  (id, shapes) => shapes.byId[id]\n)\n\nexport const getCurrentTransformSelector = createSelector(\n  [ getCurrentShapeId, getTransforms ],\n  (id, transforms) => transforms.byId[id]\n)\n\nexport const getShape = (shape) => {\n  return registeredShapes[shape.type]\n}\n\nexport const getShapeById = (id) => {\n  return registeredShapes[id]\n}\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  updateTransform,\n  toggleGrow\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../shapes/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.growEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onGrow: () => {\n      dispatch(toggleGrow({id: id}))\n    },\n  }\n}\n\nclass ScaleTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={`${activeClassName} overflow-auto`}>\n          <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onGrow}>\n            <h3>Scale</h3>\n            Grows or shrinks the shape\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={0}>\n            <Card.Body>\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"growValue\"\n                optionKey=\"growValue\"\n                index={0}\n                model={this.props.transform} />\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ScaleTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  toggleSpin,\n  updateTransform,\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../shapes/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.spinEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onSpin: () => {\n      dispatch(toggleSpin({id: id}))\n    },\n  }\n}\n\nclass RotationTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={`${activeClassName} overflow-auto`}>\n          <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onSpin}>\n            <h3>Spin</h3>\n            Spins the shape\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={0}>\n            <Card.Body>\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"spinValue\"\n                optionKey=\"spinValue\"\n                index={0}\n                model={this.props.transform} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"spinSwitchbacks\"\n                optionKey=\"spinSwitchbacks\"\n                index={0}\n                model={this.props.transform} />\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RotationTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  toggleTrack,\n  toggleTrackGrow,\n  updateTransform\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../shapes/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.trackEnabled,\n    activeGrow: transform.trackGrowEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onTrack: () => {\n      dispatch(toggleTrack({id: id}))\n    },\n    onTrackGrow: () => {\n      dispatch(toggleTrackGrow({id: id}))\n    },\n  }\n}\n\nclass TrackTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n    const activeGrowClassName = this.props.activeGrow ? 'active' : ''\n    const activeGrowKey = this.props.activeGrow ? 0 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={activeClassName}>\n          <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onTrack}>\n            <h3>Track</h3>\n            Moves the shape along a track (shown in green)\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={0}>\n            <Card.Body>\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackValue\"\n                optionKey=\"trackValue\"\n                index={0}\n                model={this.props.transform} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackLength\"\n                optionKey=\"trackLength\"\n                index={0}\n                step={0.05}\n                model={this.props.transform} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackNumLoops\"\n                optionKey=\"trackNumLoops\"\n                index={0}\n                model={this.props.transform} />\n\n              <Accordion defaultActiveKey={activeGrowKey} className=\"mt-3\">\n                <Card className={activeGrowClassName}>\n                  <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onTrackGrow}>\n                    <h3>Scale track</h3>\n                    Grows or shrinks the track\n                  </Accordion.Toggle>\n\n                  <Accordion.Collapse eventKey={0}>\n                    <Card.Body>\n                      <InputOption\n                        onChange={this.props.onChange}\n                        options={this.props.options}\n                        key=\"trackGrow\"\n                        optionKey=\"trackGrow\"\n                        index={0}\n                        model={this.props.transform} />\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              </Accordion>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TrackTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card,\n  Row,\n  Col,\n  Form,\n  ToggleButton,\n  ToggleButtonGroup\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  updateTransform,\n  toggleRepeat\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../shapes/Transform'\nimport ScaleTransform from './ScaleTransform'\nimport RotationTransform from './RotationTransform'\nimport TrackTransform from './TrackTransform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.repeatEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onRepeat: () => {\n      dispatch(toggleRepeat({id: id}))\n    },\n    ontransformMethodChange: (value) => {\n      dispatch(updateTransform({ transformMethod: value, id: id}))\n    }\n  }\n}\n\nclass Transforms extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n\n    return (\n      <div className=\"transforms\">\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"offsetX\"\n          optionKey=\"offsetX\"\n          index={0}\n          model={this.props.transform} />\n\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"offsetY\"\n          optionKey=\"offsetY\"\n          index={0}\n          model={this.props.transform} />\n\n        <Accordion className=\"mt-3\" defaultActiveKey={activeKey} activeKey={activeKey}>\n          <Card className={activeClassName}>\n            <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onRepeat}>\n              <h3>Loop and transform</h3>\n              Draws the shape multiple times, transforming it each time.\n            </Accordion.Toggle>\n\n            <Accordion.Collapse eventKey={0}>\n              <Card.Body>\n                <InputOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  key=\"numLoops\"\n                  optionKey=\"numLoops\"\n                  index={0}\n                  model={this.props.transform} />\n\n                  <Row className=\"align-items-center pb-2\">\n                    <Col sm={5}>\n                      <Form.Label htmlFor=\"transformMethod\">\n                        When transforming shape\n                      </Form.Label>\n                    </Col>\n\n                    <Col sm={7}>\n                      <ToggleButtonGroup id=\"transformMethod\" type=\"radio\" name=\"transformMethod\" value={this.props.transform.transformMethod} onChange={this.props.ontransformMethodChange}>\n                        <ToggleButton variant=\"light\" value=\"smear\">smear</ToggleButton>\n                        <ToggleButton variant=\"light\" value=\"intact\">keep intact</ToggleButton>\n                      </ToggleButtonGroup>\n                    </Col>\n                  </Row>\n\n                  <Accordion className=\"mt-3\">\n                    <ScaleTransform id={this.props.transform.id} />\n                    <RotationTransform id={this.props.transform.id} />\n                    <TrackTransform id={this.props.transform.id} />\n                  </Accordion>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transforms)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Button,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport DropdownOption from '../../components/DropdownOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport Transforms from '../transforms/Transforms'\nimport { updateShape } from './shapesSlice'\nimport { updateTransform } from '../transforms/transformsSlice'\nimport {\n  getShape,\n  getShapeById,\n  getCurrentShapeSelector\n} from './selectors'\nimport Transform from '../../shapes/Transform'\nimport './Shape.css'\n\nconst mapStateToProps = (state, ownProps) => {\n  const shape = getCurrentShapeSelector(state)\n  const metashape = getShape(shape)\n\n  return {\n    shape: shape,\n    options: metashape.getOptions(),\n    link: metashape.link\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n  const metashape = getShapeById(id)\n  const metatransform = new Transform()\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateShape(attrs))\n    },\n    onRestoreDefaults: (event) => {\n      let attrs = metashape.getInitialState()\n      attrs.id = id\n\n      let tAttrs = metatransform.getInitialState()\n      tAttrs.id = id\n      tAttrs.repeatEnabled = attrs.repeatEnabled\n      dispatch(updateShape(attrs))\n      dispatch(updateTransform(tAttrs))\n    }\n  }\n}\n\nclass Shape extends Component {\n  render() {\n    const optionsRender = Object.keys(this.props.options).map((key, index) => {\n      const option = this.props.options[key]\n\n      if (option.type === 'dropdown') {\n        return  <DropdownOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.shape} />\n      } else if (option.type === 'checkbox') {\n        return <CheckboxOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.shape} />\n      } else {\n        return  <InputOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.shape} />\n      }\n    })\n\n    let optionsListRender = undefined\n    if (Object.entries(this.props.options).length > 0) {\n      const linkRender = this.props.link ? <p className=\"mb-3\">See <a target=\"_blank\" rel=\"noopener noreferrer\" href={this.props.link}>{this.props.link}</a> for ideas.</p> : undefined\n\n      optionsListRender =\n        <div className=\"shape-options\">\n          {linkRender}\n          {optionsRender}\n        </div>\n    }\n\n    return (\n      <div className=\"pt-1\">\n        <div className=\"d-flex align-items-center pt-1 pb-3\">\n          <Button variant=\"outline-primary\" size=\"sm\" onClick={this.props.onRestoreDefaults}>Restore defaults</Button>\n        </div>\n        { optionsListRender }\n        { this.props.shape.canTransform && <Transforms id={this.props.shape.id} />}\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Shape)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  Card\n} from 'react-bootstrap'\nimport Select from 'react-select'\n\nimport {\n  setCurrentShape,\n} from '../shapes/shapesSlice'\nimport Shape from './Shape'\nimport {\n  getShapesSelector,\n  getCurrentShapeSelector\n} from './selectors'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    currentShape: getCurrentShapeSelector(state),\n    shapes: getShapesSelector(state)\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    setCurrentShape: (selected) => {\n      dispatch(setCurrentShape(selected.value))\n    },\n  }\n}\n\nconst customStyles = {\n  control: base => ({\n    ...base,\n    height: 55,\n    minHeight: 55\n  })\n}\n\nclass ShapeList extends Component {\n  render() {\n    const groupOptions = []\n    for (const shape of this.props.shapes) {\n      const optionLabel = { value: shape.id, label: shape.name }\n      var found = false\n      for (const group of groupOptions) {\n        if (group.label === shape.selectGroup) {\n          found = true\n          group.options.push(optionLabel)\n        }\n      }\n      if (!found) {\n        const newOptions = [ optionLabel ]\n        groupOptions.push( { label: shape.selectGroup, options: newOptions } )\n      }\n    }\n\n    const selectedOption = {\n      value: this.props.currentShape.id,\n      label: this.props.currentShape.name\n    }\n\n    return (\n      <div>\n        <Card className=\"p-3 border-0\">\n          <Select\n            value={selectedOption}\n            onChange={this.props.setCurrentShape}\n            styles={customStyles}\n            maxMenuHeight={305}\n            options={groupOptions} />\n\n          <Shape key={this.props.currentShape.id} id={this.props.currentShape.id} />\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShapeList)\n","import { createSlice } from \"@reduxjs/toolkit\"\n\nconst fileSlice = createSlice({\n  name: 'theta rho file',\n  initialState: {\n    name: \"\",\n    comments: [],\n    vertices: [],\n    zoom: 100,\n    aspectRatio: false,\n  },\n  reducers: {\n    setFileVertices(state, action) {\n      state.vertices = action.payload\n    },\n    setFileName(state, action) {\n      state.name = action.payload\n    },\n    setFileComments(state, action) {\n      state.comments = action.payload\n    },\n    setFileZoom(state, action) {\n      state.zoom = action.payload\n    },\n    toggleFileAspectRatio(state, action) {\n      state.aspectRatio = !state.aspectRatio\n    },\n  }\n})\n\nexport const {\n  setFileVertices,\n  setFileName,\n  setFileComments,\n  setFileZoom,\n  toggleFileAspectRatio\n} = fileSlice.actions\n\nexport default fileSlice.reducer\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Card,\n    Col,\n    Form,\n    Row,\n} from 'react-bootstrap'\nimport Switch from 'react-switch'\nimport {\n  setFileName,\n  setFileComments,\n  setFileVertices,\n  setFileZoom,\n  toggleFileAspectRatio\n} from './fileSlice'\nimport './ThetaRho.scss'\nimport ReactGA from 'react-ga'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    name: state.file.name,\n    comments: state.file.comments,\n    vertices: state.file.vertices,\n    zoom: state.file.zoom,\n    aspectRatio: state.file.aspectRatio,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  var convertToXY = (thetaRhos) => {\n    var vertices = []\n    var previous = undefined\n    var max_angle = Math.PI / 64.0\n    for (let ii = 0; ii < thetaRhos.length; ii++) {\n      var next = thetaRhos[ii]\n      if (previous) {\n        if (Math.abs(next[0] - previous[0]) < max_angle) {\n          // These sin, cos elements are inverted. I'm not sure why\n          vertices.push({\n                        x: previous[1] * Math.sin(previous[0]),\n                        y: previous[1] * Math.cos(previous[0]),\n                        f: 1000,\n          })\n        } else {\n          // We need to do some interpolating.\n          let deltaAngle = next[0] - previous[0]\n          let rhoStep = max_angle / Math.abs(deltaAngle) * (next[1] - previous[1])\n          var rho = previous[1]\n          if (deltaAngle > 0.0) {\n            var emergency_break = 0\n            for (let angle = previous[0]; angle < next[0]; angle += max_angle, rho += rhoStep) {\n              vertices.push({\n                            x: rho * Math.sin(angle),\n                            y: rho * Math.cos(angle),\n                            f: 1000,\n              })\n              if (emergency_break++ > 100000) {\n                break\n              }\n            }\n          } else {\n            for (let angle = previous[0]; angle > next[0]; angle -= max_angle, rho += rhoStep) {\n              vertices.push({\n                            x: rho * Math.sin(angle),\n                            y: rho * Math.cos(angle),\n                            f: 1000,\n              })\n              if (emergency_break++ > 100000) {\n                break\n              }\n            }\n          }\n        }\n      }\n      previous = next\n    }\n    return vertices\n  }\n\n  var parseThrFile = (file) => {\n    var rv = {}\n    rv.comments = []\n    rv.vertices = []\n\n    var reader = new FileReader()\n\n    reader.onload = (event) => {\n      const startTime = performance.now()\n      var text = reader.result\n      var lines = text.split('\\n')\n      var has_vertex = false\n      for (let ii = 0; ii < lines.length; ii++) {\n        var line = lines[ii].trim()\n        if (line.length === 0) {\n          // blank lines\n          continue\n        }\n        if (line.indexOf(\"#\") === 0 && !has_vertex) {\n          rv.comments.push(lines[ii])\n        }\n\n        if (line.indexOf(\"#\") !== 0) {\n          has_vertex = true\n          // This is a point, let's try to read it.\n          var pointStrings = line.split(/\\s+/)\n          if (pointStrings.length !== 2) {\n            // AAAH\n            console.log(pointStrings)\n            continue\n          }\n          rv.vertices.push([parseFloat(pointStrings[0]), parseFloat(pointStrings[1])])\n        }\n      }\n\n      dispatch(setFileComments(rv.comments))\n      dispatch(setFileVertices(convertToXY(rv.vertices)))\n      const endTime = performance.now()\n      ReactGA.timing({\n        category: 'ThetaRho',\n        variable: 'readThetaRho',\n        value: endTime - startTime, // in milliseconds\n      });\n    }\n\n    reader.readAsText(file)\n  }\n\n  return {\n    setVertices: (event: any) => {\n      var file = event.target.files[0]\n      dispatch(setFileName(file.name))\n      parseThrFile(file)\n    },\n    setZoom: (event) => {\n      dispatch(setFileZoom(parseFloat(event.target.value)))\n    },\n    toggleAspectRatio: (event) => {\n      dispatch(toggleFileAspectRatio())\n    },\n  }\n}\n\nclass ThetaRho extends Component {\n  render() {\n    var commentsRender = this.props.comments.map((comment) => {\n      return <span>{comment}<br/></span>\n    })\n\n    return (\n      <div className=\"theta-rho\">\n        <Card className=\"p-3 pb-4\">\n          <Accordion className=\"mb-4\">\n            <Card>\n              <Card.Header as={Form.Label} htmlFor=\"fileUpload\" style={{ cursor: \"pointer\" }}>\n                <h3>Import</h3>\n                Imports a Sisyphus-style theta rho (.thr) file into Sandify\n                <Form.Control\n                    id=\"fileUpload\"\n                    type=\"file\"\n                    accept=\".thr\"\n                    onChange={this.props.setVertices}\n                    style={{ display: \"none\" }} />\n              </Card.Header>\n            </Card>\n          </Accordion>\n\n          <Row className=\"align-items-center\">\n            <Col sm={5}>\n              <Form.Label htmlFor=\"keepAspectRatio\">\n                Keep original aspect ratio\n              </Form.Label>\n            </Col>\n            <Col sm={7}>\n              <Switch checked={this.props.aspectRatio} onChange={this.props.toggleAspectRatio} />\n            </Col>\n          </Row>\n\n          <Row className=\"align-items-center pt-1\">\n            <Col sm={5}>\n              <Form.Label htmlFor=\"thr-zoom\">\n                Zoom\n              </Form.Label>\n            </Col>\n            <Col sm={7}>\n              <Form.Control type=\"number\" id=\"thr-zoom\" value={this.props.zoom} onChange={this.props.setZoom} />\n            </Col>\n          </Row>\n\n          { this.props.name && <div id=\"theta-rho-comments\" className=\"mt-4 p-3\">\n            Name: {this.props.name} <br />\n            Comments:\n            <div className=\"ml-3\">\n              { commentsRender }\n            </div>\n            Number of points: {this.props.vertices.length }\n          </div>}\n        </Card>\n\n        <div className=\"p-4\">\n          <h3>Where to get .thr files</h3>\n          <ul className=\"list-unstyled\">\n            <li><a href=\"https://reddit.com/u/markyland\">Markyland on Reddit</a></li>\n            <li><a href=\"https://github.com/Dithermaster/sisyphus/\">Dithermaster's github</a></li>\n            <li><a href=\"https://github.com/SlightlyLoony/JSisyphus\">JSisyphus by Slightly Loony</a></li>\n            <li><a href=\"https://reddit.com/r/SisyphusIndustries\">Sisyphus on Reddit</a></li>\n            <li><a href=\"https://sisyphus-industries.com/community/community-tracks\">Sisyphus Community</a></li>\n            <li><a href=\"http://thejuggler.net/sisyphus/\">The Juggler</a></li>\n          </ul>\n\n          <h4 className=\"mt-3\">Note about copyrights</h4>\n          <p>Be careful and respectful. Understand that the original author put their labor, intensity, and ideas into this art. The creators have a right to own it (and they have a copyright, even if it doesn't say so).</p>\n          <p>If you don't have permisson (a license) to use their art, then you shouldn't be. If you do have permission to use their art, then you should be thankful, and I'm sure they would appreciate you sending them a note of thanks. A picture of your table creating their shared art would probably make them smile.</p>\n          <p>Someone posting the .thr file to a forum or subreddit probably wants it to be shared, and drawing it on your home table is probably OK. Just be careful if you want to use them for something significant without explicit permission.</p>\n          <p>I am not a lawyer.</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ThetaRho)\n","import { createSlice } from \"@reduxjs/toolkit\"\n\n// accommodate old and new local storage keys\nconst localMinX = parseFloat(localStorage.getItem('minX') || localStorage.getItem('machine_min_x'))\nconst localMaxX = parseFloat(localStorage.getItem('maxX') || localStorage.getItem('machine_max_x'))\nconst localMinY = parseFloat(localStorage.getItem('minY') || localStorage.getItem('machine_min_y'))\nconst localMaxY = parseFloat(localStorage.getItem('maxY') || localStorage.getItem('machine_max_y'))\nconst localMaxRadius = parseFloat(localStorage.getItem('maxRadius') || localStorage.getItem('machine_radius'))\n\nconst machineSlice = createSlice({\n  name: 'machine',\n  initialState: {\n    rectangular: undefined !== localStorage.getItem('machine_rect_active') ? localStorage.getItem('machine_rect_active') < 2 : true,\n    rectExpanded: false,\n    polarExpanded: false,\n    minX: localMinX || 0,\n    maxX: localMaxX || 500,\n    minY: localMinY || 0,\n    maxY: localMaxY || 500,\n    maxRadius: localMaxRadius || 250,\n    rectOrigin: [],\n    polarStartPoint: 'none',\n    polarEndPoint: 'none',\n    canvasWidth: 600,\n    canvasHeight: 600,\n    sliderValue: 0.0\n  },\n  reducers: {\n    updateMachine(state, action) {\n      Object.assign(state, action.payload)\n      Object.keys(action.payload).forEach(key => {\n        localStorage.setItem(key, action.payload[key])\n      })\n    },\n    toggleMachineRectExpanded(state, action) {\n      state.rectangular = true\n      state.rectExpanded = !state.rectExpanded\n      state.polarExpanded = false\n      localStorage.setItem('machine_rect_active', 1)\n    },\n    toggleMachinePolarExpanded(state, action) {\n      state.rectangular = false\n      state.rectExpanded = false\n      state.polarExpanded = !state.polarExpanded\n      localStorage.setItem('machine_rect_active', 2)\n    },\n    setMachineRectOrigin(state, action) {\n      let newValue = []\n      let value = action.payload\n\n      for (let i = 0; i < value.length ; i++) {\n        if (!state.rectOrigin.includes(value[i])) {\n          newValue.push(value[i])\n          break\n        }\n      }\n      state.rectOrigin = newValue\n    },\n    setMachineSize(state, action) {\n      state.canvasHeight = action.payload\n      state.canvasWidth = action.payload\n    },\n  }\n})\n\nexport const {\n  updateMachine,\n  toggleMachineRectExpanded,\n  toggleMachinePolarExpanded,\n  setMachineRectOrigin,\n  setMachineSize\n} = machineSlice.actions\n\nexport default machineSlice.reducer\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Card,\n    Col,\n    Form,\n    FormControl,\n    Row,\n    ToggleButton,\n    ToggleButtonGroup,\n} from 'react-bootstrap'\nimport {\n  updateMachine,\n  toggleMachineRectExpanded,\n  setMachineRectOrigin } from './machineSlice'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    expanded: state.machine.rectExpanded,\n    active:   state.machine.rectangular,\n    minX:    state.machine.minX,\n    maxX:    state.machine.maxX,\n    minY:    state.machine.minY,\n    maxY:    state.machine.maxY,\n    origin:   state.machine.rectOrigin,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    activeCallback: (event) => {\n      dispatch(toggleMachineRectExpanded())\n    },\n    onMinXChange: (event) => {\n      dispatch(updateMachine({minX: parseFloat(event.target.value)}))\n    },\n    onMaxXChange: (event) => {\n      dispatch(updateMachine({maxX: parseFloat(event.target.value)}))\n    },\n    onMinYChange: (event) => {\n      dispatch(updateMachine({minY: parseFloat(event.target.value)}))\n    },\n    onMaxYChange: (event) => {\n      dispatch(updateMachine({maxY: parseFloat(event.target.value)}))\n    },\n    onOriginChange: (value) => {\n      dispatch(setMachineRectOrigin(value))\n    },\n  }\n}\n\nclass RectSettings extends Component {\n  render() {\n    var activeClassName = this.props.active ? 'active' : ''\n\n    return (\n      <Card className={`${activeClassName} overflow-auto`}>\n        <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.activeCallback}>\n          <h3>Rectangular machine</h3>\n          Rectangular machines like Zen XY\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey={0}>\n          <Card.Body>\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"minX\">\n                  Min X (mm)\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <FormControl id=\"minX\" type=\"number\" value={this.props.minX} onChange={this.props.onMinXChange} />\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"maxX\">\n                  Max X (mm)\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <FormControl id=\"maxX\" type=\"number\" value={this.props.maxX} onChange={this.props.onMaxXChange} />\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"minY\">\n                  Min Y (mm)\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <FormControl id=\"minY\" type=\"number\" value={this.props.minY} onChange={this.props.onMinYChange} />\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"maxY\">\n                  Max Y (mm)\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <FormControl id=\"maxY\" type=\"number\" value={this.props.maxY} onChange={this.props.onMaxYChange} />\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"origin\">\n                  Force origin\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <ToggleButtonGroup id=\"origin-bar\" type=\"checkbox\" name=\"origin\" className=\"flex-wrap\" value={this.props.origin} onChange={this.props.onOriginChange}>\n                  <ToggleButton variant=\"light\" value={1} >upper left</ToggleButton>\n                  <ToggleButton variant=\"light\" value={2} >upper right</ToggleButton>\n                  <ToggleButton variant=\"light\" value={0} >lower left</ToggleButton>\n                  <ToggleButton variant=\"light\" value={3} >lower right</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RectSettings)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Col,\n    Row,\n    Form,\n    Card,\n    ToggleButton,\n    ToggleButtonGroup\n} from 'react-bootstrap'\nimport {\n  toggleMachinePolarExpanded,\n  updateMachine\n} from './machineSlice'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    expanded:   state.machine.polarExpanded,\n    active:     !state.machine.rectangular,\n    maxRadius: state.machine.maxRadius,\n    startPoint: state.machine.polarStartPoint,\n    endPoint: state.machine.polarEndPoint\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    activeCallback: (event) => {\n      dispatch(toggleMachinePolarExpanded())\n    },\n    onMaxRadiusChange: (event) => {\n      dispatch(updateMachine({maxRadius: parseFloat(event.target.value)}))\n    },\n    onStartPointChange: (value) => {\n      dispatch(updateMachine({polarStartPoint: value}))\n    },\n    onEndPointChange: (value) => {\n      dispatch(updateMachine({polarEndPoint: value}))\n    }\n  }\n}\n\nclass PolarSettings extends Component {\n  render() {\n    var activeClassName = this.props.active ? 'active' : ''\n\n    return (\n      <Card className={`${activeClassName} overflow-auto`}>\n        <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.activeCallback}>\n          <h3>Polar machine</h3>\n          Polar machines like Sisyphus\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey={1}>\n          <Card.Body>\n            <Row className=\"align-items-center pb-1\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"maxRadius\">\n                  Max radius (mm)\n                </Form.Label>\n              </Col>\n              <Col sm={7}>\n                <Form.Control id=\"maxRadius\" type=\"number\" value={this.props.maxRadius} onChange={this.props.onMaxRadiusChange} />\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"forceStart\">\n                  Start point\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <ToggleButtonGroup id=\"startPoint\" type=\"radio\" name=\"startPoint\" value={this.props.startPoint} onChange={this.props.onStartPointChange}>\n                  <ToggleButton variant=\"light\" value=\"none\">none</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"center\">center</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"perimeter\">perimeter</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"endPoint\">\n                  End point\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <ToggleButtonGroup id=\"endPoint\" type=\"radio\" name=\"endPoint\" value={this.props.endPoint} onChange={this.props.onEndPointChange}>\n                  <ToggleButton variant=\"light\" value=\"none\">none</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"center\">center</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"perimeter\">perimeter</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PolarSettings)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion\n} from 'react-bootstrap'\nimport RectSettings from './RectSettings'\nimport PolarSettings from './PolarSettings'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    rectangular: state.machine.rectangular,\n  }\n}\n\nclass MachineSettings extends Component {\n  render() {\n    return (\n      <div className=\"p-3\">\n        <Accordion defaultActiveKey={this.props.rectangular ? 0 : 1}>\n          <RectSettings />\n          <PolarSettings />\n        </Accordion>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, null)(MachineSettings)\n","import React, { Component } from 'react'\n\nclass Footer extends Component {\n  render () {\n    return (\n      <footer className=\"p-4\">\n        <div>\n          <h2>About</h2>\n          <p>Sandify turns your cold, empty-hearted, emotionless sand tables into cold, empty-hearted, emotionless sand table robots with enchanting patterns.</p>\n          <p>\n            Sandify is a labor of love, but if you'd like to support me financially,\n            I do have a <a href=\"https://github.com/sponsors/jeffeb3\">Donation system set up <b>with github matching donations</b></a>. Or just <a href=\"https://www.paypal.me/jeffeb3\">PayPal</a>.\n          </p>\n        </div>\n\n        <div>\n          <h2>Sand Machine</h2>\n          <p>Anything that uses gcode can be used with Sandify. But the machine this was designed for is the ZenXY from V1Engineering.com.</p>\n          <p>\n            <a href=\"https://docs.v1engineering.com/zenxy/\">ZenXY on V1Engineering.com</a>\n            <br />\n            <a href=\"https://www.thingiverse.com/thing:2477901\">ZenXY Thingiverse Page</a>\n          </p>\n          <p>\n            ZenXY was inspired by the awesome Sisyphus kinetic art table by <a href=\"https://sisyphus-industries.com/\">Sisyphus Industries</a>, which is also now supported.\n          </p>\n          <p>\n            Sandify was created by users in the\n            <a href=\"https://forum.v1engineering.com/t/does-this-count-as-a-build/6037\"> V1Engineering.com forum</a>.\n          </p>\n        </div>\n\n        <div>\n          <h2>Github</h2>\n          <p>Sandify is hosted on Github <a href=\"https://github.com/jeffeb3/sandify\">here</a>. Please post any problems, feature requests or comments in our <a href=\"https://github.com/jeffeb3/sandify/issues\">issue tracker</a>.</p>\n          <p>Sandify is a community project. We want and need developers. <a href=\"https://github.com/jeffeb3/sandify/wiki#developer-info\">Help Sandify</a>.</p>\n        </div>\n\n        <div>\n          <h2>License</h2>\n          <p>\n            Sandify is licensed under the MIT license.\n          </p>\n          <p>\n            Patterns that you create and gcode generated with Sandify are not covered\n            under the Sandify license. They are your work and your copyright. Read our <a href=\"https://raw.githubusercontent.com/jeffeb3/sandify/master/LICENSE\">license</a>.\n          </p>\n        </div>\n      </footer>\n    )\n  }\n}\n\nexport default Footer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    sandifyVersion: '0.2.1', // Also change the version in package.json.\n    input: 'shape',\n  },\n  reducers: {\n    chooseInput(state, action) {\n      state.input = action.payload\n    },\n  }\n})\n\nexport const {\n  chooseInput\n} = appSlice.actions\n\nexport default appSlice.reducer\n","import React, { Component } from 'react'\nimport {\n    Tab,\n    Tabs,\n} from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport ShapeList from '../shapes/ShapeList'\nimport ThetaRho from '../theta_rho/ThetaRho'\nimport MachineSettings from '../machine/MachineSettings'\nimport Footer from './Footer'\nimport { chooseInput } from '../app/appSlice'\nimport ReactGA from 'react-ga'\n\nclass InputTabs extends Component {\n  handleSelect(key) {\n    ReactGA.event({\n      category: 'InputTabs',\n      action: 'handleSelect: ' + key,\n    })\n    this.props.dispatch(chooseInput(key))\n  }\n\n  render() {\n    return (\n       <Tabs defaultActiveKey=\"shapes\" onSelect={this.handleSelect.bind(this)} id=\"input-tabs\">\n         <Tab eventKey=\"shapes\" title=\"Shapes\" className=\"full-page-tab\">\n           <ShapeList />\n         </Tab>\n\n         <Tab eventKey=\"machine\" title=\"Machine\" className=\"full-page-tab\">\n           <MachineSettings />\n         </Tab>\n\n         <Tab eventKey=\"code\" title=\"Import\" className=\"full-page-tab\">\n           <ThetaRho />\n         </Tab>\n\n         <Tab eventKey=\"about\" title=\"About\" className=\"full-page-tab\">\n           <Footer />\n         </Tab>\n       </Tabs>\n    )\n  }\n}\n\nexport default connect()(InputTabs)\n","import { Vertex, distance } from './Geometry'\nimport { enforceRectLimits, enforcePolarLimits } from './LimitEnforcer'\nimport { getShape } from '../features/shapes/selectors'\nimport Victor from 'victor'\nimport ReactGA from 'react-ga'\nimport throttle from 'lodash/throttle'\n\n// Transform functions\nfunction rotate(vertex, angleDeg) {\n  var angle = Math.PI / 180.0 * angleDeg\n  return Vertex(\n           vertex.x * Math.cos(angle) - vertex.y * Math.sin(angle),\n           vertex.x * Math.sin(angle) + vertex.y * Math.cos(angle),\n           vertex.f)\n}\n\nfunction scale(vertex, scale_perc) {\n  var scale = scale_perc / 100.0\n  return {\n    x: vertex.x * scale,\n    y: vertex.y * scale,\n    f: vertex.f,\n  }\n}\n\nfunction offset(vertex, offsetX, offsetY) {\n  return {\n    x: vertex.x + offsetX,\n    y: vertex.y + offsetY,\n    f: vertex.f,\n  }\n}\n\nfunction track(vertex, data, loop_index) {\n  let angle = data.trackLength * loop_index / 16 * 2.0 * Math.PI\n  let radius = 1.0\n  if (data.trackGrowEnabled) {\n    radius = 1.0 + loop_index / 10.0 * data.trackGrow / 100.0\n  }\n  return {\n    x: vertex.x + radius * data.trackValue * Math.cos(angle),\n    y: vertex.y + radius * data.trackValue * Math.sin(angle),\n    f: vertex.f, // Why do I still have f in here?\n  }\n}\n\nexport const transform = (data, vertex, amount, trackIndex=0, numLoops) => {\n  numLoops = numLoops || data.numLoops\n  let transformedVertex = vertex\n\n  if (data.repeatEnabled && data.growEnabled) {\n    transformedVertex = scale(transformedVertex, 100.0 + (data.growValue * amount))\n  }\n\n  transformedVertex = offset(transformedVertex, data.offsetX || 0, data.offsetY || 0)\n\n  if (data.repeatEnabled && data.spinEnabled) {\n    const loopPeriod = numLoops / (parseInt(data.spinSwitchbacks) + 1)\n    const stage = amount/loopPeriod\n    const direction = (stage % 2 < 1 ? 1.0 : -1.0)\n    var spinAmount = direction * (amount % loopPeriod) * data.spinValue\n\n    // Add in the amount it goes positive to the negatives, so they start at the same place.\n    if (direction < 0.0) {\n      spinAmount += loopPeriod * data.spinValue\n    }\n    transformedVertex = rotate(transformedVertex, spinAmount)\n  }\n\n  if (data.repeatEnabled && data.trackEnabled) {\n    transformedVertex = track(transformedVertex, data, trackIndex)\n  }\n\n  return transformedVertex\n}\n\n// Vertex functions\nconst getShapeVertices = (state) => {\n  const shape = getShape(state.shape)\n  let vertices = shape.getVertices(state).map(vertex => {\n    return scale(vertex, 100.0 * state.shape.startingSize)\n  })\n\n  if (state.transform.transformMethod === 'smear' && state.transform.repeatEnabled) {\n    // remove last vertex; we don't want to return to our starting point when completing the shape\n    vertices.pop()\n  }\n  return vertices\n}\n\nfunction addRectEndpoints(machine, vertices) {\n  // OK, let's assign corners indices:\n  //\n  // [1]   [2]\n  //\n  //\n  // [0]   [3]\n  const dx = (machine.maxX - machine.minX) / 2.0\n  const dy = (machine.maxY - machine.minY) / 2.0\n  const corners = [\n    {x: -dx, y: -dy},\n    {x: -dx, y:  dy},\n    {x:  dx, y:  dy},\n    {x:  dx, y: -dy}\n  ]\n\n  let first = vertices[0]\n  let last = vertices[vertices.length-1]\n  let maxRadius = Math.sqrt(Math.pow(2.0*dx,2.0) + Math.pow(2.0*dy, 2.0)) / 2.0\n  let vFirst = Victor.fromObject(first)\n  let vLast = Victor.fromObject(last)\n  let outPoint\n  let newVertices = []\n\n  if (vFirst.magnitude() <= vLast.magnitude()) {\n    // It's going outward\n    let scale = maxRadius / vLast.magnitude()\n    outPoint = vLast.multiply(Victor(scale,scale))\n    newVertices.push({ ...last, x: outPoint.x, y: outPoint.y})\n  } else {\n    let scale = maxRadius / vFirst.magnitude()\n    outPoint = vFirst.multiply(Victor(scale,scale))\n    newVertices.push({ ...first, x: outPoint.x, y: outPoint.y})\n  }\n\n  let nextCorner = 1\n  if (outPoint.x >= dx) {\n    // right\n    nextCorner = 2\n  } else if (outPoint.x <= -dx) {\n    // left\n    nextCorner = 0\n  } else if (outPoint.y >= dy) {\n    // up\n    nextCorner = 1\n  } else if (outPoint.y <= -dy) {\n    // down\n    nextCorner = 3\n  } else {\n    console.log(\"Darn!\")\n    nextCorner = 3\n  }\n\n  while (nextCorner !== machine.rectOrigin[0]) {\n    newVertices.push({ ...first, x: corners[nextCorner].x, y: corners[nextCorner].y})\n    nextCorner -= 1\n    if (nextCorner < 0) {\n      nextCorner = 3\n    }\n  }\n\n  newVertices.push({ ...first, x: corners[nextCorner].x, y: corners[nextCorner].y})\n\n  if (vFirst.magnitude() <= vLast.magnitude()) {\n    // outward\n    vertices = vertices.concat(newVertices)\n  } else {\n    vertices = newVertices.reverse().concat(vertices)\n  }\n\n  return vertices\n}\n\nfunction addPolarEndpoints(machine, vertices) {\n  const maxRadius = machine.maxRadius\n\n  if (machine.polarStartPoint !== 'none') {\n    if (machine.polarStartPoint === 'center') {\n      vertices.unshift(Vertex(0.0, 0.0))\n    } else {\n      const first = Victor.fromObject(vertices[0])\n      const scale = maxRadius / first.magnitude()\n      const startPoint = first.multiply(Victor(scale, scale))\n      vertices.unshift(Vertex(startPoint.x, startPoint.y))\n    }\n  }\n\n  if (machine.polarEndPoint !== 'none') {\n    if (machine.polarEndPoint === 'center') {\n      vertices.push(Vertex(0.0, 0.0))\n    } else {\n      const last = Victor.fromObject(vertices[vertices.length-1])\n      const scale = maxRadius / last.magnitude()\n      const endPoint = last.multiply(Victor(scale, scale))\n      vertices.push(Vertex(endPoint.x, endPoint.y))\n    }\n  }\n\n  return vertices\n}\n\nfunction buildTrackLoop(state, i, t) {\n  const input = getShapeVertices(state)\n  const numTrackLoops = state.transform.repeatEnabled ? state.transform.trackNumLoops : 1\n  const nextTrackVertex = transform(state.transform, input[0], 0, i + 1, numTrackLoops)\n  const backtrack = numTrackLoops > 1 && t === numTrackLoops - 1\n  let numVertices = input.length\n  let trackVertices = []\n  let trackDistances = []\n\n  for (var j=0; j<numVertices; j++) {\n    const amount = state.transform.transformMethod === 'smear' ? i + t + j/input.length : i + t\n    const trackVertex = transform(state.transform, input[j], amount, i, numTrackLoops)\n    trackVertices.push(trackVertex)\n\n    if (backtrack) {\n      trackDistances.push(distance(nextTrackVertex, trackVertex))\n    }\n  }\n\n  // backtrack to the vertex with the shortest distance to the first vertex in\n  // the next track loop; this minimizes the amount our shape draws over the\n  // previous shape, which is not visually appealing.\n  if (backtrack) {\n    let minIdx = 0\n    let minD = Number.MAX_SAFE_INTEGER\n\n    trackDistances.forEach((d, idx) => {\n      if (d <= minD) {\n        minD = d\n        minIdx = idx\n      }\n    })\n\n    if (minIdx !== 0) {\n      trackVertices = trackVertices.concat(trackVertices.slice(minIdx, trackVertices.length-1).reverse())\n    }\n  }\n\n  return trackVertices\n}\n\n// ensure vertices do not exceed machine boundary limits, and endpoints as needed\nexport const polishVertices = (state, vertices) => {\n  const machine = state.machine\n\n  if (vertices.length > 0) {\n    if (machine.rectangular) {\n      if (machine.rectOrigin.length === 1) {\n        vertices = addRectEndpoints(machine, vertices)\n      }\n\n      const sizeX = (machine.maxX - machine.minX)/2.0\n      const sizeY = (machine.maxY - machine.minY)/2.0\n      vertices = enforceRectLimits(vertices, sizeX, sizeY)\n    } else {\n      vertices = addPolarEndpoints(machine, vertices)\n      vertices = enforcePolarLimits(vertices, machine.maxRadius)\n    }\n  }\n\n  if (state.gcode.reverse) {\n    vertices.reverse()\n  }\n\n  return vertices\n}\n\nexport const thetaRho = (state) => {\n  let machine = state.machine\n  var x_scale = (machine.maxX - machine.minX)/2.0 * 0.01 * state.file.zoom\n  var y_scale = (machine.maxY - machine.minY)/2.0 * 0.01 * state.file.zoom\n  if (!machine.rectangular) {\n    x_scale = y_scale = machine.maxRadius\n  }\n  x_scale *= 0.01 * state.file.zoom\n  y_scale *= 0.01 * state.file.zoom\n  if (state.file.aspectRatio) {\n    x_scale = y_scale = Math.min(x_scale,y_scale)\n  }\n\n  const newVertices = state.file.vertices.map( (vertex) => {\n    return {...vertex,\n      x: vertex.x * x_scale,\n      y: vertex.y * y_scale,\n    }\n  })\n  return polishVertices(state, newVertices)\n}\n\nfunction reportTiming(time) {\n  time = Math.max(time, 0.01)\n  ReactGA.timing({\n    category: 'Compute',\n    variable: 'transformShapes',\n    value: time, // in milliseconds\n  });\n}\n\nconst throttledReportTiming = throttle(reportTiming, 1000, {trailing: true })\n\nexport const transformShapes = (state) => {\n  const startTime = performance.now()\n  const input = getShapeVertices(state)\n  const numLoops = state.transform.repeatEnabled ? state.transform.numLoops : 1\n  const numTrackLoops = state.transform.repeatEnabled ? state.transform.trackNumLoops : 1\n  let outputVertices = []\n\n  for (var i=0; i<numLoops; i++) {\n    if (state.transform.trackEnabled && numTrackLoops > 1) {\n      for (var t=0; t<numTrackLoops; t++) {\n        outputVertices = outputVertices.concat(buildTrackLoop(state, i, t))\n      }\n    } else {\n      for (i=0; i<numLoops; i++) {\n        for (var j=0; j<input.length; j++) {\n          let amount = state.transform.transformMethod === 'smear' ? i + j/input.length : i\n          outputVertices.push(transform(state.transform, input[j], amount, amount))\n        }\n      }\n    }\n  }\n\n  const rv = polishVertices(state, outputVertices)\n  const endTime = performance.now()\n  throttledReportTiming(endTime - startTime)\n  return rv\n}\n","import { createSelector } from 'reselect'\nimport {\n  transformShapes,\n  thetaRho\n} from '../../common/Computer'\n\nconst getApp = state => state.app\nconst getShapes = state => state.shapes\nconst getTransforms = state => state.transforms\nconst getFile = state => state.file\nconst getGCode = state => state.gcode\nconst getMachine = state => state.machine\n\nexport const getVertices = createSelector(\n  [\n      getApp,\n      getShapes,\n      getTransforms,\n      getFile,\n      getGCode,\n      getMachine,\n  ],\n  (app, shapes, transforms, file, gcode, machine) => {\n    let state = {\n      app: app,\n      shapes: shapes,\n      shape: shapes.byId[shapes.currentId],\n      transforms: transforms,\n      transform: transforms.byId[shapes.currentId],\n      file: file,\n      gcode: gcode,\n      machine: machine\n    }\n\n    if (state.app.input === 'shape') {\n      return transformShapes(state)\n    } else if (state.app.input === 'code') {\n      return thetaRho(state)\n    } else {\n      return transformShapes(state)\n    }\n  }\n)\n\nexport const getVerticesStats = createSelector(\n  [\n      getVertices\n  ],\n  (vertices) => {\n    let distance = 0.0\n    var previous = null\n\n    vertices.forEach( (vertex) => {\n      if (previous) {\n        distance += Math.sqrt(Math.pow(vertex.x - previous.x, 2.0) +\n                              Math.pow(vertex.y - previous.y, 2.0))\n      }\n      previous = vertex\n    })\n\n    return {\n      numPoints: vertices.length,\n      distance: Math.floor(distance)\n    }\n  }\n)\n","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport { connect } from 'react-redux'\nimport { Vertex } from '../../common/Geometry'\nimport { setMachineSize } from './machineSlice'\nimport { transform } from '../../common/Computer'\nimport { getVertices } from './selectors'\nimport { createSelector } from 'reselect'\nimport throttle from 'lodash/throttle'\nimport Color from 'color'\n\nconst getTransforms = state => state.transforms\nconst getShapes = state => state.shapes\n\nconst getTrackVertices = createSelector(\n  [\n    getShapes,\n    getTransforms\n  ],\n  (shapes, transforms) => {\n    let currentTransform = transforms.byId[shapes.currentId]\n\n    var numLoops = currentTransform.numLoops\n    var trackVertices = []\n    for (var i=0; i<numLoops; i++) {\n      if (currentTransform.trackEnabled) {\n        trackVertices.push(transform(currentTransform, {x: 0.0, y: 0.0}, i, i))\n      }\n    }\n    return trackVertices\n  }\n)\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    use_rect: state.machine.rectangular,\n    minX: state.machine.minX,\n    maxX: state.machine.maxX,\n    minY: state.machine.minY,\n    maxY: state.machine.maxY,\n    maxRadius: state.machine.maxRadius,\n    canvasWidth: state.machine.canvasWidth,\n    canvasHeight: state.machine.canvasHeight,\n    vertices: getVertices(state),\n    sliderValue: state.machine.sliderValue,\n    showTrack: state.app.input === 'shape',\n    trackVertices: getTrackVertices(state),\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onResize: (size) => {\n      dispatch(setMachineSize(size))\n    },\n  }\n}\n\n// Contains the preview window, and any parameters for the machine.\nclass PreviewWindow extends Component {\n  componentDidMount() {\n    const canvas = ReactDOM.findDOMNode(this)\n    const context = canvas.getContext('2d')\n    const bigBox = document.getElementById(\"preview-wrapper\")\n\n    this.throttledResize = throttle(this.resize, 200, {trailing: true}).bind(this)\n\n    window.addEventListener('resize', () => { this.throttledResize(canvas, bigBox) }, false)\n    setTimeout(() => {\n      this.visible = true\n      this.resize(canvas, bigBox)\n    }, 250)\n    this.paint(context)\n  }\n\n  componentDidUpdate() {\n    var canvas = ReactDOM.findDOMNode(this)\n    var context = canvas.getContext('2d')\n    context.clearRect(0, 0, this.props.canvasWidth, this.props.canvasHeight)\n    var bigBox = document.getElementById(\"preview-wrapper\")\n\n    this.resize(canvas, bigBox)\n  }\n\n  // in mm means in units of mm, but 0,0 is the center, not the lower corner or something.\n  mmToPixelsScale() {\n    var machine_x = 1\n    var machine_y = 1\n    if (this.props.use_rect) {\n      machine_x = this.props.maxX - this.props.minX\n      machine_y = this.props.maxY - this.props.minY\n    } else {\n      machine_x = this.props.maxRadius * 2.0\n      machine_y = machine_x\n    }\n\n    var scale_x = this.props.canvasWidth / machine_x\n    var scale_y = this.props.canvasHeight / machine_y\n    // Keep it square.\n    return Math.min(scale_x, scale_y) * 0.95\n  }\n\n  mmToPixels(vertex) {\n    var min_scale = this.mmToPixelsScale()\n\n    var x = vertex.x * min_scale + this.props.canvasWidth/2.0\n    // Y for pixels starts at the top, and goes down.\n    var y = -vertex.y * min_scale + this.props.canvasHeight/2.0\n\n    return Vertex(x, y)\n  }\n\n  moveTo_mm(context, vertex) {\n    var in_mm = this.mmToPixels(vertex)\n    context.moveTo(in_mm.x, in_mm.y)\n  }\n\n  lineTo_mm(context, vertex) {\n    var in_mm = this.mmToPixels(vertex)\n    context.lineTo(in_mm.x, in_mm.y)\n  }\n\n  dot_mm(context, vertex) {\n    var in_mm = this.mmToPixels(vertex)\n    context.arc(in_mm.x, in_mm.y, Math.max(4.0, this.mmToPixelsScale() * 1.5), 0, 2 * Math.PI, true)\n    context.fillStyle = context.strokeStyle\n    context.fill()\n  }\n\n  slice_vertices(vertices, sliderValue) {\n    const slide_size = 10.0\n    if (sliderValue === 0) {\n      return vertices\n    }\n\n    // Let's start by just assuming we want a slide_size sized window, as a percentage of the whole\n    // thing.\n    const begin_fraction = sliderValue / 100.0\n    const end_fraction = (slide_size + sliderValue) / 100.0\n    let begin_vertex = Math.round(vertices.length * begin_fraction)\n    let end_vertex = Math.round(vertices.length * end_fraction)\n\n    // never return less than two vertices; this keeps the preview slider smooth even when\n    // there are just a few vertices\n    if (begin_vertex === end_vertex) {\n      if (begin_vertex > 1) begin_vertex = begin_vertex - 2\n    } else if (begin_vertex === end_vertex - 1) {\n      if (begin_vertex > 0) begin_vertex = begin_vertex - 1\n    }\n\n    return vertices.slice(begin_vertex, end_vertex)\n  }\n\n  paint(context) {\n    context.save()\n\n    // Draw the bounds of the machine\n    context.beginPath()\n    context.lineWidth = \"1\"\n    context.strokeStyle = \"lightblue\"\n    if (this.props.use_rect) {\n      this.moveTo_mm(context, Vertex((this.props.minX - this.props.maxX)/2.0, (this.props.minY - this.props.maxY)/2.0))\n      this.lineTo_mm(context, Vertex((this.props.maxX - this.props.minX)/2.0, (this.props.minY - this.props.maxY)/2.0))\n      this.lineTo_mm(context, Vertex((this.props.maxX - this.props.minX)/2.0, (this.props.maxY - this.props.minY)/2.0))\n      this.lineTo_mm(context, Vertex((this.props.minX - this.props.maxX)/2.0, (this.props.maxY - this.props.minY)/2.0))\n      this.lineTo_mm(context, Vertex((this.props.minX - this.props.maxX)/2.0, (this.props.minY - this.props.maxY)/2.0))\n    } else {\n      this.moveTo_mm(context, Vertex(this.props.maxRadius, 0.0))\n      let resolution = 128.0\n      for (let i=0; i<=resolution; i++) {\n        let angle = Math.PI * 2.0 / resolution * i\n        this.lineTo_mm(context, Vertex(this.props.maxRadius * Math.cos(angle),\n                                       this.props.maxRadius * Math.sin(angle)))\n      }\n    }\n    context.stroke()\n\n    if (this.props.vertices && this.props.vertices.length > 0) {\n      let drawing_vertices = this.slice_vertices(this.props.vertices, this.props.sliderValue)\n\n      // Draw the background vertices\n      if (this.props.sliderValue !== 0) {\n        context.beginPath()\n        context.lineWidth = this.mmToPixelsScale()\n        context.strokeStyle = \"rgba(204, 204, 204, 0.35)\"\n        this.moveTo_mm(context, this.props.vertices[0])\n        for (let i=0; i<this.props.vertices.length; i++) {\n          this.lineTo_mm(context, this.props.vertices[i])\n        }\n        context.stroke()\n      }\n\n      if (this.props.trackVertices && this.props.trackVertices.length > 0 && this.props.showTrack) {\n        // Draw the track vertices\n        context.beginPath()\n        context.lineWidth = 6.0\n        context.strokeStyle = \"green\"\n        this.moveTo_mm(context, this.props.trackVertices[0])\n        for (let i=0; i<this.props.trackVertices.length; i++) {\n          this.lineTo_mm(context, this.props.trackVertices[i])\n        }\n        context.stroke()\n      }\n\n      if (drawing_vertices.length > 0) {\n        // Draw the slider path vertices\n        var startColor = Color('#6E6E00')\n        const colorStep = 200.0 / drawing_vertices.length / 100\n\n        context.beginPath()\n        context.lineWidth = this.mmToPixelsScale()\n        this.moveTo_mm(context, drawing_vertices[0])\n        context.stroke()\n\n        for (let i=1; i<drawing_vertices.length; i++) {\n          const strokeColor = this.props.sliderValue !== 0 ? startColor.lighten(colorStep * i).hex() : 'yellow'\n\n          context.beginPath()\n          context.strokeStyle = strokeColor\n          context.lineWidth = this.mmToPixelsScale()\n          this.moveTo_mm(context, drawing_vertices[i-1])\n          this.lineTo_mm(context, drawing_vertices[i])\n          context.stroke()\n        }\n      }\n\n      // Draw the start and end points\n      context.beginPath()\n      context.lineWidth = 4.0\n      context.strokeStyle = \"green\"\n      this.dot_mm(context, this.props.vertices[0])\n      context.stroke()\n      context.beginPath()\n      context.lineWidth = 4.0\n      context.strokeStyle = \"red\"\n      this.dot_mm(context, this.props.vertices[this.props.vertices.length-1])\n      context.stroke()\n\n      // Draw a slider path end point if sliding\n      if (drawing_vertices.length > 0 && this.props.sliderValue !== 0) {\n        const sliderEndPoint = drawing_vertices[drawing_vertices.length - 1]\n\n        context.beginPath()\n        context.strokeStyle = \"yellow\"\n        context.lineWidth = 6.0\n        this.dot_mm(context, sliderEndPoint)\n\n        // START debug: uncomment these lines to show slider end point coordinates\n        // context.font = \"20px Arial\"\n        // context.fillText('(' + sliderEndPoint.x.toFixed(2) + ', ' + sliderEndPoint.y.toFixed(2) + ')', 10, 50)\n        // END debug\n        context.stroke()\n      }\n    }\n\n    context.restore()\n  }\n\n  resize(canvas, bigBox) {\n    const width = parseInt(getComputedStyle(bigBox).getPropertyValue('width'))\n    const height = parseInt(getComputedStyle(bigBox).getPropertyValue('height'))\n    const size = Math.max(Math.min(width, height))\n\n    if (this.props.canvasWidth !== size) {\n      this.props.onResize(size)\n    }\n\n    var context = canvas.getContext('2d')\n    this.paint(context)\n  }\n\n  render() {\n    const {canvasWidth, canvasHeight} = this.props\n    const visibilityClass = `preview-canvas ${this.visible ? 'd-inline' : 'd-none'}`\n\n    return (\n      <canvas\n        className={visibilityClass}\n        height={canvasHeight}\n        width={canvasWidth} />\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(PreviewWindow)\n","import { createSlice } from \"@reduxjs/toolkit\"\n\nconst gCodeSlice = createSlice({\n  name: 'gcode',\n  initialState: {\n    filename: \"sandify\",\n    pre: localStorage.getItem('gcode_pre') ? localStorage.getItem('gcode_pre') : '',\n    post: localStorage.getItem('gcode_post') ? localStorage.getItem('gcode_post') : '',\n    reverse: false,\n    show: false\n  },\n  reducers: {\n    setGCodeFilename(state, action) {\n      state.filename = action.payload\n    },\n    setGCodePre(state, action) {\n      state.pre = action.payload\n      localStorage.setItem('gcode_pre', state.pre)\n    },\n    setGCodePost(state, action) {\n      state.post = action.payload\n      localStorage.setItem('gcode_post', state.post)\n    },\n    setGCodeShow(state, action) {\n      state.show = action.payload\n    },\n    toggleGCodeReverse(state, action) {\n      state.reverse = !state.reverse\n    },\n  }\n})\n\nexport const {\n  setGCodeFilename,\n  setGCodePre,\n  setGCodePost,\n  setGCodeShow,\n  toggleGCodeReverse,\n} = gCodeSlice.actions\n\nexport default gCodeSlice.reducer\n","import { createSelector } from 'reselect'\nimport { getShape } from '../shapes/selectors'\n\nconst getApp = state => state.app\nconst getShapes = state => state.shapes\nconst getTransforms = state => state.transforms\nconst getFile = state => state.file\nconst getGCode = state => state.gcode\nconst getMachine = state => state.machine\n\nexport const getComments = createSelector(\n  [\n      getApp,\n      getShapes,\n      getTransforms,\n      getFile,\n      getGCode,\n      getMachine,\n  ],\n  (app, shapes, transforms, file, gcode, machine) => {\n    let state = {\n      app: app,\n      shapes: shapes,\n      shape: shapes.byId[shapes.currentId],\n      transforms: transforms,\n      transform: transforms.byId[shapes.currentId],\n      file: file,\n      gcode: gcode,\n      machine: machine\n    }\n\n    let comments = []\n\n    comments.push(\"Created by Sandify\")\n    comments.push(\"\")\n    comments.push(\"  https://sandify.org\")\n    comments.push(\"\")\n    comments.push(\"  Sandify Version: \" + state.app.sandifyVersion)\n    comments.push(\"\")\n    comments.push(\"  Machine Type: \" + (state.machine.rectangular ? \"Rectangular\" : \"Polar\"))\n\n    if (state.machine.rectangular) {\n      comments.push(\"    MinX: \" + state.machine.minX + \" MaxX: \" + state.machine.maxX + \" MinY: \" + state.machine.minY + \" MaxY: \" + state.machine.maxY)\n    } else {\n      comments.push(\"    Max Radius: \" + state.machine.maxRadius)\n      comments.push(\"    Start Point: \" + state.machine.polarStartPoint)\n      comments.push(\"    End Point: \" + state.machine.polarEndPoint)\n    }\n\n    comments.push(\"  Content Type: \" + state.app.input)\n\n    switch (state.app.input) {\n      case 'shape': // shapes\n        const shape = state.shapes.byId[state.shapes.currentId]\n        const metashape = getShape(shape)\n        const shapeOptions = metashape.getOptions()\n\n        comments.push(\"    Starting Size: \" + shape.startingSize)\n        comments.push(\"    Offset: X: \" + state.transform.offsetX + \" Y: \" + state.transform.offsetY)\n        comments.push(\"    Selected Shape: \" + metashape.name)\n\n        Object.keys(shapeOptions).forEach((key) => {\n          comments.push(\"      \" + shapeOptions[key].title + \": \" + shape[key])\n        })\n\n        if (state.transform.repeatEnabled) {\n          comments.push(\"    Number of Loops: \" + state.transform.numLoops)\n          comments.push(\"    Transform Method: \" + state.transform.transformMethod)\n          comments.push(\"    Spin: \" + state.transform.spinEnabled)\n          if (state.transform.spinEnabled) {\n            comments.push(\"      Spin Value: \" + state.transform.spinValue)\n            comments.push(\"      Spin Switchbacks: \" + state.transform.spinSwitchbacks)\n          }\n          comments.push(\"    Grow: \" + state.transform.growEnabled)\n          if (state.transform.growEnabled) {\n            comments.push(\"      Grow Value: \" + state.transform.growValue)\n          }\n          comments.push(\"    Track: \" + state.transform.trackEnabled)\n          if (state.transform.trackEnabled) {\n            comments.push(\"      Track Size: \" + state.transform.trackValue)\n            comments.push(\"      Track Length: \" + state.transform.trackLength)\n            comments.push(\"      Track Number of Loops: \" + state.transform.trackNumLoops)\n            comments.push(\"      Track Grow: \" + state.transform.trackGrowEnabled)\n\n            if (state.transform.trackGrowEnabled) {\n              comments.push(\"          Track Grow Value: \" + state.transform.trackGrow)\n            }\n          }\n        }\n        break\n\n      case 'code': // Theta Rho\n        comments.push(\"    Input File: \" + state.file.name)\n        comments.push(\"    Zoom: \"  + state.file.zoom)\n        comments.push(\"    Aspect Ratio: \" + state.file.aspectRatio)\n        break\n\n      default: // Dunno\n        comments.push(\"  Content Type: Unknown\")\n        break\n    }\n\n    comments.push(\"  Path Reversed: \" + state.gcode.reverse)\n    comments.push(\"\")\n    return comments\n  }\n)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  Button,\n  Form,\n  Modal\n} from 'react-bootstrap'\nimport Switch from 'react-switch'\nimport {\n  setGCodeFilename,\n  setGCodePre,\n  setGCodePost,\n  setGCodeShow,\n  toggleGCodeReverse,\n} from './gCodeSlice'\nimport { getComments } from './selectors'\nimport { getVertices } from '../machine/selectors'\nimport { Vertex } from '../../common/Geometry'\nimport Victor from 'victor'\nimport ReactGA from 'react-ga'\n\n// Helper function to take a string and make the user download a text file with that text as the\n// content.\n// I don't really understand this, but I took it from here, and it seems to work:\n// https://stackoverflow.com/a/18197511\nfunction download(filename, text) {\n  let link = document.createElement('a')\n  link.download = filename\n\n  let blob = new Blob([text],{type: 'text/plain;charset=utf-8'})\n\n  // Windows Edge fix\n  if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n    window.navigator.msSaveOrOpenBlob(blob, filename)\n  } else {\n    link.href = URL.createObjectURL(blob)\n    if (document.createEvent) {\n      var event = document.createEvent('MouseEvents')\n      event.initEvent('click', true, true)\n      link.dispatchEvent(event)\n    } else {\n      link.click()\n    }\n    URL.revokeObjectURL(link.href)\n  }\n}\n\nfunction gcode(vertex) {\n  var command = 'G01' +\n    ' X' + vertex.x.toFixed(3) +\n    ' Y' + vertex.y.toFixed(3)\n  if (vertex.speed > 0.0) {\n    command += ' F' + vertex.f\n  }\n  return command + '\\n'\n}\n\nfunction thetarho(vertex) {\n  return \"\" + vertex.x.toFixed(5) + \" \" + vertex.y.toFixed(5) + \"\\n\"\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    reverse: state.gcode.reverse,\n    show: state.gcode.show,\n    vertices: getVertices(state),\n    settings: getComments(state),\n    input: state.app.input,\n    shape: state.shapes.currentId,\n    offsetX: (state.machine.minX + state.machine.maxX) / 2.0,\n    offsetY: (state.machine.minY + state.machine.maxY) / 2.0,\n    maxRadius: state.machine.maxRadius,\n    filename: state.gcode.filename,\n    pre: state.gcode.pre,\n    post: state.gcode.post,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    open: () => {\n      dispatch(setGCodeShow(true))\n    },\n    close: () => {\n      dispatch(setGCodeShow(false))\n    },\n    toggleReverse: () => {\n      dispatch(toggleGCodeReverse())\n    },\n    setFilename: (event) => {\n      dispatch(setGCodeFilename(event.target.value))\n    },\n    setPre: (event) => {\n      dispatch(setGCodePre(event.target.value))\n    },\n    setPost: (event) => {\n      dispatch(setGCodePost(event.target.value))\n    },\n  }\n}\n\n// A class that will encapsulate all the gcode generation. This is currently just a button that\n// converts vertices and a speed into a list of positions. There is a lot more than could exists\n// here.\nclass GCodeGenerator extends Component {\n\n  // Record this event to google analytics.\n  gaRecord(fileType) {\n    let savedCode = 'Saved: ' + this.props.input\n    if (this.props.input === 'shape' || this.props.input === 'Shape') {\n      savedCode = savedCode + ': ' + this.props.shape\n    }\n    console.log(savedCode)\n    ReactGA.event({\n      category: fileType,\n      action: savedCode,\n    })\n  }\n\n  generateGCode() {\n    let startTime = performance.now()\n    var content = \"; \" + this.props.settings.join(\"\\n; \")\n    content += \"\\n\"\n    content += \"; filename: '\" + this.props.filename + \"'\\n\\n\"\n    content += \"; BEGIN PRE\\n\"\n    content += this.props.pre\n    content += \"; END PRE\\n\"\n\n    var centeredVertices = this.props.vertices.map( (vertex) => {\n      return {\n        ...vertex,\n        x: vertex.x + this.props.offsetX,\n        y: vertex.y + this.props.offsetY,\n      }\n    })\n\n    var lines = centeredVertices.map(gcode)\n    content += lines.join('')\n    content += '\\n'\n    content += \"; BEGIN POST\\n\"\n    content += this.props.post\n    content += \"; END POST\\n\"\n\n    var filename = this.props.filename\n    if (!filename.includes(\".\")) {\n      filename += \".gcode\"\n    }\n\n    this.gaRecord(\"Gcode\")\n\n    download(filename, content)\n    this.props.close()\n\n    let endTime = performance.now()\n    ReactGA.timing({\n      category: 'Gcode',\n      variable: 'Save GCode',\n      value: endTime - startTime, // in milliseconds\n    });\n  }\n\n  generateThetaRho() {\n    let startTime = performance.now()\n    var content = \"# \" + this.props.settings.join(\"\\n# \")\n    content += \"\\n\"\n    content += \"# filename: '\" + this.props.filename + \"'\\n\\n\"\n    content += \"# BEGIN PRE\\n\"\n    content += this.props.pre\n    content += \"# END PRE\\n\"\n    content += '\\n'\n\n    // First, downsample larger lines into smaller ones.\n    var maxLength = 2.0\n    var subsampledVertices = []\n    var previous = undefined\n    var next\n    for (next = 0; next < this.props.vertices.length; next++) {\n      if (previous !== undefined) {\n        var start = Victor.fromObject(this.props.vertices[previous])\n        var end = Victor.fromObject(this.props.vertices[next])\n\n        var delta = end.clone().subtract(start)\n        var deltaSegment = end.clone().subtract(start).normalize().multiply(Victor(maxLength, maxLength))\n\n        // This loads up (start, end].\n        for (let step = 0; step < (delta.magnitude() / maxLength) ; step++) {\n          subsampledVertices.push(Vertex(start.x + step * deltaSegment.x,\n                                         start.y + step * deltaSegment.y,\n                                         this.props.vertices[next].f))\n        }\n\n      }\n      previous = next\n    }\n    // Add in the end.\n    if (previous !== undefined) {\n      subsampledVertices.push(this.props.vertices[this.props.vertices.length - 1])\n    }\n\n    // Convert to Theta, Rho\n    var trVertices = []\n    var previousTheta = 0\n    var previousRawTheta = 0\n    for (next = 0; next < subsampledVertices.length; ++next) {\n      // Normalize the radius\n      var rho = Victor.fromObject(subsampledVertices[next]).magnitude() / this.props.maxRadius\n\n      // What is the basic theta for this point?\n      var rawTheta = Math.atan2(subsampledVertices[next].x,\n                                subsampledVertices[next].y)\n      // Convert to [0,2pi]\n      rawTheta = (rawTheta + 2.0 * Math.PI) % (2.0 * Math.PI)\n\n      // Compute the difference to the last point.\n      var deltaTheta = rawTheta - previousRawTheta\n      // Convert to [-pi,pi]\n      if (deltaTheta < -Math.PI) {\n        deltaTheta += 2.0 * Math.PI\n      }\n      if (deltaTheta > Math.PI) {\n        deltaTheta -= 2.0 * Math.PI\n      }\n      var theta = previousTheta + deltaTheta\n      previousRawTheta = rawTheta\n      previousTheta = theta\n\n      trVertices.push(Vertex(theta, rho, subsampledVertices[next].f))\n    }\n\n    var lines = trVertices.map(thetarho)\n\n    content += lines.join('')\n\n    content += '\\n'\n    content += \"# BEGIN POST\\n\"\n    content += this.props.post\n    content += \"# END POST\\n\"\n\n    var filename = this.props.filename\n    if (!filename.includes(\".\")) {\n      filename += \".thr\"\n    }\n\n    this.gaRecord(\"ThetaRho\")\n    download(filename, content)\n\n    this.props.close()\n\n    let endTime = performance.now()\n    ReactGA.timing({\n      category: 'ThetaRho',\n      variable: 'Save GCode',\n      value: endTime - startTime, // in milliseconds\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Button className=\"ml-2 mr-3\" variant=\"primary\" onClick={this.props.open}>Generate code</Button>\n\n        <Modal show={this.props.show} onHide={this.props.close}>\n          <Modal.Header closeButton>\n            <Modal.Title>Code Parameters</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <Form.Group controlId=\"sandify-filename\">\n              <Form.Label>Name of output</Form.Label>\n              <Form.Control type=\"text\" value={this.props.filename} onChange={this.props.setFilename} />\n            </Form.Group>\n\n            <Form.Group controlId=\"pre-code\">\n              <Form.Label>Program start code</Form.Label>\n              <Form.Control as=\"textarea\" value={this.props.pre} onChange={this.props.setPre} />\n            </Form.Group>\n\n            <Form.Group controlId=\"post-code\">\n              <Form.Label>Program end code</Form.Label>\n              <Form.Control as=\"textarea\" value={this.props.post} onChange={this.props.setPost} />\n            </Form.Group>\n\n            <Form.Group controlId=\"reverse-path\">\n              <div className=\"d-flex flex-column\">\n                <Form.Label>Reverse the path in the code</Form.Label>\n                <Switch checked={this.props.reverse} onChange={this.props.toggleReverse} />\n              </div>\n            </Form.Group>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button id=\"code-close\" variant=\"link\" onClick={this.props.close}>Close</Button>\n            <Button id=\"code-gen-gcode\" variant=\"primary\" onClick={this.generateGCode.bind(this)}>Generate GCode</Button>\n            <Button id=\"code-gen-thetarho\" variant=\"primary\" onClick={this.generateThetaRho.bind(this)}>Generate Theta Rho</Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GCodeGenerator)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Slider from 'rc-slider'\nimport 'rc-slider/assets/index.css'\nimport PreviewWindow from './PreviewWindow'\nimport GCodeGenerator from '../gcode/GCodeGenerator'\nimport { updateMachine } from './machineSlice'\nimport { getVerticesStats } from './selectors'\nimport './MachinePreview.scss'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    sliderValue: state.machine.sliderValue,\n    verticesStats: getVerticesStats(state),\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onSlider: (value) => {\n      dispatch(updateMachine({sliderValue: value}))\n    },\n  }\n}\n\nclass MachinePreview extends Component {\n  render() {\n    return (\n      <div className=\"machine-preview d-flex flex-grow-1 flex-column\" id=\"machine-preview\">\n        <div className=\"flex-grow-1 d-flex flex-column\">\n          <div id=\"preview-wrapper\" className=\"preview-wrapper overflow-hidden d-flex align-items-center\">\n            <PreviewWindow />\n          </div>\n\n          <div className=\"mt-auto pt-2 bg-white d-flex align-items-center\">\n            <div className=\"flex-grow-1\">\n              <div className=\"mx-2\">\n                Points: {this.props.verticesStats.numPoints}, Distance: {this.props.verticesStats.distance}\n              </div>\n\n              <div className=\"p-3\">\n                  <Slider\n                    value={this.props.sliderValue}\n                    step={1.0}\n                    min={0.0}\n                    max={100.0}\n                    onChange={this.props.onSlider}\n                  />\n              </div>\n            </div>\n            <GCodeGenerator />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MachinePreview)\n","import { configureStore } from \"@reduxjs/toolkit\"\nimport { combineReducers } from 'redux'\nimport appReducer from './appSlice'\nimport fileReducer from '../theta_rho/fileSlice'\nimport machineReducer from '../machine/machineSlice'\nimport gcodeReducer from '../gcode/gCodeSlice'\nimport shapesReducer from '../shapes/shapesSlice'\nimport transformsReducer from '../transforms/transformsSlice'\nimport { registeredShapes } from '../../common/registeredShapes'\nimport { loadState, saveState } from '../../common/localStorage'\nimport { addShape, setCurrentShape, updateShape } from '../shapes/shapesSlice'\nimport { addTransform, updateTransform } from '../transforms/transformsSlice'\n\nconst store = configureStore({\n  reducer: combineReducers({\n    app: appReducer,\n    shapes: shapesReducer,\n    transforms: transformsReducer,\n    file: fileReducer,\n    gcode: gcodeReducer,\n    machine: machineReducer\n  }),\n})\n\n// preload shapes into store\nObject.keys(registeredShapes).forEach(key => {\n  let shape = registeredShapes[key]\n  let state = shape.getInitialState()\n\n  state.id = key\n  state.name = shape.name\n  store.dispatch(addTransform({id: state.id, repeatEnabled: state.repeatEnabled}))\n  store.dispatch(addShape(state))\n})\n\n// set to true when running locally if you want to preserve your shape\n// settings across page loads; don't forget to toggle false when done testing!\nconst persistState = false\nif (persistState) {\n  // override default values with saved ones\n  const persistedState = loadState()\n\n  if (persistedState) {\n    Object.keys(persistedState.shapes.byId).forEach((key) => {\n      let shape = persistedState.shapes.byId[key]\n      shape.id = key\n      store.dispatch(updateShape(shape))\n    })\n\n    Object.keys(persistedState.transforms.byId).forEach((key) => {\n      let transform = persistedState.transforms.byId[key]\n      transform.id = key\n      store.dispatch(updateTransform(transform))\n    })\n  }\n}\n\nconst storedShape = localStorage.getItem('currentShape')\nconst currentShape = storedShape && registeredShapes[storedShape] ? storedShape : 'polygon'\nstore.dispatch(setCurrentShape(currentShape))\n\nif (persistState) {\n  store.subscribe(() => {\n    const state = store.getState()\n\n    saveState({\n      shapes: state.shapes,\n      transforms: state.transforms\n    })\n  })\n}\n\nexport default store\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Row\n} from 'react-bootstrap'\nimport { Provider } from 'react-redux'\nimport Header from './Header'\nimport InputTabs from './InputTabs'\nimport MachinePreview from '../machine/MachinePreview'\nimport store from './store'\nimport './App.scss'\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Header />\n\n          <main>\n            <Row className=\"no-gutters\">\n              <Col className=\"full-page d-flex flex-column\">\n                <MachinePreview />\n              </Col>\n\n              <div id=\"sidebar\">\n                <InputTabs />\n              </div>\n            </Row>\n          </main>\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './features/app/reactGA'\nimport App from './features/app/App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}