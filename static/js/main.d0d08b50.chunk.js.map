{"version":3,"sources":["features/app/logo.svg","features/app/reactGA.js","features/app/Header.js","components/InputOption.js","components/CheckboxOption.js","models/Machine.js","features/machine/machineSlice.js","features/machine/RectSettings.js","features/machine/PolarSettings.js","features/machine/MachineSettings.js","features/app/Footer.js","components/CommentsBox.js","components/DropdownOption.js","models/Shape.js","models/Circle.js","common/util.js","models/Epicycloid.js","models/FileImport.js","models/fractal_spirograph/Orbit.js","models/fractal_spirograph/FractalSpirograph.js","models/Hypocycloid.js","models/input_text/raysol_cursive.js","models/input_text/raysol_sanserif.js","models/input_text/Fonts.js","common/geometry.js","features/machine/Machine.js","features/machine/PolarMachine.js","models/input_text/InputText.js","common/lindenmayer.js","models/lsystem/subtypes.js","models/lsystem/LSystem.js","models/Effect.js","features/machine/RectMachine.js","models/Mask.js","features/machine/computer.js","common/noise.js","models/NoiseWave.js","models/Polygon.js","models/Reuleaux.js","models/Rose.js","models/space_filler/subtypes.js","models/space_filler/SpaceFiller.js","models/Star.js","common/PriorityQueue.js","common/Graph.js","models/tessellation_twist/TessellationTwist.js","models/v1_engineering/Vicious1Vertices.js","models/Wiper.js","models/shapes.js","models/Heart.js","models/v1_engineering/V1Engineering.js","common/eulerianTrail.js","models/Point.js","features/layers/layersSlice.js","features/layers/selectors.js","models/Transform.js","features/transforms/ScaleTransform.js","features/transforms/RotationTransform.js","features/transforms/TrackTransform.js","features/transforms/Transforms.js","features/layers/Layer.js","features/importer/Importer.js","features/importer/ThetaRhoImporter.js","features/importer/GCodeImporter.js","features/layers/Playlist.js","features/app/appSlice.js","features/app/InputTabs.js","features/preview/previewSlice.js","features/machine/selectors.js","features/preview/PreviewLayer.js","features/preview/PreviewWindow.js","features/exporter/exporterSlice.js","features/exporter/Exporter.js","features/exporter/CommentExporter.js","features/exporter/selectors.js","features/exporter/ThetaRhoExporter.js","models/Exporter.js","features/exporter/Downloader.js","features/exporter/GCodeExporter.js","features/exporter/SvgExporter.js","features/preview/MachinePreview.js","common/localStorage.js","features/app/store.js","features/app/App.js","index.js"],"names":["module","exports","ReactGA","initialize","debug","pageview","window","location","pathname","search","Header","Component","render","className","src","logo","alt","InputOption","constructor","props","super","this","delayedSet","debounce","value","key","onChange","attrs","option","options","optionKey","model","optionType","type","minimum","min","parseFloat","maximum","max","visible","undefined","isVisible","Row","Col","sm","Form","Label","htmlFor","title","Control","as","step","isNaN","plaintext","plainText","event","target","delayKey","CheckboxOption","checked","machineOptions","minX","maxX","minY","maxY","origin","maxRadius","minimizeMoves","polarEndPoint","polarStartPoint","Machine","getOptions","localMinX","localStorage","getItem","localMaxX","localMinY","localMaxY","localMaxRadius","machineSlice","createSlice","name","initialState","rectangular","rectExpanded","polarExpanded","JSON","parse","rectOrigin","reducers","updateMachine","state","action","Object","assign","payload","keys","forEach","setItem","toggleMachineRectExpanded","toggleMachinePolarExpanded","setMachineRectOrigin","newValue","i","length","includes","push","toggleMinimizeMoves","actions","setMachineSize","RectSettings","activeClassName","active","Card","Accordion","Toggle","eventKey","onClick","activeCallback","Collapse","Body","index","ToggleButtonGroup","id","onOriginChange","ToggleButton","variant","connect","ownProps","expanded","machine","dispatch","PolarSettings","startPoint","onStartPointChange","endPoint","onEndPointChange","MachineSettings","defaultActiveKey","Footer","href","CommentsBox","commentsRender","comments","map","comment","DropdownOption","currentChoice","label","choice","choices","shapeOptions","Shape","cache","getInitialState","repeatEnabled","canTransform","selectGroup","shouldCache","autosize","canChangeSize","canChangeHeight","canRotate","usesMachine","startingWidth","startingHeight","offsetX","offsetY","rotation","numLoops","transformMethod","growEnabled","growValue","growMethod","growMathInput","growMath","spinEnabled","spinValue","spinMethod","spinMathInput","spinMath","spinSwitchbacks","trackEnabled","trackGrowEnabled","trackValue","trackLength","trackNumLoops","trackGrow","connectionMethod","drawPortionPct","backtrackPct","rotateCompleteLoop","rotateStartingPct","reverse","dragging","effect","getVertices","circleLobes","circleDirection","roundP","n","p","Math","round","Number","EPSILON","pow","reduce","numerator","denominator","gcd","a","b","epicycloidA","epicycloidB","fileName","aspectRatio","Orbit","x","y","r","level","settings","parent","child","angle","PI","sign","alternateRotation","speed","velocity","resolution","addChild","newr","relativeSize","newx","newy","update","rsum","cos","sin","fractalSpirographVelocity","fractalSpirographResolution","fractalSpirographNumCircles","fractalSpirographRelativeSize","fractalSpirographAlternateRotation","hypocycloidA","hypocycloidB","raysol_cursive","raysol_sanserif","billsey","curve","Array","Victor","billseyConverter","vertices","newVertices","prevPoint","vertex","width","abs","height","concat","cv","raysolConverter","MonospaceFont","ch","upper","toUpperCase","hasOwnProperty","CursiveFont","distance","v1","v2","sqrt","point","atan2","onSegment","start","end","resizeVertices","sizeX","sizeY","size","bounds","loX","hiX","loY","hiY","findBounds","scale","scaledBounds","multiply","deltaX","deltaY","clone","add","vertexRoundP","v","rotate","angleDeg","pctX","pctY","scaleX","scaleY","offset","getSliderBounds","sliderValue","beginFraction","endFraction","circle","radius","points","polish","enforceLimits","cleanVertices","limitPrecision","optimizePerimeter","layerInfo","border","outlinePerimeter","addStartPoint","addEndPoint","previous","nearestVertex","next","line","clipLine","pt","segments","stripExtraPerimeterVertices","minimizePerimeterMoves","connectedVertices","j","current","prev","tracePerimeter","flat","segment","perimeter","curr","onPerimeter","currentIndex","lastSegment","walked","shift","pop","minDist","MAX_SAFE_INTEGER","dist","perimeterDistance","splice","traceCircle","startAngle","endAngle","deltaAngle","tracePoints","PolarMachine","perimeterConstant","unshift","first","magnitude","fromObject","last","inBounds","nearestPerimeterVertex","parseInt","delta","rm","r1","r2","d","radStart","radEnd","intersections","getIntersections","intersection","on","otherPoint","point1","direction","subtract","normalize","t","distanceToLine","dt","point2","inputText","inputFont","rotateDir","getMaxX","onSubtypeChange","subtype","changes","maxIterations","minIterations","iterations","onMinIterations","onMaxIterations","lsystem","config","output","input","axiom","char","rules","lsystemDraw","side","lsystemPath","instructions","currVertices","startingAngle","returnPaths","slice","draw","returnPath","revChar","subtypes","F","W","X","Y","Z","A","B","6","7","8","9","Effect","RectMachine","corners","corner","outPoint","clipped","newPoint","dx","dy","rDx","rDy","s","idx","nearestCornerIndex","p1","p2","includeOriginalPoints","o1","d1","d2","xSign","ySign","dc","lineStart","lineEnd","quadrantStart","pointLocation","quadrantEnd","boundPoint","sides","intPoint","console","log","Error","lengthSq","temp","midpoint","good","bad","fixed","sideStart","sideEnd","lineCrossSidePerp","diff","u","maskMachine","maskMinimizeMoves","maskBorder","transformShape","data","amount","trackIndex","transformedVertex","growAmount","evaluate","err","spinAmount","loopPeriod","loopIndex","track","rotateDeg","addX","addY","buildTrackLoop","transform","numTrackLoops","nextTrackVertex","backtrack","trackVertices","trackDistances","completion","trackVertex","minIdx","minD","throttledReportTiming","throttle","time","timing","category","variable","trailing","transformShapes","layer","effects","startTime","performance","now","outputVertices","count","arr","floor","apply","getShape","applyEffect","endTime","getMachineInstance","fade","lerp","Grad","z","dot2","dot3","grad3","perm","gradP","F3","G3","F2","G2","noisejs","seed","simplex2","xin","yin","i1","j1","x0","y0","x1","y1","x2","y2","gi0","gi1","gi2","t0","t1","t2","simplex3","zin","k1","i2","j2","k2","k","z0","z1","z2","x3","y3","z3","gi3","t3","perlin2","n00","n01","n10","n11","perlin3","n000","n001","n010","n011","n100","n101","n110","n111","w","numParticles","noiseLevel","noiseType","polygonSides","roundCorners","roundFraction","reuleauxSides","roseN","roseD","iterationsGrow","L","R","fillerSubtype","starRatio","PriorityQueue","collection","enqueue","element","isEmpty","added","dequeue","mix","result","Graph","nodeMap","nodeKeys","Set","adjacencyList","edgeMap","edgeKeys","clearCachedPaths","addNode","node","toString","has","addEdge","node1","node2","weight","node1Key","node2Key","edgeKey","sort","hasEdge","ekey1","ekey2","dijkstraShortestPath","startNode","endNode","shortest","getCachedShortestPath","times","backtrace","pq","nodes","Infinity","currentNode","neighbor","path","lastStep","cacheShortestPath","cachedPaths","getPairedKey","vecTriangle","vecSquare","getEdges","edges","c","da","db","ap","bp","cp","ab","ac","bc","tessellationTwistNumSides","tessellationTwistIterations","tessellationTwistRotate","Vicious1Vertices","wiperType","wiperSize","wiperAngleDeg","outOfBounds","size_x","size_y","nearEnough","linearVertices","shape","startLocation","cosa","sina","orig_delta_w","orig_delta_h","delta_w","delta_h","endLocation","nextWidthPoint","nextHeightPoint","emergency_break","registeredShapes","polygon","getLineVertices","numberOfPoints","beta","alpha","angleStart","angleEnd","angleResolution","numberOfLinePoints","arcAngle","star","star_scale","heart","reuleaux","coverageAngle","halfCoverageAngle","corn","epicycloid","link","linkText","reduced","rotations","isInteger","hypocycloid","rose","thetaClose","theta","prevLetter","lines","textPoints","chi","nextLetter","vi","connectorPoints","widthOffset","maxRPerY","rPerY","thetaCenter","maxROffset","rOffset","rOffsetPerLine","lastTheta","thetaPerX","endTheta","v1Engineering","fractal_spirograph","numCircles","sun","tessellation_twist","getShapeVertices","numSides","angle2","tessellation","graph","edge","prevKey","trail","g","edgePointer","edgeUsed","idReverse","idCount","getId","pushEdge","deg","inDeg","outDeg","directed","check","oddVertex","odd","checkDirected","checkUndirected","dfs","to","eulerianTrail","values","walkedVertices","walkedEdges","missingEdges","from","filter","hash","split","missingVertex","visited","wiper","halfHeight","halfWidth","emergencyBreak","radiusPerAngle","spiralVertices","space_filler","noise_wave","noise","rng","seedrandom","machineInstance","particles","vertexGroups","particle","group","wasInside","newVertex","getParticleVertex","inside","prevCurve","getCurve","startPerimeter","endPerimeter","shapeSimilarity","estimationPoints","noiseSimilarity","pEndVertices","periodDenominator","period","file_import","importProps","originalAspectRatio","x_scale","y_scale","machine_aspect_ratio","mask","maskPerimeterConstant","getShapeSelectOptions","includeEffects","groupOptions","shapes","optionLabel","found","newOptions","protectedAttrs","newLayerType","newLayerName","toLowerCase","layersSlice","selected","newLayerNameOverride","copyLayerName","byId","allIds","addLayer","uniqueId","findIndex","moveLayer","oldIndex","newIndex","arrayMove","copyLayer","source","removeLayer","deleteId","restoreDefaults","defaults","setCurrentLayer","setSelectedLayer","setShapeType","attr","setNewLayerType","updateLayer","updateLayers","toggleRepeat","toggleGrow","toggleSpin","toggleTrack","toggleTrackGrow","toggleVisible","getLayers","layers","getCurrentLayer","createSelector","makeGetLayer","layerId","makeGetLayerIndex","getVisibleLayerIds","visibleLayerIds","makeGetNextLayerId","makeGetEffects","getLayerInfo","getNumLayers","getKonvaLayerIds","kIds","isDragging","visibleIds","getNumVisibleLayers","transformOptions","Transform","ScaleTransform","activeKey","onGrow","onGrowMethodChange","RotationTransform","onSpin","onSpinMethodChange","TrackTransform","activeGrowClassName","activeGrow","activeGrowKey","onTrack","onTrackGrow","Transforms","onRepeat","ontransformMethodChange","Layer","selectedOption","optionsRender","linkRender","rel","optionsListRender","entries","shapeSelectRender","showShapeSelectRender","onChangeType","maxMenuHeight","selectOptions","style","borderTop","borderBottom","Button","onRestoreDefaults","Importer","text","ThetaRhoImporter","import","callback","hasVertex","thetaRhos","ii","trim","indexOf","pointStrings","convertToXY","max_angle","rhoStep","rho","GCodeImporter","isComment","addVertex","Toolpath","addLine","modal","addArcCurve","v0","startTheta","deltaTheta","motion","thetaStep","loadFromString","results","normalizeCoords","customStyles","control","base","minHeight","SortableItem","SortableElement","canRemove","onCopyLayer","onLayerRemoved","onLayerSelected","onToggleLayerVisible","activeClass","dragClass","nameClass","ListGroup","Item","join","data-id","SortableList","SortableContainer","currentLayer","numLayers","maxHeight","Playlist","showNewLayer","showImportLayer","showCopyLayer","scrollToBottom","el","document","getElementById","scrollTop","scrollHeight","toggleNewModal","setState","toggleImportModal","onFileSelected","file","files","reader","FileReader","onload","importer","endsWith","onFileImported","bind","readAsText","importerProps","onLayerImport","toggleCopyModal","handleNameFocus","select","componentDidUpdate","prevProps","selectedShape","namedInputRef","React","createRef","Modal","show","onHide","closeButton","Title","onChangeNewType","styles","onFocus","onChangeNewName","onLayerAdded","cursor","accept","display","onEntered","focus","ref","onChangeCopyName","onLayerCopied","pressDelay","onSortEnd","onLayerMoved","closest","dataset","appSlice","sandifyVersion","chooseInput","InputTabs","handleSelect","Tabs","onSelect","Tab","previewSlice","canvasWidth","canvasHeight","updatePreview","setPreviewSize","LRUCache","getState","getMachine","getPreview","preview","cachedSelectors","makeGetLayerMachine","makeGetLayerVertices","getCachedSelector","metashape","stringify","getCacheKey","get","set","makeGetTransformedVertices","makeGetComputedVertices","layerIndex","nextLayerId","nextLayer","nextVertices","polishVertices","makeGetPreviewVertices","konvaScale","konvaDeltaX","konvaDeltaY","fn","getAllComputedVertices","getAllPreviewVertices","getVertexOffsets","offsets","getVerticesStats","numPoints","makeGetPreviewTrackVertices","PreviewLayer","useSelector","allVertices","showTrack","colors","layerVertices","startColor","Color","colorStep","darken","hex","shallowEqual","useDispatch","konvaSizeX","konvaSizeY","isSelected","isSliding","mmToPixels","moveTo_mm","context","in_mm","moveTo","lineTo_mm","lineTo","dot_mm","arc","fillStyle","strokeStyle","fill","lineWidth","stroke","shapeRef","trRef","useEffect","getLayer","batchDraw","Fragment","draggable","onTap","strokeWidth","sceneFunc","beginPath","drawTrackVertices","defaultColor","oldColor","currentColor","absoluteI","pathColor","drawLayerVertices","endOffset","drawStartAndEndPoints","absoluteEnd","sliderEnd","drawSliderEndPoint","fillStrokeShape","hitFunc","onDragStart","e","onDragEnd","onTransformStart","onTransformEnd","centeredScaling","resizeEnabled","rotateEnabled","rotationSnaps","enabledAnchors","PreviewWindow","componentDidMount","wrapper","throttledResize","resize","addEventListener","setTimeout","getComputedStyle","getPropertyValue","onResize","use_rect","relativeScale","visibilityClass","checkDeselect","selectedId","scaleByWheel","newSize","clipFunc","ctx","rect","Consumer","store","onMouseDown","onTouchStart","onWheel","evt","preventDefault","onLayerChange","konvaIds","fileType","exporterSlice","pre","post","polarRhoMax","updateExporter","Exporter","indentLevel","export","computeOutputVertices","header","startComments","keyValueLine","endComments","exportCode","footer","content","padding","commenting","commentChar","optionLine","metamodel","instance","optionLines","metaOption","indent","dedent","CommentExporter","app","exporter","getComments","thetarho","toFixed","exporterOptions","exporters","fileExtension","gcode","minx","miny","maxx","maxy","startx","starty","endx","endy","replace","subsampledVertices","deltaSegment","previousTheta","previousRawTheta","mintheta","minrho","maxtheta","maxrho","rhoMax","rawTheta","starttheta","startrho","endtheta","endrho","centeredVertices","svg","firstPoint","Downloader","gaRecord","savedCode","download","downloadFile","close","createElement","blob","Blob","navigator","msSaveOrOpenBlob","URL","createObjectURL","createEvent","initEvent","dispatchEvent","click","revokeObjectURL","open","MachinePreview","verticesStats","onSlider","configureStore","reducer","combineReducers","appReducer","layersReducer","exporterReducer","machineReducer","previewReducer","process","JEST_WORKER_ID","storedShape","currentShape","App","ReactDOM"],"mappings":"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AAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,IAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,IAAQ,CAAC,KAAM,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,M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,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC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C,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAChtC,EAAM,CAAE,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OACh4B,EAAM,CAAE,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OAChhC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC90B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,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AO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OAC3gC,KAAO,CAAE,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjrC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC9iC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,C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AO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAC10B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACz1C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAA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,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OACt8C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OACllC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,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MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAChuB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAC91C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,C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,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAChY,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,M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O,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,gBAC3B,IAAIA,KAAO,cAAgB,gBAC3B,IAAIA,KAAO,cAAgB,gBAC3B,IAAIA,KAAO,aAAe,gBAC1B,IAAIA,KAAO,cAAgB,kBAC3B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,aAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,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","file":"static/js/main.d0d08b50.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a6ab37e6.svg\";","import ReactGA from 'react-ga'\n\nReactGA.initialize('UA-126702426-1', {\n  debug: false // Set to true to see debug info in the console\n})\nReactGA.pageview(window.location.pathname + window.location.search)\n","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './Header.scss'\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <img src={logo} className=\"app-logo mr-2\" alt=\"logo\" />\n          <h1 className=\"d-inline m-0\">sandify</h1>\n          <p className=\"ml-4 d-none d-lg-block\">create patterns for robots that draw in sand with ball bearings</p>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default Header\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Form,\n  Row\n} from 'react-bootstrap'\nimport debounce from 'lodash/debounce'\n\nclass InputOption extends Component {\n  constructor(props) {\n    super(props);\n    this.delayedSet = debounce( (value, key, onChange) => {\n      let attrs = {}\n      attrs[key] = value\n      onChange(attrs)\n    }, 1500)\n  }\n\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n    const optionType = option.type || 'number'\n    const minimum = (typeof option.min === 'function') ? option.min(model) : parseFloat(option.min)\n    const maximum = (typeof option.max === 'function') ? option.max(model) : parseFloat(option.max)\n    const visible = option.isVisible === undefined ? true : option.isVisible(model)\n\n    return (\n      <Row className={\"align-items-center pb-1\" + (visible ? '' : ' d-none')}>\n        <Col sm={5}>\n        <Form.Label htmlFor=\"options-step\">\n          {option.title}\n        </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Form.Control\n            as={optionType===\"textarea\" ? \"textarea\" : \"input\"}\n            type={optionType}\n            step={option.step ? option.step : 1}\n            min={!isNaN(minimum) ? minimum : ''}\n            max={!isNaN(maximum) ? maximum : ''}\n            value={model[this.props.optionKey]}\n            plaintext={option.plainText}\n            onChange={(event) => {\n              let attrs = {}\n              let value = event.target.value\n\n              if (optionType === 'number') {\n                value = value === '' ? '' : parseFloat(value)\n              }\n\n              attrs[this.props.optionKey] = value\n              if (option.onChange !== undefined) {\n                attrs = option.onChange(attrs, model)\n              }\n              this.props.onChange(attrs)\n              if (this.props.delayKey !== undefined) {\n                this.delayedSet(value, this.props.delayKey, this.props.onChange)\n              }\n            }}\n            />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default InputOption\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Row,\n  Form,\n} from 'react-bootstrap'\nimport Switch from 'react-switch'\n\nclass CheckboxOption extends Component {\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n    const visible = option.isVisible === undefined ? true : option.isVisible(model)\n\n    return (\n      <Row className={\"align-items-center\" + (visible ? '' : ' d-none')}>\n        <Col sm={5}>\n        <Form.Label htmlFor=\"options-step\">\n          {option.title}\n        </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Switch\n            checked={model[this.props.optionKey]}\n            onChange={(checked) => {\n              let attrs = {}\n              attrs[this.props.optionKey] = checked\n\n              if (option.onChange !== undefined) {\n                attrs = option.onChange(attrs, model)\n              }\n\n              this.props.onChange(attrs)\n            }} />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default CheckboxOption\n","const machineOptions = {\n  minX: {\n    title: 'Min X (mm)',\n  },\n  maxX: {\n    title: 'Max X (mm)',\n  },\n  minY: {\n    title: 'Min Y (mm)',\n  },\n  maxY: {\n    title: 'Max Y (mm)',\n  },\n  origin: {\n    title: 'Force origin'\n  },\n  maxRadius: {\n    title: 'Max radius (mm)'\n  },\n  minimizeMoves: {\n    title: 'Try to minimize perimeter moves',\n    type: 'checkbox'\n  },\n  polarEndPoint: {\n    title: 'End point'\n  },\n  polarStartPoint: {\n    title: 'Start point'\n  },\n}\n\nexport default class Machine {\n  getOptions() {\n    return machineOptions\n  }\n}\n","import { createSlice } from \"@reduxjs/toolkit\"\n\n// accommodate old and new local storage keys\nconst localMinX = parseFloat(localStorage.getItem('minX') || localStorage.getItem('machine_min_x'))\nconst localMaxX = parseFloat(localStorage.getItem('maxX') || localStorage.getItem('machine_max_x'))\nconst localMinY = parseFloat(localStorage.getItem('minY') || localStorage.getItem('machine_min_y'))\nconst localMaxY = parseFloat(localStorage.getItem('maxY') || localStorage.getItem('machine_max_y'))\nconst localMaxRadius = parseFloat(localStorage.getItem('maxRadius') || localStorage.getItem('machine_radius'))\n\nconst machineSlice = createSlice({\n  name: 'machine',\n  initialState: {\n    rectangular: undefined !== localStorage.getItem('machine_rect_active') ? localStorage.getItem('machine_rect_active') < 2 : true,\n    rectExpanded: false,\n    polarExpanded: false,\n    minX: localMinX || 0,\n    maxX: localMaxX || 500,\n    minY: localMinY || 0,\n    maxY: localMaxY || 500,\n    maxRadius: localMaxRadius || 250,\n    minimizeMoves: JSON.parse(localStorage.getItem('minimizeMoves')) || false,\n    rectOrigin: [],\n    polarStartPoint: 'none',\n    polarEndPoint: 'none'\n  },\n  reducers: {\n    updateMachine(state, action) {\n      Object.assign(state, action.payload)\n      Object.keys(action.payload).forEach(key => {\n        localStorage.setItem(key, action.payload[key])\n      })\n    },\n    toggleMachineRectExpanded(state, action) {\n      state.rectangular = true\n      state.rectExpanded = !state.rectExpanded\n      state.polarExpanded = false\n      localStorage.setItem('machine_rect_active', 1)\n    },\n    toggleMachinePolarExpanded(state, action) {\n      state.rectangular = false\n      state.rectExpanded = false\n      state.polarExpanded = !state.polarExpanded\n      localStorage.setItem('machine_rect_active', 2)\n    },\n    setMachineRectOrigin(state, action) {\n      let newValue = []\n      let value = action.payload\n\n      for (let i = 0; i < value.length ; i++) {\n        if (!state.rectOrigin.includes(value[i])) {\n          newValue.push(value[i])\n          break\n        }\n      }\n      state.rectOrigin = newValue\n    },\n    toggleMinimizeMoves(state, action) {\n      state.minimizeMoves = !state.minimizeMoves\n      localStorage.setItem('minimizeMoves', state.minimizeMoves)\n    },\n  }\n})\n\nexport const {\n  updateMachine,\n  toggleMachineRectExpanded,\n  toggleMachinePolarExpanded,\n  setMachineRectOrigin,\n  setMachineSize,\n  toggleMinimizeMoves,\n} = machineSlice.actions\n\nexport default machineSlice.reducer\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Card,\n    Col,\n    Form,\n    Row,\n    ToggleButton,\n    ToggleButtonGroup,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport Machine from '../../models/Machine'\nimport {\n  updateMachine,\n  toggleMinimizeMoves,\n  toggleMachineRectExpanded,\n  setMachineRectOrigin\n} from './machineSlice'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    expanded: state.machine.rectExpanded,\n    active:   state.machine.rectangular,\n    minX:    state.machine.minX,\n    maxX:    state.machine.maxX,\n    minY:    state.machine.minY,\n    maxY:    state.machine.maxY,\n    origin:   state.machine.rectOrigin,\n    minimizeMoves: state.machine.minimizeMoves,\n    options: new Machine().getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    activeCallback: (event) => {\n      dispatch(toggleMachineRectExpanded())\n    },\n    onChange: (attrs) => {\n      dispatch(updateMachine(attrs))\n    },\n    onOriginChange: (value) => {\n      dispatch(setMachineRectOrigin(value))\n    },\n    toggleMinimizeMoves: () => {\n      dispatch(toggleMinimizeMoves());\n    },\n  }\n}\n\nclass RectSettings extends Component {\n  render() {\n    var activeClassName = this.props.active ? 'active' : ''\n\n    return (\n      <Card className={`${activeClassName} overflow-auto`}>\n        <Accordion.Toggle as={Card.Header} eventKey={2} onClick={this.props.activeCallback}>\n          <h3>Rectangular machine</h3>\n          Rectangular machines like Zen XY\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey={2}>\n          <Card.Body>\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"minX\"\n              optionKey=\"minX\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"maxX\"\n              optionKey=\"maxX\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"minY\"\n              optionKey=\"minY\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"maxY\"\n              optionKey=\"maxY\"\n              index={0}\n              model={this.props} />\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"origin\">\n                  Force origin\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <ToggleButtonGroup id=\"origin-bar\" type=\"checkbox\" name=\"origin\" className=\"flex-wrap\" value={this.props.origin} onChange={this.props.onOriginChange}>\n                  <ToggleButton variant=\"light\" value={1} >upper left</ToggleButton>\n                  <ToggleButton variant=\"light\" value={2} >upper right</ToggleButton>\n                  <ToggleButton variant=\"light\" value={0} >lower left</ToggleButton>\n                  <ToggleButton variant=\"light\" value={3} >lower right</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n\n            <CheckboxOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              optionKey=\"minimizeMoves\"\n              key=\"minimizeMoves\"\n              index={0}\n              model={this.props} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RectSettings)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Col,\n    Row,\n    Form,\n    Card,\n    ToggleButton,\n    ToggleButtonGroup\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport Machine from '../../models/Machine'\nimport {\n  toggleMachinePolarExpanded,\n  updateMachine,\n  toggleMinimizeMoves\n} from './machineSlice'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    expanded: state.machine.polarExpanded,\n    active: !state.machine.rectangular,\n    maxRadius: state.machine.maxRadius,\n    startPoint: state.machine.polarStartPoint,\n    endPoint: state.machine.polarEndPoint,\n    minimizeMoves: state.machine.minimizeMoves,\n    options: new Machine().getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    activeCallback: (event) => {\n      dispatch(toggleMachinePolarExpanded())\n    },\n    onChange: (attrs) => {\n      dispatch(updateMachine(attrs))\n    },\n    onStartPointChange: (value) => {\n      dispatch(updateMachine({polarStartPoint: value}))\n    },\n    onEndPointChange: (value) => {\n      dispatch(updateMachine({polarEndPoint: value}))\n    },\n    toggleMinimizeMoves: () => {\n      dispatch(toggleMinimizeMoves())\n    },\n  }\n}\n\nclass PolarSettings extends Component {\n  render() {\n    var activeClassName = this.props.active ? 'active' : ''\n\n    return (\n      <Card className={`${activeClassName} overflow-auto`}>\n        <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.activeCallback}>\n          <h3>Polar machine</h3>\n          Polar machines like Sisyphus\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey={1}>\n          <Card.Body>\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"maxRadius\"\n              optionKey=\"maxRadius\"\n              index={0}\n              model={this.props} />\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"forceStart\">\n                  Start point\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <ToggleButtonGroup id=\"startPoint\" type=\"radio\" name=\"startPoint\" value={this.props.startPoint} onChange={this.props.onStartPointChange}>\n                  <ToggleButton variant=\"light\" value=\"none\">none</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"center\">center</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"perimeter\">perimeter</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"endPoint\">\n                  End point\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <ToggleButtonGroup id=\"endPoint\" type=\"radio\" name=\"endPoint\" value={this.props.endPoint} onChange={this.props.onEndPointChange}>\n                  <ToggleButton variant=\"light\" value=\"none\">none</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"center\">center</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"perimeter\">perimeter</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n\n            <CheckboxOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              optionKey=\"minimizeMoves\"\n              key=\"minimizeMoves\"\n              index={0}\n              model={this.props} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PolarSettings)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion\n} from 'react-bootstrap'\nimport RectSettings from './RectSettings'\nimport PolarSettings from './PolarSettings'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    rectangular: state.machine.rectangular,\n  }\n}\n\nclass MachineSettings extends Component {\n  render() {\n    return (\n      <div className=\"p-3\">\n        <Accordion defaultActiveKey={this.props.rectangular ? 2 : 1}>\n          <RectSettings />\n          <PolarSettings />\n        </Accordion>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, null)(MachineSettings)\n","import React, { Component } from 'react'\n\nclass Footer extends Component {\n  render () {\n    return (\n      <footer className=\"p-4\">\n        <div>\n          <h2>About</h2>\n          <p>Sandify turns your cold, empty-hearted, emotionless sand tables into cold, empty-hearted, emotionless sand table robots with enchanting patterns.</p>\n          <p>\n            Sandify is a labor of love, but if you'd like to support me financially,\n            I do have a <a href=\"https://github.com/sponsors/jeffeb3\">Donation system set up <b>with github matching donations</b></a>. Or just <a href=\"https://www.paypal.me/jeffeb3\">PayPal</a>.\n          </p>\n        </div>\n\n        <div>\n          <h2>Instructions</h2>\n          <p>\n            Part of the fun of Sandify is playing it like you would a xylophone.\n            <br/>\n            Try it out first. The goal is to make it easy to make your first pattern by just clicking and scrolling, finding something you like.\n            <br/>\n            Check out <a href=\"https://github.com/jeffeb3/sandify/wiki\">the wiki</a> for some features that you might miss the first time through.\n          </p>\n        </div>\n\n        <div>\n          <h2>Sand Machine</h2>\n          <p>Anything that uses gcode can be used with Sandify. But the machine this was designed for is the ZenXY from V1Engineering.com.</p>\n          <p>\n            <a href=\"https://docs.v1engineering.com/zenxy/\">ZenXY on V1Engineering.com</a>\n          </p>\n          <p>\n            ZenXY was inspired by the awesome Sisyphus kinetic art table by <a href=\"https://sisyphus-industries.com/\">Sisyphus Industries</a>, which is also now supported.\n          </p>\n          <p>\n            Sandify was created by users in the\n            <a href=\"https://forum.v1engineering.com/t/does-this-count-as-a-build/6037\"> V1Engineering.com forum</a>.\n          </p>\n        </div>\n\n        <div>\n          <h2>Github</h2>\n          <p>Sandify is hosted on Github <a href=\"https://github.com/jeffeb3/sandify\">here</a>. Please post any problems, feature requests or comments in our <a href=\"https://github.com/jeffeb3/sandify/issues\">issue tracker</a>.</p>\n          <p>Sandify is a community project. We want and need collaborators. <a href=\"https://github.com/jeffeb3/sandify/blob/master/CONTRIBUTING.md\">Help Sandify</a>.</p>\n        </div>\n\n        <div>\n          <h2>License</h2>\n          <p>\n            Sandify is licensed under the MIT license.\n          </p>\n          <p>\n            Patterns that you create and gcode generated with Sandify are not covered\n            under the Sandify license. They are your work and your copyright. Read our <a href=\"https://raw.githubusercontent.com/jeffeb3/sandify/master/LICENSE\">license</a>.\n          </p>\n        </div>\n      </footer>\n    )\n  }\n}\n\nexport default Footer\n","import React, { Component } from 'react'\n\nclass CommentsBox extends Component {\n\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const commentsRender = this.props.comments.map((comment, index) => {\n      return <span key={index}>{comment}<br/></span>\n    })\n\n    return <div id=\"comments\" className=\"mt-4 p-3\">\n             {option.title}:\n             <div className=\"ml-3\">\n               { commentsRender }\n             </div>\n           </div>\n  }\n}\n\nexport default CommentsBox\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Form,\n  Row\n} from 'react-bootstrap'\nimport Select from 'react-select'\n\nclass DropdownOption extends Component {\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n    const currentChoice = model[this.props.optionKey]\n\n    return (\n      <Row className=\"align-items-center pb-2\" key={this.props.index}>\n        <Col sm={5}>\n          <Form.Label htmlFor=\"options-dropdown\">\n            {option.title}\n          </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Select\n            value={{value: currentChoice, label: currentChoice}}\n            onChange={(choice) => {\n              const value = choice.value\n              let attrs = {}\n              attrs[this.props.optionKey] = value\n\n              if (option.onChange !== undefined) {\n                attrs = option.onChange(attrs, model)\n              }\n\n              this.props.onChange(attrs)\n            }}\n            options={option.choices.map((choice) => {\n              return { value: choice, label: choice}\n            })}\n            />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default DropdownOption\n","export const shapeOptions = {\n  name: {\n    title: 'Name',\n    type: 'text'\n  }\n}\n\nexport default class Shape {\n  constructor(name) {\n    this.name = name\n    this.cache = []\n  }\n\n  getInitialState() {\n    return {\n      repeatEnabled: true,\n      canTransform: true,\n      selectGroup: 'Shapes',\n      shouldCache: true,\n      autosize: true,\n      canChangeSize: true,\n      canChangeHeight: true,\n      canRotate: true,\n      usesMachine: false,\n      startingWidth: 10,\n      startingHeight: 10,\n      offsetX: 0.0,\n      offsetY: 0.0,\n      rotation: 0,\n      numLoops: 10,\n      transformMethod: 'smear',\n      growEnabled: true,\n      growValue: 100,\n      growMethod: 'constant',\n      growMathInput: 'i+cos(i/2)',\n      growMath: 'i+cos(i/2)',\n      spinEnabled: false,\n      spinValue: 2,\n      spinMethod: 'constant',\n      spinMathInput: '10*sin(i/4)',\n      spinMath: '10*sin(i/4)',\n      spinSwitchbacks: 0,\n      trackEnabled: false,\n      trackGrowEnabled: false,\n      trackValue: 10,\n      trackLength: 0.2,\n      trackNumLoops: 1,\n      trackGrow: 50.0,\n      connectionMethod: 'line',\n      drawPortionPct: 100,\n      backtrackPct: 0,\n      rotateCompleteLoop: false,\n      rotateStartingPct: 0,\n      reverse: false,\n      dragging: false,\n      visible: true,\n      effect: false\n    }\n  }\n\n  getOptions() {\n    return shapeOptions\n  }\n\n  getVertices(state) {\n    return []\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    circleLobes: {\n      title: 'Number of lobes',\n      min: 1\n    },\n    circleDirection: {\n      title: 'Direction',\n      type: 'dropdown',\n      choices: ['clockwise', 'counterclockwise']\n    }\n  }\n}\n\nexport default class Circle extends Shape {\n  constructor() {\n    super('Circle')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'circle',\n        circleLobes: 1,\n        circleDirection: 'clockwise'\n      },\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n\n    if (state.shape.circleDirection === 'counterclockwise') {\n      for (let i=128; i>=0; i--) {\n        let angle = Math.PI * 2.0 / 128.0 * i\n        points.push(new Victor(Math.cos(angle), Math.sin(state.shape.circleLobes * angle)/state.shape.circleLobes))\n      }\n    } else {\n      for (let i=0; i<=128; i++) {\n        let angle = Math.PI * 2.0 / 128.0 * i\n        points.push(new Victor(Math.cos(angle), Math.sin(state.shape.circleLobes * angle)/state.shape.circleLobes))\n      }\n    }\n\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export const difference = (a, b) => {\n  return new Set(\n    [\n      ...[...a].filter(x => !b.has(x)),\n      ...[...b].filter(x => !a.has(x))\n    ]\n  )\n}\n\n// round a given number n to p number of digits\nexport const roundP = (n, p) => {\n  return Math.round((n + Number.EPSILON) * Math.pow(10, p)) / Math.pow(10, p)\n}\n\n// https://stackoverflow.com/a/4652513\nexport const reduce = (numerator, denominator) => {\n  let gcd = (a,b) => {\n    return b ? gcd(b, a%b) : a;\n  }\n\n  gcd = gcd(numerator, denominator)\n  return [numerator/gcd, denominator/gcd]\n}\n\n// rotates an array count times\n// taken from https://stackoverflow.com/questions/1985260/rotate-the-elements-in-an-array-in-javascript#33451102\nexport const arrayRotate = (arr, count) => {\n  count -= arr.length * Math.floor(count / arr.length)\n  arr.push.apply(arr, arr.splice(0, count))\n  return arr\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\nimport { reduce } from '../common/util'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    epicycloidA: {\n      title: \"Large circle radius\",\n      min: 1\n    },\n    epicycloidB: {\n      title: \"Small circle radius\",\n      min: 1\n    },\n  }\n}\n\nexport default class Epicycloid extends Shape {\n  constructor() {\n    super('Clover')\n    this.link = 'http://mathworld.wolfram.com/Epicycloid.html'\n    this.linkText = 'Wolfram Mathworld'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'epicycloid',\n        epicycloidA: 4,\n        epicycloidB: 1,\n        rotateCompleteLoop: true\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = parseInt(state.shape.epicycloidA)\n    let b = parseInt(state.shape.epicycloidB)\n    let reduced = reduce(a, b)\n    a = reduced[0]\n    b = reduced[1]\n    let rotations = Number.isInteger(a/b) ? 1 : b\n    let scale = 1/(a + 2*b)\n\n    for (let i=0; i<128*rotations; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      points.push(\n        new Victor(\n          (a + b) * Math.cos(angle) - b * Math.cos(((a + b) / b) * angle),\n          (a + b) * Math.sin(angle) - b * Math.sin(((a + b) / b) * angle)\n        ).multiply({x: scale, y: scale})\n      )\n    }\n\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    fileName: {\n      title: 'From file:',\n      type: 'inputText',\n      plainText: 'true'\n    },\n    aspectRatio: {\n      title: 'Aspect Ratio',\n      type: 'checkbox'\n    },\n    comments: {\n      title: 'Comments',\n      type: 'comments'\n    },\n  }\n}\n\nexport default class FileImport extends Shape {\n  constructor() {\n    super('FileImport')\n  }\n\n  getInitialState(importProps) {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'file_import',\n        aspectRatio: true,\n        originalAspectRatio: 1.0,\n        vertices: [],\n        comments: [],\n        selectGroup: 'import',\n        canTransform: false,\n        usesMachine: true,\n        repeatEnabled: false\n      },\n      ...(importProps === undefined ? {} : {\n        fileName: importProps.fileName,\n        vertices: importProps.vertices,\n        originalAspectRatio: importProps.originalAspectRatio,\n        comments: importProps.comments\n      })\n    }\n  }\n\n  getVertices(state) {\n    if (state.shape.vertices.length < 1)\n    {\n      // During initialization, this function gets called, but the machine isn't created right yet.\n      return [new Victor(0.0, 0.0), new Victor(0.0, 0.1)]\n    }\n\n    let x_scale = (state.machine.maxX - state.machine.minX)/2.0 * 0.1\n    let y_scale = (state.machine.maxY - state.machine.minY)/2.0 * 0.1\n\n    if (!state.machine.rectangular) {\n      x_scale = y_scale = state.machine.maxRadius * 0.1\n    }\n\n    if (state.shape.aspectRatio) {\n      const machine_aspect_ratio = y_scale / x_scale\n      if (state.shape.originalAspectRatio > machine_aspect_ratio) {\n        x_scale = x_scale / state.shape.originalAspectRatio * machine_aspect_ratio\n      } else {\n        y_scale = y_scale * state.shape.originalAspectRatio / machine_aspect_ratio\n      }\n    }\n\n    return state.shape.vertices.map( (vertex) => {\n      return Victor(vertex.x * x_scale, vertex.y * y_scale)\n    })\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export default class Orbit {\n  constructor(x, y, r, level, settings, parent) {\n    this.x = x\n    this.y = y\n    this.r = r\n    this.child = null\n    this.angle = Math.PI/2\n    this.level = level\n    this.settings = settings\n\n    let sign = this.settings.alternateRotation ? -1 : 1\n    this.speed = Math.pow(settings.velocity * sign, this.level - 1) * Math.PI / 180 / settings.resolution\n    this.parent = parent\n  }\n\n  addChild() {\n    let newr = this.r / this.settings.relativeSize\n    let newx = this.x + this.r + newr\n    let newy = this.y\n    this.child = new Orbit(newx, newy, newr, this.level + 1, this.settings, this)\n    return this.child\n  }\n\n  update() {\n    if (this.parent) {\n      this.angle += this.speed\n\n      let rsum = this.r + this.parent.r\n      this.x = this.parent.x + rsum * Math.cos(this.angle)\n      this.y = this.parent.y + rsum * Math.sin(this.angle)\n    }\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from '../Shape'\nimport Orbit from './Orbit'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    fractalSpirographVelocity: {\n      title: 'Velocity',\n      min: 2\n    },\n    fractalSpirographResolution: {\n      title: 'Resolution',\n      min: 1\n    },\n    fractalSpirographNumCircles: {\n      title: 'Number of circles',\n      min: 1,\n      max: 6\n    },\n    fractalSpirographRelativeSize: {\n      title: 'Relative size (parent to child circle)',\n      min: 2,\n      max: 6\n    },\n    fractalSpirographAlternateRotation: {\n      title: 'Alternate rotation direction',\n      type: 'checkbox'\n    },\n  }\n}\n\n// Inspired/adapted from https://thecodingtrain.com/CodingChallenges/061-fractal-spirograph\nexport default class FractalSpirograph extends Shape {\n  constructor() {\n    super('Fractal Spirograph')\n    this.link = 'https://benice-equation.blogspot.com/2012/01/fractal-spirograph.html'\n    this.linkText = 'Fun math art (pictures) - benice equation'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'fractal_spirograph',\n        fractalSpirographVelocity: 8,\n        fractalSpirographResolution: 2,\n        fractalSpirographNumCircles: 5,\n        fractalSpirographRelativeSize: 3,\n        fractalSpirographAlternateRotation: true,\n        repeatEnabled: false,\n        rotateCompleteLoop: true        \n      }\n    }\n  }\n\n  getVertices(state) {\n    let resolution = parseInt(state.shape.fractalSpirographResolution)\n    let settings = {\n      resolution: resolution,\n      velocity: parseInt(state.shape.fractalSpirographVelocity),\n      numCircles: parseInt(state.shape.fractalSpirographNumCircles),\n      relativeSize: parseInt(state.shape.fractalSpirographRelativeSize),\n      alternateRotation: state.shape.fractalSpirographAlternateRotation\n    }\n\n    let sun = new Orbit(0, 0, 1, 0, settings)\n    let next = sun\n    let end\n    let points = []\n\n    for (var i=0; i<settings.numCircles; i++) {\n      next = next.addChild()\n    }\n    end = next\n\n    for (let i=0; i<resolution; i++) {\n      for (let j=0; j<361; j++) {\n        let next = sun\n\n        while (next != null) {\n          next.update()\n          next = next.child\n        }\n\n        points.push(new Victor(end.x, end.y))\n      }\n    }\n\n    const scale = 5 // to normalize starting size\n    points.forEach(point => point.multiply({x: scale, y: scale }))\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\nimport { reduce } from '../common/util'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    hypocycloidA: {\n      title: 'Large circle radius',\n      min: 1\n    },\n    hypocycloidB: {\n      title: 'Small circle radius',\n      min: 1\n    },\n  }\n}\n\nexport default class Star extends Shape {\n  constructor() {\n    super('Web')\n    this.link = 'http://mathworld.wolfram.com/Hypocycloid.html'\n    this.linkText = 'Wolfram Mathworld'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'hypocycloid',\n        hypocycloidA: 6,\n        hypocycloidB: 1,\n        rotateCompleteLoop: true        \n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = parseInt(state.shape.hypocycloidA)\n    let b = parseInt(state.shape.hypocycloidB)\n    let reduced = reduce(a, b)\n    a = reduced[0]\n    b = reduced[1]\n    let rotations = Number.isInteger(a/b) ? 1 : b\n    let scale = b < a ? 1/a : 1/(2*(b - a/2))\n\n    for (let i=0; i<128*rotations; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      points.push(\n        new Victor(\n          (a - b) * Math.cos(angle) + b * Math.cos(((a - b) / b) * angle),\n          (a - b) * Math.sin(angle) - b * Math.sin(((a - b) / b) * angle)\n        ).multiply({x: scale, y: scale})\n      )\n    }\n\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export let raysol_cursive = {\n  ' ' : [ [0.000,-0.786], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786],  ],\n  '0' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.549,-0.786], [0.570,-0.779], [0.641,-0.741], [0.729,-0.673], [0.754,-0.642], [0.799,-0.548], [0.833,-0.422], [0.833,-0.317], [0.833,-0.211], [0.833,-0.106], [0.833,-0.001], [0.833,0.105], [0.833,0.210], [0.833,0.315], [0.833,0.421], [0.833,0.531], [0.810,0.599], [0.779,0.645], [0.749,0.690], [0.711,0.738], [0.629,0.786], [0.570,0.786], [0.513,0.786], [0.442,0.738], [0.374,0.690], [0.340,0.645], [0.315,0.599], [0.289,0.531], [0.289,0.422], [0.289,0.313], [0.289,0.204], [0.289,0.095], [0.289,-0.014], [0.289,-0.123], [0.289,-0.232], [0.289,-0.341], [0.289,-0.450], [0.315,-0.559], [0.351,-0.655], [0.388,-0.701], [0.449,-0.742], [0.489,-0.762], [0.549,-0.786], [0.655,-0.786], [0.731,-0.786], [0.816,-0.786], [0.901,-0.786], [0.986,-0.786], [1.071,-0.786], [1.156,-0.786],  ],\n  '1' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.629], [0.340,-0.472], [0.340,-0.315], [0.340,-0.157], [0.340,-0.000], [0.340,0.157], [0.340,0.314], [0.340,0.472], [0.340,0.629], [0.340,0.786], [0.340,0.629], [0.340,0.472], [0.340,0.314], [0.340,0.157], [0.340,-0.000], [0.340,-0.157], [0.340,-0.315], [0.340,-0.472], [0.340,-0.629], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786],  ],\n  '2' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.702], [0.442,-0.537], [0.544,-0.330], [0.624,-0.174], [0.660,0.032], [0.687,0.212], [0.698,0.295], [0.708,0.427], [0.714,0.514], [0.708,0.595], [0.690,0.659], [0.677,0.702], [0.663,0.726], [0.629,0.752], [0.587,0.769], [0.544,0.760], [0.493,0.744], [0.442,0.727], [0.374,0.701], [0.306,0.625], [0.247,0.574], [0.306,0.625], [0.374,0.701], [0.442,0.727], [0.493,0.744], [0.544,0.760], [0.587,0.769], [0.629,0.752], [0.663,0.726], [0.677,0.702], [0.690,0.659], [0.708,0.595], [0.714,0.514], [0.708,0.427], [0.698,0.295], [0.687,0.212], [0.660,0.032], [0.624,-0.174], [0.544,-0.330], [0.442,-0.537], [0.340,-0.702], [0.425,-0.701], [0.544,-0.633], [0.612,-0.599], [0.680,-0.574], [0.765,-0.591], [0.850,-0.616], [0.935,-0.667], [1.020,-0.744], [1.105,-0.786],  ],\n  '3' : [ [0.085,-0.786], [0.170,-0.786], [0.272,-0.786], [0.330,-0.786], [0.405,-0.786], [0.442,-0.786], [0.493,-0.772], [0.559,-0.752], [0.612,-0.718], [0.648,-0.683], [0.677,-0.653], [0.707,-0.618], [0.731,-0.548], [0.764,-0.473], [0.782,-0.396], [0.784,-0.312], [0.775,-0.241], [0.765,-0.181], [0.751,-0.123], [0.700,-0.029], [0.620,0.021], [0.544,0.038], [0.425,0.056], [0.557,0.087], [0.586,0.111], [0.640,0.165], [0.697,0.234], [0.734,0.337], [0.749,0.431], [0.741,0.516], [0.726,0.600], [0.712,0.659], [0.672,0.740], [0.641,0.777], [0.586,0.786], [0.537,0.777], [0.485,0.769], [0.412,0.744], [0.331,0.710], [0.412,0.744], [0.485,0.769], [0.537,0.777], [0.586,0.786], [0.641,0.777], [0.672,0.740], [0.712,0.659], [0.726,0.600], [0.741,0.516], [0.749,0.431], [0.734,0.337], [0.697,0.234], [0.640,0.165], [0.586,0.111], [0.557,0.087], [0.484,0.056], [0.544,0.038], [0.620,0.021], [0.700,-0.029], [0.751,-0.123], [0.765,-0.181], [0.775,-0.241], [0.784,-0.312], [0.782,-0.396], [0.764,-0.473], [0.731,-0.548], [0.707,-0.618], [0.677,-0.653], [0.648,-0.683], [0.612,-0.718], [0.559,-0.752], [0.493,-0.772], [0.425,-0.761], [0.357,-0.744], [0.289,-0.718], [0.221,-0.616], [0.289,-0.718], [0.357,-0.744], [0.425,-0.761], [0.493,-0.772], [0.559,-0.752], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  '4' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.765,-0.629], [0.765,-0.472], [0.765,-0.315], [0.765,-0.157], [0.765,-0.000], [0.765,0.157], [0.765,0.314], [0.765,0.472], [0.765,0.629], [0.765,0.786], [0.680,0.655], [0.595,0.524], [0.510,0.393], [0.425,0.262], [0.340,0.131], [0.255,-0.000], [0.356,-0.000], [0.457,-0.000], [0.558,-0.000], [0.659,-0.000], [0.760,-0.000], [0.861,-0.000], [0.962,-0.000], [1.062,-0.000], [1.139,-0.000], [1.062,-0.000], [0.962,-0.000], [0.861,-0.000], [0.760,-0.000], [0.765,-0.157], [0.765,-0.315], [0.765,-0.472], [0.765,-0.629], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786],  ],\n  '5' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.438,-0.786], [0.520,-0.786], [0.607,-0.786], [0.659,-0.783], [0.730,-0.749], [0.796,-0.698], [0.853,-0.612], [0.884,-0.497], [0.892,-0.319], [0.887,-0.167], [0.850,-0.064], [0.795,0.038], [0.744,0.100], [0.680,0.122], [0.608,0.144], [0.540,0.123], [0.441,0.081], [0.378,0.043], [0.302,-0.014], [0.302,0.145], [0.302,0.303], [0.302,0.461], [0.302,0.619], [0.302,0.727], [0.359,0.727], [0.415,0.727], [0.471,0.727], [0.528,0.727], [0.584,0.727], [0.640,0.727], [0.731,0.727], [0.850,0.727], [0.731,0.727], [0.640,0.727], [0.584,0.727], [0.528,0.727], [0.471,0.727], [0.415,0.727], [0.359,0.727], [0.302,0.727], [0.302,0.619], [0.302,0.461], [0.302,0.303], [0.302,0.145], [0.302,-0.014], [0.378,0.043], [0.441,0.081], [0.540,0.123], [0.608,0.144], [0.680,0.122], [0.744,0.100], [0.795,0.038], [0.850,-0.064], [0.887,-0.167], [0.892,-0.319], [0.884,-0.497], [0.853,-0.612], [0.796,-0.698], [0.730,-0.749], [0.659,-0.783], [0.607,-0.786], [0.520,-0.786], [0.425,-0.752], [0.357,-0.701], [0.289,-0.616], [0.238,-0.531], [0.187,-0.489], [0.153,-0.472], [0.187,-0.489], [0.238,-0.531], [0.289,-0.616], [0.357,-0.701], [0.425,-0.752], [0.520,-0.786], [0.607,-0.786], [0.659,-0.786], [0.816,-0.786], [0.901,-0.786], [0.986,-0.786], [1.071,-0.786], [1.156,-0.786], [1.241,-0.786], [1.326,-0.786],  ],\n  '6' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.449,-0.742], [0.489,-0.762], [0.549,-0.786], [0.655,-0.779], [0.726,-0.741], [0.814,-0.673], [0.839,-0.642], [0.866,-0.607], [0.924,-0.422], [0.926,-0.323], [0.911,-0.213], [0.895,-0.168], [0.864,-0.099], [0.834,-0.053], [0.796,-0.005], [0.720,0.034], [0.619,0.042], [0.557,0.034], [0.513,0.025], [0.453,-0.002], [0.332,-0.071], [0.373,0.033], [0.414,0.137], [0.455,0.241], [0.496,0.345], [0.538,0.449], [0.579,0.553], [0.620,0.657], [0.661,0.761], [0.620,0.657], [0.579,0.553], [0.538,0.449], [0.496,0.345], [0.455,0.241], [0.414,0.137], [0.373,0.033], [0.332,-0.071], [0.276,-0.200], [0.263,-0.274], [0.255,-0.347], [0.274,-0.489], [0.306,-0.559], [0.351,-0.655], [0.391,-0.701], [0.489,-0.762], [0.549,-0.786], [0.655,-0.779], [0.731,-0.786], [0.816,-0.786], [0.901,-0.786], [0.986,-0.786], [1.071,-0.786], [1.156,-0.786],  ],\n  '7' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.391,-0.629], [0.442,-0.472], [0.493,-0.315], [0.544,-0.157], [0.595,-0.000], [0.646,0.157], [0.697,0.314], [0.748,0.472], [0.799,0.629], [0.850,0.786], [0.776,0.786], [0.701,0.786], [0.627,0.786], [0.552,0.786], [0.478,0.786], [0.404,0.786], [0.329,0.786], [0.255,0.786], [0.329,0.786], [0.404,0.786], [0.478,0.786], [0.552,0.786], [0.627,0.786], [0.701,0.786], [0.776,0.786], [0.850,0.786], [0.799,0.629], [0.748,0.472], [0.697,0.314], [0.646,0.157], [0.595,-0.000], [0.544,-0.157], [0.493,-0.315], [0.442,-0.472], [0.391,-0.629], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '8' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.556,-0.784], [0.618,-0.786], [0.695,-0.763], [0.756,-0.733], [0.795,-0.664], [0.853,-0.560], [0.878,-0.429], [0.870,-0.334], [0.846,-0.267], [0.797,-0.132], [0.740,-0.033], [0.674,0.065], [0.643,0.098], [0.611,0.132], [0.561,0.166], [0.527,0.200], [0.493,0.247], [0.459,0.293], [0.425,0.361], [0.391,0.446], [0.408,0.545], [0.459,0.644], [0.510,0.701], [0.570,0.734], [0.643,0.760], [0.716,0.734], [0.777,0.701], [0.828,0.644], [0.879,0.545], [0.896,0.446], [0.862,0.361], [0.828,0.293], [0.794,0.247], [0.760,0.200], [0.726,0.166], [0.676,0.132], [0.579,0.098], [0.548,0.065], [0.481,-0.033], [0.425,-0.132], [0.376,-0.267], [0.352,-0.334], [0.344,-0.429], [0.369,-0.560], [0.427,-0.664], [0.466,-0.733], [0.527,-0.763], [0.603,-0.786], [0.666,-0.784], [0.695,-0.763], [0.756,-0.733], [0.795,-0.664], [0.853,-0.560], [0.878,-0.429], [0.870,-0.334], [0.846,-0.267], [0.797,-0.132], [0.740,-0.033], [0.797,-0.132], [0.846,-0.267], [0.870,-0.334], [0.878,-0.429], [0.853,-0.560], [0.795,-0.664], [0.756,-0.733], [0.695,-0.763], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '9' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.714,-0.786], [0.717,-0.612], [0.717,-0.455], [0.717,-0.297], [0.717,-0.139], [0.717,0.019], [0.717,0.177], [0.717,0.335], [0.717,0.493], [0.717,0.650], [0.717,0.786], [0.648,0.786], [0.521,0.786], [0.415,0.744], [0.340,0.659], [0.306,0.523], [0.292,0.364], [0.299,0.230], [0.317,0.147], [0.339,0.086], [0.387,-0.030], [0.442,-0.063], [0.509,-0.055], [0.558,-0.030], [0.618,-0.004], [0.663,0.013], [0.717,0.019], [0.717,-0.139], [0.717,-0.297], [0.717,-0.455], [0.717,-0.612], [0.714,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  'A' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.459,-0.781], [0.534,-0.759], [0.623,-0.711], [0.715,-0.601], [0.793,-0.507], [0.715,-0.601], [0.623,-0.711], [0.534,-0.759], [0.459,-0.781], [0.383,-0.743], [0.308,-0.661], [0.250,-0.586], [0.206,-0.475], [0.173,-0.322], [0.170,-0.191], [0.187,-0.003], [0.227,0.147], [0.284,0.286], [0.339,0.375], [0.435,0.509], [0.521,0.596], [0.637,0.685], [0.790,0.761], [0.865,0.786], [0.863,0.706], [0.861,0.583], [0.859,0.460], [0.857,0.337], [0.855,0.213], [0.853,0.090], [0.851,-0.033], [0.849,-0.156], [0.848,-0.280], [0.846,-0.403], [0.847,-0.466], [0.868,-0.563], [0.954,-0.635], [1.033,-0.701], [1.109,-0.744], [1.213,-0.786],  ],\n  'B' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.255,-0.629], [0.255,-0.471], [0.255,-0.313], [0.255,-0.155], [0.255,0.002], [0.255,0.160], [0.255,0.318], [0.255,0.476], [0.255,0.633], [0.281,0.659], [0.327,0.701], [0.380,0.744], [0.445,0.773], [0.501,0.777], [0.552,0.777], [0.589,0.761], [0.646,0.726], [0.699,0.680], [0.733,0.630], [0.764,0.556], [0.761,0.455], [0.748,0.389], [0.723,0.285], [0.689,0.191], [0.621,0.106], [0.517,0.064], [0.476,0.064], [0.517,0.064], [0.596,0.025], [0.650,-0.037], [0.680,-0.062], [0.748,-0.148], [0.791,-0.248], [0.809,-0.312], [0.814,-0.452], [0.811,-0.490], [0.796,-0.566], [0.780,-0.620], [0.697,-0.718], [0.622,-0.762], [0.572,-0.786], [0.476,-0.786], [0.374,-0.786], [0.255,-0.786], [0.374,-0.786], [0.476,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  'C' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.752], [0.459,-0.693], [0.397,-0.605], [0.357,-0.548], [0.332,-0.452], [0.306,-0.327], [0.298,-0.208], [0.298,-0.106], [0.298,0.016], [0.318,0.183], [0.338,0.310], [0.385,0.442], [0.462,0.585], [0.548,0.675], [0.652,0.746], [0.776,0.786], [0.872,0.767], [0.963,0.643], [1.019,0.491], [1.040,0.351], [1.019,0.491], [0.963,0.643], [0.872,0.767], [0.776,0.786], [0.652,0.746], [0.548,0.675], [0.462,0.585], [0.385,0.442], [0.338,0.310], [0.318,0.183], [0.298,0.016], [0.298,-0.106], [0.298,-0.208], [0.306,-0.327], [0.332,-0.452], [0.397,-0.605], [0.459,-0.693], [0.544,-0.748], [0.682,-0.786], [0.777,-0.786], [0.850,-0.786], [0.884,-0.786], [0.953,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786],  ],\n  'D' : [ [0.123,-0.786], [0.213,-0.786], [0.321,-0.786], [0.401,-0.786], [0.465,-0.786], [0.544,-0.786], [0.639,-0.786], [0.772,-0.764], [0.918,-0.711], [0.955,-0.676], [1.020,-0.592], [1.072,-0.460], [1.090,-0.357], [1.104,-0.199], [1.103,-0.111], [1.082,0.035], [1.062,0.183], [1.037,0.271], [1.009,0.356], [0.982,0.435], [0.899,0.546], [0.816,0.633], [0.748,0.684], [0.646,0.741], [0.566,0.766], [0.496,0.761], [0.425,0.733], [0.425,0.604], [0.425,0.526], [0.425,0.343], [0.425,0.149], [0.425,-0.030], [0.425,-0.156], [0.425,-0.442], [0.425,-0.544], [0.425,-0.701], [0.465,-0.786], [0.544,-0.786], [0.639,-0.786], [0.748,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786],  ],\n  'E' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.701], [0.381,-0.614], [0.317,-0.487], [0.277,-0.361], [0.274,-0.221], [0.309,-0.157], [0.356,-0.115], [0.405,-0.072], [0.493,-0.030], [0.563,0.006], [0.629,0.027], [0.714,0.027], [0.629,0.027], [0.570,0.064], [0.509,0.120], [0.474,0.143], [0.386,0.229], [0.331,0.313], [0.291,0.438], [0.293,0.552], [0.320,0.660], [0.383,0.743], [0.478,0.786], [0.564,0.786], [0.629,0.786], [0.675,0.786], [0.723,0.786], [0.799,0.786], [0.723,0.786], [0.675,0.786], [0.629,0.786], [0.564,0.786], [0.478,0.786], [0.383,0.743], [0.320,0.660], [0.293,0.552], [0.291,0.438], [0.331,0.313], [0.386,0.229], [0.474,0.143], [0.509,0.120], [0.570,0.064], [0.629,0.027], [0.714,0.027], [0.629,0.027], [0.563,0.006], [0.493,-0.030], [0.405,-0.072], [0.356,-0.115], [0.309,-0.157], [0.274,-0.221], [0.277,-0.361], [0.317,-0.487], [0.381,-0.614], [0.443,-0.698], [0.500,-0.735], [0.583,-0.769], [0.695,-0.781], [0.786,-0.780], [0.864,-0.780], [0.935,-0.779],  ],\n  'F' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.578,-0.786], [0.663,-0.786], [0.724,-0.767], [0.792,-0.699], [0.852,-0.558], [0.853,-0.440], [0.854,-0.321], [0.855,-0.203], [0.856,-0.085], [0.857,0.034], [0.858,0.152], [0.859,0.270], [0.860,0.389], [0.861,0.507], [0.863,0.625], [0.969,0.608], [1.076,0.588], [1.173,0.616], [1.282,0.654], [1.394,0.701], [1.282,0.654], [1.173,0.616], [1.076,0.588], [0.969,0.608], [0.863,0.625], [0.763,0.663], [0.633,0.713], [0.466,0.713], [0.317,0.628], [0.247,0.404], [0.317,0.628], [0.466,0.713], [0.633,0.713], [0.763,0.663], [0.863,0.625], [0.861,0.507], [0.860,0.389], [0.859,0.270], [0.858,0.152], [0.857,0.034], [0.742,0.037], [0.631,0.054], [0.442,0.071], [0.631,0.054], [0.742,0.037], [0.857,0.034], [0.960,0.035], [1.075,0.043], [1.224,0.052], [1.075,0.043], [0.960,0.035], [0.857,0.034], [0.856,-0.085], [0.855,-0.203], [0.854,-0.321], [0.854,-0.395], [0.850,-0.506], [0.852,-0.558], [0.833,-0.650], [0.773,-0.713], [0.663,-0.769], [0.591,-0.766], [0.564,-0.774], [0.537,-0.774], [0.501,-0.766], [0.452,-0.701], [0.420,-0.650], [0.413,-0.583], [0.422,-0.519], [0.474,-0.465], [0.511,-0.442], [0.573,-0.438], [0.653,-0.442], [0.740,-0.496], [0.866,-0.616], [0.927,-0.687], [1.035,-0.756], [1.079,-0.803], [1.211,-0.837], [1.310,-0.829], [1.406,-0.820], [1.491,-0.786],  ],\n  'G' : [ [0.085,-0.786], [0.171,-0.761], [0.245,-0.712], [0.316,-0.660], [0.389,-0.609], [0.489,-0.507], [0.573,-0.398], [0.610,-0.341], [0.658,-0.254], [0.708,-0.125], [0.757,0.004], [0.782,0.082], [0.819,0.177], [0.837,0.274], [0.857,0.392], [0.880,0.508], [0.884,0.597], [0.881,0.711], [0.842,0.799], [0.762,0.772], [0.720,0.745], [0.697,0.705], [0.640,0.590], [0.631,0.560], [0.612,0.445], [0.607,0.395], [0.628,0.243], [0.653,0.178], [0.695,0.088], [0.834,-0.031], [0.931,-0.028], [1.047,0.038], [1.117,0.106], [1.179,0.236], [1.262,0.405], [1.246,0.225], [1.209,-0.096], [1.181,-0.235], [1.140,-0.389], [1.103,-0.495], [1.032,-0.625], [0.956,-0.707], [0.865,-0.758], [0.770,-0.787], [0.681,-0.782], [0.598,-0.762], [0.500,-0.710], [0.455,-0.632], [0.427,-0.556], [0.380,-0.481], [0.324,-0.330], [0.465,-0.389], [0.637,-0.468], [0.784,-0.548], [0.909,-0.586], [1.032,-0.625], [1.141,-0.663], [1.245,-0.677], [1.351,-0.699], [1.489,-0.744], [1.611,-0.786],  ],\n  'H' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.496,-0.786], [0.496,-0.609], [0.496,-0.479], [0.496,-0.348], [0.496,-0.217], [0.496,-0.086], [0.496,0.044], [0.496,0.175], [0.496,0.306], [0.496,0.404], [0.496,0.508], [0.476,0.604], [0.453,0.687], [0.391,0.744], [0.272,0.786], [0.391,0.744], [0.453,0.687], [0.476,0.604], [0.496,0.508], [0.496,0.404], [0.496,0.306], [0.496,0.175], [0.496,0.044], [0.635,0.071], [0.774,0.097], [0.913,0.123], [1.051,0.149], [1.105,0.175], [1.105,0.306], [1.105,0.404], [1.105,0.508], [1.105,0.616], [1.122,0.701], [1.165,0.760], [1.275,0.786], [1.165,0.760], [1.122,0.701], [1.105,0.616], [1.105,0.508], [1.105,0.404], [1.105,0.306], [1.105,0.175], [1.105,0.044], [1.105,-0.086], [1.105,-0.217], [1.105,-0.348], [1.105,-0.479], [1.105,-0.609], [1.139,-0.701], [1.190,-0.761], [1.275,-0.778], [1.360,-0.786], [1.445,-0.786], [1.530,-0.786],  ],\n  'I' : [ [0.085,-0.786], [0.170,-0.786], [0.289,-0.786], [0.425,-0.786], [0.515,-0.773], [0.596,-0.794], [0.685,-0.801], [0.782,-0.773], [0.838,-0.602], [0.914,-0.473], [0.876,-0.349], [0.832,-0.152], [0.789,0.006], [0.773,0.196], [0.765,0.298], [0.773,0.517], [0.799,0.650], [0.833,0.740], [0.884,0.802], [1.020,0.804], [1.071,0.800], [1.120,0.702], [1.151,0.628], [1.189,0.387], [1.198,0.208], [1.180,-0.065], [1.165,-0.166], [1.100,-0.403], [1.046,-0.509], [1.007,-0.577], [0.899,-0.681], [0.782,-0.773], [0.685,-0.801], [0.596,-0.794], [0.515,-0.773], [0.420,-0.719], [0.381,-0.640], [0.357,-0.564], [0.317,-0.488], [0.271,-0.336], [0.408,-0.397], [0.574,-0.479], [0.716,-0.562], [0.838,-0.602], [0.958,-0.643], [1.064,-0.683], [1.168,-0.699], [1.271,-0.722], [1.408,-0.761], [1.529,-0.786],  ],\n  'J' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.457,-0.733], [0.593,-0.715], [0.428,-0.508], [0.343,-0.336], [0.301,-0.096], [0.292,0.057], [0.286,0.286], [0.316,0.532], [0.382,0.703], [0.439,0.754], [0.506,0.780], [0.591,0.790], [0.690,0.782], [0.734,0.739], [0.789,0.616], [0.802,0.553], [0.814,0.386], [0.818,0.209], [0.808,-0.059], [0.799,-0.253], [0.787,-0.441], [0.780,-0.614], [0.767,-0.807], [0.752,-0.952], [0.760,-1.127], [0.737,-1.292], [0.712,-1.438], [0.661,-1.505], [0.604,-1.531], [0.426,-1.533], [0.365,-1.508], [0.310,-1.439], [0.298,-1.296], [0.310,-1.143], [0.346,-0.955], [0.397,-0.844], [0.457,-0.733], [0.588,-0.715], [0.675,-0.731], [0.762,-0.748], [0.849,-0.764], [0.935,-0.780], [1.021,-0.779], [1.106,-0.779], [1.188,-0.786],  ],\n  'K' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.540,-0.627], [0.551,-0.494], [0.562,-0.360], [0.574,-0.227], [0.585,-0.094], [0.596,0.040], [0.580,0.158], [0.563,0.276], [0.547,0.393], [0.530,0.511], [0.514,0.629], [0.497,0.747], [0.442,0.744], [0.382,0.736], [0.317,0.679], [0.268,0.607], [0.223,0.532], [0.268,0.607], [0.317,0.679], [0.382,0.736], [0.442,0.744], [0.497,0.747], [0.514,0.629], [0.530,0.511], [0.547,0.393], [0.563,0.276], [0.580,0.158], [0.596,0.040], [0.689,0.087], [0.752,0.165], [0.815,0.242], [0.878,0.320], [0.941,0.397], [1.004,0.475], [1.067,0.553], [1.130,0.630], [1.149,0.740], [1.130,0.630], [1.067,0.553], [1.004,0.475], [0.941,0.397], [0.878,0.320], [0.815,0.242], [0.752,0.165], [0.689,0.087], [0.626,0.010], [0.675,-0.067], [0.725,-0.143], [0.775,-0.219], [0.825,-0.295], [0.875,-0.371], [0.925,-0.448], [0.974,-0.524], [1.024,-0.600], [1.074,-0.676], [1.124,-0.761], [1.220,-0.786], [1.299,-0.786], [1.363,-0.786], [1.442,-0.786], [1.526,-0.786],  ],\n  'L' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.323,-0.778], [0.370,-0.766], [0.406,-0.774], [0.433,-0.774], [0.460,-0.766], [0.520,-0.743], [0.558,-0.713], [0.629,-0.650], [0.681,-0.570], [0.717,-0.506], [0.723,-0.395], [0.739,-0.305], [0.748,-0.179], [0.751,-0.045], [0.743,0.148], [0.741,0.224], [0.757,0.263], [0.749,0.353], [0.776,0.537], [0.788,0.600], [0.824,0.711], [0.872,0.783], [0.894,0.827], [0.968,0.850], [1.027,0.795], [1.061,0.723], [1.082,0.596], [1.071,0.517], [1.050,0.464], [0.971,0.366], [0.940,0.343], [0.848,0.288], [0.808,0.275], [0.660,0.257], [0.624,0.259], [0.500,0.288], [0.386,0.343], [0.285,0.410], [0.386,0.343], [0.500,0.288], [0.624,0.259], [0.660,0.257], [0.808,0.275], [0.848,0.288], [0.940,0.343], [0.971,0.366], [1.050,0.464], [1.071,0.517], [1.082,0.596], [1.061,0.723], [1.027,0.795], [0.968,0.850], [0.894,0.827], [0.872,0.783], [0.824,0.711], [0.788,0.600], [0.776,0.537], [0.749,0.353], [0.757,0.263], [0.741,0.224], [0.743,0.148], [0.751,-0.045], [0.748,-0.179], [0.739,-0.305], [0.723,-0.395], [0.717,-0.506], [0.681,-0.570], [0.629,-0.650], [0.558,-0.713], [0.520,-0.743], [0.460,-0.766], [0.433,-0.774], [0.406,-0.774], [0.370,-0.766], [0.320,-0.701], [0.289,-0.650], [0.282,-0.583], [0.291,-0.519], [0.343,-0.465], [0.379,-0.442], [0.442,-0.438], [0.521,-0.442], [0.609,-0.496], [0.734,-0.616], [0.796,-0.687], [0.904,-0.756], [0.948,-0.786], [1.080,-0.786], [1.179,-0.786], [1.275,-0.786], [1.360,-0.786],  ],\n  'M' : [ [0.085,-0.786], [0.213,-0.786], [0.340,-0.786], [0.468,-0.786], [0.583,-0.736], [0.593,-0.622], [0.603,-0.507], [0.613,-0.393], [0.623,-0.278], [0.633,-0.164], [0.643,-0.049], [0.653,0.065], [0.663,0.180], [0.673,0.294], [0.683,0.409], [0.655,0.534], [0.628,0.634], [0.592,0.749], [0.500,0.795], [0.412,0.754], [0.321,0.685], [0.238,0.576], [0.321,0.685], [0.412,0.754], [0.500,0.795], [0.592,0.749], [0.628,0.634], [0.655,0.534], [0.683,0.409], [0.673,0.294], [0.663,0.180], [0.653,0.065], [0.643,-0.049], [0.633,-0.164], [0.623,-0.278], [0.613,-0.393], [0.603,-0.507], [0.593,-0.622], [0.583,-0.736], [0.593,-0.622], [0.603,-0.507], [0.613,-0.393], [0.623,-0.278], [0.633,-0.164], [0.643,-0.049], [0.653,0.065], [0.663,0.180], [0.673,0.294], [0.683,0.409], [0.727,0.575], [0.800,0.719], [0.921,0.793], [1.057,0.807], [1.122,0.730], [1.162,0.644], [1.188,0.569], [1.233,0.406], [1.223,0.292], [1.214,0.178], [1.205,0.063], [1.196,-0.051], [1.187,-0.166], [1.177,-0.280], [1.168,-0.394], [1.159,-0.509], [1.150,-0.623], [1.140,-0.737], [1.150,-0.623], [1.159,-0.509], [1.168,-0.394], [1.177,-0.280], [1.187,-0.166], [1.196,-0.051], [1.205,0.063], [1.214,0.178], [1.223,0.292], [1.233,0.406], [1.281,0.599], [1.354,0.743], [1.398,0.797], [1.480,0.835], [1.620,0.831], [1.673,0.767], [1.711,0.694], [1.737,0.619], [1.750,0.543], [1.747,0.420], [1.743,0.297], [1.740,0.174], [1.737,0.051], [1.733,-0.072], [1.730,-0.195], [1.726,-0.318], [1.723,-0.441], [1.719,-0.564], [1.716,-0.687], [1.815,-0.746], [1.921,-0.786], [2.001,-0.786], [2.085,-0.786], [2.186,-0.786],  ],\n  'N' : [ [0.128,-0.786], [0.255,-0.786], [0.425,-0.786], [0.568,-0.765], [0.577,-0.710], [0.580,-0.603], [0.584,-0.497], [0.587,-0.390], [0.590,-0.283], [0.593,-0.177], [0.597,-0.070], [0.600,0.037], [0.603,0.143], [0.607,0.250], [0.610,0.357], [0.582,0.537], [0.557,0.637], [0.528,0.747], [0.471,0.804], [0.406,0.800], [0.333,0.745], [0.282,0.665], [0.234,0.577], [0.282,0.665], [0.333,0.745], [0.406,0.800], [0.471,0.804], [0.528,0.747], [0.557,0.637], [0.582,0.537], [0.610,0.357], [0.607,0.250], [0.603,0.143], [0.600,0.037], [0.597,-0.070], [0.593,-0.177], [0.590,-0.283], [0.587,-0.390], [0.584,-0.497], [0.580,-0.603], [0.577,-0.710], [0.568,-0.765], [0.577,-0.710], [0.580,-0.603], [0.584,-0.497], [0.587,-0.390], [0.590,-0.283], [0.593,-0.177], [0.597,-0.070], [0.600,0.037], [0.603,0.143], [0.607,0.250], [0.610,0.357], [0.635,0.471], [0.659,0.604], [0.712,0.723], [0.759,0.795], [0.841,0.825], [0.947,0.826], [1.010,0.775], [1.078,0.692], [1.108,0.617], [1.130,0.465], [1.141,0.300], [1.141,0.199], [1.140,0.099], [1.139,-0.001], [1.138,-0.101], [1.137,-0.201], [1.136,-0.302], [1.136,-0.402], [1.135,-0.502], [1.134,-0.602], [1.133,-0.703], [1.197,-0.754], [1.234,-0.786], [1.306,-0.786], [1.355,-0.786], [1.420,-0.786], [1.505,-0.786],  ],\n  'O' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.565,-0.770], [0.621,-0.775], [0.714,-0.769], [0.806,-0.733], [0.867,-0.701], [0.912,-0.644], [0.959,-0.587], [1.028,-0.429], [1.061,-0.246], [1.067,-0.145], [1.065,0.024], [1.046,0.265], [1.037,0.379], [0.986,0.518], [0.918,0.668], [0.782,0.786], [0.714,0.786], [0.649,0.760], [0.572,0.699], [0.502,0.656], [0.435,0.572], [0.380,0.494], [0.332,0.378], [0.295,0.296], [0.271,0.169], [0.255,0.064], [0.255,-0.026], [0.255,-0.106], [0.266,-0.206], [0.307,-0.371], [0.340,-0.446], [0.373,-0.519], [0.417,-0.592], [0.451,-0.668], [0.509,-0.727], [0.565,-0.770], [0.621,-0.775], [0.714,-0.769], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786],  ],\n  'P' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.786], [0.289,-0.786], [0.289,-0.641], [0.289,-0.495], [0.289,-0.349], [0.289,-0.204], [0.289,-0.058], [0.314,-0.055], [0.410,-0.085], [0.476,-0.099], [0.603,-0.071], [0.676,-0.039], [0.777,0.051], [0.800,0.075], [0.856,0.217], [0.862,0.248], [0.866,0.337], [0.862,0.388], [0.856,0.463], [0.829,0.525], [0.776,0.636], [0.749,0.673], [0.688,0.748], [0.655,0.772], [0.603,0.786], [0.561,0.786], [0.493,0.769], [0.439,0.737], [0.400,0.701], [0.354,0.651], [0.323,0.599], [0.289,0.525], [0.289,0.379], [0.289,0.234], [0.289,0.088], [0.289,-0.058], [0.289,-0.204], [0.289,-0.349], [0.289,-0.495], [0.289,-0.641], [0.289,-0.786], [0.374,-0.786], [0.459,-0.786], [0.544,-0.786], [0.629,-0.786], [0.714,-0.786], [0.799,-0.786], [0.884,-0.786], [0.969,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  'Q' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.621,-0.786], [0.565,-0.770], [0.509,-0.727], [0.451,-0.668], [0.417,-0.592], [0.373,-0.519], [0.340,-0.446], [0.307,-0.371], [0.266,-0.206], [0.255,-0.106], [0.255,-0.026], [0.255,0.064], [0.271,0.169], [0.295,0.296], [0.332,0.378], [0.380,0.494], [0.435,0.572], [0.502,0.656], [0.572,0.710], [0.649,0.760], [0.714,0.786], [0.816,0.777], [0.918,0.668], [0.986,0.518], [1.037,0.379], [1.062,0.191], [1.065,0.024], [1.067,-0.145], [1.061,-0.246], [1.028,-0.429], [0.959,-0.587], [0.912,-0.644], [0.867,-0.701], [0.806,-0.733], [0.714,-0.769], [0.621,-0.786], [0.565,-0.770], [0.509,-0.727], [0.451,-0.668], [0.417,-0.592], [0.443,-0.531], [0.479,-0.481], [0.550,-0.430], [0.674,-0.430], [0.773,-0.472], [0.860,-0.532], [0.914,-0.595], [1.011,-0.667], [1.092,-0.732], [1.182,-0.786], [1.260,-0.786], [1.351,-0.786],  ],\n  'R' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.323,-0.786], [0.408,-0.786], [0.408,-0.640], [0.408,-0.494], [0.408,-0.348], [0.408,-0.201], [0.408,-0.055], [0.408,0.091], [0.408,0.237], [0.408,0.384], [0.408,0.530], [0.408,0.727], [0.480,0.744], [0.552,0.744], [0.648,0.744], [0.731,0.744], [0.816,0.744], [0.895,0.703], [0.966,0.616], [1.005,0.544], [1.026,0.494], [1.054,0.378], [1.051,0.276], [1.036,0.191], [0.998,0.132], [0.940,0.069], [0.850,0.004], [0.738,-0.016], [0.629,-0.030], [0.561,-0.034], [0.509,-0.037], [0.433,-0.032], [0.450,-0.091], [0.527,-0.191], [0.595,-0.319], [0.655,-0.400], [0.681,-0.437], [0.719,-0.487], [0.757,-0.536], [0.795,-0.585], [0.850,-0.650], [0.892,-0.710], [0.932,-0.769], [0.969,-0.803], [1.008,-0.820], [1.082,-0.829], [1.131,-0.820], [1.190,-0.786], [1.275,-0.786],  ],\n  'S' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.761], [0.306,-0.718], [0.357,-0.676], [0.391,-0.599], [0.433,-0.497], [0.493,-0.327], [0.544,-0.191], [0.620,-0.064], [0.689,0.064], [0.790,0.154], [0.833,0.234], [0.876,0.335], [0.909,0.429], [0.919,0.520], [0.922,0.614], [0.905,0.690], [0.871,0.749], [0.825,0.777], [0.739,0.786], [0.654,0.777], [0.584,0.760], [0.549,0.734], [0.525,0.681], [0.514,0.605], [0.507,0.548], [0.509,0.463], [0.517,0.404], [0.544,0.306], [0.587,0.174], [0.689,0.064], [0.790,-0.021], [0.872,-0.190], [0.944,-0.302], [0.918,-0.440], [0.884,-0.506], [0.850,-0.574], [0.765,-0.684], [0.680,-0.748], [0.579,-0.761], [0.519,-0.766], [0.476,-0.774], [0.425,-0.774], [0.344,-0.766], [0.298,-0.718], [0.264,-0.650], [0.256,-0.583], [0.265,-0.519], [0.313,-0.465], [0.354,-0.442], [0.423,-0.429], [0.501,-0.429], [0.581,-0.442], [0.669,-0.496], [0.794,-0.616], [0.855,-0.687], [0.963,-0.756], [1.046,-0.803], [1.140,-0.837], [1.239,-0.829], [1.335,-0.786],  ],\n  'T' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.440,-0.786], [0.514,-0.786], [0.578,-0.769], [0.621,-0.750], [0.683,-0.702], [0.717,-0.659], [0.759,-0.567], [0.790,-0.489], [0.809,-0.361], [0.820,-0.229], [0.830,-0.097], [0.840,0.035], [0.851,0.168], [0.861,0.300], [0.871,0.432], [0.882,0.564], [0.882,0.697], [0.920,0.681], [0.986,0.659], [1.052,0.655], [1.123,0.659], [1.188,0.681], [1.275,0.718], [1.394,0.759], [1.275,0.718], [1.188,0.681], [1.123,0.659], [1.052,0.655], [0.986,0.659], [0.920,0.681], [0.882,0.697], [0.785,0.730], [0.731,0.747], [0.679,0.762], [0.595,0.769], [0.471,0.728], [0.340,0.652], [0.471,0.728], [0.595,0.769], [0.679,0.762], [0.731,0.747], [0.785,0.730], [0.882,0.697], [0.882,0.564], [0.871,0.432], [0.861,0.300], [0.851,0.168], [0.840,0.035], [0.830,-0.097], [0.820,-0.229], [0.809,-0.361], [0.790,-0.489], [0.579,-0.761], [0.519,-0.766], [0.476,-0.774], [0.425,-0.774], [0.344,-0.766], [0.298,-0.718], [0.264,-0.650], [0.256,-0.583], [0.265,-0.519], [0.313,-0.465], [0.354,-0.442], [0.423,-0.429], [0.501,-0.429], [0.581,-0.442], [0.669,-0.496], [0.794,-0.616], [0.855,-0.687], [0.963,-0.756], [1.046,-0.803], [1.140,-0.837], [1.239,-0.829], [1.335,-0.820], [1.419,-0.803], [1.504,-0.786], [1.589,-0.786],  ],\n  'U' : [ [0.085,-0.786], [0.170,-0.785], [0.255,-0.783], [0.340,-0.781], [0.421,-0.745], [0.502,-0.709], [0.549,-0.661], [0.521,-0.621], [0.492,-0.535], [0.487,-0.355], [0.503,-0.237], [0.518,-0.119], [0.534,-0.001], [0.549,0.117], [0.565,0.234], [0.581,0.352], [0.596,0.470], [0.612,0.588], [0.594,0.643], [0.539,0.730], [0.499,0.755], [0.403,0.729], [0.349,0.658], [0.289,0.554], [0.252,0.493], [0.195,0.440], [0.252,0.493], [0.289,0.554], [0.349,0.658], [0.403,0.729], [0.499,0.755], [0.539,0.730], [0.594,0.643], [0.612,0.588], [0.596,0.470], [0.581,0.352], [0.565,0.234], [0.549,0.117], [0.534,-0.001], [0.518,-0.119], [0.503,-0.237], [0.487,-0.355], [0.492,-0.535], [0.521,-0.621], [0.549,-0.661], [0.591,-0.715], [0.678,-0.759], [0.764,-0.770], [0.837,-0.738], [0.902,-0.687], [0.936,-0.651], [0.967,-0.594], [1.005,-0.551], [1.061,-0.494], [1.073,-0.316], [1.088,-0.195], [1.103,-0.073], [1.117,0.049], [1.132,0.170], [1.147,0.292], [1.162,0.413], [1.177,0.535], [1.192,0.657], [1.217,0.817], [1.192,0.657], [1.177,0.535], [1.162,0.413], [1.147,0.292], [1.132,0.170], [1.117,0.049], [1.103,-0.073], [1.088,-0.195], [1.073,-0.316], [1.066,-0.418], [1.061,-0.494], [1.073,-0.609], [1.096,-0.659], [1.126,-0.710], [1.202,-0.752], [1.275,-0.761], [1.357,-0.786], [1.442,-0.786], [1.530,-0.786],  ],\n  'V' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.778], [0.425,-0.769], [0.510,-0.744], [0.595,-0.718], [0.646,-0.659], [0.682,-0.590], [0.717,-0.650], [0.751,-0.689], [0.790,-0.735], [0.867,-0.786], [0.969,-0.761], [1.022,-0.716], [1.085,-0.571], [1.118,-0.425], [1.135,-0.300], [1.152,-0.175], [1.169,-0.049], [1.186,0.076], [1.202,0.202], [1.219,0.327], [1.236,0.452], [1.253,0.578], [1.270,0.703], [1.287,0.786], [1.343,0.744], [1.420,0.688], [1.486,0.674], [1.543,0.699], [1.615,0.735], [1.543,0.699], [1.486,0.674], [1.420,0.688], [1.343,0.744], [1.287,0.786], [1.270,0.703], [1.253,0.578], [1.236,0.452], [1.219,0.327], [1.202,0.202], [1.186,0.076], [1.169,-0.049], [1.152,-0.175], [1.135,-0.300], [1.118,-0.425], [1.085,-0.571], [1.022,-0.716], [0.969,-0.761], [0.867,-0.786], [0.790,-0.735], [0.751,-0.689], [0.717,-0.650], [0.682,-0.590], [0.642,-0.426], [0.642,-0.262], [0.642,-0.097], [0.642,0.067], [0.642,0.231], [0.642,0.395], [0.626,0.588], [0.592,0.664], [0.552,0.735], [0.505,0.786], [0.459,0.760], [0.414,0.718], [0.371,0.667], [0.323,0.621], [0.255,0.542], [0.323,0.621], [0.371,0.667], [0.414,0.718], [0.459,0.760], [0.505,0.786], [0.552,0.735], [0.592,0.664], [0.626,0.588], [0.642,0.395], [0.642,0.231], [0.642,0.067], [0.642,-0.097], [0.642,-0.262], [0.642,-0.426], [0.682,-0.590], [0.717,-0.650], [0.751,-0.689], [0.790,-0.735], [0.867,-0.786], [0.969,-0.761], [1.022,-0.716], [1.105,-0.752], [1.190,-0.769], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786], [1.530,-0.786], [1.615,-0.786], [1.700,-0.786], [1.785,-0.786],  ],\n  'W' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.552,-0.739], [0.516,-0.647], [0.487,-0.569], [0.458,-0.430], [0.454,-0.354], [0.450,-0.252], [0.456,-0.096], [0.463,0.061], [0.469,0.218], [0.475,0.374], [0.481,0.531], [0.478,0.660], [0.459,0.724], [0.413,0.803], [0.357,0.775], [0.306,0.659], [0.238,0.531], [0.306,0.659], [0.357,0.775], [0.413,0.803], [0.459,0.724], [0.478,0.660], [0.481,0.531], [0.475,0.374], [0.469,0.218], [0.463,0.061], [0.456,-0.096], [0.450,-0.252], [0.454,-0.354], [0.458,-0.430], [0.487,-0.569], [0.516,-0.647], [0.552,-0.739], [0.599,-0.760], [0.652,-0.766], [0.726,-0.753], [0.788,-0.724], [0.856,-0.681], [0.912,-0.581], [0.949,-0.494], [0.987,-0.275], [0.990,-0.164], [0.993,-0.052], [0.996,0.060], [0.999,0.172], [1.002,0.283], [1.005,0.395], [1.008,0.507], [1.011,0.619], [1.014,0.730], [1.018,0.786], [1.014,0.730], [1.011,0.619], [1.008,0.507], [1.005,0.395], [1.002,0.283], [0.999,0.172], [0.996,0.060], [0.993,-0.052], [0.990,-0.164], [0.987,-0.275], [0.990,-0.543], [1.025,-0.644], [1.080,-0.695], [1.158,-0.761], [1.249,-0.761], [1.335,-0.718], [1.401,-0.672], [1.437,-0.622], [1.446,-0.474], [1.455,-0.326], [1.464,-0.179], [1.473,-0.031], [1.482,0.117], [1.491,0.265], [1.500,0.413], [1.509,0.561], [1.518,0.708], [1.527,0.786], [1.518,0.708], [1.509,0.561], [1.500,0.413], [1.491,0.265], [1.482,0.117], [1.473,-0.031], [1.464,-0.179], [1.455,-0.326], [1.446,-0.474], [1.437,-0.622], [1.514,-0.678], [1.602,-0.718], [1.688,-0.752], [1.774,-0.786], [1.861,-0.786], [1.945,-0.786],  ],\n  'X' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.321,-0.682], [0.388,-0.578], [0.454,-0.473], [0.520,-0.369], [0.586,-0.264], [0.653,-0.160], [0.719,-0.055], [0.785,0.049], [0.852,0.154], [0.918,0.258], [0.984,0.363], [1.050,0.467], [1.117,0.572], [1.183,0.676], [1.249,0.781], [1.183,0.676], [1.117,0.572], [1.050,0.467], [0.984,0.363], [0.918,0.258], [0.852,0.154], [0.781,0.144], [0.761,0.265], [0.741,0.387], [0.721,0.508], [0.701,0.629], [0.637,0.768], [0.512,0.730], [0.425,0.642], [0.370,0.577], [0.308,0.475], [0.370,0.577], [0.425,0.642], [0.512,0.730], [0.637,0.768], [0.701,0.629], [0.721,0.508], [0.741,0.387], [0.761,0.265], [0.781,0.144], [0.801,0.023], [0.821,-0.099], [0.841,-0.220], [0.861,-0.341], [0.881,-0.463], [0.901,-0.584], [0.947,-0.685], [0.984,-0.782], [1.037,-0.786], [1.036,-0.786], [1.117,-0.786], [1.214,-0.786], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786],  ],\n  'Y' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.365,-0.701], [0.387,-0.581], [0.375,-0.466], [0.383,-0.340], [0.404,-0.134], [0.426,0.071], [0.447,0.276], [0.468,0.481], [0.473,0.634], [0.445,0.749], [0.410,0.786], [0.340,0.777], [0.255,0.752], [0.340,0.777], [0.410,0.786], [0.445,0.749], [0.473,0.634], [0.468,0.481], [0.447,0.276], [0.426,0.071], [0.404,-0.134], [0.383,-0.340], [0.375,-0.466], [0.387,-0.581], [0.423,-0.684], [0.467,-0.750], [0.521,-0.756], [0.573,-0.733], [0.628,-0.686], [0.685,-0.624], [0.731,-0.548], [0.790,-0.489], [0.866,-0.430], [0.886,-0.303], [0.906,-0.176], [0.927,-0.050], [0.947,0.077], [0.968,0.204], [0.988,0.331], [1.009,0.458], [1.029,0.585], [1.050,0.701], [1.070,0.786], [1.050,0.701], [1.029,0.585], [1.009,0.458], [0.988,0.331], [0.968,0.204], [0.947,0.077], [0.927,-0.050], [0.906,-0.176], [0.886,-0.303], [0.866,-0.430], [0.847,-0.571], [0.829,-0.712], [0.810,-0.852], [0.792,-0.993], [0.773,-1.134], [0.755,-1.275], [0.724,-1.403], [0.679,-1.484], [0.620,-1.509], [0.562,-1.522], [0.476,-1.534], [0.408,-1.484], [0.376,-1.419], [0.367,-1.306], [0.392,-1.217], [0.442,-1.109], [0.510,-0.999], [0.570,-0.891], [0.626,-0.833], [0.714,-0.786], [0.782,-0.786], [0.833,-0.786], [0.929,-0.786], [0.986,-0.786], [1.054,-0.786], [1.139,-0.786], [1.224,-0.786],  ],\n  'Z' : [ [0.085,-0.786], [0.170,-0.786], [0.245,-0.786], [0.323,-0.701], [0.395,-0.577], [0.488,-0.462], [0.626,-0.240], [0.699,-0.091], [0.750,0.051], [0.784,0.192], [0.797,0.370], [0.762,0.534], [0.748,0.571], [0.701,0.657], [0.628,0.747], [0.561,0.752], [0.446,0.715], [0.342,0.625], [0.314,0.592], [0.255,0.530], [0.314,0.592], [0.342,0.625], [0.446,0.715], [0.561,0.752], [0.628,0.747], [0.701,0.657], [0.748,0.571], [0.762,0.534], [0.797,0.370], [0.784,0.192], [0.750,0.051], [0.699,-0.091], [0.626,-0.240], [0.488,-0.462], [0.395,-0.577], [0.323,-0.701], [0.384,-0.684], [0.417,-0.665], [0.532,-0.661], [0.562,-0.686], [0.666,-0.950], [0.652,-1.118], [0.645,-1.167], [0.586,-1.385], [0.570,-1.429], [0.499,-1.570], [0.379,-1.580], [0.305,-1.560], [0.274,-1.523], [0.251,-1.475], [0.234,-1.358], [0.247,-1.211], [0.311,-1.087], [0.375,-0.970], [0.442,-0.871], [0.502,-0.799], [0.595,-0.761], [0.646,-0.769], [0.714,-0.786], [0.792,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  'a' : [ [0.085,-0.718], [0.146,-0.557], [0.146,-0.500], [0.153,-0.455], [0.180,-0.395], [0.204,-0.353], [0.219,-0.319], [0.246,-0.276], [0.272,-0.234], [0.298,-0.191], [0.333,-0.157], [0.379,-0.132], [0.432,-0.098], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.561,-0.718], [0.501,-0.773], [0.425,-0.801], [0.357,-0.820], [0.279,-0.801], [0.230,-0.754], [0.213,-0.731], [0.184,-0.681], [0.151,-0.616], [0.146,-0.557], [0.146,-0.500], [0.153,-0.455], [0.180,-0.395], [0.204,-0.353], [0.219,-0.319], [0.246,-0.276], [0.272,-0.234], [0.298,-0.191], [0.333,-0.157], [0.379,-0.132], [0.432,-0.098], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.678,-0.744], [0.729,-0.801], [0.781,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  'b' : [ [0.043,-0.786], [0.085,-0.761], [0.128,-0.727], [0.170,-0.693], [0.199,-0.667], [0.227,-0.625], [0.256,-0.574], [0.285,-0.497], [0.313,-0.429], [0.342,-0.361], [0.371,-0.268], [0.399,-0.191], [0.428,-0.106], [0.457,-0.004], [0.485,0.064], [0.514,0.140], [0.543,0.241], [0.571,0.320], [0.587,0.399], [0.588,0.510], [0.572,0.602], [0.529,0.674], [0.473,0.743], [0.432,0.750], [0.397,0.739], [0.367,0.724], [0.343,0.686], [0.323,0.627], [0.318,0.497], [0.316,0.368], [0.315,0.238], [0.313,0.108], [0.316,-0.022], [0.318,-0.152], [0.320,-0.282], [0.321,-0.412], [0.323,-0.542], [0.333,-0.672], [0.352,-0.718], [0.381,-0.771], [0.412,-0.786], [0.463,-0.786], [0.500,-0.782], [0.537,-0.764], [0.564,-0.746], [0.590,-0.688], [0.604,-0.634], [0.622,-0.573], [0.636,-0.514], [0.655,-0.446], [0.662,-0.377], [0.670,-0.293], [0.672,-0.200], [0.674,-0.112], [0.743,-0.140], [0.790,-0.157], [0.842,-0.149],  ],\n  'c' : [ [0.034,-0.769], [0.051,-0.735], [0.076,-0.676], [0.097,-0.599], [0.113,-0.565], [0.136,-0.514], [0.163,-0.446], [0.210,-0.344], [0.246,-0.268], [0.272,-0.222], [0.296,-0.191], [0.329,-0.152], [0.360,-0.123], [0.396,-0.094], [0.442,-0.081], [0.485,-0.072], [0.529,-0.064], [0.595,-0.064], [0.646,-0.106], [0.680,-0.191], [0.646,-0.106], [0.595,-0.064], [0.529,-0.064], [0.485,-0.072], [0.442,-0.081], [0.396,-0.094], [0.360,-0.123], [0.329,-0.152], [0.296,-0.191], [0.272,-0.222], [0.246,-0.268], [0.199,-0.407], [0.199,-0.497], [0.202,-0.565], [0.220,-0.657], [0.246,-0.708], [0.263,-0.731], [0.279,-0.754], [0.306,-0.795], [0.355,-0.829], [0.446,-0.846], [0.561,-0.829], [0.637,-0.820], [0.697,-0.812], [0.765,-0.803], [0.850,-0.795], [0.935,-0.786],  ],\n  'd' : [ [0.085,-0.786], [0.136,-0.769], [0.181,-0.701], [0.238,-0.616], [0.279,-0.557], [0.282,-0.500], [0.289,-0.455], [0.298,-0.395], [0.313,-0.319], [0.333,-0.242], [0.357,-0.191], [0.425,-0.123], [0.469,-0.089], [0.515,-0.072], [0.629,-0.043], [0.697,-0.036], [0.782,-0.036], [0.697,-0.036], [0.629,-0.043], [0.515,-0.072], [0.469,-0.089], [0.425,-0.123], [0.357,-0.191], [0.333,-0.242], [0.313,-0.319], [0.298,-0.395], [0.289,-0.455], [0.282,-0.500], [0.279,-0.557], [0.287,-0.616], [0.320,-0.681], [0.366,-0.754], [0.415,-0.801], [0.459,-0.810], [0.510,-0.808], [0.561,-0.801], [0.637,-0.773], [0.697,-0.718], [0.799,-0.650], [0.867,-0.639], [0.867,-0.592], [0.867,-0.489], [0.867,-0.404], [0.867,-0.293], [0.867,-0.149], [0.867,0.064], [0.867,0.234], [0.867,0.404], [0.867,0.574], [0.867,0.744], [0.867,0.574], [0.867,0.404], [0.867,0.234], [0.867,0.064], [0.867,-0.149], [0.867,-0.293], [0.867,-0.404], [0.867,-0.489], [0.867,-0.592], [0.867,-0.639], [0.875,-0.701], [0.899,-0.744], [0.950,-0.801], [1.002,-0.824], [1.068,-0.815], [1.122,-0.812], [1.190,-0.786],  ],\n  'e' : [ [0.085,-0.786], [0.170,-0.786], [0.290,-0.744], [0.378,-0.693], [0.459,-0.659], [0.503,-0.616], [0.537,-0.548], [0.561,-0.497], [0.571,-0.446], [0.576,-0.404], [0.579,-0.336], [0.576,-0.276], [0.568,-0.229], [0.559,-0.191], [0.551,-0.160], [0.534,-0.106], [0.517,-0.072], [0.486,-0.047], [0.444,-0.030], [0.401,-0.021], [0.359,-0.030], [0.316,-0.047], [0.286,-0.072], [0.269,-0.106], [0.252,-0.160], [0.243,-0.191], [0.235,-0.229], [0.226,-0.276], [0.223,-0.336], [0.226,-0.404], [0.231,-0.446], [0.241,-0.497], [0.265,-0.548], [0.299,-0.616], [0.342,-0.659], [0.422,-0.701], [0.510,-0.744], [0.605,-0.761], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786],  ],\n  'f' : [ [0.043,-0.786], [0.076,-0.779], [0.107,-0.773], [0.145,-0.744], [0.192,-0.710], [0.225,-0.684], [0.264,-0.667], [0.321,-0.642], [0.374,-0.592], [0.425,-0.548], [0.451,-0.446], [0.468,-0.361], [0.485,-0.276], [0.501,-0.191], [0.518,-0.106], [0.535,-0.038], [0.552,0.047], [0.565,0.131], [0.582,0.212], [0.605,0.299], [0.619,0.402], [0.632,0.506], [0.614,0.607], [0.578,0.667], [0.535,0.680], [0.485,0.684], [0.425,0.671], [0.374,0.652], [0.329,0.619], [0.298,0.531], [0.294,0.428], [0.292,0.299], [0.294,0.169], [0.296,-0.000], [0.296,-0.172], [0.296,-0.276], [0.298,-0.385], [0.297,-0.489], [0.296,-0.598], [0.295,-0.710], [0.295,-0.829], [0.292,-0.931], [0.289,-1.041], [0.286,-1.126], [0.281,-1.254], [0.281,-1.356], [0.279,-1.466], [0.272,-1.602], [0.323,-1.602], [0.374,-1.601], [0.423,-1.594], [0.474,-1.551], [0.510,-1.509], [0.542,-1.466], [0.550,-1.381], [0.542,-1.296], [0.533,-1.211], [0.522,-1.126], [0.508,-1.041], [0.491,-0.956], [0.468,-0.888], [0.442,-0.846], [0.383,-0.752], [0.420,-0.769], [0.468,-0.803], [0.510,-0.829], [0.567,-0.812], [0.639,-0.803], [0.723,-0.795], [0.807,-0.786], [0.892,-0.786],  ],\n  'g' : [ [0.033,-0.778], [0.067,-0.761], [0.117,-0.727], [0.145,-0.706], [0.204,-0.662], [0.238,-0.633], [0.284,-0.592], [0.317,-0.557], [0.350,-0.506], [0.384,-0.458], [0.400,-0.430], [0.434,-0.384], [0.467,-0.337], [0.500,-0.291], [0.527,-0.251], [0.559,-0.217], [0.601,-0.175], [0.633,-0.149], [0.678,-0.132], [0.729,-0.115], [0.780,-0.098], [0.831,-0.086], [0.883,-0.089], [0.901,-0.123], [0.898,-0.191], [0.894,-0.259], [0.891,-0.327], [0.887,-0.395], [0.884,-0.463], [0.881,-0.531], [0.877,-0.599], [0.874,-0.667], [0.870,-0.735], [0.816,-0.761], [0.763,-0.786], [0.678,-0.812], [0.610,-0.824], [0.527,-0.812], [0.457,-0.786], [0.400,-0.754], [0.355,-0.676], [0.334,-0.592], [0.317,-0.557], [0.350,-0.506], [0.384,-0.458], [0.400,-0.430], [0.434,-0.384], [0.467,-0.337], [0.500,-0.291], [0.527,-0.251], [0.559,-0.217], [0.601,-0.175], [0.633,-0.149], [0.678,-0.132], [0.729,-0.115], [0.780,-0.098], [0.831,-0.086], [0.883,-0.089], [0.901,-0.123], [0.898,-0.191], [0.894,-0.259], [0.891,-0.327], [0.887,-0.395], [0.884,-0.463], [0.881,-0.531], [0.877,-0.599], [0.874,-0.667], [0.870,-0.735], [0.867,-0.803], [0.864,-0.871], [0.860,-0.939], [0.857,-1.007], [0.853,-1.075], [0.850,-1.143], [0.847,-1.211], [0.843,-1.279], [0.840,-1.347], [0.836,-1.415], [0.833,-1.484], [0.830,-1.551], [0.826,-1.619], [0.765,-1.615], [0.697,-1.608], [0.646,-1.598], [0.595,-1.568], [0.544,-1.526], [0.493,-1.466], [0.459,-1.398], [0.442,-1.347], [0.425,-1.279], [0.433,-1.228], [0.459,-1.186], [0.500,-1.125], [0.530,-1.084], [0.567,-1.041], [0.627,-0.990], [0.695,-0.948], [0.746,-0.914], [0.800,-0.871], [0.873,-0.829], [0.949,-0.820], [1.037,-0.812], [1.105,-0.803], [1.190,-0.786],  ],\n  'h' : [ [0.046,-0.710], [0.072,-0.666], [0.110,-0.611], [0.134,-0.564], [0.169,-0.515], [0.197,-0.467], [0.221,-0.419], [0.250,-0.374], [0.277,-0.327], [0.303,-0.276], [0.326,-0.242], [0.349,-0.200], [0.383,-0.155], [0.432,-0.083], [0.483,-0.038], [0.508,0.013], [0.549,0.064], [0.575,0.131], [0.602,0.202], [0.617,0.249], [0.641,0.297], [0.651,0.370], [0.660,0.438], [0.662,0.523], [0.651,0.616], [0.641,0.693], [0.599,0.742], [0.542,0.769], [0.483,0.769], [0.406,0.738], [0.355,0.702], [0.321,0.636], [0.295,0.511], [0.295,0.425], [0.295,0.339], [0.295,0.227], [0.295,0.114], [0.295,0.001], [0.295,-0.111], [0.295,-0.224], [0.295,-0.336], [0.295,-0.449], [0.295,-0.561], [0.295,-0.674], [0.295,-0.786], [0.299,-0.674], [0.302,-0.561], [0.329,-0.514], [0.368,-0.447], [0.392,-0.386], [0.420,-0.307], [0.447,-0.255], [0.475,-0.185], [0.507,-0.149], [0.564,-0.132], [0.625,-0.123], [0.678,-0.132], [0.743,-0.166], [0.767,-0.229], [0.760,-0.307], [0.755,-0.375], [0.748,-0.453], [0.748,-0.533], [0.761,-0.623], [0.786,-0.717], [0.845,-0.766], [0.920,-0.794], [1.005,-0.786],  ],\n  'i' : [ [0.085,-0.791], [0.173,-0.803], [0.256,-0.811], [0.289,-0.765], [0.316,-0.712], [0.331,-0.635], [0.333,-0.550], [0.335,-0.508], [0.341,-0.431], [0.346,-0.372], [0.352,-0.287], [0.352,-0.202], [0.354,-0.143], [0.357,-0.032], [0.357,-0.143], [0.358,-0.202], [0.356,-0.287], [0.360,-0.372], [0.364,-0.432], [0.368,-0.508], [0.369,-0.551], [0.370,-0.636], [0.384,-0.712], [0.409,-0.765], [0.441,-0.811], [0.518,-0.829], [0.585,-0.795], [0.677,-0.786],  ],\n  'j' : [ [0.042,-0.761], [0.098,-0.734], [0.131,-0.693], [0.159,-0.658], [0.188,-0.613], [0.199,-0.589], [0.225,-0.548], [0.250,-0.516], [0.272,-0.468], [0.295,-0.420], [0.317,-0.360], [0.334,-0.299], [0.343,-0.264], [0.360,-0.195], [0.373,-0.100], [0.383,-0.049], [0.383,-0.099], [0.383,-0.167], [0.383,-0.276], [0.383,-0.395], [0.383,-0.513], [0.383,-0.632], [0.383,-0.751], [0.383,-0.869], [0.383,-0.988], [0.383,-1.107], [0.383,-1.225], [0.383,-1.344], [0.368,-1.405], [0.349,-1.466], [0.326,-1.514], [0.296,-1.530], [0.255,-1.534], [0.218,-1.518], [0.196,-1.496], [0.172,-1.406], [0.162,-1.296], [0.159,-1.211], [0.173,-1.126], [0.196,-1.053], [0.218,-1.005], [0.241,-0.957], [0.263,-0.909], [0.286,-0.861], [0.301,-0.837], [0.328,-0.808], [0.356,-0.780], [0.384,-0.753], [0.408,-0.742], [0.439,-0.734], [0.473,-0.733], [0.509,-0.750], [0.552,-0.767], [0.595,-0.786],  ],\n  'k' : [ [0.043,-0.744], [0.076,-0.701], [0.106,-0.659], [0.136,-0.616], [0.170,-0.548], [0.206,-0.500], [0.239,-0.453], [0.272,-0.407], [0.298,-0.384], [0.337,-0.305], [0.384,-0.226], [0.431,-0.147], [0.479,-0.069], [0.526,0.010], [0.555,0.056], [0.584,0.103], [0.605,0.149], [0.622,0.195], [0.659,0.261], [0.677,0.309], [0.695,0.356], [0.713,0.404], [0.732,0.451], [0.750,0.499], [0.765,0.565], [0.771,0.635], [0.737,0.676], [0.695,0.684], [0.654,0.684], [0.603,0.684], [0.552,0.676], [0.501,0.659], [0.451,0.612], [0.400,0.562], [0.357,0.466], [0.340,0.369], [0.340,0.273], [0.340,0.176], [0.340,0.079], [0.340,0.010], [0.340,-0.066], [0.340,-0.143], [0.340,-0.219], [0.340,-0.296], [0.340,-0.372], [0.340,-0.449], [0.340,-0.525], [0.340,-0.601], [0.340,-0.678], [0.340,-0.754], [0.340,-0.847], [0.340,-0.754], [0.340,-0.678], [0.340,-0.601], [0.340,-0.525], [0.340,-0.449], [0.354,-0.372], [0.397,-0.361], [0.465,-0.353], [0.533,-0.344], [0.618,-0.327], [0.686,-0.302], [0.754,-0.276], [0.797,-0.234], [0.822,-0.198], [0.812,-0.140], [0.788,-0.089], [0.758,-0.059], [0.720,-0.032], [0.652,-0.055], [0.601,-0.106], [0.516,-0.191], [0.465,-0.276], [0.431,-0.336], [0.383,-0.378], [0.414,-0.421], [0.455,-0.453], [0.489,-0.500], [0.522,-0.546], [0.554,-0.592], [0.577,-0.639], [0.591,-0.662], [0.622,-0.708], [0.655,-0.754], [0.688,-0.801], [0.729,-0.846], [0.771,-0.871], [0.814,-0.863], [0.856,-0.846], [0.899,-0.829], [0.941,-0.812], [0.971,-0.803], [1.011,-0.786], [1.065,-0.803], [1.105,-0.786],  ],\n  'l' : [ [0.060,-0.744], [0.097,-0.694], [0.124,-0.646], [0.145,-0.616], [0.171,-0.574], [0.194,-0.526], [0.224,-0.477], [0.255,-0.429], [0.289,-0.381], [0.306,-0.332], [0.340,-0.286], [0.377,-0.238], [0.403,-0.191], [0.435,-0.115], [0.459,-0.055], [0.483,0.013], [0.501,0.056], [0.510,0.095], [0.524,0.140], [0.534,0.190], [0.548,0.237], [0.554,0.284], [0.566,0.351], [0.578,0.404], [0.585,0.480], [0.594,0.566], [0.595,0.613], [0.585,0.682], [0.550,0.734], [0.515,0.771], [0.480,0.782], [0.451,0.786], [0.400,0.781], [0.347,0.767], [0.324,0.719], [0.315,0.672], [0.308,0.632], [0.304,0.574], [0.304,0.488], [0.304,0.401], [0.304,0.314], [0.304,0.227], [0.304,0.141], [0.304,0.054], [0.304,-0.033], [0.304,-0.119], [0.303,-0.206], [0.303,-0.293], [0.303,-0.380], [0.303,-0.466], [0.303,-0.553], [0.303,-0.640], [0.311,-0.702], [0.343,-0.752], [0.383,-0.778], [0.434,-0.784], [0.483,-0.807], [0.538,-0.821], [0.603,-0.803], [0.677,-0.795], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  'm' : [ [0.066,-0.744], [0.100,-0.708], [0.116,-0.685], [0.150,-0.639], [0.166,-0.615], [0.200,-0.569], [0.216,-0.546], [0.233,-0.523], [0.250,-0.500], [0.270,-0.463], [0.295,-0.412], [0.316,-0.384], [0.324,-0.361], [0.334,-0.337], [0.349,-0.314], [0.372,-0.276], [0.389,-0.251], [0.416,-0.222], [0.449,-0.175], [0.466,-0.152], [0.482,-0.129], [0.499,-0.106], [0.527,-0.081], [0.567,-0.069], [0.603,-0.055], [0.649,-0.059], [0.665,-0.083], [0.669,-0.103], [0.674,-0.154], [0.679,-0.205], [0.685,-0.256], [0.690,-0.307], [0.695,-0.358], [0.686,-0.402], [0.676,-0.447], [0.666,-0.491], [0.657,-0.535], [0.647,-0.579], [0.637,-0.624], [0.628,-0.668], [0.618,-0.712], [0.608,-0.756], [0.599,-0.801], [0.608,-0.756], [0.618,-0.712], [0.628,-0.668], [0.637,-0.624], [0.647,-0.579], [0.657,-0.535], [0.666,-0.491], [0.676,-0.447], [0.686,-0.402], [0.695,-0.358], [0.715,-0.314], [0.743,-0.276], [0.765,-0.245], [0.782,-0.222], [0.798,-0.198], [0.815,-0.175], [0.832,-0.152], [0.848,-0.129], [0.882,-0.089], [0.916,-0.064], [0.966,-0.044], [1.015,-0.036], [1.031,-0.059], [1.048,-0.083], [1.065,-0.106], [1.075,-0.143], [1.085,-0.180], [1.095,-0.217], [1.105,-0.254], [1.114,-0.291], [1.103,-0.340], [1.091,-0.388], [1.080,-0.437], [1.068,-0.486], [1.056,-0.534], [1.045,-0.583], [1.033,-0.632], [1.021,-0.680], [1.010,-0.729], [1.009,-0.777], [1.010,-0.729], [1.021,-0.680], [1.033,-0.632], [1.045,-0.583], [1.056,-0.534], [1.068,-0.486], [1.080,-0.437], [1.091,-0.388], [1.103,-0.340], [1.114,-0.291], [1.131,-0.268], [1.156,-0.234], [1.181,-0.198], [1.198,-0.175], [1.215,-0.140], [1.248,-0.106], [1.264,-0.083], [1.290,-0.059], [1.358,-0.038], [1.431,-0.059], [1.464,-0.106], [1.480,-0.129], [1.497,-0.175], [1.489,-0.224], [1.480,-0.272], [1.472,-0.320], [1.464,-0.369], [1.455,-0.417], [1.447,-0.466], [1.439,-0.514], [1.431,-0.562], [1.422,-0.611], [1.414,-0.659], [1.414,-0.708], [1.447,-0.754], [1.464,-0.777], [1.496,-0.803], [1.580,-0.812], [1.630,-0.812], [1.677,-0.799], [1.730,-0.795], [1.785,-0.786],  ],\n  'n' : [ [0.033,-0.786], [0.067,-0.786], [0.085,-0.744], [0.102,-0.701], [0.119,-0.625], [0.145,-0.531], [0.170,-0.446], [0.196,-0.361], [0.221,-0.234], [0.255,-0.106], [0.292,0.010], [0.332,0.064], [0.374,0.038], [0.400,-0.013], [0.414,-0.059], [0.423,-0.106], [0.431,-0.149], [0.435,-0.198], [0.430,-0.254], [0.430,-0.310], [0.430,-0.365], [0.430,-0.421], [0.430,-0.476], [0.430,-0.532], [0.430,-0.588], [0.430,-0.643], [0.430,-0.699], [0.430,-0.754], [0.430,-0.699], [0.430,-0.643], [0.430,-0.588], [0.430,-0.532], [0.430,-0.476], [0.430,-0.421], [0.430,-0.365], [0.430,-0.310], [0.430,-0.254], [0.459,-0.242], [0.485,-0.217], [0.508,-0.198], [0.525,-0.175], [0.542,-0.152], [0.558,-0.129], [0.587,-0.098], [0.620,-0.059], [0.656,-0.013], [0.691,0.010], [0.741,0.010], [0.774,-0.013], [0.791,-0.036], [0.808,-0.059], [0.816,-0.106], [0.825,-0.149], [0.825,-0.234], [0.825,-0.293], [0.825,-0.361], [0.825,-0.421], [0.825,-0.480], [0.825,-0.523], [0.825,-0.574], [0.825,-0.616], [0.825,-0.662], [0.825,-0.708], [0.833,-0.761], [0.865,-0.812], [0.924,-0.820], [0.967,-0.812], [1.024,-0.786],  ],\n  'o' : [ [0.085,-0.727], [0.134,-0.659], [0.162,-0.608], [0.187,-0.557], [0.204,-0.514], [0.214,-0.480], [0.238,-0.430], [0.256,-0.395], [0.267,-0.361], [0.289,-0.319], [0.314,-0.268], [0.331,-0.245], [0.346,-0.222], [0.372,-0.183], [0.397,-0.152], [0.414,-0.129], [0.431,-0.106], [0.447,-0.083], [0.482,-0.072], [0.525,-0.055], [0.584,-0.055], [0.627,-0.072], [0.647,-0.083], [0.669,-0.106], [0.685,-0.123], [0.697,-0.149], [0.714,-0.175], [0.720,-0.224], [0.719,-0.272], [0.724,-0.320], [0.723,-0.368], [0.716,-0.417], [0.711,-0.465], [0.702,-0.513], [0.689,-0.562], [0.671,-0.610], [0.654,-0.658], [0.643,-0.701], [0.620,-0.752], [0.595,-0.795], [0.552,-0.829], [0.510,-0.846], [0.459,-0.854], [0.397,-0.842], [0.372,-0.820], [0.347,-0.791], [0.314,-0.754], [0.298,-0.731], [0.281,-0.708], [0.264,-0.685], [0.253,-0.659], [0.236,-0.616], [0.219,-0.574], [0.207,-0.531], [0.214,-0.480], [0.238,-0.430], [0.256,-0.395], [0.267,-0.361], [0.289,-0.319], [0.314,-0.268], [0.331,-0.245], [0.346,-0.222], [0.372,-0.183], [0.397,-0.152], [0.414,-0.129], [0.431,-0.106], [0.447,-0.083], [0.482,-0.072], [0.524,-0.106], [0.544,-0.149], [0.570,-0.183], [0.595,-0.200], [0.629,-0.217], [0.663,-0.225], [0.697,-0.225], [0.731,-0.225], [0.765,-0.225], [0.799,-0.221], [0.833,-0.217], [0.867,-0.208], [0.901,-0.191], [0.935,-0.174], [0.969,-0.149],  ],\n  'p' : [ [0.069,-0.801], [0.130,-0.767], [0.181,-0.693], [0.211,-0.610], [0.232,-0.524], [0.253,-0.438], [0.274,-0.352], [0.291,-0.300], [0.316,-0.257], [0.337,-0.179], [0.364,-0.136], [0.372,-0.215], [0.370,-0.323], [0.368,-0.431], [0.367,-0.539], [0.365,-0.646], [0.363,-0.754], [0.361,-0.862], [0.359,-0.970], [0.357,-1.078], [0.355,-1.186], [0.353,-1.294], [0.352,-1.402], [0.350,-1.510], [0.352,-1.402], [0.353,-1.294], [0.355,-1.186], [0.357,-1.078], [0.359,-0.970], [0.361,-0.862], [0.363,-0.754], [0.365,-0.646], [0.367,-0.539], [0.368,-0.431], [0.370,-0.323], [0.372,-0.215], [0.374,-0.107], [0.364,-0.136], [0.407,-0.091], [0.438,-0.048], [0.478,-0.020], [0.510,-0.002], [0.534,0.007], [0.564,0.017], [0.610,0.010], [0.662,-0.011], [0.709,-0.077], [0.722,-0.104], [0.753,-0.170], [0.771,-0.282], [0.771,-0.357], [0.774,-0.469], [0.760,-0.538], [0.748,-0.616], [0.726,-0.654], [0.691,-0.694], [0.651,-0.714], [0.589,-0.754], [0.531,-0.747], [0.476,-0.744], [0.425,-0.727], [0.476,-0.744], [0.531,-0.747], [0.589,-0.754], [0.625,-0.748], [0.678,-0.763], [0.763,-0.777], [0.814,-0.783], [0.878,-0.803], [0.935,-0.803], [0.996,-0.795], [1.054,-0.786],  ],\n  'q' : [ [0.033,-0.778], [0.067,-0.761], [0.117,-0.727], [0.145,-0.706], [0.183,-0.662], [0.216,-0.615], [0.233,-0.592], [0.275,-0.548], [0.299,-0.506], [0.333,-0.458], [0.349,-0.430], [0.383,-0.384], [0.416,-0.337], [0.449,-0.291], [0.476,-0.251], [0.508,-0.217], [0.550,-0.175], [0.582,-0.149], [0.627,-0.132], [0.678,-0.115], [0.729,-0.098], [0.780,-0.086], [0.832,-0.089], [0.850,-0.123], [0.847,-0.191], [0.843,-0.259], [0.840,-0.327], [0.836,-0.395], [0.833,-0.463], [0.830,-0.531], [0.826,-0.599], [0.823,-0.667], [0.819,-0.735], [0.765,-0.761], [0.712,-0.786], [0.627,-0.812], [0.559,-0.824], [0.476,-0.812], [0.406,-0.786], [0.349,-0.754], [0.304,-0.676], [0.283,-0.592], [0.299,-0.506], [0.333,-0.458], [0.349,-0.430], [0.383,-0.384], [0.416,-0.337], [0.449,-0.291], [0.476,-0.251], [0.508,-0.217], [0.550,-0.175], [0.582,-0.149], [0.627,-0.132], [0.678,-0.115], [0.729,-0.098], [0.780,-0.086], [0.832,-0.089], [0.850,-0.123], [0.847,-0.191], [0.843,-0.259], [0.840,-0.327], [0.836,-0.395], [0.833,-0.463], [0.830,-0.531], [0.826,-0.599], [0.823,-0.667], [0.819,-0.735], [0.816,-0.803], [0.813,-0.871], [0.809,-0.939], [0.806,-1.007], [0.802,-1.075], [0.799,-1.143], [0.796,-1.211], [0.792,-1.279], [0.789,-1.347], [0.785,-1.415], [0.782,-1.484], [0.779,-1.551], [0.775,-1.619], [0.816,-1.615], [0.867,-1.608], [0.901,-1.598], [0.935,-1.568], [0.969,-1.526], [1.003,-1.466], [1.037,-1.398], [1.054,-1.347], [1.062,-1.279], [1.054,-1.228], [1.037,-1.186], [1.003,-1.125], [0.969,-1.084], [0.935,-1.041], [0.901,-0.990], [0.867,-0.948], [0.850,-0.914], [0.850,-0.854], [0.898,-0.829], [0.952,-0.812], [1.003,-0.795], [1.054,-0.786], [1.139,-0.786], [1.224,-0.786],  ],\n  'r' : [ [0.085,-0.786], [0.170,-0.752], [0.221,-0.701], [0.255,-0.659], [0.289,-0.616], [0.309,-0.531], [0.332,-0.446], [0.349,-0.353], [0.362,-0.293], [0.374,-0.234], [0.389,-0.166], [0.400,-0.106], [0.527,-0.106], [0.612,-0.106], [0.697,-0.106], [0.782,-0.106], [0.867,-0.106], [0.867,-0.149], [0.859,-0.234], [0.850,-0.319], [0.833,-0.404], [0.816,-0.489], [0.807,-0.574], [0.833,-0.659], [0.867,-0.701], [0.935,-0.744], [1.020,-0.769], [1.122,-0.786], [1.241,-0.786],  ],\n  's' : [ [0.066,-0.769], [0.134,-0.731], [0.168,-0.701], [0.200,-0.667], [0.255,-0.615], [0.313,-0.531], [0.383,-0.446], [0.417,-0.378], [0.442,-0.319], [0.451,-0.242], [0.451,-0.191], [0.425,-0.064], [0.510,-0.140], [0.561,-0.191], [0.612,-0.234], [0.653,-0.276], [0.697,-0.319], [0.731,-0.402], [0.748,-0.446], [0.756,-0.490], [0.765,-0.534], [0.756,-0.578], [0.739,-0.622], [0.714,-0.666], [0.680,-0.710], [0.632,-0.747], [0.567,-0.786], [0.517,-0.801], [0.468,-0.803], [0.417,-0.801], [0.374,-0.786], [0.306,-0.761], [0.238,-0.727], [0.306,-0.761], [0.374,-0.786], [0.417,-0.801], [0.468,-0.803], [0.517,-0.801], [0.567,-0.786], [0.632,-0.747], [0.678,-0.769], [0.720,-0.786], [0.763,-0.786], [0.805,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  't' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.786], [0.298,-0.786], [0.374,-0.786], [0.445,-0.786], [0.484,-0.759], [0.499,-0.605], [0.514,-0.452], [0.529,-0.299], [0.543,-0.146], [0.558,0.008], [0.573,0.161], [0.588,0.314], [0.552,0.314], [0.522,0.314], [0.467,0.314], [0.411,0.314], [0.340,0.314], [0.255,0.314], [0.170,0.314], [0.255,0.314], [0.340,0.314], [0.411,0.314], [0.467,0.314], [0.522,0.314], [0.552,0.314], [0.633,0.314], [0.688,0.314], [0.729,0.314], [0.784,0.314], [0.840,0.314], [0.895,0.314], [0.978,0.314], [1.062,0.314], [0.978,0.314], [0.895,0.314], [0.840,0.314], [0.784,0.314], [0.729,0.314], [0.688,0.314], [0.633,0.314], [0.588,0.314], [0.602,0.467], [0.617,0.621], [0.632,0.774], [0.632,0.621], [0.632,0.467], [0.632,0.314], [0.632,0.161], [0.632,0.008], [0.632,-0.146], [0.632,-0.299], [0.632,-0.452], [0.632,-0.605], [0.632,-0.759], [0.659,-0.805], [0.720,-0.816], [0.807,-0.799], [0.894,-0.791], [0.978,-0.786], [1.062,-0.786], [1.147,-0.786], [1.232,-0.786],  ],\n  'u' : [ [0.043,-0.761], [0.085,-0.744], [0.128,-0.727], [0.156,-0.710], [0.179,-0.690], [0.204,-0.646], [0.221,-0.602], [0.238,-0.557], [0.255,-0.506], [0.286,-0.491], [0.293,-0.442], [0.299,-0.392], [0.306,-0.343], [0.312,-0.294], [0.319,-0.245], [0.325,-0.195], [0.332,-0.146], [0.338,-0.097], [0.344,-0.048], [0.338,-0.097], [0.332,-0.146], [0.325,-0.195], [0.319,-0.245], [0.312,-0.294], [0.306,-0.343], [0.299,-0.392], [0.293,-0.442], [0.286,-0.491], [0.280,-0.540], [0.273,-0.589], [0.267,-0.639], [0.260,-0.688], [0.254,-0.737], [0.260,-0.786], [0.289,-0.803], [0.332,-0.812], [0.383,-0.803], [0.425,-0.795], [0.461,-0.778], [0.501,-0.761], [0.544,-0.744], [0.583,-0.727], [0.616,-0.710], [0.646,-0.684], [0.671,-0.650], [0.682,-0.605], [0.686,-0.558], [0.689,-0.511], [0.693,-0.464], [0.697,-0.416], [0.700,-0.369], [0.704,-0.322], [0.708,-0.275], [0.711,-0.228], [0.715,-0.180], [0.719,-0.133], [0.723,-0.074], [0.726,-0.023], [0.723,-0.074], [0.719,-0.133], [0.715,-0.180], [0.711,-0.228], [0.708,-0.275], [0.704,-0.322], [0.700,-0.369], [0.697,-0.416], [0.693,-0.464], [0.712,-0.529], [0.719,-0.582], [0.731,-0.633], [0.748,-0.684], [0.756,-0.735], [0.790,-0.786], [0.845,-0.803], [0.901,-0.803], [0.944,-0.795], [1.020,-0.786],  ],\n  'v' : [ [0.030,-0.784], [0.050,-0.735], [0.070,-0.687], [0.091,-0.639], [0.111,-0.591], [0.131,-0.543], [0.151,-0.494], [0.172,-0.431], [0.184,-0.375], [0.204,-0.327], [0.224,-0.279], [0.245,-0.231], [0.265,-0.182], [0.285,-0.134], [0.321,-0.085], [0.348,-0.060], [0.388,-0.046], [0.430,-0.054], [0.455,-0.076], [0.476,-0.097], [0.488,-0.134], [0.498,-0.176], [0.508,-0.212], [0.509,-0.244], [0.505,-0.280], [0.503,-0.321], [0.501,-0.363], [0.498,-0.404], [0.496,-0.446], [0.493,-0.487], [0.491,-0.528], [0.488,-0.570], [0.486,-0.611], [0.493,-0.657], [0.509,-0.707], [0.525,-0.749], [0.554,-0.790], [0.593,-0.814], [0.635,-0.793], [0.674,-0.766], [0.689,-0.723], [0.703,-0.680], [0.718,-0.637], [0.733,-0.594], [0.737,-0.547], [0.753,-0.502], [0.759,-0.450], [0.769,-0.408], [0.780,-0.331], [0.791,-0.255], [0.803,-0.179], [0.814,-0.102], [0.886,-0.110], [0.960,-0.130], [1.015,-0.143], [1.058,-0.149],  ],\n  'w' : [ [0.030,-0.781], [0.050,-0.754], [0.083,-0.708], [0.102,-0.684], [0.123,-0.659], [0.146,-0.611], [0.170,-0.564], [0.193,-0.516], [0.216,-0.468], [0.240,-0.420], [0.262,-0.361], [0.284,-0.290], [0.306,-0.219], [0.328,-0.148], [0.350,-0.077], [0.361,-0.041], [0.356,-0.126], [0.352,-0.210], [0.348,-0.294], [0.343,-0.379], [0.339,-0.463], [0.342,-0.517], [0.351,-0.602], [0.359,-0.670], [0.390,-0.738], [0.433,-0.783], [0.495,-0.799], [0.565,-0.776], [0.589,-0.728], [0.612,-0.680], [0.636,-0.632], [0.655,-0.585], [0.673,-0.537], [0.689,-0.490], [0.704,-0.442], [0.711,-0.358], [0.719,-0.274], [0.726,-0.190], [0.734,-0.105], [0.741,-0.064], [0.753,-0.120], [0.765,-0.219], [0.777,-0.317], [0.789,-0.416], [0.801,-0.515], [0.812,-0.614], [0.824,-0.712], [0.867,-0.780], [0.911,-0.786], [0.952,-0.775], [0.988,-0.723], [1.014,-0.682], [1.037,-0.634], [1.061,-0.587], [1.073,-0.530], [1.085,-0.448], [1.091,-0.403], [1.101,-0.314], [1.112,-0.224], [1.122,-0.135], [1.133,-0.064], [1.188,-0.072], [1.244,-0.089], [1.298,-0.106], [1.356,-0.149],  ],\n  'x' : [ [0.085,-0.786], [0.170,-0.786], [0.220,-0.721], [0.262,-0.667], [0.304,-0.614], [0.346,-0.560], [0.388,-0.506], [0.430,-0.452], [0.471,-0.398], [0.522,-0.337], [0.555,-0.291], [0.597,-0.237], [0.639,-0.183], [0.681,-0.129], [0.723,-0.075], [0.765,-0.021], [0.799,0.021], [0.765,-0.021], [0.723,-0.075], [0.681,-0.129], [0.639,-0.183], [0.597,-0.237], [0.555,-0.291], [0.522,-0.337], [0.445,-0.429], [0.417,-0.383], [0.380,-0.315], [0.343,-0.248], [0.306,-0.181], [0.269,-0.114], [0.232,-0.046], [0.196,0.021], [0.232,-0.046], [0.269,-0.114], [0.306,-0.181], [0.343,-0.248], [0.380,-0.315], [0.417,-0.383], [0.445,-0.429], [0.491,-0.517], [0.528,-0.585], [0.565,-0.652], [0.602,-0.719], [0.639,-0.786], [0.680,-0.824], [0.718,-0.830], [0.763,-0.846], [0.799,-0.842], [0.834,-0.837], [0.863,-0.820], [0.901,-0.808], [0.935,-0.795], [0.986,-0.786],  ],\n  'y' : [ [0.033,-0.778], [0.066,-0.760], [0.099,-0.739], [0.124,-0.720], [0.145,-0.684], [0.166,-0.648], [0.187,-0.612], [0.208,-0.576], [0.229,-0.540], [0.251,-0.504], [0.272,-0.468], [0.293,-0.431], [0.314,-0.395], [0.335,-0.359], [0.357,-0.323], [0.378,-0.287], [0.399,-0.251], [0.420,-0.215], [0.441,-0.179], [0.462,-0.143], [0.513,-0.123], [0.547,-0.123], [0.586,-0.138], [0.604,-0.161], [0.611,-0.198], [0.606,-0.241], [0.601,-0.279], [0.585,-0.358], [0.570,-0.437], [0.554,-0.515], [0.539,-0.594], [0.523,-0.672], [0.521,-0.735], [0.531,-0.788], [0.549,-0.811], [0.568,-0.834], [0.586,-0.857], [0.609,-0.878], [0.635,-0.895], [0.669,-0.902], [0.703,-0.902], [0.773,-0.893], [0.838,-0.857], [0.870,-0.823], [0.943,-0.745], [0.950,-0.674], [0.957,-0.603], [0.964,-0.533], [0.971,-0.462], [0.977,-0.391], [0.984,-0.320], [0.991,-0.249], [0.998,-0.179], [1.005,-0.132], [0.998,-0.179], [0.991,-0.249], [0.984,-0.320], [0.977,-0.391], [0.971,-0.462], [0.964,-0.533], [0.957,-0.603], [0.950,-0.674], [0.943,-0.745], [0.936,-0.816], [0.929,-0.887], [0.923,-0.957], [0.916,-1.028], [0.909,-1.099], [0.902,-1.170], [0.895,-1.241], [0.888,-1.311], [0.881,-1.382], [0.875,-1.453], [0.868,-1.524], [0.838,-1.571], [0.787,-1.584], [0.720,-1.593], [0.652,-1.601], [0.590,-1.593], [0.543,-1.576], [0.524,-1.553], [0.506,-1.530], [0.488,-1.507], [0.472,-1.476], [0.466,-1.438], [0.473,-1.387], [0.497,-1.348], [0.511,-1.314], [0.534,-1.275], [0.548,-1.241], [0.567,-1.205], [0.582,-1.181], [0.597,-1.158], [0.612,-1.134], [0.627,-1.111], [0.642,-1.087], [0.657,-1.064], [0.698,-1.038], [0.747,-1.012], [0.796,-0.986], [0.846,-0.959], [0.983,-0.897], [1.038,-0.858], [1.094,-0.827], [1.151,-0.809], [1.207,-0.791], [1.258,-0.786],  ],\n  'z' : [ [0.034,-0.752], [0.067,-0.708], [0.083,-0.685], [0.116,-0.639], [0.133,-0.615], [0.166,-0.569], [0.183,-0.546], [0.216,-0.500], [0.233,-0.476], [0.266,-0.430], [0.287,-0.395], [0.316,-0.353], [0.333,-0.327], [0.366,-0.285], [0.389,-0.251], [0.440,-0.191], [0.491,-0.123], [0.516,-0.083], [0.549,-0.047], [0.576,-0.030], [0.615,-0.036], [0.649,-0.059], [0.665,-0.083], [0.682,-0.106], [0.699,-0.129], [0.708,-0.191], [0.699,-0.245], [0.678,-0.319], [0.652,-0.386], [0.615,-0.453], [0.582,-0.500], [0.542,-0.574], [0.499,-0.639], [0.466,-0.685], [0.449,-0.708], [0.399,-0.777], [0.383,-0.801], [0.399,-0.777], [0.449,-0.708], [0.466,-0.685], [0.499,-0.639], [0.549,-0.639], [0.576,-0.667], [0.599,-0.708], [0.615,-0.731], [0.642,-0.769], [0.665,-0.824], [0.669,-0.847], [0.665,-0.870], [0.665,-0.916], [0.665,-0.963], [0.652,-1.084], [0.627,-1.169], [0.602,-1.243], [0.582,-1.287], [0.566,-1.310], [0.532,-1.380], [0.516,-1.403], [0.493,-1.432], [0.459,-1.495], [0.432,-1.519], [0.401,-1.534], [0.366,-1.519], [0.349,-1.495], [0.304,-1.441], [0.283,-1.403], [0.270,-1.356], [0.283,-1.310], [0.303,-1.267], [0.333,-1.218], [0.349,-1.194], [0.366,-1.171], [0.383,-1.148], [0.399,-1.125], [0.416,-1.102], [0.432,-1.079], [0.449,-1.055], [0.466,-1.032], [0.501,-1.002], [0.536,-0.965], [0.571,-0.931], [0.605,-0.897], [0.640,-0.871], [0.675,-0.846], [0.710,-0.829], [0.745,-0.812], [0.780,-0.803], [0.815,-0.791], [0.850,-0.786], [0.892,-0.778], [0.935,-0.778], [0.978,-0.786],  ],\n  'a*' : [ [0.068,-0.174], [0.136,-0.149], [0.204,-0.132], [0.272,-0.098], [0.340,-0.089], [0.432,-0.081], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.561,-0.718], [0.501,-0.773], [0.425,-0.801], [0.357,-0.820], [0.279,-0.801], [0.230,-0.754], [0.213,-0.731], [0.184,-0.681], [0.151,-0.616], [0.146,-0.557], [0.146,-0.500], [0.153,-0.455], [0.180,-0.395], [0.204,-0.353], [0.219,-0.319], [0.246,-0.276], [0.272,-0.234], [0.298,-0.191], [0.333,-0.157], [0.379,-0.132], [0.432,-0.081], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.678,-0.744], [0.729,-0.801], [0.781,-0.786], [0.850,-0.786],  ],\n  'b*' : [ [0.043,-0.157], [0.085,-0.166], [0.128,-0.157], [0.179,-0.157], [0.230,-0.162], [0.281,-0.157], [0.332,-0.140], [0.365,-0.115], [0.391,-0.064], [0.414,-0.004], [0.443,0.064], [0.472,0.140], [0.500,0.241], [0.529,0.320], [0.544,0.399], [0.546,0.510], [0.530,0.602], [0.487,0.674], [0.431,0.743], [0.390,0.750], [0.355,0.739], [0.324,0.724], [0.300,0.686], [0.281,0.627], [0.275,0.497], [0.274,0.368], [0.272,0.238], [0.270,0.108], [0.274,-0.022], [0.275,-0.152], [0.277,-0.282], [0.279,-0.412], [0.281,-0.542], [0.291,-0.672], [0.309,-0.718], [0.339,-0.771], [0.369,-0.786], [0.420,-0.786], [0.457,-0.782], [0.494,-0.764], [0.522,-0.746], [0.548,-0.688], [0.562,-0.634], [0.580,-0.573], [0.594,-0.514], [0.613,-0.446], [0.619,-0.377], [0.628,-0.293], [0.630,-0.200], [0.631,-0.112], [0.701,-0.140], [0.748,-0.157], [0.799,-0.149],  ],\n  'c*' : [ [0.085,-0.140], [0.175,-0.132], [0.243,-0.123], [0.311,-0.106], [0.367,-0.089], [0.413,-0.081], [0.456,-0.072], [0.500,-0.064], [0.566,-0.064], [0.617,-0.106], [0.651,-0.191], [0.617,-0.106], [0.566,-0.064], [0.500,-0.064], [0.456,-0.072], [0.413,-0.081], [0.367,-0.094], [0.331,-0.123], [0.300,-0.152], [0.267,-0.191], [0.243,-0.222], [0.217,-0.268], [0.170,-0.407], [0.170,-0.497], [0.173,-0.565], [0.191,-0.657], [0.217,-0.708], [0.234,-0.731], [0.251,-0.754], [0.277,-0.795], [0.326,-0.829], [0.417,-0.846], [0.532,-0.829], [0.609,-0.820], [0.668,-0.812], [0.736,-0.803], [0.821,-0.795], [0.906,-0.786],  ],\n  'd*' : [ [0.068,-0.157], [0.136,-0.166], [0.204,-0.157], [0.272,-0.140], [0.340,-0.123], [0.425,-0.123], [0.469,-0.089], [0.515,-0.072], [0.629,-0.043], [0.697,-0.036], [0.782,-0.036], [0.697,-0.036], [0.629,-0.043], [0.515,-0.072], [0.469,-0.089], [0.425,-0.123], [0.357,-0.191], [0.333,-0.242], [0.313,-0.319], [0.298,-0.395], [0.289,-0.455], [0.282,-0.500], [0.279,-0.557], [0.287,-0.616], [0.320,-0.681], [0.366,-0.754], [0.415,-0.801], [0.459,-0.810], [0.510,-0.808], [0.561,-0.801], [0.637,-0.773], [0.697,-0.718], [0.799,-0.650], [0.867,-0.639], [0.867,-0.592], [0.867,-0.489], [0.867,-0.404], [0.867,-0.293], [0.867,-0.149], [0.867,0.064], [0.867,0.234], [0.867,0.404], [0.867,0.574], [0.867,0.744], [0.867,0.574], [0.867,0.404], [0.867,0.234], [0.867,0.064], [0.867,-0.149], [0.867,-0.293], [0.867,-0.404], [0.867,-0.489], [0.867,-0.592], [0.867,-0.639], [0.875,-0.701], [0.899,-0.744], [0.950,-0.801], [1.002,-0.824], [1.068,-0.815], [1.122,-0.812], [1.190,-0.795], [1.275,-0.786],  ],\n  'e*' : [ [0.085,-0.149], [0.136,-0.162], [0.170,-0.174], [0.204,-0.191], [0.231,-0.208], [0.264,-0.242], [0.315,-0.276], [0.383,-0.327], [0.451,-0.344], [0.501,-0.336], [0.552,-0.268], [0.566,-0.229], [0.568,-0.191], [0.559,-0.160], [0.542,-0.106], [0.525,-0.072], [0.495,-0.047], [0.452,-0.030], [0.410,-0.021], [0.367,-0.030], [0.325,-0.047], [0.294,-0.072], [0.260,-0.106], [0.235,-0.149], [0.231,-0.208], [0.231,-0.268], [0.231,-0.327], [0.235,-0.404], [0.240,-0.446], [0.250,-0.497], [0.260,-0.548], [0.281,-0.616], [0.298,-0.667], [0.332,-0.701], [0.365,-0.735], [0.417,-0.761], [0.485,-0.769], [0.552,-0.778], [0.620,-0.786], [0.680,-0.786], [0.765,-0.786],  ],\n  'f*' : [ [0.043,-0.191], [0.076,-0.234], [0.111,-0.310], [0.145,-0.395], [0.179,-0.446], [0.213,-0.489], [0.247,-0.531], [0.281,-0.574], [0.321,-0.642], [0.374,-0.592], [0.425,-0.548], [0.451,-0.446], [0.468,-0.361], [0.485,-0.276], [0.501,-0.191], [0.518,-0.106], [0.535,-0.038], [0.552,0.047], [0.565,0.131], [0.582,0.212], [0.605,0.299], [0.619,0.402], [0.632,0.506], [0.614,0.607], [0.578,0.667], [0.535,0.680], [0.485,0.684], [0.425,0.671], [0.374,0.652], [0.329,0.619], [0.298,0.531], [0.294,0.428], [0.292,0.299], [0.294,0.169], [0.296,-0.000], [0.296,-0.172], [0.296,-0.276], [0.298,-0.385], [0.297,-0.489], [0.296,-0.598], [0.295,-0.710], [0.295,-0.829], [0.292,-0.931], [0.289,-1.041], [0.286,-1.126], [0.281,-1.254], [0.281,-1.356], [0.279,-1.466], [0.272,-1.602], [0.323,-1.602], [0.374,-1.601], [0.423,-1.594], [0.474,-1.551], [0.510,-1.509], [0.542,-1.466], [0.550,-1.381], [0.542,-1.296], [0.533,-1.211], [0.522,-1.126], [0.508,-1.041], [0.491,-0.956], [0.468,-0.888], [0.442,-0.846], [0.383,-0.752], [0.420,-0.769], [0.468,-0.803], [0.510,-0.829], [0.567,-0.812], [0.639,-0.803], [0.723,-0.795], [0.807,-0.786],  ],\n  'g*' : [ [0.068,-0.157], [0.136,-0.166], [0.204,-0.174], [0.272,-0.183], [0.340,-0.174], [0.391,-0.179], [0.448,-0.175], [0.480,-0.149], [0.525,-0.132], [0.576,-0.115], [0.627,-0.098], [0.678,-0.086], [0.730,-0.089], [0.748,-0.123], [0.745,-0.191], [0.741,-0.259], [0.738,-0.327], [0.734,-0.395], [0.731,-0.463], [0.728,-0.531], [0.724,-0.599], [0.721,-0.667], [0.717,-0.735], [0.663,-0.761], [0.610,-0.786], [0.525,-0.812], [0.457,-0.824], [0.374,-0.812], [0.304,-0.786], [0.247,-0.754], [0.202,-0.676], [0.181,-0.592], [0.177,-0.548], [0.197,-0.506], [0.231,-0.458], [0.247,-0.430], [0.281,-0.384], [0.314,-0.337], [0.347,-0.291], [0.374,-0.251], [0.406,-0.217], [0.448,-0.175], [0.480,-0.149], [0.525,-0.132], [0.576,-0.115], [0.627,-0.098], [0.678,-0.086], [0.730,-0.089], [0.748,-0.123], [0.745,-0.191], [0.741,-0.259], [0.738,-0.327], [0.734,-0.395], [0.731,-0.463], [0.728,-0.531], [0.724,-0.599], [0.721,-0.667], [0.717,-0.735], [0.714,-0.803], [0.711,-0.871], [0.707,-0.939], [0.704,-1.007], [0.700,-1.075], [0.697,-1.143], [0.694,-1.211], [0.690,-1.279], [0.687,-1.347], [0.683,-1.415], [0.680,-1.484], [0.677,-1.551], [0.673,-1.619], [0.612,-1.615], [0.544,-1.608], [0.493,-1.598], [0.442,-1.568], [0.391,-1.526], [0.340,-1.466], [0.306,-1.398], [0.289,-1.347], [0.272,-1.279], [0.281,-1.228], [0.306,-1.186], [0.347,-1.125], [0.377,-1.084], [0.414,-1.041], [0.474,-0.990], [0.542,-0.948], [0.593,-0.914], [0.647,-0.871], [0.720,-0.829], [0.796,-0.820], [0.884,-0.812], [0.969,-0.803], [1.054,-0.786],  ],\n  'h*' : [ [0.068,-0.174], [0.136,-0.200], [0.204,-0.217], [0.272,-0.225], [0.323,-0.217], [0.303,-0.276], [0.326,-0.242], [0.349,-0.200], [0.383,-0.155], [0.432,-0.083], [0.483,-0.038], [0.508,0.013], [0.549,0.064], [0.575,0.131], [0.602,0.202], [0.617,0.249], [0.641,0.297], [0.651,0.370], [0.660,0.438], [0.662,0.523], [0.651,0.616], [0.641,0.693], [0.599,0.742], [0.542,0.769], [0.483,0.769], [0.406,0.738], [0.355,0.702], [0.321,0.636], [0.295,0.511], [0.295,0.425], [0.295,0.339], [0.295,0.227], [0.295,0.114], [0.295,0.001], [0.295,-0.111], [0.295,-0.224], [0.295,-0.336], [0.295,-0.449], [0.295,-0.561], [0.295,-0.674], [0.295,-0.786], [0.299,-0.674], [0.302,-0.561], [0.329,-0.514], [0.368,-0.447], [0.392,-0.386], [0.420,-0.307], [0.447,-0.255], [0.475,-0.185], [0.507,-0.149], [0.564,-0.132], [0.625,-0.123], [0.678,-0.132], [0.743,-0.166], [0.767,-0.229], [0.760,-0.307], [0.755,-0.375], [0.748,-0.453], [0.748,-0.533], [0.761,-0.623], [0.786,-0.717], [0.845,-0.766], [0.920,-0.794], [1.005,-0.786],  ],\n  'i*' : [ [0.051,-0.166], [0.084,-0.167], [0.118,-0.160], [0.154,-0.143], [0.192,-0.084], [0.233,-0.026], [0.227,-0.136], [0.224,-0.195], [0.218,-0.280], [0.216,-0.365], [0.216,-0.425], [0.216,-0.501], [0.216,-0.544], [0.214,-0.629], [0.219,-0.706], [0.241,-0.759], [0.271,-0.806], [0.347,-0.827], [0.431,-0.803],  ],\n  'j*' : [ [0.034,-0.155], [0.061,-0.162], [0.095,-0.166], [0.129,-0.174], [0.163,-0.157], [0.197,-0.140], [0.231,-0.115], [0.265,-0.089], [0.299,-0.072], [0.316,-0.055], [0.333,-0.050], [0.357,-0.038], [0.383,-0.049], [0.383,-0.099], [0.383,-0.167], [0.383,-0.276], [0.383,-0.395], [0.383,-0.513], [0.383,-0.632], [0.383,-0.751], [0.383,-0.869], [0.383,-0.988], [0.383,-1.107], [0.383,-1.225], [0.383,-1.344], [0.368,-1.405], [0.349,-1.466], [0.326,-1.514], [0.296,-1.530], [0.255,-1.534], [0.218,-1.518], [0.196,-1.496], [0.172,-1.406], [0.162,-1.296], [0.159,-1.211], [0.173,-1.126], [0.196,-1.053], [0.218,-1.005], [0.241,-0.957], [0.263,-0.909], [0.286,-0.861], [0.301,-0.837], [0.328,-0.808], [0.356,-0.780], [0.384,-0.753], [0.408,-0.742], [0.439,-0.734], [0.473,-0.733], [0.509,-0.750], [0.552,-0.767], [0.595,-0.786],  ],\n  'k*' : [ [0.043,-0.166], [0.085,-0.191], [0.119,-0.208], [0.153,-0.251], [0.187,-0.276], [0.221,-0.276], [0.272,-0.259], [0.323,-0.234], [0.337,-0.305], [0.384,-0.226], [0.431,-0.147], [0.479,-0.069], [0.526,0.010], [0.555,0.056], [0.584,0.103], [0.605,0.149], [0.622,0.195], [0.659,0.261], [0.677,0.309], [0.695,0.356], [0.713,0.404], [0.732,0.451], [0.750,0.499], [0.765,0.565], [0.771,0.635], [0.737,0.676], [0.695,0.684], [0.654,0.684], [0.603,0.684], [0.552,0.676], [0.501,0.659], [0.451,0.612], [0.400,0.562], [0.357,0.466], [0.340,0.369], [0.340,0.273], [0.340,0.176], [0.340,0.079], [0.340,0.010], [0.340,-0.066], [0.340,-0.143], [0.340,-0.219], [0.340,-0.296], [0.340,-0.372], [0.340,-0.449], [0.340,-0.525], [0.340,-0.601], [0.340,-0.678], [0.340,-0.754], [0.340,-0.847], [0.340,-0.754], [0.340,-0.678], [0.340,-0.601], [0.340,-0.525], [0.340,-0.449], [0.354,-0.372], [0.397,-0.361], [0.465,-0.353], [0.533,-0.344], [0.618,-0.327], [0.686,-0.302], [0.754,-0.276], [0.797,-0.234], [0.822,-0.198], [0.812,-0.140], [0.788,-0.089], [0.758,-0.059], [0.720,-0.032], [0.652,-0.055], [0.601,-0.106], [0.516,-0.191], [0.465,-0.276], [0.431,-0.336], [0.383,-0.378], [0.414,-0.421], [0.455,-0.453], [0.489,-0.500], [0.522,-0.546], [0.554,-0.592], [0.577,-0.639], [0.591,-0.662], [0.622,-0.708], [0.655,-0.754], [0.688,-0.801], [0.729,-0.846], [0.771,-0.871], [0.814,-0.863], [0.856,-0.846], [0.899,-0.829], [0.941,-0.812], [0.971,-0.803], [1.011,-0.786], [1.065,-0.786], [1.105,-0.786],  ],\n  'l*' : [ [0.031,-0.157], [0.054,-0.174], [0.088,-0.191], [0.122,-0.234], [0.156,-0.276], [0.207,-0.302], [0.241,-0.319], [0.284,-0.327], [0.306,-0.332], [0.340,-0.286], [0.377,-0.238], [0.403,-0.191], [0.435,-0.115], [0.459,-0.055], [0.483,0.013], [0.501,0.056], [0.510,0.095], [0.524,0.140], [0.534,0.190], [0.548,0.237], [0.554,0.284], [0.566,0.351], [0.578,0.404], [0.585,0.480], [0.594,0.566], [0.595,0.613], [0.585,0.682], [0.550,0.734], [0.515,0.771], [0.480,0.782], [0.451,0.786], [0.400,0.781], [0.347,0.767], [0.324,0.719], [0.315,0.672], [0.308,0.632], [0.304,0.574], [0.304,0.488], [0.304,0.401], [0.304,0.314], [0.304,0.227], [0.304,0.141], [0.304,0.054], [0.304,-0.033], [0.304,-0.119], [0.303,-0.206], [0.303,-0.293], [0.303,-0.380], [0.303,-0.466], [0.303,-0.553], [0.303,-0.640], [0.311,-0.702], [0.343,-0.752], [0.383,-0.778], [0.434,-0.784], [0.483,-0.807], [0.538,-0.821], [0.603,-0.803], [0.677,-0.795], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  'm*' : [ [0.034,-0.149], [0.085,-0.140], [0.136,-0.140], [0.187,-0.132], [0.238,-0.123], [0.272,-0.106], [0.315,-0.072], [0.349,-0.055], [0.394,-0.059], [0.410,-0.083], [0.414,-0.103], [0.419,-0.154], [0.424,-0.205], [0.430,-0.256], [0.435,-0.307], [0.440,-0.358], [0.431,-0.402], [0.421,-0.447], [0.411,-0.491], [0.402,-0.535], [0.392,-0.579], [0.382,-0.624], [0.373,-0.668], [0.363,-0.712], [0.353,-0.756], [0.344,-0.801], [0.353,-0.756], [0.363,-0.712], [0.373,-0.668], [0.382,-0.624], [0.392,-0.579], [0.402,-0.535], [0.411,-0.491], [0.421,-0.447], [0.431,-0.402], [0.440,-0.358], [0.460,-0.314], [0.488,-0.276], [0.510,-0.245], [0.527,-0.222], [0.543,-0.198], [0.560,-0.175], [0.577,-0.152], [0.593,-0.129], [0.627,-0.089], [0.661,-0.064], [0.711,-0.044], [0.760,-0.036], [0.776,-0.059], [0.793,-0.083], [0.810,-0.106], [0.820,-0.143], [0.830,-0.180], [0.840,-0.217], [0.850,-0.254], [0.859,-0.291], [0.848,-0.340], [0.836,-0.388], [0.825,-0.437], [0.813,-0.486], [0.801,-0.534], [0.790,-0.583], [0.778,-0.632], [0.766,-0.680], [0.755,-0.729], [0.754,-0.777], [0.755,-0.729], [0.766,-0.680], [0.778,-0.632], [0.790,-0.583], [0.801,-0.534], [0.813,-0.486], [0.825,-0.437], [0.836,-0.388], [0.848,-0.340], [0.859,-0.291], [0.876,-0.268], [0.901,-0.234], [0.926,-0.198], [0.943,-0.175], [0.961,-0.140], [0.993,-0.106], [1.009,-0.083], [1.035,-0.059], [1.103,-0.038], [1.176,-0.059], [1.209,-0.106], [1.225,-0.129], [1.242,-0.175], [1.234,-0.224], [1.225,-0.272], [1.217,-0.320], [1.209,-0.369], [1.200,-0.417], [1.192,-0.466], [1.184,-0.514], [1.176,-0.562], [1.167,-0.611], [1.159,-0.659], [1.159,-0.708], [1.192,-0.754], [1.209,-0.777], [1.241,-0.803], [1.325,-0.812], [1.375,-0.812], [1.422,-0.803], [1.475,-0.799], [1.564,-0.795], [1.649,-0.786],  ],\n  'n*' : [ [0.051,-0.132], [0.102,-0.115], [0.153,-0.098], [0.204,-0.047], [0.238,-0.004], [0.264,0.021], [0.291,0.038], [0.332,0.064], [0.374,0.038], [0.400,-0.013], [0.414,-0.059], [0.423,-0.106], [0.431,-0.149], [0.435,-0.198], [0.430,-0.254], [0.430,-0.310], [0.430,-0.365], [0.430,-0.421], [0.430,-0.476], [0.430,-0.532], [0.430,-0.588], [0.430,-0.643], [0.430,-0.699], [0.430,-0.754], [0.430,-0.699], [0.430,-0.643], [0.430,-0.588], [0.430,-0.532], [0.430,-0.476], [0.430,-0.421], [0.430,-0.365], [0.430,-0.310], [0.430,-0.254], [0.459,-0.242], [0.485,-0.217], [0.508,-0.198], [0.525,-0.175], [0.542,-0.152], [0.558,-0.129], [0.587,-0.098], [0.620,-0.059], [0.656,-0.013], [0.691,0.010], [0.741,0.010], [0.774,-0.013], [0.791,-0.036], [0.808,-0.059], [0.816,-0.106], [0.825,-0.149], [0.825,-0.234], [0.825,-0.293], [0.825,-0.361], [0.825,-0.421], [0.825,-0.480], [0.825,-0.523], [0.825,-0.574], [0.825,-0.616], [0.825,-0.662], [0.825,-0.708], [0.833,-0.761], [0.865,-0.812], [0.924,-0.820], [0.967,-0.812], [1.024,-0.786], [1.088,-0.786],  ],\n  'o*' : [ [0.051,-0.170], [0.102,-0.174], [0.153,-0.166], [0.204,-0.157], [0.255,-0.149], [0.306,-0.140], [0.346,-0.152], [0.363,-0.129], [0.380,-0.106], [0.396,-0.083], [0.431,-0.072], [0.474,-0.055], [0.533,-0.055], [0.576,-0.072], [0.596,-0.083], [0.618,-0.106], [0.634,-0.123], [0.646,-0.149], [0.663,-0.175], [0.669,-0.224], [0.668,-0.272], [0.673,-0.320], [0.671,-0.368], [0.665,-0.417], [0.660,-0.465], [0.651,-0.513], [0.637,-0.562], [0.620,-0.610], [0.603,-0.658], [0.592,-0.701], [0.570,-0.752], [0.544,-0.795], [0.501,-0.829], [0.459,-0.846], [0.408,-0.854], [0.346,-0.842], [0.321,-0.820], [0.296,-0.791], [0.263,-0.754], [0.247,-0.731], [0.230,-0.708], [0.213,-0.685], [0.202,-0.659], [0.185,-0.616], [0.168,-0.574], [0.156,-0.531], [0.163,-0.480], [0.187,-0.430], [0.205,-0.395], [0.216,-0.361], [0.238,-0.319], [0.263,-0.268], [0.280,-0.245], [0.295,-0.222], [0.321,-0.183], [0.346,-0.152], [0.363,-0.129], [0.380,-0.106], [0.396,-0.083], [0.431,-0.072], [0.473,-0.106], [0.493,-0.149], [0.518,-0.183], [0.544,-0.200], [0.578,-0.217], [0.612,-0.225], [0.646,-0.225], [0.680,-0.225], [0.714,-0.225], [0.748,-0.221], [0.782,-0.217], [0.816,-0.208], [0.850,-0.191], [0.884,-0.174], [0.918,-0.149],  ],\n  'p*' : [ [0.043,-0.153], [0.085,-0.157], [0.136,-0.157], [0.187,-0.157], [0.238,-0.140], [0.279,-0.136], [0.287,-0.215], [0.285,-0.323], [0.283,-0.431], [0.282,-0.539], [0.280,-0.646], [0.278,-0.754], [0.276,-0.862], [0.274,-0.970], [0.272,-1.078], [0.270,-1.186], [0.268,-1.294], [0.267,-1.402], [0.265,-1.510], [0.267,-1.402], [0.268,-1.294], [0.270,-1.186], [0.272,-1.078], [0.274,-0.970], [0.276,-0.862], [0.278,-0.754], [0.280,-0.646], [0.282,-0.539], [0.283,-0.431], [0.285,-0.323], [0.287,-0.215], [0.289,-0.107], [0.279,-0.136], [0.322,-0.091], [0.353,-0.048], [0.393,-0.020], [0.425,-0.002], [0.449,0.007], [0.479,0.017], [0.525,0.010], [0.577,-0.011], [0.624,-0.077], [0.637,-0.104], [0.668,-0.170], [0.686,-0.282], [0.686,-0.357], [0.689,-0.469], [0.675,-0.538], [0.663,-0.616], [0.641,-0.654], [0.606,-0.694], [0.566,-0.714], [0.504,-0.754], [0.446,-0.747], [0.391,-0.744], [0.340,-0.727], [0.391,-0.744], [0.446,-0.747], [0.504,-0.754], [0.540,-0.748], [0.593,-0.763], [0.678,-0.777], [0.729,-0.783], [0.793,-0.803], [0.850,-0.803], [0.911,-0.795], [0.969,-0.786],  ],\n  'q*' : [ [0.051,-0.153], [0.102,-0.157], [0.153,-0.162], [0.204,-0.166], [0.255,-0.183], [0.306,-0.200], [0.357,-0.191], [0.408,-0.183], [0.459,-0.166], [0.514,-0.149], [0.559,-0.132], [0.610,-0.115], [0.661,-0.098], [0.712,-0.086], [0.764,-0.089], [0.782,-0.123], [0.779,-0.191], [0.775,-0.259], [0.772,-0.327], [0.768,-0.395], [0.765,-0.463], [0.762,-0.531], [0.758,-0.599], [0.755,-0.667], [0.751,-0.735], [0.697,-0.761], [0.644,-0.786], [0.559,-0.812], [0.491,-0.824], [0.408,-0.812], [0.338,-0.786], [0.281,-0.754], [0.236,-0.676], [0.215,-0.592], [0.207,-0.548], [0.231,-0.506], [0.265,-0.458], [0.281,-0.430], [0.315,-0.384], [0.348,-0.337], [0.381,-0.291], [0.408,-0.251], [0.440,-0.217], [0.482,-0.175], [0.514,-0.149], [0.559,-0.132], [0.610,-0.115], [0.661,-0.098], [0.712,-0.086], [0.764,-0.089], [0.782,-0.123], [0.779,-0.191], [0.775,-0.259], [0.772,-0.327], [0.768,-0.395], [0.765,-0.463], [0.762,-0.531], [0.758,-0.599], [0.755,-0.667], [0.751,-0.735], [0.748,-0.803], [0.745,-0.871], [0.741,-0.939], [0.738,-1.007], [0.734,-1.075], [0.731,-1.143], [0.728,-1.211], [0.724,-1.279], [0.721,-1.347], [0.717,-1.415], [0.714,-1.484], [0.711,-1.551], [0.707,-1.619], [0.748,-1.615], [0.799,-1.608], [0.833,-1.598], [0.867,-1.568], [0.901,-1.526], [0.935,-1.466], [0.969,-1.398], [0.986,-1.347], [0.995,-1.279], [0.986,-1.228], [0.969,-1.186], [0.935,-1.125], [0.901,-1.084], [0.867,-1.041], [0.833,-0.990], [0.799,-0.948], [0.782,-0.914], [0.782,-0.854], [0.830,-0.829], [0.884,-0.812], [0.935,-0.803], [0.986,-0.799], [1.020,-0.795], [1.105,-0.791], [1.207,-0.786],  ],\n  'r*' : [ [0.085,-0.174], [0.170,-0.183], [0.170,-0.064], [0.255,-0.064], [0.340,-0.064], [0.425,-0.064], [0.510,-0.064], [0.510,-0.149], [0.501,-0.234], [0.493,-0.319], [0.476,-0.404], [0.459,-0.489], [0.451,-0.574], [0.476,-0.659], [0.510,-0.701], [0.578,-0.744], [0.663,-0.769], [0.765,-0.786],  ],\n  's*' : [ [0.085,-0.149], [0.170,-0.157], [0.221,-0.174], [0.272,-0.200], [0.323,-0.234], [0.374,-0.234], [0.425,-0.225], [0.476,-0.217], [0.527,-0.200], [0.561,-0.191], [0.603,-0.166], [0.663,-0.145], [0.748,-0.119], [0.819,-0.106], [0.820,-0.174], [0.830,-0.222], [0.842,-0.289], [0.855,-0.353], [0.867,-0.402], [0.867,-0.446], [0.867,-0.490], [0.859,-0.534], [0.850,-0.578], [0.842,-0.622], [0.825,-0.666], [0.782,-0.710], [0.657,-0.769], [0.611,-0.757], [0.547,-0.735], [0.497,-0.684], [0.447,-0.616], [0.397,-0.531], [0.354,-0.446], [0.332,-0.361], [0.323,-0.276], [0.332,-0.361], [0.354,-0.446], [0.397,-0.531], [0.447,-0.616], [0.497,-0.684], [0.547,-0.735], [0.611,-0.757], [0.657,-0.769], [0.700,-0.786], [0.742,-0.795], [0.785,-0.803], [0.850,-0.812], [0.935,-0.803], [1.020,-0.795], [1.105,-0.786],  ],\n  't*' : [ [0.085,-0.191], [0.170,-0.234], [0.255,-0.276], [0.340,-0.259], [0.425,-0.191], [0.510,-0.106], [0.558,0.008], [0.573,0.161], [0.588,0.314], [0.552,0.314], [0.522,0.314], [0.467,0.314], [0.411,0.314], [0.340,0.314], [0.255,0.314], [0.170,0.314], [0.255,0.314], [0.340,0.314], [0.411,0.314], [0.467,0.314], [0.522,0.314], [0.552,0.314], [0.633,0.314], [0.688,0.314], [0.729,0.314], [0.784,0.314], [0.840,0.314], [0.895,0.314], [0.978,0.314], [1.062,0.314], [0.978,0.314], [0.895,0.314], [0.840,0.314], [0.784,0.314], [0.729,0.314], [0.688,0.314], [0.633,0.314], [0.588,0.314], [0.602,0.467], [0.617,0.621], [0.632,0.774], [0.632,0.621], [0.632,0.467], [0.632,0.314], [0.632,0.161], [0.632,0.008], [0.632,-0.146], [0.632,-0.299], [0.632,-0.452], [0.632,-0.605], [0.632,-0.759], [0.659,-0.805], [0.720,-0.816], [0.807,-0.799], [0.894,-0.791], [0.978,-0.786], [1.062,-0.786], [1.147,-0.786], [1.232,-0.786],  ],\n  'u*' : [ [0.043,-0.157], [0.085,-0.166], [0.128,-0.157], [0.162,-0.157], [0.196,-0.140], [0.230,-0.106], [0.272,-0.081], [0.306,-0.055], [0.344,-0.048], [0.338,-0.097], [0.332,-0.146], [0.325,-0.195], [0.319,-0.245], [0.312,-0.294], [0.306,-0.343], [0.299,-0.392], [0.293,-0.442], [0.286,-0.491], [0.280,-0.540], [0.273,-0.589], [0.267,-0.639], [0.260,-0.688], [0.254,-0.737], [0.260,-0.786], [0.289,-0.803], [0.332,-0.812], [0.383,-0.803], [0.425,-0.795], [0.461,-0.778], [0.501,-0.761], [0.544,-0.744], [0.583,-0.727], [0.616,-0.710], [0.646,-0.684], [0.671,-0.650], [0.682,-0.605], [0.686,-0.558], [0.689,-0.511], [0.693,-0.464], [0.697,-0.416], [0.700,-0.369], [0.704,-0.322], [0.708,-0.275], [0.711,-0.228], [0.715,-0.180], [0.719,-0.133], [0.723,-0.074], [0.726,-0.023], [0.723,-0.074], [0.719,-0.133], [0.715,-0.180], [0.711,-0.228], [0.708,-0.275], [0.704,-0.322], [0.700,-0.369], [0.697,-0.416], [0.693,-0.464], [0.712,-0.529], [0.719,-0.582], [0.731,-0.633], [0.748,-0.684], [0.756,-0.735], [0.790,-0.786], [0.845,-0.803], [0.901,-0.803], [0.944,-0.795], [1.020,-0.786],  ],\n  'v*' : [ [0.051,-0.157], [0.102,-0.140], [0.136,-0.123], [0.162,-0.098], [0.187,-0.081], [0.211,-0.055], [0.243,-0.054], [0.268,-0.076], [0.289,-0.097], [0.301,-0.134], [0.311,-0.176], [0.321,-0.212], [0.322,-0.244], [0.318,-0.280], [0.316,-0.321], [0.314,-0.363], [0.311,-0.404], [0.309,-0.446], [0.306,-0.487], [0.304,-0.528], [0.301,-0.570], [0.299,-0.611], [0.306,-0.657], [0.322,-0.707], [0.338,-0.749], [0.367,-0.790], [0.406,-0.814], [0.448,-0.793], [0.487,-0.766], [0.502,-0.723], [0.516,-0.680], [0.531,-0.637], [0.546,-0.594], [0.550,-0.547], [0.566,-0.502], [0.572,-0.450], [0.582,-0.408], [0.593,-0.331], [0.604,-0.255], [0.616,-0.179], [0.627,-0.102], [0.699,-0.110], [0.773,-0.130], [0.828,-0.143], [0.871,-0.149],  ],\n  'w*' : [ [0.051,-0.128], [0.102,-0.115], [0.153,-0.081], [0.187,-0.064], [0.225,-0.041], [0.220,-0.126], [0.216,-0.210], [0.212,-0.294], [0.207,-0.379], [0.203,-0.463], [0.206,-0.517], [0.215,-0.602], [0.223,-0.670], [0.254,-0.738], [0.297,-0.783], [0.359,-0.799], [0.429,-0.776], [0.453,-0.728], [0.476,-0.680], [0.500,-0.632], [0.519,-0.585], [0.537,-0.537], [0.553,-0.490], [0.568,-0.442], [0.575,-0.358], [0.583,-0.274], [0.590,-0.190], [0.598,-0.105], [0.605,-0.064], [0.617,-0.120], [0.629,-0.219], [0.641,-0.317], [0.653,-0.416], [0.665,-0.515], [0.676,-0.614], [0.688,-0.712], [0.731,-0.780], [0.775,-0.786], [0.816,-0.775], [0.852,-0.723], [0.878,-0.682], [0.901,-0.634], [0.925,-0.587], [0.937,-0.530], [0.949,-0.448], [0.955,-0.403], [0.965,-0.314], [0.976,-0.224], [0.986,-0.135], [0.997,-0.064], [1.052,-0.072], [1.108,-0.089], [1.162,-0.106], [1.220,-0.149],  ],\n  'x*' : [ [0.043,-0.106], [0.085,-0.064], [0.128,-0.004], [0.196,0.021], [0.232,-0.046], [0.269,-0.114], [0.306,-0.181], [0.343,-0.248], [0.380,-0.315], [0.417,-0.383], [0.445,-0.429], [0.430,-0.452], [0.388,-0.506], [0.346,-0.560], [0.304,-0.614], [0.262,-0.667], [0.220,-0.721], [0.170,-0.786], [0.220,-0.721], [0.262,-0.667], [0.304,-0.614], [0.346,-0.560], [0.388,-0.506], [0.430,-0.452], [0.471,-0.398], [0.522,-0.337], [0.555,-0.291], [0.597,-0.237], [0.639,-0.183], [0.681,-0.129], [0.723,-0.075], [0.765,-0.021], [0.799,0.021], [0.765,-0.021], [0.723,-0.075], [0.681,-0.129], [0.639,-0.183], [0.597,-0.237], [0.555,-0.291], [0.522,-0.337], [0.471,-0.398], [0.445,-0.429], [0.491,-0.517], [0.528,-0.585], [0.565,-0.652], [0.602,-0.719], [0.639,-0.786], [0.680,-0.824], [0.718,-0.830], [0.763,-0.846], [0.799,-0.842], [0.834,-0.837], [0.863,-0.820], [0.901,-0.808], [0.935,-0.795], [0.986,-0.786],  ],\n  'y*' : [ [0.043,-0.157], [0.085,-0.166], [0.128,-0.157], [0.162,-0.157], [0.196,-0.149], [0.230,-0.140], [0.264,-0.123], [0.306,-0.123], [0.340,-0.123], [0.379,-0.138], [0.397,-0.161], [0.405,-0.198], [0.399,-0.241], [0.394,-0.279], [0.378,-0.358], [0.363,-0.437], [0.347,-0.515], [0.332,-0.594], [0.317,-0.672], [0.315,-0.735], [0.325,-0.788], [0.343,-0.811], [0.361,-0.834], [0.379,-0.857], [0.402,-0.878], [0.428,-0.895], [0.462,-0.902], [0.496,-0.902], [0.566,-0.893], [0.632,-0.857], [0.663,-0.823], [0.737,-0.745], [0.743,-0.674], [0.750,-0.603], [0.757,-0.533], [0.764,-0.462], [0.771,-0.391], [0.778,-0.320], [0.785,-0.249], [0.791,-0.179], [0.799,-0.132], [0.791,-0.179], [0.785,-0.249], [0.778,-0.320], [0.771,-0.391], [0.764,-0.462], [0.757,-0.533], [0.750,-0.603], [0.743,-0.674], [0.737,-0.745], [0.730,-0.816], [0.723,-0.887], [0.716,-0.957], [0.709,-1.028], [0.702,-1.099], [0.695,-1.170], [0.689,-1.241], [0.682,-1.311], [0.675,-1.382], [0.668,-1.453], [0.661,-1.524], [0.631,-1.571], [0.580,-1.584], [0.513,-1.593], [0.446,-1.601], [0.383,-1.593], [0.336,-1.576], [0.318,-1.553], [0.300,-1.530], [0.281,-1.507], [0.265,-1.476], [0.260,-1.438], [0.267,-1.387], [0.291,-1.348], [0.304,-1.314], [0.327,-1.275], [0.342,-1.241], [0.360,-1.205], [0.375,-1.181], [0.390,-1.158], [0.405,-1.134], [0.420,-1.111], [0.435,-1.087], [0.450,-1.064], [0.491,-1.038], [0.541,-1.012], [0.590,-0.986], [0.639,-0.959], [0.777,-0.897], [0.832,-0.858], [0.888,-0.827], [0.944,-0.809], [1.001,-0.791], [1.052,-0.786],  ],\n  'z*' : [ [0.043,-0.157], [0.085,-0.166], [0.136,-0.174], [0.187,-0.174], [0.238,-0.174], [0.289,-0.174], [0.340,-0.157], [0.374,-0.140], [0.406,-0.115], [0.431,-0.083], [0.464,-0.047], [0.491,-0.030], [0.530,-0.036], [0.564,-0.059], [0.595,-0.083], [0.612,-0.106], [0.629,-0.149], [0.623,-0.191], [0.614,-0.245], [0.593,-0.319], [0.567,-0.386], [0.530,-0.453], [0.497,-0.500], [0.457,-0.574], [0.414,-0.639], [0.381,-0.685], [0.364,-0.708], [0.314,-0.777], [0.298,-0.801], [0.314,-0.777], [0.364,-0.708], [0.381,-0.685], [0.414,-0.639], [0.464,-0.639], [0.491,-0.667], [0.514,-0.708], [0.530,-0.731], [0.557,-0.769], [0.580,-0.824], [0.584,-0.847], [0.580,-0.870], [0.580,-0.916], [0.580,-0.963], [0.567,-1.084], [0.542,-1.169], [0.517,-1.243], [0.497,-1.287], [0.481,-1.310], [0.447,-1.380], [0.431,-1.403], [0.408,-1.432], [0.374,-1.495], [0.347,-1.519], [0.316,-1.534], [0.281,-1.519], [0.264,-1.495], [0.219,-1.441], [0.198,-1.403], [0.185,-1.356], [0.198,-1.310], [0.218,-1.267], [0.248,-1.218], [0.264,-1.194], [0.281,-1.171], [0.298,-1.148], [0.314,-1.125], [0.331,-1.102], [0.347,-1.079], [0.364,-1.055], [0.381,-1.032], [0.416,-1.002], [0.451,-0.965], [0.486,-0.931], [0.520,-0.897], [0.555,-0.871], [0.590,-0.846], [0.625,-0.829], [0.660,-0.812], [0.695,-0.803], [0.730,-0.791], [0.765,-0.786], [0.816,-0.778], [0.867,-0.778], [0.918,-0.786],  ],\n  ',' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.357,-0.701], [0.391,-0.616], [0.459,-0.701], [0.476,-0.786], [0.493,-0.871], [0.493,-0.956], [0.459,-1.041], [0.425,-1.126], [0.357,-1.211], [0.255,-1.296], [0.357,-1.211], [0.425,-1.126], [0.459,-1.041], [0.493,-0.956], [0.493,-0.871], [0.476,-0.786], [0.459,-0.701], [0.391,-0.616], [0.459,-0.701], [0.476,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786],  ],\n  '?' : [ [0.085,-0.786], [0.170,-0.786], [0.272,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.786], [0.425,-0.701], [0.425,-0.616], [0.425,-0.531], [0.425,-0.446], [0.425,-0.361], [0.425,-0.276], [0.425,-0.191], [0.425,-0.064], [0.527,-0.038], [0.586,-0.021], [0.640,0.004], [0.697,0.080], [0.734,0.149], [0.749,0.252], [0.748,0.387], [0.741,0.516], [0.726,0.600], [0.712,0.659], [0.672,0.740], [0.641,0.777], [0.586,0.786], [0.537,0.794], [0.485,0.786], [0.412,0.744], [0.340,0.701], [0.213,0.616], [0.340,0.701], [0.412,0.744], [0.485,0.786], [0.537,0.794], [0.586,0.786], [0.641,0.777], [0.672,0.740], [0.712,0.659], [0.726,0.600], [0.741,0.516], [0.748,0.387], [0.749,0.252], [0.734,0.149], [0.697,0.080], [0.640,0.004], [0.586,-0.021], [0.527,-0.038], [0.425,-0.064], [0.425,-0.191], [0.425,-0.276], [0.425,-0.361], [0.425,-0.446], [0.425,-0.531], [0.425,-0.616], [0.425,-0.701], [0.425,-0.786], [0.612,-0.786], [0.561,-0.659], [0.425,-0.574], [0.289,-0.659], [0.238,-0.786], [0.289,-0.914], [0.425,-0.999], [0.561,-0.914], [0.612,-0.786], [0.425,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '&' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.786], [0.344,-0.778], [0.425,-0.774], [0.501,-0.774], [0.630,-0.761], [0.731,-0.748], [0.816,-0.684], [0.901,-0.574], [0.969,-0.506], [1.020,-0.440], [1.105,-0.319], [1.207,-0.191], [1.105,-0.319], [1.020,-0.440], [0.969,-0.506], [0.901,-0.574], [0.816,-0.684], [0.731,-0.748], [0.630,-0.761], [0.501,-0.774], [0.425,-0.774], [0.344,-0.778], [0.298,-0.718], [0.272,-0.676], [0.255,-0.599], [0.247,-0.497], [0.255,-0.327], [0.306,-0.191], [0.408,-0.064], [0.493,0.004], [0.544,0.047], [0.663,0.089], [0.756,0.154], [0.799,0.234], [0.842,0.335], [0.875,0.429], [0.885,0.520], [0.888,0.614], [0.871,0.690], [0.837,0.749], [0.790,0.777], [0.706,0.786], [0.637,0.786], [0.570,0.777], [0.499,0.760], [0.464,0.734], [0.440,0.681], [0.429,0.605], [0.422,0.548], [0.424,0.463], [0.432,0.404], [0.459,0.306], [0.501,0.174], [0.578,0.064], [0.646,-0.106], [0.714,-0.276], [0.765,-0.446], [0.816,-0.616], [0.867,-0.786], [0.935,-0.829], [1.020,-0.829], [1.097,-0.803], [1.191,-0.786], [1.290,-0.786], [1.385,-0.786], [1.462,-0.786],  ],\n  '$' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-1.041], [0.510,-0.786], [0.510,-0.531], [0.510,-0.276], [0.510,-0.021], [0.510,0.234], [0.510,0.489], [0.510,0.829], [0.544,0.829], [0.544,0.489], [0.544,0.234], [0.544,-0.021], [0.544,-0.276], [0.544,-0.531], [0.544,-0.786], [0.544,-1.041], [0.544,-0.786], [0.652,-0.786], [0.729,-0.778], [0.790,-0.733], [0.829,-0.664], [0.887,-0.560], [0.912,-0.429], [0.904,-0.334], [0.880,-0.267], [0.831,-0.191], [0.774,-0.140], [0.708,-0.140], [0.629,-0.140], [0.544,-0.140], [0.475,-0.140], [0.408,-0.132], [0.340,-0.098], [0.306,-0.072], [0.272,-0.030], [0.221,0.038], [0.187,0.115], [0.170,0.242], [0.187,0.341], [0.238,0.440], [0.289,0.497], [0.349,0.530], [0.425,0.548], [0.510,0.548], [0.592,0.548], [0.680,0.548], [0.765,0.548], [0.850,0.548], [0.765,0.548], [0.680,0.548], [0.592,0.548], [0.510,0.548], [0.425,0.548], [0.349,0.530], [0.289,0.497], [0.238,0.440], [0.187,0.341], [0.170,0.242], [0.187,0.115], [0.221,0.038], [0.272,-0.030], [0.306,-0.072], [0.340,-0.098], [0.408,-0.132], [0.475,-0.140], [0.544,-0.140], [0.629,-0.140], [0.708,-0.140], [0.774,-0.140], [0.831,-0.191], [0.880,-0.267], [0.904,-0.334], [0.912,-0.429], [0.887,-0.560], [0.829,-0.664], [0.790,-0.733], [0.729,-0.778], [0.652,-0.786], [0.510,-0.786], [0.425,-0.786], [0.340,-0.786], [0.255,-0.786], [0.170,-0.786], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '!' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.531], [0.510,-0.276], [0.510,-0.021], [0.510,0.234], [0.510,0.489], [0.510,0.786], [0.510,0.489], [0.510,0.234], [0.510,-0.021], [0.510,-0.276], [0.510,-0.531], [0.510,-0.786], [0.697,-0.786], [0.646,-0.659], [0.510,-0.574], [0.374,-0.659], [0.323,-0.786], [0.374,-0.914], [0.510,-0.999], [0.646,-0.914], [0.697,-0.786], [0.510,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n}\n","export let raysol_sanserif = {\n  ' ' : [ [0.000,-0.786], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '0' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.544,-0.691], [0.629,-0.595], [0.680,-0.500], [0.723,-0.404], [0.765,-0.308], [0.799,-0.213], [0.833,-0.117], [0.840,-0.009], [0.833,0.117], [0.799,0.212], [0.765,0.308], [0.723,0.404], [0.680,0.499], [0.629,0.595], [0.544,0.690], [0.425,0.786], [0.306,0.690], [0.221,0.595], [0.170,0.499], [0.128,0.404], [0.085,0.308], [0.051,0.212], [0.017,0.117], [0.010,-0.009], [0.017,-0.117], [0.051,-0.213], [0.085,-0.308], [0.128,-0.404], [0.170,-0.500], [0.221,-0.595], [0.306,-0.691], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  '1' : [ [0.085,-0.786], [0.085,-0.629], [0.085,-0.472], [0.085,-0.315], [0.085,-0.157], [0.085,-0.000], [0.085,0.157], [0.085,0.314], [0.085,0.472], [0.085,0.629], [0.085,0.786], [0.085,0.629], [0.085,0.472], [0.085,0.314], [0.085,0.157], [0.085,-0.000], [0.085,-0.157], [0.085,-0.315], [0.085,-0.472], [0.085,-0.629], [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  '2' : [ [0.085,-0.786], [0.170,-0.786], [0.085,-0.786], [0.177,-0.599], [0.269,-0.412], [0.360,-0.225], [0.452,-0.038], [0.544,0.149], [0.612,0.276], [0.654,0.404], [0.663,0.531], [0.637,0.616], [0.587,0.701], [0.527,0.752], [0.451,0.782], [0.383,0.786], [0.315,0.782], [0.238,0.752], [0.179,0.701], [0.128,0.616], [0.085,0.531], [0.128,0.616], [0.179,0.701], [0.238,0.752], [0.315,0.782], [0.383,0.786], [0.451,0.782], [0.527,0.752], [0.587,0.701], [0.637,0.616], [0.663,0.531], [0.654,0.404], [0.612,0.276], [0.544,0.149], [0.452,-0.038], [0.360,-0.225], [0.269,-0.412], [0.177,-0.599], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.765,-0.786], [0.850,-0.574], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  '3' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.786], [0.408,-0.782], [0.485,-0.752], [0.544,-0.701], [0.595,-0.616], [0.620,-0.531], [0.612,-0.404], [0.570,-0.276], [0.476,-0.149], [0.340,0.064], [0.255,0.064], [0.340,0.064], [0.501,0.149], [0.570,0.276], [0.612,0.404], [0.620,0.531], [0.595,0.616], [0.544,0.701], [0.485,0.752], [0.408,0.782], [0.340,0.786], [0.272,0.782], [0.196,0.752], [0.136,0.701], [0.085,0.616], [0.043,0.531], [0.085,0.616], [0.136,0.701], [0.196,0.752], [0.272,0.782], [0.340,0.786], [0.408,0.782], [0.485,0.752], [0.544,0.701], [0.595,0.616], [0.620,0.531], [0.612,0.404], [0.570,0.276], [0.501,0.149], [0.340,0.064], [0.255,0.064], [0.340,0.064], [0.476,-0.149], [0.570,-0.276], [0.612,-0.404], [0.620,-0.531], [0.595,-0.616], [0.544,-0.701], [0.485,-0.752], [0.408,-0.782], [0.340,-0.786], [0.272,-0.782], [0.196,-0.752], [0.136,-0.701], [0.085,-0.616], [0.043,-0.531], [0.000,-0.438], [0.043,-0.531], [0.085,-0.616], [0.136,-0.701], [0.196,-0.752], [0.272,-0.782], [0.340,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '4' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.595,-0.616], [0.595,-0.446], [0.595,-0.276], [0.595,-0.106], [0.595,-0.000], [0.510,-0.000], [0.425,-0.000], [0.340,-0.000], [0.255,-0.000], [0.170,-0.000], [0.068,-0.000], [0.085,0.064], [0.085,0.234], [0.085,0.404], [0.085,0.574], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.574], [0.085,0.404], [0.085,0.234], [0.085,0.064], [0.085,-0.000], [0.170,-0.000], [0.255,-0.000], [0.340,-0.000], [0.425,-0.000], [0.510,-0.000], [0.595,-0.000], [0.680,-0.000], [0.807,-0.000], [0.935,-0.000], [0.807,-0.000], [0.680,-0.000], [0.595,-0.000], [0.595,0.064], [0.595,0.234], [0.595,0.404], [0.595,0.574], [0.595,0.744], [0.595,0.786], [0.595,0.744], [0.595,0.574], [0.595,0.404], [0.595,0.234], [0.595,0.064], [0.595,-0.000], [0.595,-0.106], [0.595,-0.276], [0.595,-0.446], [0.595,-0.616], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  '5' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.744], [0.493,-0.740], [0.570,-0.710], [0.629,-0.659], [0.680,-0.574], [0.706,-0.489], [0.714,-0.361], [0.697,-0.191], [0.654,-0.064], [0.561,0.064], [0.425,0.174], [0.272,0.166], [0.136,0.140], [0.153,0.302], [0.170,0.463], [0.187,0.625], [0.204,0.786], [0.289,0.786], [0.374,0.786], [0.459,0.786], [0.544,0.786], [0.680,0.786], [0.799,0.786], [0.680,0.786], [0.544,0.786], [0.459,0.786], [0.374,0.786], [0.289,0.786], [0.204,0.786], [0.187,0.625], [0.170,0.463], [0.153,0.302], [0.136,0.140], [0.272,0.166], [0.425,0.174], [0.561,0.064], [0.654,-0.064], [0.697,-0.191], [0.714,-0.361], [0.706,-0.489], [0.680,-0.574], [0.629,-0.659], [0.570,-0.710], [0.493,-0.740], [0.425,-0.744], [0.357,-0.740], [0.281,-0.710], [0.221,-0.659], [0.170,-0.616], [0.128,-0.548], [0.076,-0.421], [0.128,-0.548], [0.170,-0.616], [0.221,-0.659], [0.281,-0.710], [0.357,-0.740], [0.425,-0.744], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  '6' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.357,-0.744], [0.425,-0.740], [0.501,-0.710], [0.561,-0.659], [0.612,-0.574], [0.637,-0.489], [0.629,-0.361], [0.587,-0.234], [0.510,-0.106], [0.442,-0.038], [0.357,-0.021], [0.272,-0.038], [0.442,-0.038], [0.357,-0.021], [0.272,-0.038], [0.204,-0.106], [0.128,-0.234], [0.085,-0.361], [0.112,-0.247], [0.139,-0.132], [0.167,-0.017], [0.194,0.098], [0.221,0.212], [0.248,0.327], [0.275,0.442], [0.303,0.557], [0.330,0.671], [0.357,0.786], [0.330,0.671], [0.303,0.557], [0.275,0.442], [0.248,0.327], [0.221,0.212], [0.194,0.098], [0.167,-0.017], [0.139,-0.132], [0.112,-0.247], [0.085,-0.361], [0.076,-0.489], [0.102,-0.574], [0.153,-0.659], [0.213,-0.710], [0.289,-0.740], [0.357,-0.744], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '7' : [ [0.085,-0.786], [0.170,-0.786], [0.221,-0.629], [0.272,-0.472], [0.323,-0.315], [0.374,-0.157], [0.425,-0.000], [0.476,0.157], [0.527,0.314], [0.578,0.472], [0.629,0.629], [0.680,0.786], [0.606,0.786], [0.531,0.786], [0.457,0.786], [0.383,0.786], [0.308,0.786], [0.234,0.786], [0.159,0.786], [0.043,0.786], [0.159,0.786], [0.234,0.786], [0.308,0.786], [0.383,0.786], [0.457,0.786], [0.531,0.786], [0.606,0.786], [0.680,0.786], [0.629,0.629], [0.578,0.472], [0.527,0.314], [0.476,0.157], [0.425,-0.000], [0.374,-0.157], [0.323,-0.315], [0.272,-0.472], [0.221,-0.629], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  '8' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.744], [0.408,-0.740], [0.485,-0.710], [0.544,-0.659], [0.595,-0.574], [0.620,-0.489], [0.612,-0.361], [0.570,-0.234], [0.493,-0.106], [0.425,0.021], [0.340,0.021], [0.255,0.021], [0.179,0.149], [0.111,0.276], [0.068,0.404], [0.060,0.531], [0.085,0.616], [0.136,0.701], [0.196,0.752], [0.272,0.782], [0.340,0.786], [0.408,0.782], [0.485,0.752], [0.544,0.701], [0.595,0.616], [0.620,0.531], [0.612,0.404], [0.570,0.276], [0.501,0.149], [0.425,0.021], [0.340,0.021], [0.255,0.021], [0.187,-0.106], [0.111,-0.234], [0.068,-0.361], [0.060,-0.489], [0.085,-0.574], [0.136,-0.659], [0.196,-0.710], [0.272,-0.740], [0.340,-0.744], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '9' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.646,-0.786], [0.646,-0.616], [0.646,-0.446], [0.646,-0.276], [0.646,-0.106], [0.646,0.064], [0.646,0.234], [0.646,0.404], [0.595,0.276], [0.527,0.149], [0.365,0.064], [0.204,0.149], [0.136,0.276], [0.093,0.404], [0.085,0.531], [0.111,0.616], [0.162,0.701], [0.221,0.752], [0.298,0.782], [0.365,0.786], [0.433,0.782], [0.510,0.752], [0.570,0.701], [0.620,0.616], [0.646,0.531], [0.646,0.404], [0.646,0.234], [0.646,0.064], [0.646,-0.106], [0.646,-0.276], [0.646,-0.446], [0.646,-0.616], [0.646,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'A' : [ [0.085,-0.786], [0.128,-0.629], [0.170,-0.472], [0.213,-0.315], [0.255,-0.157], [0.298,-0.000], [0.340,0.157], [0.383,0.314], [0.425,0.472], [0.468,0.629], [0.510,0.786], [0.552,0.629], [0.595,0.472], [0.637,0.314], [0.680,0.157], [0.723,-0.000], [0.765,-0.157], [0.680,-0.157], [0.595,-0.157], [0.510,-0.157], [0.425,-0.157], [0.340,-0.157], [0.255,-0.157], [0.340,-0.157], [0.425,-0.157], [0.510,-0.157], [0.595,-0.157], [0.680,-0.157], [0.765,-0.157], [0.807,-0.315], [0.850,-0.472], [0.892,-0.629], [0.935,-0.786], [1.275,-0.786],  ],\n  'B' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.459,0.777], [0.510,0.752], [0.561,0.701], [0.595,0.667], [0.629,0.616], [0.663,0.531], [0.697,0.446], [0.697,0.404], [0.663,0.319], [0.629,0.234], [0.595,0.183], [0.561,0.149], [0.510,0.098], [0.459,0.072], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.459,0.055], [0.510,0.030], [0.561,-0.021], [0.595,-0.055], [0.629,-0.106], [0.663,-0.191], [0.697,-0.276], [0.714,-0.361], [0.697,-0.446], [0.663,-0.531], [0.629,-0.616], [0.595,-0.667], [0.561,-0.701], [0.510,-0.752], [0.459,-0.778], [0.425,-0.786], [0.357,-0.786], [0.289,-0.786], [0.221,-0.786], [0.153,-0.786], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.561,-0.786], [0.646,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'C' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.442,-0.740], [0.365,-0.710], [0.306,-0.659], [0.255,-0.574], [0.213,-0.489], [0.170,-0.395], [0.136,-0.276], [0.102,-0.132], [0.085,0.021], [0.102,0.174], [0.136,0.319], [0.170,0.438], [0.213,0.531], [0.255,0.616], [0.306,0.701], [0.365,0.752], [0.442,0.782], [0.510,0.786], [0.578,0.782], [0.654,0.752], [0.714,0.701], [0.765,0.616], [0.807,0.531], [0.765,0.616], [0.714,0.701], [0.654,0.752], [0.578,0.782], [0.510,0.786], [0.442,0.782], [0.365,0.752], [0.306,0.701], [0.255,0.616], [0.213,0.531], [0.170,0.438], [0.136,0.319], [0.102,0.174], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.765,-0.574], [0.714,-0.659], [0.654,-0.710], [0.578,-0.740], [0.510,-0.744], [0.510,-0.786], [0.425,-0.786], [0.374,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'D' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.408,-0.740], [0.485,-0.710], [0.544,-0.659], [0.595,-0.574], [0.637,-0.489], [0.680,-0.395], [0.714,-0.276], [0.748,-0.132], [0.765,0.021], [0.748,0.174], [0.714,0.319], [0.680,0.438], [0.637,0.531], [0.595,0.616], [0.544,0.701], [0.485,0.752], [0.408,0.782], [0.340,0.786], [0.272,0.786], [0.196,0.786], [0.136,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'E' : [ [0.085,-0.786], [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.629,0.064], [0.561,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.493,0.786], [0.561,0.786], [0.629,0.786], [0.629,0.701], [0.629,0.531], [0.629,0.701], [0.561,0.786], [0.493,0.786], [0.425,0.786], [0.357,0.786], [0.289,0.786], [0.221,0.786], [0.153,0.786], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.493,-0.786], [0.561,-0.786], [0.629,-0.701], [0.629,-0.531], [0.629,-0.701], [0.629,-0.786], [0.714,-0.786], [1.054,-0.786],  ],\n  'F' : [ [0.085,-0.786], [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.085,0.064], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.493,0.786], [0.561,0.786], [0.629,0.786], [0.561,0.786], [0.493,0.786], [0.425,0.786], [0.357,0.786], [0.289,0.786], [0.221,0.786], [0.153,0.786], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.493,-0.786], [0.561,-0.786], [0.629,-0.786], [0.969,-0.786],  ],\n  'G' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.744], [0.493,-0.740], [0.570,-0.710], [0.629,-0.659], [0.680,-0.574], [0.723,-0.489], [0.765,-0.395], [0.799,-0.276], [0.833,-0.132], [0.850,0.021], [0.765,0.021], [0.680,0.021], [0.595,0.021], [0.510,0.021], [0.425,0.021], [0.510,0.021], [0.595,0.021], [0.680,0.021], [0.765,0.021], [0.850,0.021], [0.833,-0.132], [0.799,-0.276], [0.765,-0.395], [0.723,-0.489], [0.680,-0.574], [0.629,-0.659], [0.570,-0.710], [0.493,-0.740], [0.425,-0.744], [0.357,-0.740], [0.281,-0.710], [0.221,-0.659], [0.170,-0.574], [0.128,-0.489], [0.085,-0.395], [0.051,-0.276], [0.017,-0.132], [0.000,0.021], [0.017,0.174], [0.051,0.319], [0.085,0.438], [0.128,0.531], [0.170,0.616], [0.221,0.701], [0.281,0.752], [0.357,0.782], [0.425,0.786], [0.493,0.782], [0.570,0.752], [0.629,0.701], [0.680,0.616], [0.629,0.701], [0.570,0.752], [0.493,0.782], [0.425,0.786], [0.357,0.782], [0.281,0.752], [0.221,0.701], [0.170,0.616], [0.128,0.531], [0.085,0.438], [0.051,0.319], [0.017,0.174], [0.000,0.021], [0.017,-0.132], [0.051,-0.276], [0.085,-0.395], [0.128,-0.489], [0.170,-0.574], [0.221,-0.659], [0.281,-0.710], [0.357,-0.740], [0.425,-0.744], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'H' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.629,0.064], [0.697,0.064], [0.765,0.064], [0.765,0.149], [0.765,0.234], [0.765,0.319], [0.765,0.404], [0.765,0.489], [0.765,0.574], [0.765,0.659], [0.765,0.744], [0.765,0.786], [0.765,0.744], [0.765,0.659], [0.765,0.574], [0.765,0.489], [0.765,0.404], [0.765,0.319], [0.765,0.234], [0.765,0.149], [0.765,0.064], [0.697,0.064], [0.629,0.064], [0.561,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.629,0.064], [0.697,0.064], [0.765,0.064], [0.765,-0.021], [0.765,-0.106], [0.765,-0.191], [0.765,-0.276], [0.765,-0.361], [0.765,-0.446], [0.765,-0.531], [0.765,-0.616], [0.765,-0.701], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'I' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.701], [0.340,-0.616], [0.340,-0.531], [0.340,-0.446], [0.340,-0.361], [0.340,-0.276], [0.340,-0.191], [0.340,-0.106], [0.340,-0.021], [0.340,0.064], [0.340,0.149], [0.340,0.234], [0.340,0.319], [0.340,0.404], [0.340,0.489], [0.340,0.574], [0.340,0.659], [0.340,0.744], [0.340,0.786], [0.255,0.786], [0.170,0.786], [0.085,0.786], [0.170,0.786], [0.255,0.786], [0.340,0.786], [0.425,0.786], [0.510,0.786], [0.595,0.786], [0.510,0.786], [0.425,0.786], [0.340,0.744], [0.340,0.659], [0.340,0.574], [0.340,0.489], [0.340,0.404], [0.340,0.319], [0.340,0.234], [0.340,0.149], [0.340,0.064], [0.340,-0.021], [0.340,-0.106], [0.340,-0.191], [0.340,-0.276], [0.340,-0.361], [0.340,-0.446], [0.340,-0.531], [0.340,-0.616], [0.340,-0.701], [0.340,-0.786], [0.255,-0.701], [0.170,-0.701], [0.085,-0.701], [0.170,-0.701], [0.255,-0.701], [0.340,-0.701], [0.425,-0.701], [0.510,-0.701], [0.595,-0.701], [0.510,-0.701], [0.425,-0.701], [0.340,-0.701], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  'J' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.391,-0.786], [0.425,-0.778], [0.476,-0.752], [0.527,-0.701], [0.561,-0.667], [0.595,-0.616], [0.629,-0.531], [0.663,-0.446], [0.680,-0.361], [0.680,-0.276], [0.680,-0.191], [0.680,-0.106], [0.680,-0.021], [0.680,0.064], [0.680,0.149], [0.680,0.234], [0.680,0.319], [0.680,0.404], [0.680,0.489], [0.680,0.574], [0.680,0.659], [0.680,0.744], [0.680,0.786], [0.680,0.744], [0.680,0.659], [0.680,0.574], [0.680,0.489], [0.680,0.404], [0.680,0.319], [0.680,0.234], [0.680,0.149], [0.680,0.064], [0.680,-0.021], [0.680,-0.106], [0.680,-0.191], [0.680,-0.276], [0.680,-0.361], [0.663,-0.446], [0.629,-0.531], [0.595,-0.616], [0.561,-0.667], [0.527,-0.701], [0.476,-0.752], [0.425,-0.778], [0.391,-0.786], [0.340,-0.786], [0.289,-0.786], [0.255,-0.778], [0.204,-0.752], [0.153,-0.701], [0.119,-0.667], [0.085,-0.616], [0.051,-0.531], [0.017,-0.446], [0.000,-0.361], [0.017,-0.446], [0.051,-0.531], [0.085,-0.616], [0.119,-0.667], [0.153,-0.701], [0.204,-0.752], [0.255,-0.778], [0.289,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'K' : [ [0.085,-0.786], [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.224,0.136], [0.279,0.208], [0.333,0.280], [0.388,0.353], [0.442,0.425], [0.496,0.497], [0.551,0.569], [0.605,0.642], [0.660,0.714], [0.714,0.786], [0.660,0.714], [0.605,0.642], [0.551,0.569], [0.496,0.497], [0.442,0.425], [0.388,0.353], [0.333,0.280], [0.279,0.208], [0.224,0.136], [0.170,0.064], [0.224,-0.021], [0.279,-0.106], [0.333,-0.191], [0.388,-0.276], [0.442,-0.361], [0.496,-0.446], [0.551,-0.531], [0.605,-0.616], [0.660,-0.701], [0.714,-0.786], [0.799,-0.786], [1.139,-0.786],  ],\n  'L' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.765,-0.574], [0.765,-0.446], [0.765,-0.574], [0.765,-0.701], [0.765,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'M' : [ [0.085,-0.786], [0.085,-0.786], [0.119,-0.629], [0.153,-0.472], [0.187,-0.315], [0.221,-0.157], [0.255,-0.000], [0.289,0.157], [0.323,0.314], [0.357,0.472], [0.391,0.629], [0.425,0.786], [0.459,0.629], [0.493,0.472], [0.527,0.314], [0.561,0.157], [0.595,-0.000], [0.629,-0.157], [0.663,-0.315], [0.697,-0.472], [0.731,-0.629], [0.765,-0.786], [0.799,-0.629], [0.833,-0.472], [0.867,-0.315], [0.901,-0.157], [0.935,-0.000], [0.969,0.157], [1.003,0.314], [1.037,0.472], [1.071,0.629], [1.105,0.786], [1.139,0.629], [1.173,0.472], [1.207,0.314], [1.241,0.157], [1.275,-0.000], [1.309,-0.157], [1.343,-0.315], [1.377,-0.472], [1.411,-0.629], [1.445,-0.786], [1.530,-0.786], [1.870,-0.786],  ],\n  'N' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.170,0.629], [0.255,0.472], [0.340,0.314], [0.425,0.157], [0.510,-0.000], [0.595,-0.157], [0.680,-0.315], [0.765,-0.472], [0.850,-0.629], [0.935,-0.786], [0.935,-0.701], [0.935,-0.616], [0.935,-0.531], [0.935,-0.446], [0.935,-0.361], [0.935,-0.276], [0.935,-0.191], [0.935,-0.106], [0.935,-0.021], [0.935,0.064], [0.935,0.149], [0.935,0.234], [0.935,0.319], [0.935,0.404], [0.935,0.489], [0.935,0.574], [0.935,0.659], [0.935,0.744], [0.935,0.786], [0.935,0.744], [0.935,0.659], [0.935,0.574], [0.935,0.489], [0.935,0.404], [0.935,0.319], [0.935,0.234], [0.935,0.149], [0.935,0.064], [0.935,-0.021], [0.935,-0.106], [0.935,-0.191], [0.935,-0.276], [0.935,-0.361], [0.935,-0.446], [0.935,-0.531], [0.935,-0.616], [0.935,-0.701], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'O' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.850,-0.395], [0.884,-0.276], [0.918,-0.132], [0.935,0.021], [0.918,0.174], [0.884,0.319], [0.850,0.438], [0.807,0.531], [0.765,0.616], [0.714,0.701], [0.654,0.752], [0.578,0.782], [0.510,0.786], [0.442,0.782], [0.365,0.752], [0.306,0.701], [0.255,0.616], [0.213,0.531], [0.170,0.438], [0.136,0.319], [0.102,0.174], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'P' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.459,0.072], [0.510,0.098], [0.561,0.149], [0.595,0.183], [0.629,0.234], [0.663,0.319], [0.697,0.404], [0.697,0.446], [0.663,0.531], [0.629,0.616], [0.595,0.667], [0.561,0.701], [0.510,0.752], [0.459,0.777], [0.425,0.786], [0.357,0.786], [0.289,0.786], [0.221,0.786], [0.153,0.786], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.493,-0.786], [0.561,-0.786], [0.629,-0.786], [0.697,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'Q' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.850,-0.395], [0.884,-0.276], [0.918,-0.132], [0.935,0.021], [0.918,0.174], [0.884,0.319], [0.850,0.438], [0.807,0.531], [0.765,0.616], [0.714,0.701], [0.654,0.752], [0.578,0.782], [0.510,0.786], [0.442,0.782], [0.365,0.752], [0.306,0.701], [0.255,0.616], [0.213,0.531], [0.170,0.438], [0.136,0.319], [0.102,0.174], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.799,-0.854], [0.833,-0.922], [0.867,-0.990], [0.765,-0.786], [0.765,-0.786], [0.867,-0.990], [0.833,-0.922], [0.799,-0.854], [0.765,-0.786], [0.731,-0.718], [0.697,-0.650], [0.663,-0.582], [0.629,-0.514], [0.595,-0.446], [0.629,-0.514], [0.663,-0.582], [0.697,-0.650], [0.731,-0.718], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'R' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.459,0.777], [0.510,0.752], [0.561,0.701], [0.595,0.667], [0.629,0.616], [0.663,0.531], [0.697,0.446], [0.697,0.404], [0.663,0.319], [0.629,0.234], [0.595,0.183], [0.561,0.149], [0.510,0.098], [0.459,0.072], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.391,-0.021], [0.425,-0.106], [0.459,-0.191], [0.493,-0.276], [0.527,-0.361], [0.561,-0.446], [0.595,-0.531], [0.629,-0.616], [0.663,-0.701], [0.697,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'S' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.744], [0.493,-0.740], [0.570,-0.710], [0.629,-0.659], [0.680,-0.574], [0.706,-0.489], [0.697,-0.361], [0.654,-0.234], [0.561,-0.106], [0.425,0.021], [0.289,0.149], [0.196,0.276], [0.153,0.404], [0.145,0.531], [0.170,0.616], [0.221,0.701], [0.281,0.752], [0.357,0.782], [0.425,0.786], [0.493,0.782], [0.570,0.752], [0.629,0.701], [0.680,0.616], [0.723,0.531], [0.680,0.616], [0.629,0.701], [0.570,0.752], [0.493,0.782], [0.425,0.786], [0.357,0.782], [0.281,0.752], [0.221,0.701], [0.170,0.616], [0.145,0.531], [0.153,0.404], [0.196,0.276], [0.289,0.149], [0.425,0.021], [0.561,-0.106], [0.654,-0.234], [0.697,-0.361], [0.706,-0.489], [0.680,-0.574], [0.629,-0.659], [0.570,-0.710], [0.493,-0.740], [0.425,-0.744], [0.357,-0.740], [0.281,-0.710], [0.221,-0.659], [0.170,-0.574], [0.128,-0.489], [0.085,-0.395], [0.128,-0.489], [0.170,-0.574], [0.221,-0.659], [0.281,-0.710], [0.357,-0.740], [0.425,-0.744], [0.425,-0.786], [0.425,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'T' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.595,-0.701], [0.595,-0.616], [0.595,-0.531], [0.595,-0.446], [0.595,-0.361], [0.595,-0.276], [0.595,-0.191], [0.595,-0.106], [0.595,-0.021], [0.595,0.064], [0.595,0.149], [0.595,0.234], [0.595,0.319], [0.595,0.404], [0.595,0.489], [0.595,0.574], [0.595,0.659], [0.595,0.744], [0.595,0.786], [0.510,0.786], [0.425,0.786], [0.340,0.786], [0.255,0.786], [0.170,0.786], [0.085,0.786], [0.170,0.786], [0.255,0.786], [0.340,0.786], [0.425,0.786], [0.510,0.786], [0.595,0.786], [0.680,0.786], [0.765,0.786], [0.850,0.786], [0.935,0.786], [1.020,0.786], [1.105,0.786], [1.020,0.786], [0.935,0.786], [0.850,0.786], [0.765,0.786], [0.680,0.786], [0.595,0.744], [0.595,0.659], [0.595,0.574], [0.595,0.489], [0.595,0.404], [0.595,0.319], [0.595,0.234], [0.595,0.149], [0.595,0.064], [0.595,-0.021], [0.595,-0.106], [0.595,-0.191], [0.595,-0.276], [0.595,-0.361], [0.595,-0.446], [0.595,-0.531], [0.595,-0.616], [0.595,-0.701], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.445,-0.786],  ],\n  'U' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.850,-0.395], [0.884,-0.276], [0.918,-0.132], [0.935,0.021], [0.935,0.106], [0.935,0.191], [0.935,0.276], [0.935,0.361], [0.935,0.446], [0.935,0.531], [0.935,0.616], [0.935,0.701], [0.935,0.786], [0.935,0.701], [0.935,0.616], [0.935,0.531], [0.935,0.446], [0.935,0.361], [0.935,0.276], [0.935,0.191], [0.935,0.106], [0.935,0.021], [0.918,-0.132], [0.884,-0.276], [0.850,-0.395], [0.807,-0.489], [0.765,-0.574], [0.714,-0.659], [0.654,-0.710], [0.578,-0.740], [0.510,-0.744], [0.442,-0.740], [0.365,-0.710], [0.306,-0.659], [0.255,-0.574], [0.213,-0.489], [0.170,-0.395], [0.136,-0.276], [0.102,-0.132], [0.085,0.021], [0.085,0.106], [0.085,0.191], [0.085,0.276], [0.085,0.361], [0.085,0.446], [0.085,0.531], [0.085,0.616], [0.085,0.701], [0.085,0.786], [0.085,0.701], [0.085,0.616], [0.085,0.531], [0.085,0.446], [0.085,0.361], [0.085,0.276], [0.085,0.191], [0.085,0.106], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'V' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.646,-0.629], [0.697,-0.472], [0.748,-0.315], [0.799,-0.157], [0.850,-0.000], [0.901,0.157], [0.952,0.314], [1.003,0.472], [1.054,0.629], [1.105,0.786], [1.054,0.629], [1.003,0.472], [0.952,0.314], [0.901,0.157], [0.850,-0.000], [0.799,-0.157], [0.748,-0.315], [0.697,-0.472], [0.646,-0.629], [0.595,-0.786], [0.544,-0.629], [0.493,-0.472], [0.442,-0.315], [0.391,-0.157], [0.340,-0.000], [0.289,0.157], [0.238,0.314], [0.187,0.472], [0.136,0.629], [0.085,0.786], [0.136,0.629], [0.187,0.472], [0.238,0.314], [0.289,0.157], [0.340,-0.000], [0.391,-0.157], [0.442,-0.315], [0.493,-0.472], [0.544,-0.629], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'W' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.786], [0.391,-0.629], [0.357,-0.472], [0.323,-0.315], [0.289,-0.157], [0.255,-0.000], [0.221,0.157], [0.187,0.314], [0.153,0.472], [0.119,0.629], [0.085,0.786], [0.119,0.629], [0.153,0.472], [0.187,0.314], [0.221,0.157], [0.255,-0.000], [0.289,-0.157], [0.323,-0.315], [0.357,-0.472], [0.391,-0.629], [0.425,-0.786], [0.459,-0.629], [0.493,-0.472], [0.527,-0.315], [0.561,-0.157], [0.595,-0.000], [0.629,0.157], [0.663,0.314], [0.697,0.472], [0.731,0.629], [0.765,0.786], [0.799,0.629], [0.833,0.472], [0.867,0.314], [0.901,0.157], [0.935,-0.000], [0.969,-0.157], [1.003,-0.315], [1.037,-0.472], [1.071,-0.629], [1.105,-0.786], [1.139,-0.629], [1.173,-0.472], [1.207,-0.315], [1.241,-0.157], [1.275,-0.000], [1.309,0.157], [1.343,0.314], [1.377,0.472], [1.411,0.629], [1.445,0.786], [1.411,0.629], [1.377,0.472], [1.343,0.314], [1.309,0.157], [1.275,-0.000], [1.241,-0.157], [1.207,-0.315], [1.173,-0.472], [1.139,-0.629], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786], [1.530,-0.786], [1.870,-0.786],  ],\n  'X' : [ [0.085,-0.786], [0.187,-0.629], [0.289,-0.472], [0.391,-0.315], [0.493,-0.157], [0.595,-0.000], [0.697,0.157], [0.799,0.314], [0.901,0.472], [1.003,0.629], [1.105,0.786], [1.003,0.629], [0.901,0.472], [0.799,0.314], [0.697,0.157], [0.595,-0.000], [0.493,0.157], [0.391,0.314], [0.289,0.472], [0.187,0.629], [0.085,0.786], [0.187,0.629], [0.289,0.472], [0.391,0.314], [0.493,0.157], [0.595,-0.000], [0.697,-0.157], [0.799,-0.315], [0.901,-0.472], [1.003,-0.629], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'Y' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.595,-0.701], [0.595,-0.616], [0.595,-0.531], [0.595,-0.446], [0.595,-0.361], [0.595,-0.276], [0.595,-0.191], [0.595,-0.106], [0.595,-0.021], [0.595,-0.000], [0.697,0.157], [0.799,0.314], [0.901,0.472], [1.003,0.629], [1.105,0.786], [1.003,0.629], [0.901,0.472], [0.799,0.314], [0.697,0.157], [0.595,-0.000], [0.493,0.157], [0.391,0.314], [0.289,0.472], [0.187,0.629], [0.085,0.786], [0.187,0.629], [0.289,0.472], [0.391,0.314], [0.493,0.157], [0.595,-0.000], [0.595,-0.021], [0.595,-0.106], [0.595,-0.191], [0.595,-0.276], [0.595,-0.361], [0.595,-0.446], [0.595,-0.531], [0.595,-0.616], [0.595,-0.701], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'Z' : [ [0.085,-0.786], [0.187,-0.629], [0.289,-0.472], [0.391,-0.315], [0.493,-0.157], [0.595,-0.000], [0.697,0.157], [0.799,0.314], [0.901,0.472], [1.003,0.629], [1.105,0.786], [0.935,0.786], [0.765,0.786], [0.595,0.786], [0.425,0.786], [0.255,0.786], [0.085,0.786], [0.255,0.786], [0.425,0.786], [0.595,0.786], [0.765,0.786], [0.935,0.786], [1.105,0.786], [1.003,0.629], [0.901,0.472], [0.799,0.314], [0.697,0.157], [0.595,-0.000], [0.493,-0.157], [0.391,-0.315], [0.289,-0.472], [0.187,-0.629], [0.085,-0.769], [0.255,-0.769], [0.425,-0.769], [0.595,-0.769], [0.765,-0.769], [0.935,-0.769], [1.105,-0.769], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'a' : [ [0.068,-0.786], [0.153,-0.786], [0.238,-0.786], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.646,-0.701], [0.646,-0.616], [0.646,-0.531], [0.646,-0.446], [0.646,-0.361], [0.646,-0.276], [0.646,-0.191], [0.646,-0.106], [0.646,-0.021], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.731,-0.786], [1.071,-0.786],  ],\n  'b' : [ [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.459,-0.778], [0.510,-0.752], [0.561,-0.701], [0.595,-0.667], [0.629,-0.616], [0.663,-0.531], [0.697,-0.446], [0.714,-0.361], [0.697,-0.276], [0.663,-0.191], [0.629,-0.106], [0.595,-0.055], [0.561,-0.021], [0.510,0.030], [0.459,0.055], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.017,-0.786], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.561,-0.786], [0.646,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'c' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.340,-0.778], [0.289,-0.752], [0.238,-0.701], [0.204,-0.667], [0.170,-0.616], [0.136,-0.531], [0.102,-0.446], [0.085,-0.361], [0.102,-0.276], [0.136,-0.191], [0.170,-0.106], [0.204,-0.055], [0.238,-0.021], [0.289,0.030], [0.340,0.055], [0.374,0.064], [0.442,0.064], [0.510,0.064], [0.578,0.064], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.986,-0.786],  ],\n  'd' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.714,-0.786], [0.714,-0.701], [0.714,-0.616], [0.714,-0.531], [0.714,-0.446], [0.714,-0.361], [0.714,-0.276], [0.714,-0.191], [0.714,-0.106], [0.714,-0.021], [0.714,0.064], [0.714,0.149], [0.714,0.234], [0.714,0.319], [0.714,0.404], [0.714,0.489], [0.714,0.574], [0.714,0.659], [0.714,0.744], [0.714,0.786], [0.714,0.744], [0.714,0.659], [0.714,0.574], [0.714,0.489], [0.714,0.404], [0.714,0.319], [0.714,0.234], [0.714,0.149], [0.714,0.064], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.714,-0.786], [0.799,-0.786], [1.139,-0.786],  ],\n  'e' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.340,-0.778], [0.289,-0.752], [0.238,-0.701], [0.204,-0.667], [0.170,-0.616], [0.128,-0.531], [0.102,-0.446], [0.094,-0.361], [0.179,-0.361], [0.255,-0.361], [0.332,-0.361], [0.408,-0.361], [0.476,-0.361], [0.518,-0.361], [0.595,-0.361], [0.671,-0.361], [0.748,-0.361], [0.723,-0.276], [0.706,-0.191], [0.663,-0.106], [0.629,-0.055], [0.595,-0.021], [0.544,0.030], [0.493,0.055], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.128,-0.191], [0.102,-0.276], [0.102,-0.446], [0.128,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.714,-0.786], [0.816,-0.786], [1.156,-0.786],  ],\n  'f' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.701], [0.425,-0.616], [0.425,-0.531], [0.425,-0.446], [0.425,-0.361], [0.425,-0.276], [0.425,-0.191], [0.425,-0.106], [0.425,-0.021], [0.425,0.064], [0.510,0.064], [0.595,0.064], [0.680,0.064], [0.807,0.064], [0.680,0.064], [0.595,0.064], [0.510,0.064], [0.425,0.064], [0.340,0.064], [0.255,0.064], [0.170,0.064], [0.043,0.064], [0.170,0.064], [0.255,0.064], [0.340,0.064], [0.425,0.064], [0.425,0.149], [0.425,0.234], [0.425,0.319], [0.442,0.446], [0.468,0.531], [0.510,0.616], [0.544,0.667], [0.578,0.701], [0.629,0.752], [0.680,0.777], [0.714,0.786], [0.782,0.786], [0.850,0.786], [0.782,0.786], [0.714,0.786], [0.680,0.777], [0.629,0.752], [0.578,0.701], [0.544,0.667], [0.510,0.616], [0.468,0.531], [0.442,0.446], [0.425,0.319], [0.425,0.234], [0.425,0.149], [0.425,0.064], [0.425,-0.021], [0.425,-0.106], [0.425,-0.191], [0.425,-0.276], [0.425,-0.361], [0.425,-0.446], [0.425,-0.531], [0.425,-0.616], [0.425,-0.701], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'g' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.646,-0.871], [0.646,-0.956], [0.646,-1.041], [0.646,-1.126], [0.629,-1.254], [0.603,-1.339], [0.561,-1.424], [0.527,-1.475], [0.493,-1.509], [0.442,-1.560], [0.391,-1.585], [0.357,-1.594], [0.289,-1.594], [0.221,-1.594], [0.153,-1.594], [0.221,-1.594], [0.289,-1.594], [0.357,-1.594], [0.391,-1.585], [0.442,-1.560], [0.493,-1.509], [0.527,-1.475], [0.561,-1.424], [0.603,-1.339], [0.629,-1.254], [0.646,-1.126], [0.646,-1.041], [0.646,-0.956], [0.646,-0.871], [0.646,-0.786], [0.646,-0.701], [0.646,-0.616], [0.646,-0.531], [0.646,-0.446], [0.646,-0.361], [0.646,-0.276], [0.646,-0.191], [0.646,-0.106], [0.646,-0.021], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.714,-0.786], [1.054,-0.786],  ],\n  'h' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.744], [0.085,0.786], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.106], [0.102,-0.064], [0.153,-0.030], [0.238,0.021], [0.323,0.064], [0.425,0.064], [0.510,0.021], [0.595,-0.030], [0.646,-0.064], [0.663,-0.106], [0.663,-0.191], [0.663,-0.276], [0.663,-0.361], [0.663,-0.446], [0.663,-0.531], [0.663,-0.616], [0.663,-0.701], [0.663,-0.786], [0.748,-0.786], [1.088,-0.786],  ],\n  'i' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'j' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.493,-0.786], [0.493,-0.701], [0.493,-0.616], [0.493,-0.531], [0.493,-0.446], [0.493,-0.361], [0.493,-0.276], [0.493,-0.191], [0.493,-0.106], [0.493,-0.021], [0.493,0.064], [0.493,-0.021], [0.493,-0.106], [0.493,-0.191], [0.493,-0.276], [0.493,-0.361], [0.493,-0.446], [0.493,-0.531], [0.493,-0.616], [0.493,-0.701], [0.493,-0.786], [0.493,-0.871], [0.493,-0.956], [0.493,-1.041], [0.493,-1.126], [0.476,-1.254], [0.451,-1.339], [0.408,-1.424], [0.374,-1.475], [0.340,-1.509], [0.289,-1.560], [0.238,-1.585], [0.204,-1.594], [0.136,-1.594], [0.068,-1.594], [0.000,-1.594], [0.068,-1.594], [0.136,-1.594], [0.204,-1.594], [0.238,-1.585], [0.289,-1.560], [0.340,-1.509], [0.374,-1.475], [0.408,-1.424], [0.451,-1.339], [0.476,-1.254], [0.493,-1.126], [0.493,-1.041], [0.493,-0.956], [0.493,-0.871], [0.493,-0.786], [0.442,-0.786], [0.493,-0.786], [0.578,-0.786], [0.918,-0.786],  ],\n  'k' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.744], [0.085,0.786], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.184,-0.295], [0.283,-0.228], [0.383,-0.162], [0.482,-0.095], [0.581,-0.029], [0.680,0.038], [0.581,-0.029], [0.482,-0.095], [0.383,-0.162], [0.283,-0.228], [0.184,-0.295], [0.085,-0.361], [0.184,-0.432], [0.283,-0.503], [0.383,-0.574], [0.482,-0.645], [0.581,-0.716], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'l' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.744], [0.085,0.786], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'm' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.153,0.004], [0.255,0.030], [0.323,0.047], [0.391,0.047], [0.459,0.030], [0.561,0.004], [0.612,-0.021], [0.629,-0.106], [0.629,-0.191], [0.629,-0.276], [0.629,-0.361], [0.629,-0.446], [0.629,-0.531], [0.629,-0.616], [0.629,-0.701], [0.629,-0.808], [0.629,-0.701], [0.629,-0.616], [0.629,-0.531], [0.629,-0.446], [0.629,-0.361], [0.629,-0.276], [0.629,-0.191], [0.629,-0.106], [0.646,-0.021], [0.697,0.004], [0.799,0.030], [0.867,0.047], [0.935,0.047], [1.003,0.030], [1.105,0.004], [1.156,-0.021], [1.173,-0.106], [1.173,-0.191], [1.173,-0.276], [1.173,-0.361], [1.173,-0.446], [1.173,-0.531], [1.173,-0.616], [1.173,-0.701], [1.173,-0.786], [1.258,-0.786], [1.598,-0.786],  ],\n  'n' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.153,0.004], [0.255,0.030], [0.323,0.047], [0.391,0.047], [0.459,0.030], [0.561,0.004], [0.612,-0.021], [0.629,-0.106], [0.629,-0.191], [0.629,-0.276], [0.629,-0.361], [0.629,-0.446], [0.629,-0.531], [0.629,-0.616], [0.629,-0.701], [0.629,-0.786], [0.714,-0.786], [1.054,-0.786],  ],\n  'o' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.646,-0.786], [0.680,-0.778], [0.731,-0.752], [0.782,-0.701], [0.816,-0.667], [0.850,-0.616], [0.884,-0.531], [0.918,-0.446], [0.935,-0.361], [0.918,-0.276], [0.884,-0.191], [0.850,-0.106], [0.816,-0.055], [0.782,-0.021], [0.731,0.030], [0.680,0.055], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'p' : [ [0.085,-0.786], [0.085,-0.871], [0.085,-0.956], [0.085,-1.041], [0.085,-1.126], [0.085,-1.211], [0.085,-1.296], [0.085,-1.381], [0.085,-1.466], [0.085,-1.551], [0.085,-1.211], [0.085,-1.551], [0.085,-1.466], [0.085,-1.381], [0.085,-1.296], [0.085,-1.211], [0.085,-1.126], [0.085,-1.041], [0.085,-0.956], [0.085,-0.871], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.391,-0.778], [0.442,-0.752], [0.493,-0.701], [0.527,-0.667], [0.561,-0.616], [0.595,-0.531], [0.629,-0.446], [0.646,-0.361], [0.629,-0.276], [0.595,-0.191], [0.561,-0.106], [0.527,-0.055], [0.493,-0.021], [0.442,0.030], [0.391,0.055], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.493,-0.786], [0.578,-0.786], [0.663,-0.786], [0.731,-0.786], [1.071,-0.786],  ],\n  'q' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.646,-0.871], [0.646,-0.956], [0.646,-1.041], [0.646,-1.126], [0.663,-1.254], [0.689,-1.339], [0.731,-1.424], [0.765,-1.475], [0.799,-1.509], [0.850,-1.560], [0.901,-1.585], [0.935,-1.594], [1.003,-1.594], [1.071,-1.594], [1.139,-1.594], [1.071,-1.594], [1.003,-1.594], [0.935,-1.594], [0.901,-1.585], [0.850,-1.560], [0.799,-1.509], [0.765,-1.475], [0.731,-1.424], [0.689,-1.339], [0.663,-1.254], [0.646,-1.126], [0.646,-1.041], [0.646,-0.956], [0.646,-0.871], [0.646,-0.786], [0.646,-0.701], [0.646,-0.616], [0.646,-0.531], [0.646,-0.446], [0.646,-0.361], [0.646,-0.276], [0.646,-0.191], [0.646,-0.106], [0.646,-0.021], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.714,-0.786], [0.816,-0.786], [0.918,-0.786], [1.020,-0.786], [1.105,-0.786], [1.224,-0.786], [1.564,-0.786],  ],\n  'r' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,-0.021], [0.085,0.149], [0.085,0.191], [0.085,0.149], [0.085,-0.021], [0.153,0.004], [0.255,0.030], [0.323,0.055], [0.391,0.064], [0.459,0.055], [0.527,0.030], [0.595,-0.021], [0.527,0.030], [0.459,0.055], [0.391,0.064], [0.323,0.055], [0.255,0.030], [0.153,0.004], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  's' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.561,-0.786], [0.595,-0.778], [0.646,-0.752], [0.697,-0.701], [0.731,-0.667], [0.765,-0.616], [0.756,-0.565], [0.731,-0.531], [0.663,-0.489], [0.595,-0.446], [0.510,-0.404], [0.425,-0.361], [0.340,-0.319], [0.255,-0.276], [0.187,-0.234], [0.119,-0.191], [0.102,-0.115], [0.119,-0.055], [0.153,-0.021], [0.204,0.030], [0.255,0.055], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.595,0.055], [0.646,0.030], [0.697,-0.021], [0.731,-0.055], [0.697,-0.021], [0.646,0.030], [0.595,0.055], [0.561,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.255,0.055], [0.204,0.030], [0.153,-0.021], [0.119,-0.055], [0.102,-0.115], [0.119,-0.191], [0.187,-0.234], [0.255,-0.276], [0.340,-0.319], [0.425,-0.361], [0.510,-0.404], [0.595,-0.446], [0.663,-0.489], [0.731,-0.531], [0.756,-0.565], [0.765,-0.616], [0.731,-0.667], [0.697,-0.701], [0.646,-0.752], [0.595,-0.778], [0.561,-0.786], [0.510,-0.786], [0.425,-0.786], [0.340,-0.786], [0.289,-0.786], [0.255,-0.778], [0.204,-0.752], [0.153,-0.701], [0.119,-0.667], [0.060,-0.616], [0.119,-0.667], [0.153,-0.701], [0.204,-0.752], [0.255,-0.778], [0.289,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  't' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.374,-0.786], [0.374,-0.701], [0.374,-0.616], [0.374,-0.531], [0.374,-0.446], [0.374,-0.361], [0.374,-0.276], [0.374,-0.191], [0.374,-0.106], [0.374,-0.021], [0.374,0.064], [0.374,0.149], [0.374,0.234], [0.374,0.319], [0.374,0.361], [0.374,0.446], [0.306,0.446], [0.238,0.446], [0.170,0.446], [0.043,0.446], [0.170,0.446], [0.238,0.446], [0.306,0.446], [0.374,0.446], [0.442,0.446], [0.510,0.446], [0.578,0.446], [0.706,0.446], [0.578,0.446], [0.510,0.446], [0.442,0.446], [0.374,0.446], [0.374,0.531], [0.374,0.616], [0.374,0.701], [0.374,0.786], [0.374,0.701], [0.374,0.616], [0.374,0.531], [0.374,0.446], [0.374,0.361], [0.374,0.319], [0.374,0.234], [0.374,0.149], [0.374,0.064], [0.374,-0.021], [0.374,-0.106], [0.374,-0.191], [0.374,-0.276], [0.374,-0.361], [0.374,-0.446], [0.374,-0.531], [0.374,-0.616], [0.374,-0.701], [0.374,-0.786], [0.459,-0.786], [0.544,-0.786], [0.663,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'u' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.323,-0.769], [0.255,-0.752], [0.153,-0.727], [0.102,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.102,-0.701], [0.153,-0.727], [0.255,-0.752], [0.323,-0.769], [0.391,-0.786], [0.459,-0.769], [0.527,-0.752], [0.629,-0.727], [0.680,-0.701], [0.697,-0.701], [0.697,-0.616], [0.697,-0.531], [0.697,-0.446], [0.697,-0.361], [0.697,-0.276], [0.697,-0.191], [0.697,-0.106], [0.697,-0.021], [0.697,0.064], [0.697,-0.021], [0.697,-0.106], [0.697,-0.191], [0.697,-0.276], [0.697,-0.361], [0.697,-0.446], [0.697,-0.531], [0.697,-0.616], [0.697,-0.701], [0.697,-0.786], [0.782,-0.786], [1.122,-0.786],  ],\n  'v' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.468,-0.786], [0.429,-0.701], [0.391,-0.616], [0.353,-0.531], [0.315,-0.446], [0.276,-0.361], [0.238,-0.276], [0.200,-0.191], [0.162,-0.106], [0.123,-0.021], [0.085,0.064], [0.123,-0.021], [0.162,-0.106], [0.200,-0.191], [0.238,-0.276], [0.276,-0.361], [0.315,-0.446], [0.353,-0.531], [0.391,-0.616], [0.429,-0.701], [0.468,-0.786], [0.506,-0.701], [0.544,-0.616], [0.582,-0.531], [0.620,-0.446], [0.659,-0.361], [0.697,-0.276], [0.735,-0.191], [0.773,-0.106], [0.812,-0.021], [0.850,0.064], [0.812,-0.021], [0.773,-0.106], [0.735,-0.191], [0.697,-0.276], [0.659,-0.361], [0.620,-0.446], [0.582,-0.531], [0.544,-0.616], [0.506,-0.701], [0.468,-0.786], [0.552,-0.786], [0.663,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'w' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.315,-0.701], [0.289,-0.616], [0.264,-0.531], [0.238,-0.446], [0.213,-0.361], [0.187,-0.276], [0.162,-0.191], [0.136,-0.106], [0.111,-0.021], [0.085,0.064], [0.111,-0.021], [0.136,-0.106], [0.162,-0.191], [0.187,-0.276], [0.213,-0.361], [0.238,-0.446], [0.264,-0.531], [0.289,-0.616], [0.315,-0.701], [0.340,-0.786], [0.365,-0.701], [0.391,-0.616], [0.417,-0.531], [0.442,-0.446], [0.468,-0.361], [0.493,-0.276], [0.518,-0.191], [0.544,-0.106], [0.570,-0.021], [0.595,0.064], [0.620,-0.021], [0.646,-0.106], [0.671,-0.191], [0.697,-0.276], [0.723,-0.361], [0.748,-0.446], [0.773,-0.531], [0.799,-0.616], [0.825,-0.701], [0.850,-0.786], [0.875,-0.701], [0.901,-0.616], [0.926,-0.531], [0.952,-0.446], [0.978,-0.361], [1.003,-0.276], [1.028,-0.191], [1.054,-0.106], [1.079,-0.021], [1.105,0.064], [1.079,-0.021], [1.054,-0.106], [1.028,-0.191], [1.003,-0.276], [0.978,-0.361], [0.952,-0.446], [0.926,-0.531], [0.901,-0.616], [0.875,-0.701], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'x' : [ [0.076,-0.701], [0.153,-0.616], [0.230,-0.531], [0.306,-0.446], [0.383,-0.361], [0.459,-0.276], [0.535,-0.191], [0.612,-0.106], [0.689,-0.021], [0.765,0.064], [0.689,-0.021], [0.612,-0.106], [0.535,-0.191], [0.459,-0.276], [0.383,-0.361], [0.306,-0.276], [0.230,-0.191], [0.153,-0.106], [0.076,-0.021], [0.000,0.064], [0.076,-0.021], [0.153,-0.106], [0.230,-0.191], [0.306,-0.276], [0.383,-0.361], [0.459,-0.446], [0.535,-0.531], [0.612,-0.616], [0.689,-0.701], [0.765,-0.786], [1.105,-0.786],  ],\n  'y' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.468,-0.786], [0.429,-0.701], [0.391,-0.616], [0.353,-0.531], [0.315,-0.446], [0.276,-0.361], [0.238,-0.276], [0.200,-0.191], [0.162,-0.106], [0.123,-0.021], [0.085,0.064], [0.123,-0.021], [0.162,-0.106], [0.200,-0.191], [0.238,-0.276], [0.276,-0.361], [0.315,-0.446], [0.353,-0.531], [0.391,-0.616], [0.429,-0.701], [0.468,-0.786], [0.506,-0.701], [0.544,-0.616], [0.582,-0.531], [0.620,-0.446], [0.659,-0.361], [0.697,-0.276], [0.735,-0.191], [0.773,-0.106], [0.812,-0.021], [0.850,0.064], [0.812,-0.021], [0.773,-0.106], [0.735,-0.191], [0.697,-0.276], [0.659,-0.361], [0.620,-0.446], [0.582,-0.531], [0.544,-0.616], [0.506,-0.701], [0.468,-0.786], [0.429,-0.871], [0.391,-0.956], [0.353,-1.041], [0.315,-1.126], [0.276,-1.211], [0.238,-1.296], [0.200,-1.381], [0.238,-1.296], [0.276,-1.211], [0.315,-1.126], [0.353,-1.041], [0.391,-0.956], [0.429,-0.871], [0.468,-0.786], [0.552,-0.786], [0.637,-0.786], [0.723,-0.786], [0.807,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'z' : [ [0.085,-0.786], [0.162,-0.701], [0.238,-0.616], [0.315,-0.531], [0.391,-0.446], [0.468,-0.361], [0.544,-0.276], [0.620,-0.191], [0.697,-0.106], [0.773,-0.021], [0.850,0.064], [0.765,0.064], [0.680,0.064], [0.595,0.064], [0.510,0.064], [0.425,0.064], [0.340,0.064], [0.255,0.064], [0.170,0.064], [0.085,0.064], [0.170,0.064], [0.255,0.064], [0.340,0.064], [0.425,0.064], [0.510,0.064], [0.595,0.064], [0.680,0.064], [0.765,0.064], [0.850,0.064], [0.773,-0.021], [0.697,-0.106], [0.620,-0.191], [0.544,-0.276], [0.468,-0.361], [0.391,-0.446], [0.315,-0.531], [0.238,-0.616], [0.162,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'a*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'b*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'c*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'd*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'e*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'f*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'g*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'h*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'i*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'j*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'k*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'l*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'm*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'n*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'o*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'p*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'q*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'r*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  's*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  't*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'u*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'v*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'w*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'x*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'y*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'z*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  ',' : [ [0.085,-0.786], [0.170,-0.786], [0.187,-0.701], [0.221,-0.616], [0.289,-0.701], [0.306,-0.786], [0.323,-0.871], [0.323,-0.956], [0.289,-1.041], [0.255,-1.126], [0.187,-1.211], [0.085,-1.296], [0.187,-1.211], [0.255,-1.126], [0.289,-1.041], [0.323,-0.956], [0.323,-0.871], [0.306,-0.786], [0.289,-0.701], [0.221,-0.616], [0.289,-0.701], [0.306,-0.786], [0.425,-0.786], [0.765,-0.786],  ],\n  '?' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.701], [0.425,-0.616], [0.425,-0.531], [0.425,-0.446], [0.425,-0.361], [0.425,-0.276], [0.425,-0.191], [0.425,-0.106], [0.425,-0.081], [0.452,-0.038], [0.476,0.004], [0.510,0.072], [0.544,0.149], [0.578,0.208], [0.612,0.276], [0.629,0.319], [0.646,0.361], [0.654,0.404], [0.660,0.472], [0.663,0.531], [0.654,0.574], [0.637,0.616], [0.620,0.659], [0.587,0.701], [0.561,0.735], [0.527,0.752], [0.485,0.773], [0.451,0.782], [0.417,0.786], [0.383,0.786], [0.340,0.783], [0.315,0.782], [0.272,0.769], [0.238,0.752], [0.204,0.731], [0.179,0.701], [0.150,0.659], [0.128,0.616], [0.102,0.574], [0.085,0.531], [0.102,0.574], [0.128,0.616], [0.150,0.659], [0.179,0.701], [0.204,0.731], [0.238,0.752], [0.272,0.769], [0.315,0.782], [0.340,0.783], [0.383,0.786], [0.417,0.786], [0.451,0.782], [0.485,0.773], [0.527,0.752], [0.561,0.735], [0.587,0.701], [0.620,0.659], [0.637,0.616], [0.654,0.574], [0.663,0.531], [0.660,0.472], [0.654,0.404], [0.646,0.361], [0.629,0.319], [0.612,0.276], [0.578,0.208], [0.544,0.149], [0.510,0.072], [0.476,0.004], [0.452,-0.038], [0.425,-0.081], [0.425,-0.106], [0.425,-0.149], [0.425,-0.191], [0.425,-0.234], [0.425,-0.276], [0.425,-0.319], [0.425,-0.361], [0.425,-0.404], [0.425,-0.446], [0.425,-0.489], [0.425,-0.531], [0.425,-0.574], [0.425,-0.616], [0.425,-0.659], [0.425,-0.701], [0.425,-0.744], [0.425,-0.786], [0.340,-0.786], [0.425,-0.786], [0.612,-0.786], [0.561,-0.659], [0.425,-0.574], [0.289,-0.659], [0.238,-0.786], [0.289,-0.914], [0.425,-0.999], [0.561,-0.914], [0.612,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '&' : [ [0.085,-0.786], [0.174,-0.778], [0.255,-0.774], [0.332,-0.774], [0.460,-0.761], [0.561,-0.748], [0.646,-0.684], [0.731,-0.574], [0.799,-0.506], [0.850,-0.440], [0.935,-0.319], [1.037,-0.191], [0.935,-0.319], [0.850,-0.440], [0.799,-0.506], [0.731,-0.574], [0.646,-0.684], [0.561,-0.748], [0.460,-0.761], [0.332,-0.774], [0.255,-0.774], [0.174,-0.778], [0.128,-0.718], [0.102,-0.676], [0.085,-0.599], [0.076,-0.497], [0.085,-0.327], [0.136,-0.191], [0.238,-0.064], [0.323,0.004], [0.374,0.047], [0.493,0.089], [0.587,0.154], [0.629,0.234], [0.672,0.335], [0.706,0.429], [0.715,0.520], [0.718,0.614], [0.701,0.690], [0.667,0.749], [0.620,0.777], [0.535,0.786], [0.468,0.786], [0.400,0.777], [0.329,0.760], [0.294,0.734], [0.270,0.681], [0.259,0.605], [0.252,0.548], [0.254,0.463], [0.262,0.404], [0.289,0.306], [0.332,0.174], [0.408,0.064], [0.476,-0.106], [0.544,-0.276], [0.595,-0.446], [0.646,-0.616], [0.697,-0.786], [0.765,-0.829], [0.850,-0.829], [0.926,-0.803], [1.021,-0.786], [1.120,-0.786], [1.460,-0.786],  ],\n  '$' : [ [0.102,-0.786], [0.221,-0.786], [0.306,-0.786], [0.391,-0.786], [0.476,-0.786], [0.476,-0.786], [0.476,-1.126], [0.476,-0.786], [0.476,-0.531], [0.476,-0.276], [0.476,-0.021], [0.476,0.234], [0.476,0.489], [0.476,0.829], [0.510,0.829], [0.510,0.489], [0.510,0.234], [0.510,-0.021], [0.510,-0.276], [0.510,-0.531], [0.510,-0.786], [0.510,-1.126], [0.510,-0.786], [0.476,-0.786], [0.476,-0.871], [0.595,-0.910], [0.671,-0.880], [0.731,-0.829], [0.782,-0.744], [0.807,-0.659], [0.799,-0.531], [0.756,-0.404], [0.663,-0.276], [0.476,-0.149], [0.289,-0.021], [0.196,0.106], [0.153,0.234], [0.145,0.361], [0.170,0.446], [0.221,0.531], [0.281,0.582], [0.357,0.612], [0.476,0.616], [0.595,0.612], [0.671,0.582], [0.731,0.531], [0.782,0.446], [0.825,0.361], [0.782,0.446], [0.731,0.531], [0.671,0.582], [0.595,0.612], [0.476,0.616], [0.357,0.612], [0.281,0.582], [0.221,0.531], [0.170,0.446], [0.145,0.361], [0.153,0.234], [0.196,0.106], [0.289,-0.021], [0.476,-0.149], [0.663,-0.276], [0.756,-0.404], [0.799,-0.531], [0.807,-0.659], [0.782,-0.744], [0.731,-0.829], [0.671,-0.880], [0.595,-0.910], [0.476,-0.914], [0.357,-0.910], [0.281,-0.880], [0.221,-0.829], [0.170,-0.744], [0.128,-0.659], [0.085,-0.565], [0.128,-0.659], [0.170,-0.744], [0.221,-0.829], [0.281,-0.880], [0.357,-0.910], [0.476,-0.914], [0.476,-0.786], [0.561,-0.786], [0.646,-0.786], [0.731,-0.786], [0.816,-0.786], [0.901,-0.786], [1.241,-0.786],  ],\n  '!' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.255,-0.531], [0.255,-0.276], [0.255,-0.021], [0.255,0.234], [0.255,0.489], [0.255,0.786], [0.255,0.489], [0.255,0.234], [0.255,-0.021], [0.255,-0.276], [0.255,-0.531], [0.255,-0.786], [0.442,-0.786], [0.391,-0.659], [0.255,-0.574], [0.119,-0.659], [0.068,-0.786], [0.119,-0.914], [0.255,-0.999], [0.391,-0.914], [0.442,-0.786], [0.255,-0.786], [0.425,-0.786], [0.510,-0.786], [0.850,-0.786],  ],\n}\n","import Victor from 'victor'\nimport { raysol_cursive } from './raysol_cursive'\nimport { raysol_sanserif } from './raysol_sanserif'\n\nconst fontSpacing = 1.5\n\n// Format for vertices: [x,y,b] where in a 0:7(8) by -1:7 grid defining x,y and b defines the line or curve.\n// Bulge directions could be represented by a 0:4 list starting at none, then NE and going clockwise.\n// 4  1\n// 3  2\nlet billsey = {\n  ' ': [ [8,-1,0] ],\n  'A': [ [0,0,0], [3.5,7,0], [7,0,0], [5,3.5,0], [2,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'B': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [0,3.5,0], [3.5,3.5,0], [7,1.75,1], [3.5,0,2], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'C': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,3.5,4], [3.5,0,3], [7,1.75,2], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'D': [ [0,0,0], [0,7,0], [3.5,7,0], [7,3.5,1], [3.5,0,2], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'E': [ [0,0,0], [0,7,0], [7,7,0], [0,7,0], [0,3.5,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [7,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'F': [ [0,0,0], [0,7,0], [7,7,0], [0,7,0], [0,3.5,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'G': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,3.5,4], [3.5,0,3], [7,1.75,2], [5.25,1.75,0], [7,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'H': [ [0,0,0], [0,7,0], [0,3.5,0], [7,3.5,0], [7,7,0], [7,0,0], [7,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'I': [ [3.5,-1,0], [3.5,7,0], [0,7,0], [7,7,0], [3.5,7,0], [3.5,0,0], [0,0,0], [7,0,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'J': [ [3.5,-1,0], [3.5,0,0], [0,1.75,3], [3.5,0,3], [7,1.75,2], [7,7,0], [7,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'K': [ [0,0,0], [0,7,0], [0,1.75,0], [3.5,3.5,0], [7,7,0], [3.5,3.5,0], [7,0,0], [3.5,3.5,0], [0,1.75,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'L': [ [0,0,0], [0,7,0], [0,0,0], [7,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'M': [ [0,0,0], [0,7,0], [3.5,0,0], [7,7,0], [7,0,0], [7,7,0], [3.5,0,0], [0,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'N': [ [0,0,0], [0,7,0], [7,0,0], [7,7,0], [7,0,0], [0,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'O': [ [3.5,-1,0], [3.5, 0, 0], [0, 3.5, 3], [3.5, 7, 4], [7.0, 3.5, 1], [3.5, 0, 2], [3.5, -1, 0], [8, -1, 0] ],\n  'P': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'Q': [ [3.5,-1,0], [3.5, 0, 0], [0, 3.5, 3], [3.5, 7, 4], [7.0, 3.5, 1], [3.5, 0, 2], [4.325,0.5,4], [6.075,0,0], [7,0.5,2], [6.075,0,2], [4.325,0.5,0], [3.5,0,4], [3.5, -1, 0], [8, -1, 0] ],\n  'R': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [7,0,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'S': [ [3.5,-1,0], [3.5,0,0], [0,1.75,3], [3.5,0,3], [7,1.75,2], [3.5,3.5,1], [0,5.25,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,5.25,4], [3.5,3.5,3], [7,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'T': [ [3.5,-1,0], [3.5,7,0], [0,7,0], [7,7,0], [3.5,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'U': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [0,7,0], [0,3.5,0], [3.5,0,3], [7,3.5,2], [7,7,0], [7,3.5,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'V': [ [3.5,-1,0], [3.5,0,0], [0,7,0], [3.5,0,0], [7,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'W': [ [1.75,-1,0], [1.75,0,0], [0,7,0], [1.75,0,0], [3.5,7,0], [5.25,0,0], [7,7,0], [5.25,0,0], [3.5,7,0], [1.75,0,0], [1.75,-1,0], [8,-1,0] ],\n  'X': [ [0,0,0], [7,7,0], [3.5,3.5,0], [0,7,0], [7,0,0], [3.5,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'Y': [ [3.5,-1,0], [3.5,3.5,0], [0,7,0], [3.5,3.5,0], [7,7,0], [3.5,3.5,0], [3.5,-1,0], [8,-1,0] ],\n  'Z': [ [0,0,0], [7,0,0], [0,0,0], [7,7,0], [0,7,0], [7,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  '0': [ [3.5,-1,0], [3.5,0,0], [6,3.5,2], [3.5,7,1], [1,3.5,4], [3.5,0,3], [3.5,-1,0], [8,-1,0] ],\n  '1': [ [0,-1,0], [0,0,0], [0,0,0], [7,0,0], [3.5,0,0], [3.5,7,0], [1.5,6,2], [3.5,7,2], [3.5,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  '2': [ [1,-1,0], [1,0,0], [6,5.25,0], [3.5,7,1], [1,5.25,4], [3.5,7,4], [6,5.25,1], [1,0,0], [6,0,0], [1,0,0], [1,-1,0], [8,-1,0] ],\n  '3': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [3.5,0,3], [6,1.75,2], [3.5,3.5,1], [6,5.25,2], [3.5,7,1], [1,5.25,4], [3.5,7,4], [6,5.25,1], [3.5,3.5,2], [6,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '4': [ [3.5,-1,0], [3.5,0,0], [3.5,7,0], [1,3.5,0], [6,3.5,0], [3.5,3.5,0], [3.5,-1,0], [8,-1,0] ],\n  '5': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [3.5,0,3], [6,1.75,2], [3.5,3.5,1],[1,3.5,0], [1,7,0], [6,7,0], [1,7,0], [1,3.5,0], [3.5,3.5,0], [6,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '6': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [5.25,7,4], [1,1.75,4], [3.5,0,3],[6,1.75,2], [3.5,3.5,1], [1,1.75,4], [3.5,0,3], [3.5,-1,0], [8,-1,0] ],\n  '7': [ [3.5,-1,0], [3.5,0,0], [6,7,0], [1,7,0], [6,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  '8': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [6,5.25,0], [3.5,7,1], [1,5.25,4], [6,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '9': [ [3.5,-1,0], [3.5,0,0], [6,5.25,2], [3.5,7,1], [1,5.25,4], [3.5,3.5,3], [6,5.25,2], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '$': [ [3.5,-1,0], [3.5,0.5,0], [0,2.00,3], [3.5,0.5,3], [7,2.00,2], [3.5,3.5,1], [0,5.00,3], [3.5,6.5,4], [7,5.00,1], [3.5,6.5,1], [3.5, 7, 0], [3.5, 0, 0], [3.5,-1,0], [8,-1,0] ],\n  '.': [ [3.5,-1,0], [3.5,0.5,0], [3,1,3], [3.5,1.5,4], [4,1,1], [3.5,0.5,2], [3.5,-1,0], [8,-1,0] ],\n}\n\n// This is a clever way to create a range from 0..32, and then compute an x,y for each of those\n// points on the unit circle from zero to pi/2.\nconst curve = [...Array(32).keys()].map((index) => {\n  let angle = (index+1) * Math.PI/2.0/32.0\n  return new Victor(Math.cos(angle), Math.sin(angle))\n})\n\nconst billseyConverter = (vertices) => {\n  let newVertices = []\n  let prevPoint = new Victor(0,0)\n  vertices.forEach( (vertex) => {\n    switch (vertex[2]) {\n    case 0:\n    default:\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 1: // NE\n      if (vertex[1] < prevPoint[1]) { // clockwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      } else { // ccwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 2: // SE\n      if (vertex[1] < prevPoint[1]) { // clockwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      } else { // ccwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 3: // SW\n      if (vertex[1] > prevPoint[1]) { // clockwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      } else { // ccwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 4: // NW\n      if (vertex[1] > prevPoint[1]) { // clockwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      } else { // ccwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    }\n    prevPoint = vertex\n  })\n\n  const scale = 0.6;\n  const offset_y = -0.5\n  const scaledVertices = newVertices.map( vertex => {\n    return new Victor(scale * vertex.x, scale * vertex.y + offset_y)\n  })\n  return {\n    maxX: fontSpacing,\n    vertices: scaledVertices,\n  }\n}\n\nconst raysolConverter = (vertices) => {\n  let newVertices = []\n  vertices.forEach( (vertex) => {\n    newVertices.push(new Victor(vertex[0], vertex[1]))\n  })\n\n  return {\n    maxX: fontSpacing,\n    vertices: newVertices,\n  }\n}\n\nexport const MonospaceFont = (ch) => {\n  let upper = ch.toUpperCase()\n  if (billsey.hasOwnProperty(upper)) {\n    return billseyConverter(billsey[upper])\n  } else {\n    return billseyConverter(billsey[' '])\n  }\n}\n\nexport const CursiveFont = (ch) => {\n  if (raysol_cursive.hasOwnProperty(ch)) {\n    return raysolConverter(raysol_cursive[ch])\n  } else {\n    return raysolConverter(raysol_cursive[' '])\n  }\n}\n\nexport const SansSerifFont = (ch) => {\n  if (raysol_cursive.hasOwnProperty(ch)) {\n    return raysolConverter(raysol_sanserif[ch])\n  } else {\n    return raysolConverter(raysol_sanserif[' '])\n  }\n}\n","import Victor from 'victor'\nimport { roundP } from './util'\n\n// convert degrees to radians\nexport const degToRad = (deg) => {\n  return deg / 180.0 * Math.PI\n}\n\n// convert radians to degrees\nexport const radToDeg = (rad) => {\n  return rad * 180.0 / Math.PI\n}\n\nexport const distance = (v1, v2) => {\n  return Math.sqrt(Math.pow(v1.x - v2.x, 2.0) + Math.pow(v1.y - v2.y, 2.0))\n}\n\n// calculate the coterminal angle (0..2*PI) of a given angle\nexport const coterminal = (angle) => {\n  return angle - Math.floor(angle / (Math.PI * 2)) * Math.PI * 2\n}\n\nexport const angle = (point) => {\n  return Math.atan2(point.y, point.x)\n}\n\n// returns whether a point is on the segment defined by start and end\nexport const onSegment = (start, end, point) => {\n  return start.distance(point) + end.distance(point) - start.distance(end) < 0.001\n}\n\nexport const slope = (v1, v2) => {\n  let d = v2.x - v1.x\n  let n = v2.y - v1.y\n  return d === 0 ? undefined : n / d\n}\n\n// computes a bounding box from a set of points.\nexport const findBounds = (vertices) => {\n  let n = vertices.length\n\n  if (n === 0) {\n    return []\n  }\n\n  let loX = vertices[0].x\n  let hiX = vertices[0].x\n  let loY = vertices[0].y\n  let hiY = vertices[0].y\n\n  for(let i=1; i<n; ++i) {\n    let p = vertices[i]\n    loX = Math.min(loX, p.x)\n    hiX = Math.max(hiX, p.x)\n    loY = Math.min(loY, p.y)\n    hiY = Math.max(hiY, p.y)\n  }\n\n  return [new Victor(loX, loY), new Victor(hiX, hiY)]\n}\n\n// resizes each vertex in a list to the specified dimensions. Will not stretch the shape.\nexport const resizeVertices = (vertices, sizeX, sizeY) => {\n  let size = Math.max(sizeX, sizeY)\n  let bounds = findBounds(vertices)\n  let curveSize = Math.max(bounds[1].y - bounds[0].y, bounds[1].x - bounds[0].x)\n  let scale = size/curveSize\n\n  let scaledBounds = [bounds[0].multiply({x: scale, y: scale}), bounds[1].multiply({x: scale, y: scale})]\n  let deltaX = scaledBounds[1].x - (scaledBounds[1].x - scaledBounds[0].x)/2\n  let deltaY = scaledBounds[1].y - (scaledBounds[1].y - scaledBounds[0].y)/2\n\n  return vertices.map(vertex => vertex.clone().multiply({x: scale, y: scale}).add({x: -deltaX, y: -deltaY}))\n}\n\n// returns a vertex with x and y rounded to p number of digits\nexport const vertexRoundP = (v, p) => {\n  return new Victor(roundP(v.x, p), roundP(v.y, p))\n}\n\n// Transform functions\nexport const rotate = (vertex, angleDeg) => {\n  const angle = Math.PI / 180.0 * angleDeg\n  return new Victor(\n   vertex.x * Math.cos(angle) - vertex.y * Math.sin(angle),\n   vertex.x * Math.sin(angle) + vertex.y * Math.cos(angle)\n  )\n}\n\nexport const scale = (vertex, pctX, pctY) => {\n  const scaleX = pctX / 100.0\n  if (pctY === undefined) pctY = pctX\n  const scaleY = pctY / 100.0\n\n  return new Victor(\n    vertex.x * scaleX,\n    vertex.y * scaleY\n  )\n}\n\nexport const offset = (vertex, offsetX, offsetY) => {\n  return new Victor(\n    vertex.x + offsetX,\n    vertex.y + offsetY\n  )\n}\n\n// given a set of vertices and a slider value, returns the indices of the\n// start and end vertices representing a preview slider moving through them.\nexport const getSliderBounds = (vertices, sliderValue) => {\n  const slideSize = 2.0\n  const beginFraction = sliderValue / 100.0\n  const endFraction = (slideSize + sliderValue) / 100.0\n  let start = Math.round(vertices.length * beginFraction)\n  let end = Math.round(vertices.length * endFraction) - 1\n\n  if (start === end) {\n    if (start > 1) start = start - 2\n  } else if (start === end - 1) {\n    if (start > 0) start = start - 1\n  }\n\n  if (end >= vertices.length) {\n    end = vertices.length - 1\n  }\n\n  return { start: start, end: end }\n}\n\n// returns an array of points drawing a circle of a given radius\nexport const circle = (radius=1, start=0) => {\n  let points = []\n\n  for (let i=start; i<=128+start; i++) {\n    let angle = Math.PI * 2.0 / 128.0 * i\n    points.push(new Victor(Math.cos(angle)*radius, Math.sin(angle)*radius))\n  }\n\n  return points\n}\n","import { vertexRoundP } from '../../common/geometry'\n\n// base machine class\nexport default class Machine {\n  polish() {\n    this.enforceLimits()\n      .cleanVertices()\n      .limitPrecision()\n      .optimizePerimeter()\n\n    if (this.layerInfo.border) this.outlinePerimeter()\n    if (this.layerInfo.start) this.addStartPoint()\n    if (this.layerInfo.end) this.addEndPoint()\n\n    return this\n  }\n\n  // clean the list of vertices and remove duplicate points\n  cleanVertices() {\n    let previous = null\n    let cleanVertices = []\n\n    for (let i=0; i<this.vertices.length; i++) {\n      if (previous) {\n        let start = this.vertices[i]\n        let end = previous\n\n        if (start.distance(end) > 0.001) {\n          cleanVertices.push(this.nearestVertex(this.vertices[i]))\n        }\n      } else {\n        cleanVertices.push(this.nearestVertex(this.vertices[i]))\n      }\n      previous = this.vertices[i]\n    }\n\n    this.vertices = cleanVertices\n    return this\n  }\n\n  // walk the given vertices, clipping as needed along the perimeter\n  enforceLimits() {\n    let cleanVertices = []\n    let previous = null\n\n    for (let next=0; next<this.vertices.length; next++) {\n      const vertex = this.vertices[next]\n\n      if (previous) {\n        const line = this.clipLine(previous, vertex)\n\n        for (let pt=0; pt<line.length; pt++) {\n          if (line[pt] !== previous) {\n            cleanVertices.push(line[pt])\n          }\n        }\n      } else {\n        cleanVertices.push(this.nearestVertex(vertex))\n      }\n\n      previous = vertex\n    }\n\n    this.vertices = cleanVertices\n    return this\n  }\n\n  // strip out unnecessary/redundant perimeter moves\n  optimizePerimeter() {\n    let segments = this.stripExtraPerimeterVertices()\n\n    if (this.settings.minimizeMoves) {\n      segments = this.minimizePerimeterMoves(segments)\n    }\n\n    // connect the segments together\n    let connectedVertices = []\n    for (let j=0; j<segments.length; j++) {\n      const current = segments[j]\n\n      if (j > 0) {\n        // connect the two segments along the perimeter\n        const prev = segments[j-1]\n        connectedVertices.push(this.tracePerimeter(prev[prev.length-1], current[0]))\n      }\n      connectedVertices.push(current)\n    }\n\n    this.vertices = connectedVertices.flat()\n    return this\n  }\n\n  // remove all non-essential perimeter vertices. returns a list of segments\n  // involving non-perimeter paths\n  stripExtraPerimeterVertices() {\n    let segments = []\n    let segment = []\n    let perimeter = null\n\n    for (let i=0; i<this.vertices.length; i++) {\n      const curr = this.vertices[i]\n      const prev = this.vertices[i-1]\n\n      if (!prev || !this.onPerimeter(curr, prev)) {\n        if (perimeter) { segment.push(perimeter) }\n        segment.push(curr)\n        perimeter = null\n      } else {\n        if (!perimeter) {\n          segments.push(segment)\n          segment = []\n        }\n        perimeter = curr\n      }\n    }\n\n    if (segment.length > 0) {\n      segments.push(segment)\n    }\n\n    return segments\n  }\n\n  // primitive O(n^2) algorithm that orders segments to try to minimize the distance traveled\n  minimizePerimeterMoves(segments) {\n    let walked = []\n    let current = segments.shift()\n    let currentIndex\n    let lastSegment\n\n    if (segments.length > 0) {\n      // reserve the last segment to ensure we don't draw an invalid line connecting\n      // to it\n      lastSegment = segments.pop()\n    }\n\n    walked.push(current)\n    while (segments.length > 0) {\n      // find segment that is the shortest distance from our current one\n      let minDist = Number.MAX_SAFE_INTEGER\n      let prev = current\n\n      /* eslint-disable no-loop-func */\n      segments.forEach((segment, index) => {\n        const dist = Math.min(\n          this.perimeterDistance(current[current.length-1], segment[0]),\n          this.perimeterDistance(current[current.length-1], segment[segment.length-1])\n        )\n\n        if (dist < minDist) {\n          currentIndex = index\n          minDist = dist\n        }\n      })\n      /* eslint-enable no-loop-func */\n\n      // reverse if needed to connect\n      current = segments.splice(currentIndex, 1)[0]\n      if (this.perimeterDistance(prev[prev.length-1], current[0]) > this.perimeterDistance(prev[prev.length-1], current[current.length-1])) {\n        current = current.reverse()\n      }\n      walked.push(current)\n    }\n\n    if (lastSegment) {\n      walked.push(lastSegment)\n    }\n\n    return walked\n  }\n\n  // round each vertex to the nearest .001. This eliminates floating point\n  // math errors and allows us to do accurate equality comparisons.\n  limitPrecision() {\n    this.vertices = this.vertices.map(vertex => vertexRoundP(vertex, 3))\n    return this\n  }\n}\n","import { angle, onSegment, circle } from '../../common/geometry'\nimport Machine from './Machine'\nimport Victor from 'victor'\n\nexport const traceCircle = (startAngle, endAngle, size) => {\n  let resolution = (Math.PI*2.0) / 128.0 // 128 segments per circle. Enough?\n  let deltaAngle = ((endAngle - startAngle) + 2.0 * Math.PI) % (2.0 * Math.PI)\n\n  if (deltaAngle > Math.PI) {\n    deltaAngle -= 2.0 * Math.PI\n  }\n  if (deltaAngle < 0.0) {\n    resolution *= -1.0\n  }\n\n  let tracePoints = []\n  for (let step = 0; step < (deltaAngle/resolution) ; step++) {\n    tracePoints.push(Victor(size * Math.cos(resolution * step + startAngle),\n                            size * Math.sin(resolution * step + startAngle)))\n  }\n  return tracePoints\n}\n\nexport default class PolarMachine extends Machine {\n  constructor(vertices, settings, layerInfo={}) {\n    super()\n    this.vertices = vertices\n    this.settings = Object.assign({}, settings)\n    this.settings.perimeterConstant = 50\n    this.layerInfo = layerInfo\n  }\n\n  addStartPoint() {\n    const maxRadius = this.settings.maxRadius\n\n    if (this.settings.polarStartPoint !== 'none') {\n      if (this.settings.polarStartPoint === 'center') {\n        this.vertices.unshift(new Victor(0.0, 0.0))\n      } else {\n        const first = this.vertices[0]\n        const scale = maxRadius / first.magnitude()\n        const startPoint = Victor.fromObject(first).multiply(new Victor(scale, scale))\n        this.vertices.unshift(new Victor(startPoint.x, startPoint.y))\n      }\n    }\n  }\n\n  addEndPoint() {\n    const maxRadius = this.settings.maxRadius\n\n    if (this.settings.polarEndPoint !== 'none') {\n      if (this.settings.polarEndPoint === 'center') {\n        this.vertices.push(new Victor(0.0, 0.0))\n      } else {\n        const last = this.vertices[this.vertices.length-1]\n        const scale = maxRadius / last.magnitude()\n        const endPoint =  Victor.fromObject(last).multiply(new Victor(scale, scale))\n        this.vertices.push(new Victor(endPoint.x, endPoint.y))\n      }\n    }\n  }\n\n  // Finds the nearest vertex that is in the bounds of the circle. This will change the\n  // shape. i.e. this doesn't care about the line segment, only about the point.\n  nearestVertex(vertex) {\n    const size = this.settings.maxRadius\n\n    if ( vertex.length() > size) {\n      const scale = size / vertex.length()\n      return vertex.multiply(new Victor(scale, scale))\n    } else {\n      return vertex\n    }\n  }\n\n  inBounds(vertex) {\n    return vertex.length() < this.settings.maxRadius\n  }\n\n  // Returns the nearest perimeter vertex to the given vertex.\n  nearestPerimeterVertex(vertex) {\n    if (vertex) {\n      return new Victor(Math.cos(vertex.angle()) * this.settings.maxRadius, Math.sin(vertex.angle()) * this.settings.maxRadius)\n    } else {\n      return new Victor(0,0)\n    }\n  }\n\n  // Returns the distance along the perimeter between two points.\n  perimeterDistance(v1, v2) {\n    const startAngle = angle(v1)\n    const endAngle = angle(v2)\n    let deltaAngle = Math.abs(endAngle - startAngle)\n\n    if (deltaAngle > Math.PI) {\n      deltaAngle -= 2.0 * Math.PI\n    }\n\n    return Math.abs(deltaAngle) * this.settings.maxRadius\n  }\n\n  // Returns points along the circle from the start to the end, tracing a circle of radius size.\n  tracePerimeter(start, end) {\n    return traceCircle(start.angle(), end.angle(), this.settings.maxRadius)\n  }\n\n  outlinePerimeter() {\n    const last = this.vertices[this.vertices.length - 1]\n\n    if (last) {\n      this.vertices = this.vertices.concat(circle(this.settings.maxRadius, parseInt(last.angle()*64/Math.PI)))\n    }\n    return this\n  }\n\n  // Returns whether a given path lies on the perimeter of the circle.\n  onPerimeter(v1, v2, delta=1) {\n    let rm = Math.pow(this.settings.maxRadius, 2)\n    let r1 = Math.pow(v1.x, 2) + Math.pow(v1.y, 2)\n    let r2 = Math.pow(v2.x, 2) + Math.pow(v2.y, 2)\n    let d = this.perimeterDistance(v1, v2)\n\n    // Delta is purposefully large to accommodate the squaring of the compared values.\n    // Setting delta too small will result in perimeter moves being miscategorized.\n    // d is used to guard against the case where there is a straight line connecting two\n    // perimeter points directly. In this case, we want to register that as a non-perimeter\n    // move, or it will be incorrectly optimized out of the final vertices. The 3/50\n    // ratio could likely be refined further (relative to maxRadius), but it seems to produce\n    // accurate results at various machine sizes.\n    return Math.abs(r1 - rm) < delta && Math.abs(r2 - rm) < delta && d < 3*this.settings.maxRadius/this.settings.perimeterConstant\n  }\n\n  // The guts of logic for this limits enforcer. It will take a single line (defined by\n  // start and end) and if the line goes out of bounds, returns the vertices around the\n  // outside edge to follow around without messing up the shape of the vertices.\n  clipLine(start, end) {\n    // Cases:\n    // 1 - Entire line is inside\n    //     return start, end\n    // 2 - Entire line is outside\n    //     trace from start to end\n    // 3 - only start is inside\n    //     find the intersection\n    //     include start\n    //     include intersection\n    //     trace from intersection to closest to end point\n    // 4 - only end is inside\n    //     do reverse of 3\n    // 4 - Neither end is inside, but there is some line segment inside\n    //     find both intersections\n    //     trace from start to first intersction\n    //     trace from second intersection to end\n    const size = this.settings.maxRadius\n    const radStart = start.magnitude()\n    const radEnd = end.magnitude()\n\n    if (radStart <= size && radEnd <= size) {\n      // The whole segment is inside\n      return [start, end]\n    }\n\n    // Check for the odd case of coincident points\n    if (start.distance(end) < 0.00001) {\n       return [this.nearestVertex(start)]\n    }\n\n    let intersections = this.getIntersections(start, end)\n    if (!intersections.intersection) {\n      // The whole line is outside, just trace.\n      return this.tracePerimeter(start, end)\n    }\n\n    // if neither point is on the segment, then it should just be a trace\n    if (!intersections.points[0].on && !intersections.points[1].on) {\n      return this.tracePerimeter(start, end)\n    }\n\n    // If both points are outside, but there's an intersection\n    if (radStart > size + 1.0e-9 && radEnd > size + 1.0e-9) {\n      let point = intersections.points[0].point\n      let otherPoint = intersections.points[1].point\n\n      return [\n        ...this.tracePerimeter(start, point),\n        point,\n        ...this.tracePerimeter(otherPoint, end)\n      ]\n    }\n\n    // If we're here, then one point is still in the circle.\n    if (radStart <= size) {\n      let point1 = (intersections.points[0].on && Math.abs(intersections.points[0].point - start) > 0.0001) ? intersections.points[0].point : intersections.points[1].point\n\n      return [\n        start,\n        ...this.tracePerimeter(point1, end),\n        end\n      ]\n    } else {\n      const point1 = intersections.points[0].on ? intersections.points[0].point : intersections.points[1].point\n\n      return [\n        ...this.tracePerimeter(start, point1),\n        point1,\n        end\n      ]\n    }\n  }\n\n  getIntersections(start, end) {\n    const size = this.settings.maxRadius\n    let direction = end.clone().subtract(start).clone().normalize()\n    let t = direction.x * -1.0 * start.x + direction.y * -1.0 * start.y\n    let e = direction.clone().multiply(Victor(t,t)).add(start)\n    let distanceToLine = e.magnitude()\n\n    if (distanceToLine >= size) {\n      return {\n        intersection: false,\n        points: [],\n      }\n    }\n\n    let dt = Math.sqrt(size*size - distanceToLine*distanceToLine)\n    let point1 = direction.clone().multiply(Victor(t - dt,t - dt)).add(start)\n    let point2 = direction.clone().multiply(Victor(t + dt,t + dt)).add(start)\n\n    return {\n      intersection: true,\n      points: [\n        {\n          point: point1,\n          on: onSegment(start, end, point1),\n        },\n        {\n          point: point2,\n          on: onSegment(start, end, point2),\n        }\n      ]}\n  }\n}\n","import { CursiveFont, SansSerifFont, MonospaceFont } from './Fonts'\nimport Victor from 'victor'\nimport Shape, { shapeOptions } from '../Shape'\nimport { traceCircle } from '../../features/machine/PolarMachine'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    inputText: {\n      title: 'Text',\n      type: 'textarea',\n    },\n    inputFont: {\n      title: 'Font',\n      type: 'dropdown',\n      choices: ['Cursive', 'Sans Serif', 'Monospace'],\n    },\n    rotateDir: {\n      title: 'Rotate',\n      type: 'dropdown',\n      choices: ['Top', 'Center', 'Bottom'],\n    },\n  }\n}\n\nfunction getMaxX(points) {\n  // Measure the width of the line\n  let maxX = 0\n  points.forEach( (point) => {\n    if (point.x > maxX) {\n      maxX = point.x\n    }\n  })\n  return maxX\n}\n\nexport default class InputText extends Shape {\n  constructor() {\n    super('Text')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'inputText',\n        inputText: 'Sandify',\n        inputFont: 'Cursive',\n        rotateDir: 'Center',\n        repeatEnabled: false\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let prevLetter = ''\n    let x = 0.0\n    let lines = []\n    let textPoints = []\n\n    for (let chi = 0; chi < state.shape.inputText.length; chi++) {\n      var nextLetter = state.shape.inputText[chi]\n      if (prevLetter === 'b' || prevLetter === 'v' || prevLetter === 'o' || prevLetter === 'w') {\n        // Save this letter before we possibly add in a '*'\n        prevLetter = nextLetter\n        if (nextLetter.search('[a-z]+') !== -1 && state.shape.inputFont === 'Cursive')\n        {\n          nextLetter = nextLetter + '*'\n        }\n      }\n      else {\n        prevLetter = nextLetter\n      }\n\n      if (nextLetter === '\\n') {\n        // New line\n        lines.push(points)\n        points = []\n        x = 0.0\n        continue\n      }\n\n      var shape = undefined\n      if (state.shape.inputFont === 'Cursive') {\n        shape = CursiveFont(nextLetter)\n      } else if (state.shape.inputFont === 'Sans Serif') {\n        shape = SansSerifFont(nextLetter)\n      } else if (state.shape.inputFont === 'Monospace') {\n        shape = MonospaceFont(nextLetter)\n      } else {\n        // Internal error, but I'm going to just recover\n        shape = CursiveFont(nextLetter)\n      }\n\n      // TODO add in the \"Kern\" here.\n      for (let vi = 0; vi < shape.vertices.length; vi++) {\n        points.push(new Victor(shape.vertices[vi].x + x, shape.vertices[vi].y))\n      }\n      x += shape.vertices[shape.vertices.length-1].x\n    }\n    // Save the last line we were working on.\n    lines.push(points)\n\n    // The height of a row of text, including the space above.\n    const maxY = 2.4\n\n    if (state.shape.rotateDir === 'Center') {\n      // Starting Y offset\n      let y = (lines.length - 1) * maxY / 2.0\n\n      // Capture some wrap around points, to connect the lines.\n      let connectorPoints = []\n      lines.forEach( (points) => {\n        let maxX = getMaxX(points)\n        let widthOffset = maxX / 2.0\n\n        // Add in the connector points (if we have any)\n        textPoints = [...textPoints, ...connectorPoints]\n        connectorPoints = []\n\n        // offset the line's vertices\n        textPoints = [...textPoints, ...points.map( (point) => {\n          return new Victor(point.x - widthOffset, point.y + y)\n        })]\n\n        // Add in some points way off, so to wrap around for this line.\n        connectorPoints.push(new Victor(1e9, y))\n        connectorPoints.push(new Victor(1e9, -1e9))\n        connectorPoints.push(new Victor(-1e9, -1e9))\n        y -= maxY\n        connectorPoints.push(new Victor(-1e9, y))\n      })\n    } else {\n      // This variable controls \"Top\" vs. \"Bottom\"\n      let direction = 1.0\n      if (state.shape.rotateDir === 'Bottom') {\n        direction = -1.0\n        lines.reverse()\n      }\n\n      // Some constants to rotate the letters.\n      //\n      // The \"lines\" object contains lines of words, in vertices.\n      // The vertices are in X, Y, the X starts at 0, the Y goes between -something and +something.\n      // The middle of the word is about at Y=0.\n      //\n      // We want the words to follow around a circle. We want them to stay about the same size, as\n      // if they were plotted in a line. We want them to be centered.\n      //\n      // r is the radius, theta is the angle.\n      // rPerY is the multiplier to get from Y to r.\n      // thetaPerX is the multiplier to get from X to theta.\n      //\n      // The Max is based on how far away from the center we start.\n      //\n      // Offset is because we want to start the row far away from the center.\n      //\n      // thetaCenter is how far off from the theta=0 we start the words.\n      //\n      const maxRPerY = 0.8\n      let rPerY = direction * maxRPerY\n      let thetaCenter = direction * Math.PI / 2.0\n      const maxROffset = maxY * 2.0\n      let rOffset = maxROffset\n      const rOffsetPerLine = rOffset / lines.length\n      let thetaPerX = -rPerY / rOffset\n\n      // This captures the previous angle, so we can track around for the next line.\n      let lastTheta\n\n      lines.forEach( (points) => {\n\n        let maxX = getMaxX(points)\n        // This widthOffset is in X.\n        let widthOffset = maxX / 2.0\n\n        // Scale the size of the words to fit within one circle.\n        if (Math.PI * 2.0 < Math.abs(thetaPerX * maxX)) {\n          // We are going to roll all the way around\n          thetaPerX = direction * -Math.PI * 2.0 / maxX\n          rPerY = -thetaPerX * rOffset\n        }\n\n        // Add in the connector points (if we have any)\n        if (lastTheta) {\n          let endTheta = thetaCenter + thetaPerX * -widthOffset\n\n          // Get the Y value of the first point in the next (this) line.\n          let r = rOffset + rPerY * 0.0\n          if (points.length > 0) {\n            r = rOffset + rPerY * points[0].y\n          }\n\n          textPoints = [...textPoints, ...traceCircle(lastTheta, endTheta, r)]\n        }\n\n        // Transform the points and add them to textPoints.\n        textPoints = [...textPoints, ...points.map( (point) => {\n          const r = rOffset + rPerY * point.y\n          lastTheta = thetaCenter + thetaPerX * (point.x - widthOffset)\n          return new Victor(r * Math.cos(lastTheta), r * Math.sin(lastTheta))\n        })]\n\n        // Set up for the next line.\n        rOffset -= rOffsetPerLine\n        rPerY = direction * Math.sqrt(maxRPerY * rOffset / maxROffset)\n        thetaPerX = -rPerY / rOffset\n      })\n    }\n\n    const scale = 2.5 // to normalize starting size\n    textPoints.forEach(point => point.multiply({x: scale, y: scale }))\n    return textPoints\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport { vertexRoundP } from './geometry'\n\nexport const onSubtypeChange = (subtype, changes, attrs) => {\n  // if we switch back with too many iterations, the code\n  // will crash from recursion, so we'll set a ceiling where needed\n  if (subtype) {\n    let max = subtype.maxIterations\n    let min = subtype.minIterations\n    let iterations = attrs.iterations || 1\n\n    if (max) {\n      iterations = Math.min(iterations, max)\n    }\n\n    if (min) {\n      iterations = Math.max(iterations, min)\n    }\n\n    changes.iterations = iterations\n  }\n\n  return changes\n}\n\nexport const onMinIterations = (subtype, state) => {\n  return (subtype && subtype.minIterations) || 1\n}\n\nexport const onMaxIterations = (subtype, state) => {\n  return (subtype && subtype.maxIterations) || 7\n}\n\n// Implements a Lindenmayer system (L-system). See https://en.wikipedia.org/wiki/L-system.\n// Adapted from http://bl.ocks.org/nitaku/ce638f8bd5e70cb809e1\nexport const lsystem = (config) => {\n  let input = config.axiom\n  let output\n\n  for (let i=0; i<config.iterations; i++) {\n    output = ''\n\n    for (let j=0; j<input.length; j++) {\n      let char = input[j]\n\n      if (config.rules[char] !== undefined) {\n        output += config.rules[char]\n      } else {\n        output += char\n      }\n    }\n    input = output\n  }\n  return output\n}\n\nconst lsystemDraw = (vertex, angle, config) => {\n  return vertexRoundP(vertex.clone().add({x: -config.side * Math.cos(angle), y: -config.side * Math.sin(angle)}), 2)\n}\n\nexport const lsystemPath = (instructions, config) => {\n  let vertex = new Victor(0, 0)\n  let currVertices = [vertex]\n  let angle = -Math.PI/2\n\n  if (config.startingAngle) {\n    angle = typeof config.startingAngle === 'function' ?\n      config.startingAngle(config.iterations) :\n      config.startingAngle\n  }\n\n  // This will store the previous return paths we are not working on.\n  let returnPaths = []\n  for (let i=0; i<instructions.length; i++) {\n    let char = instructions[i]\n\n    if (char === '+') {\n      angle += config.angle\n      if (returnPaths.length) {\n        returnPaths.slice(-1)[0].push('-')\n      }\n    } else if (char === '-') {\n      angle -= config.angle\n      if (returnPaths.length) {\n        returnPaths.slice(-1)[0].push('+')\n      }\n    } else if (config.draw.includes(char)) {\n      vertex = lsystemDraw(vertex, angle, config)\n      currVertices.push(vertex)\n      if (returnPaths.length) {\n        returnPaths.slice(-1)[0].push('B')\n      }\n    } else if (char === '[') {\n      // open a branch\n      returnPaths.push([])\n\n    } else if (char === ']') {\n      // Return to the beginning of the branch\n      let returnPath = returnPaths.pop().reverse()\n\n      for (let j=0; j<returnPath.length; j++) {\n        let revChar = returnPath[j]\n\n        if (revChar === '+') {\n          angle += config.angle\n        } else if (revChar === '-') {\n          angle -= config.angle\n        } else if (revChar === 'B') {\n          // Reverse Draw\n          vertex = lsystemDraw(vertex, angle + Math.PI, config)\n          currVertices.push(vertex)\n        }\n      }\n    }\n  }\n\n  return currVertices\n}\n","// L-system instructions for space filling curves\nexport const subtypes = {\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  '32-segment': {\n    axiom: 'F+F+F+F',\n    draw: ['F'],\n    rules:  {\n      F: '-F+F-F-F+F+FF-F+F+FF+F-F-FF+FF-FF+F+F-FF-F-F+FF-F-F+F+F-F+'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 2\n  },\n  // http://www.kevs3d.co.uk/dev/lsystems/\n  'Cog Triangle': {\n    axiom: 'W----W----W',\n    draw: ['F'],\n    rules:  {\n      W: '+++X--F--ZFX+',\n      X: '---W++F++YFW-',\n      Y: '+ZFX--F--Z+++',\n      Z: '-YFW++F++Y---'\n    },\n    angle: Math.PI/6,\n    minIterations: 1,\n    maxIterations: 8\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Fractal Tree': {\n    axiom: 'F',\n    draw: ['F'],\n    rules:  {\n      F: 'F[+FF][-FF]F[-F][+F]F',\n    },\n    angle: Math.PI/5,\n    maxIterations: 5\n  },\n  // https://www.vexlio.com/blog/drawing-simple-organics-with-l-systems/\n  'Fractal Tree 2': {\n    axiom: 'F',\n    draw: ['F'],\n    rules:  {\n      F: 'F[-F][+F]',\n    },\n    angle: 10*Math.PI/72,\n    maxIterations: 9\n  },\n  // https://www.vexlio.com/blog/drawing-simple-organics-with-l-systems/\n  'Fractal Tree 3': {\n    axiom: 'X',\n    draw: ['F'],\n    rules:  {\n      F: 'FF',\n      X: 'F+[-F-XF-X][+FF][--XF[+X]][++F-X]'\n    },\n    angle: Math.PI/8,\n    maxIterations: 6\n  },\n  // https://www.vexlio.com/blog/drawing-simple-organics-with-l-systems/\n  'Fractal Tree 4': {\n    axiom: 'X',\n    draw: ['F'],\n    rules:  {\n      F: 'FX[FX[+XF]]',\n      X: 'FF[+XZ++X-F[+ZX]][-X++F-X]',\n      Z: '[+F-X-F][++ZX]'\n    },\n    angle: Math.PI/8,\n    maxIterations: 5\n  },\n  // http://algorithmicbotany.org/papers/abop/abop-ch1.pdf\n  'Fractal Tree 5': {\n    axiom: 'X',\n    draw: ['F'],\n    rules:  {\n      X: 'F[+X]F[-X]+X',\n      F: 'FF'\n    },\n    angle: Math.PI/9,\n    maxIterations: 8\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Gosper (flowsnake)': {\n    axiom: 'A',\n    draw: ['A', 'B'],\n    rules:  {\n      A: 'A-B--B+A++AA+B-',\n      B: '+A-BB--B-A++A+B'\n    },\n    angle: Math.PI / 3,\n    maxIterations: 5\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Ice': {\n    axiom: 'F+F+F+F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF+F++F+F'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 6\n  },\n  // https://fronkonstin.com/2017/06/26/a-shiny-app-to-draw-curves-based-on-l-systems/\n  'Koch Cube 1': {\n    axiom: 'F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF-F-F-F-FF',\n    },\n    maxIterations: 5\n  },\n  // http://algorithmicbotany.org/papers/abop/abop-ch1.pdf\n  'Koch Cube 2': {\n    axiom: 'F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF-F+F-F-FF',\n    },\n    maxIterations: 5\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Koch Curve': {\n    axiom: 'F',\n    draw: ['F'],\n    rules:  {\n      F: 'F+F--F+F'\n    },\n    angle: 4*Math.PI/9,\n    startingAngle: Math.PI,\n    maxIterations: 7\n  },\n  // https://fronkonstin.com/2017/06/26/a-shiny-app-to-draw-curves-based-on-l-systems/\n  'Koch Flower': {\n    axiom: 'F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF-F-F-F-F-F+F',\n    },\n    maxIterations: 4\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Koch Island': {\n    axiom: 'F+F+F+F',\n    draw: ['F'],\n    rules:  {\n      F: 'F+F-F-FF+F+F-F'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 4\n  },\n  'Koch Snowflake': {\n    axiom: 'F--F--F--',\n    draw: ['F'],\n    rules:  {\n      F: 'F+F--F+F'\n    },\n    angle: Math.PI / 3,\n    startingAngle: -Math.PI / 3,\n    maxIterations: 5\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'McWorter\\'s Pentadendrite': {\n    axiom: 'F-F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'F-F-F++F+F-F',\n    },\n    angle: 2*Math.PI/5,\n    maxIterations: 5\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Penrose Tile': {\n     axiom: '[7]++[7]++[7]++[7]++[7]',\n     draw: ['6', '7', '8', '9'],\n    rules: {\n      6: '8++9----7[-8----6]++',\n      7: '+8--9[---6--7]+',\n      8: '-6++7[+++8++9]-',\n      9: '--8++++6[+9++++7]--7'\n    },\n    angle: Math.PI/5,\n    maxIterations: 6\n  },\n  'Plusses': {\n    axiom: 'XYXYXYX+XYXYXYX+XYXYXYX+XYXYXYX',\n    draw: ['F'],\n    rules:  {\n      X: 'FX+FX+FXFY-FY-',\n      Y: '+FX+FXFY-FY-FY'\n    },\n    maxIterations: 4\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Red Dragon': {\n    axiom: 'FA',\n    draw: ['F'],\n    rules:  {\n      A: 'A+BF+',\n      B: '-FA-B'\n    },\n    minIterations: 9,\n    maxIterations: 15,\n    startingAngle: Math.PI\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Sierpinski Triangle (arrowhead)': {\n    axiom: 'X',\n    draw: ['X', 'Y'],\n    rules:  {\n      X: 'Y+X+Y',\n      Y: 'X-Y-X'\n    },\n    angle: Math.PI / 3,\n    startingAngle: (i) => {\n      if (i % 2 === 0) {\n        return 0\n      } else {\n        return -Math.PI/3\n      }\n    },\n    maxIterations: 8\n  },\n}\n","import Shape, { shapeOptions } from '../Shape'\nimport {\n  lsystem,\n  lsystemPath,\n  onSubtypeChange,\n  onMinIterations,\n  onMaxIterations\n} from '../../common/lindenmayer'\nimport { subtypes } from './subtypes'\nimport { resizeVertices } from '../../common/geometry'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    subtype: {\n      title: 'Type',\n      type: 'dropdown',\n      choices: Object.keys(subtypes),\n      onChange: (changes, attrs) => {\n        return onSubtypeChange(subtypes[changes.subtype], changes, attrs)\n      }\n    },\n    iterations: {\n      title: 'Iterations',\n      min: (state) => {\n        return onMinIterations(subtypes[state.subtype], state)\n      },\n      max: (state) => {\n        return onMaxIterations(subtypes[state.subtype], state)\n      }\n    },\n  }\n}\n\nexport default class LSystem extends Shape {\n  constructor() {\n    super('Fractal Line Writer')\n    this.link = 'https://en.wikipedia.org/wiki/L-system'\n    this.linkText = 'L-systems on Wikipedia'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'lsystem',\n        iterations: 3,\n        subtype: 'McWorter\\'s Pentadendrite',\n        repeatEnabled: false\n      }\n    }\n  }\n\n  getVertices(state) {\n    const shape = state.shape\n    const iterations = shape.iterations || 1\n\n    // generate our vertices using a set of l-system rules\n    let config = subtypes[shape.subtype]\n    config.iterations = iterations\n    config.side = 5\n\n    if (config.angle === undefined) { config.angle = Math.PI/2 }\n\n    let curve = lsystemPath(lsystem(config), config)\n    const scale = 18.0 // to normalize starting size\n    return resizeVertices(curve, scale, scale)\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Shape from './Shape'\n\nexport default class Effect extends Shape {\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        effect: true,\n        canTransform: false,\n        shouldCache: false,\n        canChangeSize: true,\n        repeatEnabled: false,\n        autosize: false\n      }\n    }\n  }\n}\n","import Victor from 'victor'\nimport Machine from './Machine'\nimport { distance } from '../../common/geometry'\n\nexport default class RectMachine extends Machine {\n  constructor(vertices, settings, layerInfo={}) {\n    super()\n    this.vertices = vertices\n    this.settings = settings\n    this.layerInfo = layerInfo\n    this.sizeX = Math.abs((settings.maxX - settings.minX) / 2.0)\n    this.sizeY = Math.abs((settings.maxY - settings.minY) / 2.0)\n    this.corners = [\n      new Victor(-this.sizeX, -this.sizeY),\n      new Victor(-this.sizeX, this.sizeY),\n      new Victor(this.sizeX, this.sizeY),\n      new Victor(this.sizeX, -this.sizeY)\n    ]\n  }\n\n\n  addStartPoint() {\n    return this\n  }\n\n  addEndPoint() {\n    if (this.settings.rectOrigin.length === 1) {\n      // OK, let's assign corners indices:\n      // [1]   [2]\n      //\n      //\n      // [0]   [3]\n      const corner = this.settings.rectOrigin[0]\n      const first = this.vertices[0]\n      const last = this.vertices[this.vertices.length-1]\n      const maxRadius = Math.sqrt(Math.pow(2.0*this.sizeX, 2.0) + Math.pow(2.0*this.sizeY, 2.0)) / 2.0\n      let scale, outPoint\n\n      if (first.magnitude() <= last.magnitude()) {\n        // It's going outward\n        scale = maxRadius / last.magnitude()\n        outPoint = last\n      } else {\n        scale = maxRadius / first.magnitude()\n        outPoint = first\n      }\n\n      let clipped = this.clipLine(\n        outPoint,\n        Victor.fromObject(outPoint).multiply(new Victor(scale, scale))\n      )\n      const newPoint = clipped[clipped.length - 1]\n      if (outPoint === last) {\n        this.vertices = [this.vertices, this.tracePerimeter(newPoint, this.corners[corner], true)].flat()\n      } else {\n        this.vertices = [this.tracePerimeter(this.corners[corner], newPoint, true), this.vertices].flat()\n      }\n    }\n\n    return this\n  }\n\n  // Returns the distance along the perimeter between two points\n  perimeterDistance(v1, v2) {\n    return this.distance(this.tracePerimeter(v1, v2, true))\n  }\n\n  // Returns whether a given path lies on the perimeter of the rectangle\n  onPerimeter(v1, v2, delta=.0001) {\n    const dx = Math.abs(Math.abs(v1.x) - this.sizeX)\n    const dy = Math.abs(Math.abs(v1.y) - this.sizeY)\n    const rDx = Math.abs(v1.x - v2.x)\n    const rDy = Math.abs(v1.y - v2.y)\n\n    return (rDx < delta && dx < delta) || (rDy < delta && dy < delta)\n  }\n\n  outlinePerimeter() {\n    const last = this.vertices[this.vertices.length-1]\n\n    if (last) {\n      const s = this.nearestVertex(last)\n      const idx = this.nearestCornerIndex(s)\n      const corners = [\n        s,\n        this.corners[idx],\n        this.corners[(idx + 1) % 4],\n        this.corners[(idx + 2) % 4],\n        this.corners[(idx + 3) % 4],\n        this.corners[idx]\n      ]\n      this.vertices = this.vertices.concat(corners)\n    }\n\n    return this\n  }\n\n  // Given two perimeter points, traces the shortest valid path between them (stays on\n  // perimeter). Returns a list of intermediate points on that path (if any).\n  // On further consideration, this could be redone using Dijsktra's algorithm, I believe,\n  // but this works and is, I believe, reasonably efficient.\n  tracePerimeter(p1, p2, includeOriginalPoints=false) {\n    let points\n\n    if ((p1.x === p2.x && Math.abs(p1.x) === this.sizeX) || (p1.y === p2.y && (Math.abs(p1.y) === this.sizeY))) {\n      // on the same line; no connecting points needed\n      points = []\n    } else {\n      // horizontal or vertical orientation\n      let o1 = Math.abs(p1.x) === this.sizeX ? 'v' : 'h'\n      let o2 = Math.abs(p2.x) === this.sizeX ? 'v' : 'h'\n\n      if (o1 !== o2) {\n        // connects via a single corner\n        points = (o1 === 'h') ?\n          [new Victor(p2.x, p1.y)] :\n          [new Victor(p1.x, p2.y)]\n      } else {\n        // connects via two corners; find the shortest way around\n        if (o1 === 'h') {\n          let d1 = -2*this.sizeX - p1.x - p2.x\n          let d2 = 2*this.sizeX - p1.x - p2.x\n          let xSign = Math.abs(d1) > Math.abs(d2) ? 1 : -1\n\n          points = [\n            new Victor(Math.sign(xSign)*this.sizeX, Math.sign(p1.y)*this.sizeY),\n            new Victor(Math.sign(xSign)*this.sizeX, -Math.sign(p1.y)*this.sizeY)\n          ]\n        } else {\n          let d1 = -2*this.sizeY - p1.y - p2.y\n          let d2 = 2*this.sizeY - p1.y - p2.y\n          let ySign = Math.abs(d1) > Math.abs(d2) ? 1 : -1\n\n          points = [\n            new Victor(Math.sign(p1.x)*this.sizeX, Math.sign(ySign)*this.sizeY),\n            new Victor(-Math.sign(p1.x)*this.sizeX, Math.sign(ySign)*this.sizeY),\n          ]\n        }\n      }\n    }\n\n    if (includeOriginalPoints) {\n      points.unshift(p1)\n      points.push(p2)\n    }\n\n    return points\n  }\n\n  // Finds the nearest vertex that is in the bounds. This will change the shape. i.e. this\n  // doesn't care about the line segment, only about the point.\n  nearestVertex(vertex) {\n    return new Victor(\n      Math.min(this.sizeX, Math.max(-this.sizeX, vertex.x)),\n      Math.min(this.sizeY, Math.max(-this.sizeY, vertex.y))\n    )\n  }\n\n  // Returns the nearest perimeter vertex to the given vertex.\n  nearestPerimeterVertex(vertex) {\n    if (Math.abs(vertex.x) >= Math.abs(vertex.y)) {\n      return new Victor(Math.sign(vertex.x) * this.sizeX, vertex.y)\n    } else {\n      return new Victor(vertex.x, Math.sign(vertex.y) * this.sizeY)\n    }\n  }\n\n  nearestCornerIndex(vertex) {\n    let n = null\n    let d = Number.MAX_SAFE_INTEGER\n\n    this.corners.forEach((corner, i) => {\n      const dc = distance(corner, vertex)\n      if (dc < d) {\n        d = dc\n        n = i\n      }\n    })\n\n    return n\n  }\n\n  // The guts of logic for this limits enforcer. It will take a single line (defined by\n  // start and end) and if the line goes out of bounds, returns the vertices around the\n  // outside edge to follow around without messing up the shape of the vertices.\n  clipLine(lineStart, lineEnd) {\n    var quadrantStart = this.pointLocation(lineStart)\n    var quadrantEnd = this.pointLocation(lineEnd)\n\n    if (quadrantStart === 0b0000 && quadrantEnd === 0b0000) {\n      // The line is inside the boundaries\n      return [lineStart, lineEnd]\n    }\n\n    if (quadrantStart === quadrantEnd) {\n      // We are in the same box, and we are out of bounds.\n      return [this.nearestVertex(lineStart), this.nearestVertex(lineEnd)]\n    }\n\n    if (quadrantStart & quadrantEnd) {\n      // These points are all on one side of the box.\n      return [this.nearestVertex(lineStart), this.nearestVertex(lineEnd)]\n    }\n\n    if (quadrantStart === 0b000) {\n      // We are exiting the box. Return the start, the intersection with the boundary, and the closest\n      // boundary point to the exited point.\n      var line = [lineStart]\n      line.push(this.boundPoint(lineStart, lineEnd))\n      line.push(this.nearestVertex(lineEnd))\n      return line\n    }\n\n    if (quadrantEnd === 0b000) {\n      // We are re-entering the box.\n      return [this.boundPoint(lineEnd, lineStart), lineEnd]\n    }\n\n    // We have reached a terrible place, where both points are oob, but it might intersect with the\n    // work area. First, define the boundaries as lines.\n    const sides = [\n      // left\n      [Victor(-this.sizeX, -this.sizeY), new Victor(-this.sizeX, this.sizeY)],\n      // right\n      [new Victor(this.sizeX, -this.sizeY), new Victor(this.sizeX, this.sizeY)],\n      // bottom\n      [new Victor(-this.sizeX, -this.sizeY), new Victor(this.sizeX, -this.sizeY)],\n      // top\n      [new Victor(-this.sizeX, this.sizeY), new Victor(this.sizeX, this.sizeY)],\n    ]\n\n    // Count up the number of boundary lines intersect with our line segment.\n    var intersections = []\n    for (var s=0; s<sides.length; s++) {\n      var intPoint = this.intersection(lineStart,\n                                   lineEnd,\n                                   sides[s][0],\n                                   sides[s][1])\n      if (intPoint) {\n        intersections.push(new Victor(intPoint.x, intPoint.y))\n      }\n    }\n\n    if (intersections.length !== 0) {\n      if (intersections.length !== 2) {\n        // We should never get here. How would we have something other than 2 or 0 intersections with\n        // a box?\n        console.log(intersections)\n        throw Error(\"Software Geometry Error\")\n      }\n\n      // The intersections are tested in some normal order, but the line could be going through them\n      // in any direction. This check will flip the intersections if they are reversed somehow.\n      if (Victor.fromObject(intersections[0]).subtract(lineStart).lengthSq() >\n          Victor.fromObject(intersections[1]).subtract(lineStart).lengthSq()) {\n        var temp = intersections[0]\n        intersections[0] = intersections[1]\n        intersections[1] = temp\n      }\n\n      return [...intersections, this.nearestVertex(lineEnd)]\n    }\n\n    // Damn. We got here because we have a start and end that are failing different boundary checks,\n    // and the line segment doesn't intersect the box. We have to crawl around the outside of the\n    // box until we reach the other point.\n    // Here, I'm going to split this line into two parts, and send each half line segment back\n    // through the clipLine algorithm. Eventually, that should result in only one of the other cases.\n    var midpoint = Victor.fromObject(lineStart).add(lineEnd).multiply(new Victor(0.5, 0.5))\n\n    // recurse, and find smaller segments until we don't end up in this place again.\n    return [...this.clipLine(lineStart, midpoint),\n            ...this.clipLine(midpoint, lineEnd)]\n  }\n\n  // Intersect the line with the boundary, and return the point exactly on the boundary.\n  // This will keep the shape. i.e. It will follow the line segment, and return the point on that line\n  // segment.\n  boundPoint(good, bad) {\n    const dx = good.x - bad.x\n    const dy = good.y - bad.y\n    const fixed = new Victor(bad.x, bad.y)\n    let distance = 0\n\n    if (bad.x < -this.sizeX || bad.x > this.sizeX) {\n      if (bad.x < -this.sizeX) {\n        // we are leaving the left\n        fixed.x = -this.sizeX\n      } else {\n        // we are leaving the right\n        fixed.x = this.sizeX\n      }\n\n      distance = (fixed.x - good.x) / dx\n      fixed.y = good.y + distance * dy\n\n      // We fixed x, but y might have the same problem, so we'll rerun this, with different points.\n      return this.boundPoint(good, fixed)\n    }\n\n    if (bad.y < -this.sizeY || bad.y > this.sizeY) {\n      if (bad.y < -this.sizeY) {\n        // we are leaving the bottom\n        fixed.y = -this.sizeY\n      } else {\n        // we are leaving the top\n        fixed.y = this.sizeY\n      }\n\n      distance = (fixed.y - good.y) / dy\n      fixed.x = good.x + distance * dx\n    }\n\n    return fixed\n  }\n\n  // Returns the distance walked from the first vertex to the last vertex.\n  distance(vertices) {\n    let d = 0\n    for(let i=0; i<vertices.length; i++) {\n      if (i > 0) d = d + distance(vertices[i], vertices[i-1])\n    }\n\n    return d\n  }\n\n  // Determines which of 8 neighbor areas the point is in:\n  //   https://stackoverflow.com/questions/3746274/line-intersection-with-aabb-rectangle\n  //           |          |\n  //   0b1001  |  0b0001  |  0b0101\n  //           |          |\n  // ------------------------------ y_max\n  //           |          |\n  //   0b1000  |  0b0000  |  0b0100\n  //           |          |\n  // ------------------------------ y_min\n  //           |          |\n  //   0b1010  |  0b0010  |  0b0110\n  //           |          |\n  //         x_min      x_max\n  //\n  pointLocation(point) {\n    let location = 0b0\n\n    if (point.x < -this.sizeX) {\n      location += 0b1000\n    } else if (point.x > this.sizeX) {\n      location += 0b0100\n    }\n\n    if (point.y < -this.sizeY) {\n      location += 0b0001\n    } else if (point.y > this.sizeY) {\n      location += 0b0010\n    }\n\n    return location\n  }\n\n  inBounds(point) {\n    return this.pointLocation(point) === 0b0000\n  }\n\n  // Determines intersection with one of the sides.\n  intersection(lineStart, lineEnd, sideStart, sideEnd) {\n    let line = lineEnd.clone().subtract(lineStart)\n    let side = sideEnd.clone().subtract(sideStart)\n    let lineCrossSidePerp = line.x * side.y - line.y * side.x\n\n    // if line Cross side === 0, it means the lines are parallel so have infinite intersection points\n    if (lineCrossSidePerp === 0) {\n      return null\n    }\n\n    const diff = sideStart.clone().subtract(lineStart)\n    let t = (diff.x * side.y - diff.y * side.x) / lineCrossSidePerp\n    if (t < 0 || t >= 1) {\n      return null\n    }\n\n    const u = (diff.x * line.y - diff.y * line.x) / lineCrossSidePerp\n    if (u < 0 || u >= 1) {\n      return null\n    }\n\n    return lineStart.clone().add(line.clone().multiply(new Victor(t, t)))\n  }\n}\n","import Victor from 'victor'\nimport { shapeOptions } from './Shape'\nimport Effect from './Effect'\nimport { rotate, offset, circle } from '../common/geometry'\nimport PolarMachine from '../features/machine/PolarMachine'\nimport RectMachine from '../features/machine/RectMachine'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    maskMachine: {\n      title: 'Mask shape',\n      type: 'dropdown',\n      choices: ['rectangle', 'circle'],\n      onChange: (changes, attrs) => {\n        if (changes.maskMachine === 'circle') {\n          changes.rotation = 0\n\n          const size = Math.min(attrs.startingWidth, attrs.startingHeight)\n          changes.startingHeight = size\n          changes.startingWidth = size\n          changes.canRotate = false\n          changes.canChangeHeight = false\n        } else {\n          changes.canRotate = true\n          changes.canChangeHeight = true\n        }\n\n        return changes\n      }\n    },\n    maskMinimizeMoves: {\n      title: 'Try to minimize perimeter moves',\n      type: 'checkbox'\n    },\n    maskBorder: {\n      title: 'Draw border',\n      type: 'checkbox'\n    }\n  }\n}\n\nexport default class Mask extends Effect {\n  constructor() {\n    super('Mask')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'mask',\n        selectGroup: 'effects',\n        startingWidth: 100,\n        startingHeight: 100,\n        maskMinimizeMoves: false,\n        maskMachine: 'rectangle',\n        maskBorder: false\n      }\n    }\n  }\n\n  getVertices(state) {\n    const width = state.shape.startingWidth\n    const height = state.shape.startingHeight\n\n    if (state.shape.dragging && state.shape.maskMachine === 'circle') {\n      return circle(width/2, 0)\n    } else {\n      return [\n        new Victor(-width/2, height/2),\n        new Victor(width/2, height/2),\n        new Victor(width/2, -height/2),\n        new Victor(-width/2, -height/2),\n        new Victor(-width/2, height/2),\n      ]\n    }\n  }\n\n  applyEffect(effect, layer, vertices) {\n    vertices = vertices.map(vertex => {\n      return rotate(offset(vertex, -effect.offsetX, -effect.offsetY), effect.rotation)\n    })\n\n    if (!layer.dragging && !effect.dragging) {\n      const machineClass = effect.maskMachine === 'circle' ? PolarMachine : RectMachine\n\n      const machine = new machineClass(\n        vertices,\n        { minX: 0, maxX: effect.startingWidth, minY: 0, maxY: effect.startingHeight, minimizeMoves: effect.maskMinimizeMoves, maxRadius: effect.startingWidth/2, perimeterConstant: effect.maskPerimeterConstant, mask: true },\n        { border: effect.maskBorder })\n      vertices = machine.polish().vertices\n    }\n\n    return vertices.map(vertex => {\n      return offset(rotate(vertex, -effect.rotation), effect.offsetX, effect.offsetY)\n    })\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import ReactGA from 'react-ga'\nimport throttle from 'lodash/throttle'\nimport { evaluate } from 'mathjs'\nimport { distance, scale, rotate } from '../../common/geometry'\nimport { arrayRotate } from '../../common/util'\nimport PolarMachine from './PolarMachine'\nimport RectMachine from './RectMachine'\nimport { getShape } from '../../models/shapes'\nimport Victor from 'victor'\n\nfunction track(vertex, data, loopIndex) {\n  const angle = data.trackLength * loopIndex / 16 * 2.0 * Math.PI\n  let radius = 1.0\n\n  if (data.trackGrowEnabled) {\n    radius = 1.0 + loopIndex / 10.0 * data.trackGrow / 100.0\n  }\n  return new Victor(\n    vertex.x + radius * data.trackValue * Math.cos(angle),\n    vertex.y + radius * data.trackValue * Math.sin(angle)\n  )\n}\n\nexport const transformShape = (data, vertex, amount, trackIndex=0, numLoops) => {\n  numLoops = numLoops || data.numLoops\n  let transformedVertex = vertex ? vertex.clone() : new Victor(0.0)\n\n  if (data.repeatEnabled && data.growEnabled) {\n    let growAmount = 100\n    if (data.growMethod === 'function') {\n      try {\n        growAmount = data.growValue * evaluate(data.growMath, {i: amount})\n      }\n      catch (err) {\n        console.log(\"Error parsing grow function: \" + err)\n        growAmount = 200\n      }\n    } else {\n      growAmount = 100.0 + (data.growValue * amount)\n    }\n    transformedVertex = scale(transformedVertex, growAmount)\n  }\n\n  if (data.repeatEnabled && data.spinEnabled) {\n    let spinAmount = 0\n    if (data.spinMethod === 'function') {\n      try {\n        spinAmount = data.spinValue * evaluate(data.spinMath, {i: amount})\n      }\n      catch (err) {\n        console.log(\"Error parsing spin function: \" + err)\n        spinAmount = 0\n      }\n    } else {\n      const loopPeriod = numLoops / (parseInt(data.spinSwitchbacks) + 1)\n      const stage = amount/loopPeriod\n      const direction = (stage % 2 < 1 ? 1.0 : -1.0)\n      spinAmount = direction * (amount % loopPeriod) * data.spinValue\n      // Add in the amount it goes positive to the negatives, so they start at the same place.\n      if (direction < 0.0) {\n        spinAmount += loopPeriod * data.spinValue\n      }\n    }\n    transformedVertex = rotate(transformedVertex, spinAmount)\n  }\n\n  if (data.repeatEnabled && data.trackEnabled) {\n    transformedVertex = track(transformedVertex, data, trackIndex)\n  }\n\n  transformedVertex.rotateDeg(-data.rotation)\n  transformedVertex.addX({x: data.offsetX || 0}).addY({y: data.offsetY || 0})\n\n  return transformedVertex\n}\n\nfunction buildTrackLoop(vertices, transform, i, t) {\n  const numLoops = transform.repeatEnabled ? transform.numLoops : 1\n  const numTrackLoops = transform.repeatEnabled ? transform.trackNumLoops : 1\n  const nextTrackVertex = transformShape(transform, vertices[0], 0, i + 1, numTrackLoops)\n  const backtrack = numTrackLoops > 1 && t === numTrackLoops - 1\n  let trackVertices = []\n  let trackDistances = []\n  const drawPortionPct = Math.round((transform.drawPortionPct || 100)/100.0 * vertices.length)\n  const completion = (i === numLoops - 1 && t === numTrackLoops - 1) ? drawPortionPct : vertices.length\n\n  for (var j=0; j<completion; j++) {\n    const amount = transform.transformMethod === 'smear' ? i + t + j/vertices.length : i + t\n    const trackVertex = transformShape(transform, vertices[j], amount, i, numTrackLoops)\n    trackVertices.push(trackVertex)\n\n    if (backtrack && completion === vertices.length) {\n      trackDistances.push(distance(nextTrackVertex, trackVertex))\n    }\n  }\n\n  // backtrack to the vertex with the shortest distance to the first vertex in\n  // the next track loop; this minimizes the amount our shape draws over the\n  // previous shape, which is not visually appealing.\n  if (backtrack) {\n    let minIdx = 0\n    let minD = Number.MAX_SAFE_INTEGER\n\n    trackDistances.forEach((d, idx) => {\n      if (d <= minD) {\n        minD = d\n        minIdx = idx\n      }\n    })\n\n    if (minIdx !== 0) {\n      trackVertices = trackVertices.concat(trackVertices.slice(minIdx, trackVertices.length-1).reverse())\n    }\n  }\n\n  return trackVertices\n}\n\n// ensure vertices do not exceed machine boundary limits, and endpoints as needed\nexport const polishVertices = (vertices, machine, layerInfo={}) => {\n  vertices = vertices.map(vertex => Victor.fromObject(vertex))\n\n  if (vertices.length > 0) {\n    const machineInstance = getMachineInstance(vertices, machine, layerInfo)\n    vertices = machineInstance.polish().vertices\n  }\n\n  return vertices\n}\n\nfunction reportTiming(time) {\n  time = Math.max(time, 0.01)\n  ReactGA.timing({\n    category: 'Compute',\n    variable: 'transformShapes',\n    value: time, // in milliseconds\n  });\n}\n\nconst throttledReportTiming = throttle(reportTiming, 1000, {trailing: true })\n\nexport const transformShapes = (vertices, layer, effects) => {\n  const startTime = performance.now()\n  const numLoops = layer.repeatEnabled ? layer.numLoops : 1\n  const numTrackLoops = layer.repeatEnabled ? layer.trackNumLoops : 1\n  let outputVertices = []\n\n  if (layer.autosize) {\n    vertices = vertices.map(vertex => {\n      return scale(vertex, 100.0 * layer.startingWidth, 100 * layer.startingHeight)\n    })\n  }\n\n  if (layer.transformMethod === 'smear' && layer.repeatEnabled) {\n    // remove last vertex; we don't want to return to our starting point when completing the shape\n    vertices.pop()\n  }\n\n  if (layer.rotateStartingPct === undefined || layer.rotateStartingPct !== 0) {\n    const start = Math.round(vertices.length * layer.rotateStartingPct / 100.0)\n    vertices = arrayRotate(vertices, start)\n\n    // some patterns create a loop when drawn and transformMethod is 'intact'; in\n    // this case, rotateStartingPct will not draw the final vertex to complete the\n    // loop. Use rotateCompleteLoop to add it back in for specific shapes.\n    if (layer.rotateCompleteLoop) {\n      vertices.push(new Victor(vertices[0].x, vertices[0].y))\n    }\n  }\n\n  if (layer.trackEnabled && numTrackLoops > 1) {\n    for (var i=0; i<numLoops; i++) {\n      for (var t=0; t<numTrackLoops; t++) {\n        outputVertices = outputVertices.concat(buildTrackLoop(vertices, layer, i, t))\n      }\n    }\n  } else {\n    for (i=0; i<numLoops; i++) {\n      const drawPortionPct = Math.round((layer.drawPortionPct || 100)/100.0 * vertices.length)\n      const completion = i === numLoops - 1 ? drawPortionPct : vertices.length\n\n      for (var j=0; j<completion; j++) {\n        let amount = layer.transformMethod === 'smear' ? i + j/vertices.length : i\n        outputVertices.push(transformShape(layer, vertices[j], amount, amount))\n      }\n    }\n  }\n\n  if (layer.reverse) {\n    outputVertices = outputVertices.reverse()\n  }\n\n  if (layer.backtrackPct) {\n    const backtrack = Math.round(vertices.length * layer.backtrackPct / 100.0)\n    outputVertices = outputVertices.concat(outputVertices.slice(outputVertices.length - backtrack).reverse())\n  }\n\n  if (effects && effects.length > 0) {\n    effects.forEach(effect => {\n      outputVertices = getShape(effect).applyEffect(effect, layer, outputVertices)\n    })\n  }\n\n  const endTime = performance.now()\n  throttledReportTiming(endTime - startTime)\n\n  return outputVertices\n}\n\n// returns the appropriate machine class for given machine properties\nexport const getMachineInstance = (vertices, settings, layerInfo) => {\n  const machineClass = settings.rectangular ? RectMachine : PolarMachine\n  return new machineClass(vertices, settings, layerInfo)\n}\n","// https://gitlab.ilmiont.net/ilmiont/noisejs/\n// This project is no longer maintained by the contributor (deleted from Github),\n// and was in turn adapted from an older project, https://github.com/josephg/noisejs.\n//\n//\n//\n// MIT License\n//\n// Copyright (c) 2018 James Walker\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n// associated documentation files (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge, publish, distribute,\n// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or\n// substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\n// NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * Perlin fade function.\n *\n * @param {Number} t\n * @return {Number}\n */\nfunction fade(t) {\n    return t*t*t*(t*(t*6-15)+10);\n}\n\n\n/**\n * Perlin lerp function.\n *\n * @param {Number} a\n * @param {Number} b\n * @param {Number} t\n * @return {Number}\n */\nfunction lerp(a, b, t) {\n    return (1-t)*a + t*b;\n}\n\n\n/**\n * Grad class.\n *\n * @package noisejs\n */\nclass Grad {\n\n    /**\n     * Constructor.\n     *\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} z\n     * @return {self}\n     */\n    constructor(x, y, z) {\n\n        /**\n         * x\n         *\n         * @type {Number}\n         */\n        this.x = x;\n\n        /**\n         * y\n         *\n         * @type {Number}\n         */\n        this.y = y;\n\n        /**\n         * z\n         *\n         * @type {Number}\n         */\n        this.z = z;\n    }\n\n\n    /**\n     * 2D dot product.\n     *\n     * @param {Number} x\n     * @param {Number} y\n     * @return {Number}\n     */\n    dot2(x, y) {\n        return this.x * x + this.y * y;\n    };\n\n\n    /**\n     * 3D dot product.\n     *\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} z\n     * @return {Number}\n     */\n    dot3(x, y, z) {\n        return this.x * x + this.y * y + this.z * z;\n    };\n\n}\n\n\n/**\n * noisejs\n *\n * @package noisejs\n */\nclass noise {\n\n    /**\n     * Constructor.\n     *\n     * @return {self}\n     */\n    constructor() {\n\n        // Seed\n        this.seed(0);\n\n    }\n\n\n    /**\n     * Seed the noise generation.\n     *\n     * Supports 2^16 different seeding values.\n     *\n     * @param {Number} seed\n     * @return {void}\n     */\n    seed(seed) {\n\n        // Scale the seed\n        if (seed > 0 && seed < 1) {\n            seed *= 65536;\n        }\n\n        // Floor the seed\n        seed = Math.floor(seed);\n        if (seed < 256) {\n            seed |= seed << 8;\n        }\n\n        // Iterate the seed\n        for (var i = 0; i < 256; i++) {\n            var v\n            if (i & 1) v = p[i] ^ (seed & 255);\n            else v = p[i] ^ ((seed>>8) & 255);\n\n            // Use permutation table\n            perm[i] = perm[i + 256] = v;\n            gradP[i] = gradP[i + 256] = grad3[v % 12];\n        }\n\n    };\n\n\n    /**\n     * Generate 2D Simplex noise.\n     *\n     * @param {Number} xin\n     * @param {Number} yin\n     * @return {Number}\n     */\n    simplex2(xin, yin) {\n        // Noise contributions from the three corners\n        var n0, n1, n2;\n\n        // Skew the input space to determine which simplex cell we're in\n        var s = (xin+yin)*F2;\n        var i = Math.floor(xin+s);\n        var j = Math.floor(yin+s);\n        var t = (i+j)*G2;\n\n        // The x,y distances from the cell origin, unskewed.\n        var x0 = xin-i+t;\n        var y0 = yin-j+t;\n\n        // For the 2D case, the simplex shape is an equilateral triangle.\n        // Determine which simplex we are in.\n        // Offsets for second (middle) corner of simplex in (i,j) coords\n        var i1, j1;\n\n        // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n        if (x0 > y0) {\n            i1=1;\n            j1=0;\n        }\n        // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n        else {\n            i1=0;\n            j1=1;\n        }\n\n        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n        // c = (3-sqrt(3))/6\n        var x1 = x0 - i1 + G2;      // Offsets for middle corner in (x,y) unskewed coords\n        var y1 = y0 - j1 + G2;\n        var x2 = x0 - 1 + 2 * G2;   // Offsets for last corner in (x,y) unskewed coords\n        var y2 = y0 - 1 + 2 * G2;\n\n        // Work out the hashed gradient indices of the three simplex corners\n        i &= 255;\n        j &= 255;\n\n        // Get indices from permutation table\n        var gi0 = gradP[i+perm[j]];\n        var gi1 = gradP[i+i1+perm[j+j1]];\n        var gi2 = gradP[i+1+perm[j+1]];\n\n        // Calculate the contribution from the three corners\n        var t0 = 0.5 - x0*x0-y0*y0;\n        if (t0 < 0) {\n            n0 = 0;\n        }\n        // (x,y) of grad3 used for 2D gradient\n        else {\n            t0 *= t0;\n            n0 = t0 * t0 * gi0.dot2(x0, y0);\n        }\n\n        // Second corner\n        var t1 = 0.5 - x1*x1-y1*y1;\n        if (t1 < 0) {\n            n1 = 0;\n        }\n        else {\n          t1 *= t1;\n          n1 = t1 * t1 * gi1.dot2(x1, y1);\n        }\n\n        // Third corner\n        var t2 = 0.5 - x2*x2-y2*y2;\n        if (t2 < 0) {\n            n2 = 0;\n        }\n        else {\n            t2 *= t2;\n            n2 = t2 * t2 * gi2.dot2(x2, y2);\n        }\n\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n        return 70 * (n0 + n1 + n2);\n\n    };\n\n\n    /**\n     * Generate 3D Simplex noise.\n     *\n     * @param {Number} xin\n     * @param {Number} yin\n     * @param {Number} zin\n     * @return {Number}\n     */\n    simplex3(xin, yin, zin) {\n\n        // Noise contributions from the four corners\n        var n0, n1, n2, n3;\n\n        // Skew the input space to determine which simplex cell we're in\n        var s = (xin+yin+zin)*F3;\n        var i = Math.floor(xin+s);\n        var j = Math.floor(yin+s);\n        var k = Math.floor(zin+s);\n\n        // The x,y distances from the cell origin, unskewed.\n        var t = (i+j+k)*G3;\n        var x0 = xin-i+t;\n        var y0 = yin-j+t;\n        var z0 = zin-k+t;\n\n        // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n        // Determine which simplex we are in.\n        // Offsets for second corner of simplex in (i,j,k) coords\n        // Offsets for third corner of simplex in (i,j,k) coords\n        var i1, j1, k1;\n        var i2, j2, k2;\n        if (x0 >= y0) {\n            if (y0 >= z0) {\n                i1=1; i2=1;\n                j1=0; j2=1;\n                k1=0; k2=0;\n            }\n            else if (x0 >= z0) {\n                i1=1; i2=1;\n                j1=0; j2=0;\n                k1=0; k2=1;\n            }\n            else {\n                i1=0; i2=1;\n                j1=0; j2=0;\n                k1=1; k2=1;\n            }\n        }\n        else {\n            if (y0 < z0) {\n                i1=0; i2=0;\n                j1=0; j2=1;\n                k1=1; k2=1;\n            }\n            else if (x0 < z0) {\n                i1=0; i2=0;\n                j1=1; j2=1;\n                k1=0; k2=1;\n            }\n            else {\n                i1=0; i2=1;\n                j1=1; j2=1;\n                k1=0; k2=0;\n            }\n        }\n\n        // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n        // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n        // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n        // c = 1/6.\n\n        // Offsets for second corner\n        var x1 = x0 - i1 + G3;\n        var y1 = y0 - j1 + G3;\n        var z1 = z0 - k1 + G3;\n\n        // Offsets for third corner\n        var x2 = x0 - i2 + 2 * G3;\n        var y2 = y0 - j2 + 2 * G3;\n        var z2 = z0 - k2 + 2 * G3;\n\n        // Offsets for fourth corner\n        var x3 = x0 - 1 + 3 * G3;\n        var y3 = y0 - 1 + 3 * G3;\n        var z3 = z0 - 1 + 3 * G3;\n\n        // Work out the hashed gradient indices of the four simplex corners\n        i &= 255;\n        j &= 255;\n        k &= 255;\n\n        //Get indices from permutation table\n        var gi0 = gradP[i+   perm[j+   perm[k   ]]];\n        var gi1 = gradP[i+i1+perm[j+j1+perm[k+k1]]];\n        var gi2 = gradP[i+i2+perm[j+j2+perm[k+k2]]];\n        var gi3 = gradP[i+ 1+perm[j+ 1+perm[k+ 1]]];\n\n        // Calculate the contribution from the four corners\n        // First corner\n        var t0 = 0.6 - x0*x0 - y0*y0 - z0*z0;\n        if (t0 < 0) {\n            n0 = 0;\n        }\n        // (x,y) of grad3 used for 2D gradient\n        else {\n            t0 *= t0;\n            n0 = t0 * t0 * gi0.dot3(x0, y0, z0);\n        }\n\n        // Second corner\n        var t1 = 0.6 - x1*x1 - y1*y1 - z1*z1;\n        if (t1 < 0) {\n            n1 = 0;\n        }\n        else {\n            t1 *= t1;\n            n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n        }\n\n        // Third corner\n        var t2 = 0.6 - x2*x2 - y2*y2 - z2*z2;\n        if (t2 < 0) {\n            n2 = 0;\n        }\n        else {\n            t2 *= t2;\n            n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n        }\n\n        // Fourth corner\n        var t3 = 0.6 - x3*x3 - y3*y3 - z3*z3;\n        if (t3 < 0) {\n            n3 = 0;\n        }\n        else {\n            t3 *= t3;\n            n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n        }\n\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n        return 32 * (n0 + n1 + n2 + n3);\n\n    };\n\n\n    /**\n     * Generate 2D Perlin noise.\n     *\n     * @param {Number} x\n     * @param {Number} y\n     * @return {Number}\n     */\n    perlin2(x, y) {\n\n        // Find unit grid cell containing point\n        var X = Math.floor(x), Y = Math.floor(y);\n\n        // Get relative xy coordinates of point within that cell\n        x = x - X; y = y - Y;\n\n        // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n        X = X & 255; Y = Y & 255;\n\n        // Calculate noise contributions from each of the four corners\n        var n00 = gradP[X+perm[Y]].dot2(x, y);\n        var n01 = gradP[X+perm[Y+1]].dot2(x, y-1);\n        var n10 = gradP[X+1+perm[Y]].dot2(x-1, y);\n        var n11 = gradP[X+1+perm[Y+1]].dot2(x-1, y-1);\n\n        // Compute the fade curve value for x\n        var u = fade(x);\n\n        // Interpolate the four results\n        return lerp(\n            lerp(n00, n10, u),\n            lerp(n01, n11, u),\n            fade(y)\n        );\n\n    };\n\n\n    /**\n     * Generate 3D Perlin noise.\n     *\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} z\n     * @return {Number}\n     */\n    perlin3(x, y, z) {\n\n        // Find unit grid cell containing point\n        var X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\n\n        // Get relative xyz coordinates of point within that cell\n        x = x - X; y = y - Y; z = z - Z;\n\n        // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n        X = X & 255; Y = Y & 255; Z = Z & 255;\n\n        // Calculate noise contributions from each of the eight corners\n        var n000 = gradP[X+  perm[Y+  perm[Z  ]]].dot3(x,   y,     z);\n        var n001 = gradP[X+  perm[Y+  perm[Z+1]]].dot3(x,   y,   z-1);\n        var n010 = gradP[X+  perm[Y+1+perm[Z  ]]].dot3(x,   y-1,   z);\n        var n011 = gradP[X+  perm[Y+1+perm[Z+1]]].dot3(x,   y-1, z-1);\n        var n100 = gradP[X+1+perm[Y+  perm[Z  ]]].dot3(x-1,   y,   z);\n        var n101 = gradP[X+1+perm[Y+  perm[Z+1]]].dot3(x-1,   y, z-1);\n        var n110 = gradP[X+1+perm[Y+1+perm[Z  ]]].dot3(x-1, y-1,   z);\n        var n111 = gradP[X+1+perm[Y+1+perm[Z+1]]].dot3(x-1, y-1, z-1);\n\n        // Compute the fade curve value for x, y, z\n        var u = fade(x);\n        var v = fade(y);\n        var w = fade(z);\n\n        // Interpolate\n        return lerp(\n            lerp(\n                lerp(n000, n100, u),\n                lerp(n001, n101, u), w\n            ),\n            lerp(\n                lerp(n010, n110, u),\n                lerp(n011, n111, u), w\n            ),\n           v\n        );\n\n    };\n};\n\n\n/**\n * 3D gradients\n *\n * @type {Array}\n */\nvar grad3 = [\n    new Grad(1,1,0), new Grad(-1,1,0), new Grad(1,-1,0), new Grad(-1,-1,0),\n    new Grad(1,0,1), new Grad(-1,0,1), new Grad(1,0,-1), new Grad(-1,0,-1),\n    new Grad(0,1,1), new Grad(0,-1,1), new Grad(0,1,-1), new Grad(0,-1,-1)\n];\n\n\n/**\n * Permutation table\n *\n * @type {Array}\n */\nvar p = [\n    151,160,137,91,90,15,\n    131,13,201,95,96,53,194,233,7,\n    225,140,36,103,30,69,142,8,99,\n    37,240,21,10,23,190,6,148,247,\n    20,234,75,0,26,197,62,94,252,\n    219,203,117,35,11,32,57,177,33,\n    88,237,149,56,87,174,20,125,136,\n    171,168,68,175,74,165,71,134,\n    139,48,27,166,77,146,158,231,\n    83,111,229,122,60,211,133,230,\n    220,105,92,41,55,46,245,40,244,\n    102,143,54,65,25,63,161,1,216,80,\n    73,209,76,132,187,208,89,18,169,\n    200,196,135,130,116,188,159,86,\n    164,100,109,198,173,186,3,64,52,\n    217,226,250,124,123,5,202,38,147,\n    118,126,255,82,85,212,207,206,59,\n    227,47,16,58,17,182,189,28,42,223,\n    183,170,213,119,248,152,2,44,154,\n    163, 70,221,153,101,155,167,43,172,\n    9,129,22,39,253,19,98,108,110,79,\n    113,224,232,178,185,112,104,218,\n    246,97,228,251,34,242,193,238,210,\n    144,12,191,179,162,241,81,51,145,235,\n    249,14,239,107,49,192,214,31,181,199,\n    106,157,184,84,204,176,115,121,50,45,\n    127,4,150,254,138,236,205,93,222,114,\n    67,29,24,72,243,141,128,195,78,66,\n    215,61,156,180\n];\n\n\n// Double the permutation table length (avoid array wrapping)\nvar perm = new Array(512);\nvar gradP = new Array(512);\n\n\n// Skewing and unskewing factors for generating 2D, 3D and 4D noise\nvar F3 = 1/3;\nvar G3 = 1/6;\nvar F2 = 0.5*(Math.sqrt(3)-1);\nvar G2 = (3-Math.sqrt(3))/6;\n\nconst noisejs = new noise()\nexport default noisejs;\n","import Shape, { shapeOptions } from './Shape'\nimport { getMachineInstance } from '../features/machine/computer'\nimport Victor from 'victor'\nimport noise from '../common/noise'\nimport seedrandom from 'seedrandom'\nimport { shapeSimilarity } from 'curve-matcher'\nimport { offset } from '../common/geometry'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    numParticles: {\n      title: 'Number of waves',\n      min: 1\n    },\n    seed: {\n      title: 'Random seed',\n      min: 1\n    },\n    noiseLevel: {\n      title: 'Noise level',\n      min: 0,\n      max: 600,\n      step: 10\n    },\n    noiseType: {\n      title: 'Type',\n      type: 'dropdown',\n      choices: ['Perlin', 'Simplex'],\n    },\n  }\n}\n\nexport default class NoiseWave extends Shape {\n  constructor() {\n    super('Noise Waves')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'noise_wave',\n        noise: 1,\n        seed: 1,\n        noiseLevel: 0,\n        noiseType: 'Perlin',\n        numParticles: 100,\n        selectGroup: 'Erasers',\n        canTransform: false,\n        repeatEnabled: false,\n        canChangeSize: false,\n        autosize: false,\n        usesMachine: true,\n      }\n    }\n  }\n\n  getVertices(state) {\n    const machine = state.machine\n    const shape = state.shape\n    const rng = seedrandom(shape.seed)\n    let vertices = []\n    let sizeX, sizeY\n\n    if (machine.rectangular) {\n      sizeX = machine.maxX - machine.minX\n      sizeY = machine.maxY - machine.minY\n    } else {\n      sizeX = sizeY = machine.maxRadius * 2.0\n    }\n\n    const machineInstance = getMachineInstance([], machine)\n\n    noise.seed(shape.seed)\n\n    const particles = []\n    for (let i=0; i<shape.numParticles; i++) {\n      const p1 = {\n        x: sizeX * rng() - sizeX/2,\n        y: sizeY * rng() - sizeY/2,\n        a: 0\n      }\n\n      particles.push(p1)\n      particles.push({\n        x: p1.x,\n        y: p1.y,\n        a: 2*Math.PI / 2\n      })\n\n    }\n\n    const vertexGroups = particles.map( (particle) => {\n      let group = []\n      let wasInside = false\n\n      // Arbitrarily choose 1000 iterations. This will stop particles that don't ever intersect with\n      // the machine. It needs to be high enough to always leave the machine for particles that\n      // don't move very fast.\n      for (let iterations=0; iterations<=1000; iterations++) {\n        // This has side effects on the particle\n        const newVertex = this.getParticleVertex(particle, shape)\n        group.push(newVertex)\n\n        // Stop if we entered and then exited the machine coordinates.\n        const inside = machineInstance.inBounds(newVertex)\n        if (wasInside && !inside) {\n          break\n        }\n        wasInside = inside\n      }\n      return group\n    })\n\n    let prevCurve\n    for (let j=0; j<particles.length; j=j+2) {\n      const curve = this.getCurve(vertexGroups, j);\n\n      // Connect to the previous vertex, if there are any previous vertices.\n      if (vertices.length > 0) {\n        const start = vertices[vertices.length - 1]\n        const end = curve[0]\n        const startPerimeter = machineInstance.nearestPerimeterVertex(start)\n        const endPerimeter = machineInstance.nearestPerimeterVertex(end)\n        vertices = vertices.concat([startPerimeter, machineInstance.tracePerimeter(startPerimeter, endPerimeter), endPerimeter, end].flat())\n      }\n\n      if (!prevCurve || shapeSimilarity(curve, prevCurve, { estimationPoints: 100, rotations: 0 }) < ((state.shape.noiseSimilarity || 88) / 100)) {\n        vertices = vertices.concat(curve)\n      }\n      prevCurve = curve\n    }\n\n    vertices = vertices.map(vertex => {\n      return offset(vertex, -state.shape.offsetX, -state.shape.offsetY)\n    })\n\n    return vertices\n  }\n\n  getCurve(vertexGroups, idx) {\n    const pEndVertices = vertexGroups[idx]\n    const pStartVertices = vertexGroups[idx+1]\n    return pStartVertices.reverse().concat(pEndVertices)\n  }\n\n  getParticleVertex(p, options) {\n    let periodDenominator = 600 - options.noiseLevel\n    if (options.noiseLevel >= 600) periodDenominator = 1\n    const period = 1/periodDenominator\n    const v = options.noiseType === 'Simplex' ? noise.simplex2(p.x * period, p.y * period) : noise.perlin2(p.x * period, p.y * period)\n    const a = v * 2 * Math.PI + p.a\n\n    p.x += Math.cos(a) * 5\n    p.y += Math.sin(a) * 5\n\n    return new Victor(p.x + options.offsetX, p.y + options.offsetY)\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    polygonSides: {\n      title: 'Number of sides',\n      min: 3\n    },\n    roundCorners: {\n      title: 'Round corners',\n      type: 'checkbox',\n    },\n    roundFraction: {\n      title: 'Round fraction',\n      min: 0.05,\n      max: 0.5,\n      step: 0.025,\n      isVisible: (state) => { return state.roundCorners }\n    },\n  }\n}\n\nexport default class Polygon extends Shape {\n  constructor() {\n    super('Polygon')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'polygon',\n        polygonSides: 4,\n        roundCorners: false,\n        roundFraction: 0.25,\n        rotateCompleteLoop: true\n      }\n    }\n  }\n\n  // Returns a list of points from (start, end] along the line.\n  getLineVertices(startPoint, endPoint, numberOfPoints) {\n    const resolution = 1.0/numberOfPoints\n    let points = []\n    for (let d=resolution; d<=1.0; d+=resolution) {\n      points.push(new Victor(startPoint.x + (endPoint.x - startPoint.x)*d,\n                             startPoint.y + (endPoint.y - startPoint.y)*d))\n    }\n    return points\n  }\n\n  getVertices(state) {\n    // beta is the fraction to have rounded.\n    const beta = state.shape.roundFraction\n    // alpha is the fration to have straight.\n    const alpha = (1.0-beta)\n    let points = []\n    for (let i=0; i<=state.shape.polygonSides; i++) {\n      const angle = Math.PI * 2.0 / state.shape.polygonSides * (0.5 + i)\n      if (state.shape.roundCorners && beta !== 0.0) {\n        // angles that make up the arc.\n        const angleStart = Math.PI * 2.0 / state.shape.polygonSides * i\n        const angleEnd = Math.PI * 2.0 / state.shape.polygonSides * (i + 1)\n        const angleResolution = 0.10\n        if (points.length > 0) {\n          // Start with a line. We use a bunch of points for this, so they get stretch about evenly\n          // as the curves do.\n          const numberOfLinePoints = (angleEnd - angleStart)/angleResolution/beta\n          points = points.concat(this.getLineVertices(points[points.length-1],\n                                                      new Victor(alpha * Math.cos(angle) + beta * Math.cos(angleStart),\n                                                                 alpha * Math.sin(angle) + beta * Math.sin(angleStart)),\n                                                      numberOfLinePoints))\n        }\n        if (i !== state.shape.polygonSides) {\n          // Create the arc.\n          for (let arcAngle=angleStart + angleResolution; arcAngle<=angleEnd; arcAngle += angleResolution) {\n            points.push(new Victor(alpha * Math.cos(angle) + beta * Math.cos(arcAngle), alpha * Math.sin(angle) + beta * Math.sin(arcAngle)))\n          }\n        }\n      } else {\n        // Not rounded corners.\n        points.push(new Victor(Math.cos(angle), Math.sin(angle)))\n      }\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    reuleauxSides: {\n      title: 'Number of sides',\n      step: 1,\n      min: 2\n    },\n  }\n}\n\nexport default class Reuleaux extends Shape {\n  constructor() {\n    super('Reuleaux')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'reuleaux',\n        reuleauxSides: 3\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    // Construct an equalateral triangle\n    let corners = []\n    // Initial location at PI/2\n    let angle = Math.PI/2.0\n    // How much of the circle in one side?\n    let coverageAngle = Math.PI/state.shape.reuleauxSides\n    let halfCoverageAngle = 0.5 * coverageAngle\n    for (let c=0; c<state.shape.reuleauxSides; c++) {\n      let startAngle = angle + Math.PI - halfCoverageAngle\n      corners.push( [new Victor(Math.cos(angle), Math.sin(angle)), startAngle] )\n      angle += 2.0 * Math.PI / state.shape.reuleauxSides\n    }\n    let length = 0.5 / Math.cos(Math.PI/2.0/state.shape.reuleauxSides)\n    const scale = 1.7\n    for (let corn=0; corn < corners.length; corn++) {\n      for (let i=0; i<128; i++) {\n        let angle = coverageAngle  * (i / 128.0) + corners[corn][1]\n        points.push(new Victor(scale * (length * corners[corn][0].x + Math.cos(angle)),\n                           scale * (length * corners[corn][0].y + Math.sin(angle))))\n      }\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    roseN: {\n      title: 'Numerator',\n      step: 1,\n      min: 1\n    },\n    roseD: {\n      title: 'Denominator',\n      step: 1,\n      min: 1\n    },\n  }\n}\n\nexport default class Rose extends Shape {\n  constructor() {\n    super('Rose')\n    this.link = 'http://mathworld.wolfram.com/Rose.html'\n    this.linkText = 'Wolfram Mathworld'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'rose',\n        roseN: 3,\n        roseD: 2,\n        transformMethod: 'intact',\n        rotateCompleteLoop: true\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = 2\n    let n = parseInt(state.shape.roseN)\n    let d = parseInt(state.shape.roseD)\n    let p = (n * d % 2 === 0) ? 2 : 1\n    let thetaClose = d * p * 32 * n\n    let resolution = 64 * n\n\n    for (let i=0; i<thetaClose+1; i++) {\n      let theta = Math.PI * 2.0 / (resolution) * i\n      let r = 0.5 * a * Math.sin((n / d) * theta)\n      points.push(new Victor(r * Math.cos(theta), r * Math.sin(theta)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","// L-system instructions for space filling curves\nexport const subtypes = {\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Gosper (flowsnake)': {\n    axiom: 'A',\n    draw: ['A', 'B'],\n    rules:  {\n      A: 'A-B--B+A++AA+B-',\n      B: '+A-BB--B-A++A+B'\n    },\n    angle: Math.PI / 3,\n    iterationsGrow: (config) => {\n      return config.iterations\n    },\n    maxIterations: 6\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Hilbert': {\n    axiom: 'L',\n    draw: 'F',\n    rules: {\n      L: '+RF-LFL-FR+',\n      R: '-LF+RFR+FL-'\n    },\n    startingAngle: Math.PI,\n    minIterations: 2\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Hilbert 2': {\n    axiom: 'X',\n    draw: 'F',\n    rules: {\n      X: 'XFYFX+F+YFXFY-F-XFYFX',\n      Y: 'YFXFY-F-XFYFX+F+YFXFY'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 4\n  },\n  // https://en.wikipedia.org/wiki/Sierpi%C5%84ski_curve\n  'Sierpinski': {\n    axiom: 'F--XF--F--XF',\n    draw: ['F', 'G'],\n    rules: {\n      X: 'XF+G+XF--F--XF+G+X'\n    },\n    startingAngle: Math.PI/4,\n    angle: Math.PI/4,\n    maxIterations: 6\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Penrose Tile': {\n     axiom: '[7]++[7]++[7]++[7]++[7]',\n     draw: ['6', '7', '8', '9'],\n    rules: {\n      6: '8++9----7[-8----6]++',\n      7: '+8--9[---6--7]+',\n      8: '-6++7[+++8++9]-',\n      9: '--8++++6[+9++++7]--7'\n    },\n    angle: Math.PI/5,\n    maxIterations: 6,\n    iterationsGrow: (config) => {\n      return 1 + Math.max(1, 3/config.iterations)\n    }\n  },\n  // https://en.wikipedia.org/wiki/Sierpi%C5%84ski_curve\n  'Sierpinski Square': {\n    axiom: 'F+XF+F+XF',\n    draw: 'F',\n    rules: {\n      X: 'XF-F+F-XF+F+XF-F+F-X'\n    },\n    startingAngle: Math.PI/4,\n    maxIterations: 6\n  },\n}\n","import Shape, { shapeOptions } from '../Shape'\nimport {\n  lsystem,\n  lsystemPath,\n  onSubtypeChange,\n  onMinIterations,\n  onMaxIterations\n} from '../../common/lindenmayer'\nimport { resizeVertices } from '../../common/geometry'\nimport { subtypes } from './subtypes'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    fillerSubtype: {\n      title: 'Type',\n      type: 'dropdown',\n      choices: Object.keys(subtypes),\n      onChange: (changes, attrs) => {\n        return onSubtypeChange(subtypes[changes.fillerSubtype], changes, attrs)\n      }\n    },\n    iterations: {\n      title: 'Iterations',\n      min: (state) => {\n        return onMinIterations(subtypes[state.fillerSubtype], state)\n      },\n      max: (state) => {\n        return onMaxIterations(subtypes[state.fillerSubtype], state)\n      }\n    }\n  }\n}\n\nexport default class SpaceFiller extends Shape {\n  constructor() {\n    super('Space Filler')\n    this.linkText = 'Fractal charm: space filling curves'\n    this.link = 'https://www.youtube.com/watch?v=RU0wScIj36o'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'space_filler',\n        selectGroup: 'Erasers',\n        canTransform: false,\n        iterations: 6,\n        fillerSubtype: 'Hilbert',\n        repeatEnabled: false,\n        canChangeSize: false,\n        autosize: false,\n        usesMachine: true,\n      }\n    }\n  }\n\n  getVertices(state) {\n    const machine = state.machine\n    const iterations = state.shape.iterations || 1\n\n    let sizeX, sizeY\n    if (machine.rectangular) {\n      sizeX = machine.maxX - machine.minX\n      sizeY = machine.maxY - machine.minY\n    } else {\n      sizeX = sizeY = machine.maxRadius * 2.0\n    }\n\n    // generate our vertices using a set of l-system rules\n    let config = subtypes[state.shape.fillerSubtype]\n    config.iterations = iterations\n\n    if (config.side === undefined) { config.side = 5 }\n    if (config.angle === undefined) { config.angle = Math.PI/2 }\n\n    let curve = lsystemPath(lsystem(config), config)\n    let scale = 1\n\n    if (config.iterationsGrow) {\n      scale = (typeof config.iterationsGrow === 'function') ? config.iterationsGrow(config) : config.iterationsGrow\n    }\n\n    return resizeVertices(curve, sizeX*scale, sizeY*scale)\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    points: {\n      title: 'Number of points',\n      min: 2\n    },\n    starRatio: {\n      title: 'Size of points',\n      step: 0.05,\n      min: 0.05\n    },\n  }\n}\n\nexport default class Star extends Shape {\n  constructor() {\n    super('Star')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'star',\n        points: 5,\n        starRatio: 0.5,\n        rotateCompleteLoop: true        \n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<=state.shape.points * 2; i++) {\n      let angle = Math.PI * 2.0 / (2.0 * state.shape.points) * i\n      let star_scale = 1.0\n      if (i % 2 === 0) {\n        star_scale *= state.shape.starRatio\n      }\n      points.push(new Victor(star_scale * Math.cos(angle), star_scale * Math.sin(angle)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export class PriorityQueue {\n  constructor() {\n    this.collection = []\n  }\n\n  enqueue(element) {\n    if (this.isEmpty()) {\n      this.collection.push(element)\n    } else {\n      let added = false\n      for (let i = 1; i <= this.collection.length; i++) {\n        if (element[1] < this.collection[i-1][1]){\n          this.collection.splice(i-1, 0, element)\n          added = true\n          break\n        }\n      }\n\n      if (!added) {\n        this.collection.push(element)\n      }\n    }\n  }\n\n  dequeue() {\n    let value = this.collection.shift()\n    return value\n  }\n\n  isEmpty() {\n    return (this.collection.length === 0)\n  }\n}\n","import { PriorityQueue } from './PriorityQueue.js'\nimport Victor from 'victor'\n\nexport const mix = (v1, v2, s) => {\n  let u = [v1.x, v1.y]\n  let v = [v2.x, v2.y]\n  var result = []\n\n  for (var i = 0; i < u.length; ++i ) {\n    result.push((1.0 - s) * u[i] + s * v[i])\n  }\n\n  return new Victor(result[0], result[1])\n}\n\n// note: requires string-based nodes to work properly\nexport default class Graph {\n  constructor() {\n    this.nodeMap = {}\n    this.nodeKeys = new Set()\n    this.adjacencyList = {}\n    this.edgeMap = {}\n    this.edgeKeys = new Set()\n    this.clearCachedPaths()\n  }\n\n  addNode(node) {\n    let key = node.toString()\n\n    if (!this.nodeKeys.has(key)) {\n      this.nodeKeys.add(key)\n      this.nodeMap[key] = node\n      this.adjacencyList[key] = []\n      this.clearCachedPaths()\n    }\n  }\n\n  addEdge(node1, node2, weight=1) {\n    let node1Key = node1.toString()\n    let node2Key = node2.toString()\n    let edgeKey = [node1Key, node2Key].sort().toString()\n\n    if (!this.edgeKeys.has(edgeKey)) {\n      this.adjacencyList[node1Key].push({node: node2, weight: weight})\n      this.adjacencyList[node2Key].push({node: node1, weight: weight})\n      this.edgeKeys.add(edgeKey)\n      this.edgeMap[edgeKey] = [node1.toString(), node2.toString()]\n      this.clearCachedPaths()\n    }\n  }\n\n  hasEdge(ekey1, ekey2) {\n    let edgeKey = [ekey1, ekey2].sort().toString()\n    return this.edgeMap[edgeKey]\n  }\n\n  dijkstraShortestPath(startNode, endNode) {\n    let shortest = this.getCachedShortestPath(startNode, endNode)\n\n    if (shortest === undefined) {\n      let times = {}\n      let backtrace = {}\n      let pq = new PriorityQueue()\n      let nodes = this.nodeKeys\n\n      times[startNode] = 0\n\n      nodes.forEach(node => {\n        if (node !== startNode) {\n          times[node] = Infinity\n        }\n      })\n\n      pq.enqueue([startNode, 0])\n\n      while (!pq.isEmpty()) {\n        let shortestStep = pq.dequeue()\n        let currentNode = shortestStep[0]\n        this.adjacencyList[currentNode.toString()].forEach(neighbor => {\n          let time = times[currentNode] + neighbor.weight\n\n          if (time < times[neighbor.node]) {\n            times[neighbor.node] = time\n            backtrace[neighbor.node] = currentNode\n            pq.enqueue([neighbor.node, time])\n          }\n        })\n      }\n\n      let path = [endNode.toString()]\n      let lastStep = endNode\n\n      while(lastStep !== startNode) {\n        path.unshift(backtrace[lastStep].toString())\n        lastStep = backtrace[lastStep]\n      }\n\n      shortest = path.map(node => this.nodeMap[node])\n      this.cacheShortestPath(startNode, endNode, shortest)\n    }\n\n    return shortest\n  }\n\n  clearCachedPaths() {\n    this.cachedPaths = {}\n  }\n\n  cacheShortestPath(node1, node2, path) {\n    this.cachedPaths[this.getPairedKey(node1, node2)] = [...path]\n    this.cachedPaths[this.getPairedKey(node2, node1)] = [...path].reverse()\n  }\n\n  getCachedShortestPath(node1, node2) {\n    let shortest = this.cachedPaths[this.getPairedKey(node1, node2)]\n    return shortest === undefined ? undefined : [...shortest]\n  }\n\n  getPairedKey(node1, node2) {\n    return node1.toString() + '-' + node2.toString()\n  }\n}\n","import Victor from 'victor'\nimport Graph, { mix } from '../../common/Graph'\nimport eulerianTrail from '../../common/eulerianTrail'\nimport { difference } from '../../common/util'\nimport Shape, { shapeOptions } from '../Shape'\n\nconst vecTriangle = [\n  new Victor(-0.85, -0.4907477295),\n  new Victor(0.85, -0.4907477295),\n  new Victor(0.0,  0.9814954573),\n]\n\nconst vecSquare = [\n  new Victor(-0.7, -0.7),\n  new Victor( 0.7,  0.7),\n  new Victor(-0.7,  0.7),\n\n  new Victor(-0.7, -0.7),\n  new Victor(0.7,  0.7),\n  new Victor(0.7, -0.7)\n]\n\nfunction getEdges(edges, a, b, c, count, settings) {\n  let da, db, dc\n\n  if (count === 0) {\n    if (settings.rotate > 0) {\n      da = Math.sqrt(Math.pow(a.x, 2) + Math.pow(a.y, 2)) * (settings.rotate * Math.PI / 180.0)\n      db = Math.sqrt(Math.pow(b.x, 2) + Math.pow(b.y, 2)) * (settings.rotate * Math.PI / 180.0)\n      dc = Math.sqrt(Math.pow(c.x, 2) + Math.pow(c.y, 2)) * (settings.rotate * Math.PI / 180.0)\n    } else {\n      da = (settings.rotate * Math.PI / 180.0)\n      db = (settings.rotate * Math.PI / 180.0)\n      dc = (settings.rotate * Math.PI / 180.0)\n    }\n\n    let ap = new Victor(\n      (a.x * Math.cos(da)) - (a.y * Math.sin(da)),\n      (a.x * Math.sin(da)) + (a.y * Math.cos(da)))\n    let bp = new Victor(\n      (b.x * Math.cos(db)) - (b.y * Math.sin(db)),\n      (b.x * Math.sin(db)) + (b.y * Math.cos(db)))\n    let cp = new Victor(\n      (c.x * Math.cos(dc)) - (c.y * Math.sin(dc)),\n      (c.x * Math.sin(dc)) + (c.y * Math.cos(dc)))\n\n    edges.push([ap, bp], [ap, cp], [bp, cp])\n    return\n  }\n\n  let ab = mix(a, b, 0.5)\n  let ac = mix(a, c, 0.5)\n  let bc = mix(b, c, 0.5)\n\n  getEdges(edges, ab, ac, bc, count - 1, settings)\n  getEdges(edges, c, ac, bc, count - 1, settings)\n  getEdges(edges, b, bc, ab, count - 1, settings)\n  getEdges(edges, a, ab, ac, count - 1, settings)\n}\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    tessellationTwistNumSides: {\n      title: \"Number of sides\",\n      min: 3\n    },\n    tessellationTwistIterations: {\n      title: \"Iterations\",\n      min: 0,\n      max: 4\n    },\n    tessellationTwistRotate: {\n      title: \"Rotate and twist\",\n      step: 5,\n      min: 0\n    }\n  }\n}\n\n// Adapted from https://codepen.io/rafaelpascoalrodrigues/pen/KpBJve.\nexport default class TessellationTwist extends Shape {\n  constructor() {\n    super('Tessellation Twist')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'tessellation_twist',\n        tessellationTwistNumSides: 5,\n        tessellationTwistIterations: 2,\n        tessellationTwistRotate: 0,\n        repeatEnabled: false,\n      }\n    }\n  }\n\n  getShapeVertices(numSides) {\n    let vertices = []\n    for (let i=0; i<=numSides; i++) {\n      let angle = Math.PI * 2.0 / numSides * (0.5 + i)\n      let angle2 = Math.PI * 2.0 / numSides * (0.5 + ((i + 1) % numSides))\n\n      vertices.push(new Victor(0, 0))\n      vertices.push(new Victor(Math.cos(angle), Math.sin(angle)))\n      vertices.push(new Victor(Math.cos(angle2), Math.sin(angle2)))\n    }\n    return vertices\n  }\n\n  getVertices(state) {\n    let vertices\n    let edges = []\n    const tessellation = parseInt(state.shape.tessellationTwistIterations)\n    const sides = parseInt(state.shape.tessellationTwistNumSides)\n\n    switch (sides) {\n      case 3:\n        vertices = vecTriangle.slice(0)\n        break\n      case 4:\n        vertices = vecSquare.slice(0)\n        break\n      default:\n        vertices = this.getShapeVertices(sides)\n        break\n    }\n\n    // build our tessellations\n    for (var i = 0; i < vertices.length; i += 3) {\n      getEdges(edges, vertices[i + 0], vertices[i + 1], vertices[i + 2],\n        tessellation, { rotate: parseInt(state.shape.tessellationTwistRotate) })\n    }\n\n    // build edge and adjacency maps; this serves to ensure unique\n    // vertices and edges, and give us a string-based key to access and run\n    // algorithms on them.\n    let graph = new Graph()\n\n    edges.forEach((edge) => {\n      let v1 = edge[0]\n      let v2 = edge[1]\n\n      graph.addNode(v1)\n      graph.addNode(v2)\n      graph.addEdge(v1, v2)\n    })\n\n    // build a graph\n    // find the eulerian trail that efficiently visits all of the vertices\n    let trail = eulerianTrail({edges: Object.values(graph.edgeMap)})\n\n    let prevKey\n    let walkedVertices = []\n    var walkedEdges = []\n\n    // if there are nodes with an odd number of edges (as in pentagon and hexagon)\n    // there is not a eulerian trail that visits all of the nodes. So we need to identify\n    // the missing nodes and create edges for them. There is a complex algorithm\n    // (chinese postman) that can be used to do this for the general case, but\n    // it's computationally expensive and overkill for our situation.\n    for (i = 0; i < trail.length-1; i++) {\n      let edge = [trail[i], trail[i+1]].sort().toString()\n      walkedEdges.push(edge)\n    }\n    walkedEdges = new Set(walkedEdges)\n\n    let missingEdges = Array.from(difference(walkedEdges, graph.edgeKeys)).reduce((hash, d) => {\n      d = d.split(',')\n      hash[d[0] + ',' + d[1]] = d[2] + ',' + d[3]\n      return hash\n    }, {})\n\n    trail.forEach((key, index) => {\n      let vertex = graph.nodeMap[key]\n\n      if (prevKey) {\n        if (!graph.hasEdge(key, prevKey)) {\n          // non-eulerian move, so we'll walk the shortest valid path between them\n          let path = graph.dijkstraShortestPath(prevKey, key)\n          path.shift()\n          path.forEach(node => walkedVertices.push(node))\n          walkedVertices.push(vertex)\n        } else {\n          walkedVertices.push(vertex)\n        }\n      } else {\n        walkedVertices.push(vertex)\n      }\n\n      // add any missing edges\n      if (missingEdges[key]) {\n        let missingVertex = graph.nodeMap[missingEdges[key]]\n        let edgeKey = [key, missingEdges[key]].sort().toString()\n\n        if (graph.edgeMap[edgeKey]) {\n          // only add valid edges\n          walkedVertices.push(missingVertex)\n          walkedVertices.push(vertex)\n        }\n        delete missingEdges[key]\n      }\n\n      prevKey = key\n    })\n\n    const scale = 10.5 // to normalize starting size\n    walkedVertices.forEach(point => {\n      if (!point.visited) {\n        point.multiply({x: scale, y: scale })\n        point.visited = true\n      }\n    })\n    return walkedVertices\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\n\nlet Vicious1Vertices = () => {\n  return [\n    new Victor(-0.745613252629, 0.342139688058),\n    new Victor(-0.722681883112, 0.350763810109),\n    new Victor(-0.700286039815, 0.359363989838),\n    new Victor(-0.683380317501, 0.365945196632),\n    new Victor(-0.666520036737, 0.372640251609),\n    new Victor(-0.649705686141, 0.379449643388),\n    new Victor(-0.632937754332, 0.386372394731),\n    new Victor(-0.61621672993, 0.393408994259),\n    new Victor(-0.59954407879, 0.400558464732),\n    new Victor(-0.582920289531, 0.40782080615),\n    new Victor(-0.566345850773, 0.415195529896),\n    new Victor(-0.549821739752, 0.42268214735),\n    new Victor(-0.533348933706, 0.430280658513),\n    new Victor(-0.516927921255, 0.437990574764),\n    new Victor(-0.500559191017, 0.445811896105),\n    new Victor(-0.484244208848, 0.453743645298),\n    new Victor(-0.467982974749, 0.461785822342),\n    new Victor(-0.451776954575, 0.46993793862),\n    new Victor(-0.435626636946, 0.478199505511),\n    new Victor(-0.417042020391, 0.487809171708),\n    new Victor(-0.398529230801, 0.497557117029),\n    new Victor(-0.380089734033, 0.507441875618),\n    new Victor(-0.361724018706, 0.517463936093),\n    new Victor(-0.343433550675, 0.527621343979),\n    new Victor(-0.325218818561, 0.537915076515),\n    new Victor(-0.307080799601, 0.548343667842),\n    new Victor(-0.289020959651, 0.558906629343),\n    new Victor(-0.271040275948, 0.569603472399),\n    new Victor(-0.253139237112, 0.580433708391),\n    new Victor(-0.235319797618, 0.591396360082),\n    new Victor(-0.217581468846, 0.60249142747),\n    new Victor(-0.199926693892, 0.61371793332),\n    new Victor(-0.182355472755, 0.625075389011),\n    new Victor(-0.164869271291, 0.636562817306),\n    new Victor(-0.147469066739, 0.648180218206),\n    new Victor(-0.130155347716, 0.659926125854),\n    new Victor(-0.112929580079, 0.671800540249),\n    new Victor(-0.0957922524482, 0.683802484155),\n    new Victor(-0.0787448306786, 0.695931957571),\n    new Victor(-0.0617878033894, 0.708187006022),\n    new Victor(-0.0449226364371, 0.720568118127),\n    new Victor(-0.0281493298216, 0.733074316648),\n    new Victor(-0.0114698380183, 0.745704624347),\n    new Victor(0.00511535035415, 0.758458552606),\n    new Victor(0.021605258058, 0.771335124187),\n    new Victor(0.0379993964745, 0.78433433909),\n    new Victor(0.0542962997473, 0.79745424284),\n    new Victor(0.0689143087782, 0.809362371934),\n    new Victor(0.0834609794625, 0.821357963795),\n    new Victor(0.0979358231812, 0.833440041186),\n    new Victor(0.112337862697, 0.845608604107),\n    new Victor(0.12666660939, 0.857863652558),\n    new Victor(0.140921574643, 0.870203720682),\n    new Victor(0.155102758455, 0.882629297099),\n    new Victor(0.169209183589, 0.895138915952),\n    new Victor(0.181539967956, 0.906207597924),\n    new Victor(0.193955771996, 0.91718051061),\n    new Victor(0.206455618473, 0.928057165389),\n    new Victor(0.219038530147, 0.938837562262),\n    new Victor(0.22146207946, 0.940840899396),\n    new Victor(0.223916411758, 0.942806124262),\n    new Victor(0.226401527041, 0.944732748242),\n    new Victor(0.228916936691, 0.946620282717),\n    new Victor(0.230887047745, 0.948104706671),\n    new Victor(0.232926054052, 0.949493361338),\n    new Victor(0.235029069424, 0.950783803623),\n    new Victor(0.237191207672, 0.951972124576),\n    new Victor(0.239407582608, 0.953055881104),\n    new Victor(0.241672819425, 0.954032630111),\n    new Victor(0.243982520555, 0.954900417123),\n    new Victor(0.246330822571, 0.955656799046),\n    new Victor(0.248847209458, 0.956426373676),\n    new Victor(0.251395845187, 0.957082100124),\n    new Victor(0.253971354951, 0.957622512531),\n    new Victor(0.256568363942, 0.958047610898),\n    new Victor(0.259181985973, 0.958355440751),\n    new Victor(0.261806846237, 0.958546002088),\n    new Victor(0.264437081308, 0.958618806291),\n    new Victor(0.267068293617, 0.958573364741),\n    new Victor(0.269695108356, 0.958410166058),\n    new Victor(0.2723116621, 0.95812921024),\n    new Victor(0.274913068661, 0.957731474526),\n    new Victor(0.277493953231, 0.957217447535),\n    new Victor(0.280048941005, 0.956588595122),\n    new Victor(0.282573634412, 0.955845405908),\n    new Victor(0.285062170027, 0.954989834366),\n    new Victor(0.287510150281, 0.954023834973),\n    new Victor(0.289695253613, 0.953107674698),\n    new Victor(0.291880845564, 0.952108937844),\n    new Victor(0.301388879047, 0.947138218659),\n    new Victor(0.310845118937, 0.942069775711),\n    new Victor(0.320249076614, 0.936904097619),\n    new Victor(0.329599286221, 0.931642650239),\n    new Victor(0.363485000908, 0.912453612212),\n    new Victor(0.397329182996, 0.8931922586),\n    new Victor(0.431132321104, 0.873858589404),\n    new Victor(0.464893926612, 0.854453093243),\n    new Victor(0.498613999522, 0.834975281497),\n    new Victor(0.532292539832, 0.815425642786),\n    new Victor(0.565929058925, 0.795804177109),\n    new Victor(0.599524045418, 0.776110884466),\n    new Victor(0.614195802519, 0.767461354237),\n    new Victor(0.628780096852, 0.758665238364),\n    new Victor(0.643274973942, 0.749722536847),\n    new Victor(0.657679456551, 0.740634715542),\n    new Victor(0.663100193664, 0.737124966608),\n    new Victor(0.668459853424, 0.733522380099),\n    new Victor(0.673756481358, 0.729827933253),\n    new Victor(0.678988611609, 0.72604211469),\n    new Victor(0.681833350338, 0.72394251965),\n    new Victor(0.684601864533, 0.721743246372),\n    new Victor(0.687290245243, 0.719446737951),\n    new Victor(0.689896049373, 0.717056903336),\n    new Victor(0.692415367973, 0.714576674241),\n    new Victor(0.694845269331, 0.71200800514),\n    new Victor(0.697182821733, 0.709355293604),\n    new Victor(0.699425093466, 0.706621471345),\n    new Victor(0.70031242523, 0.705263599663),\n    new Victor(0.70110301047, 0.703846605105),\n    new Victor(0.701792940234, 0.702378794191),\n    new Victor(0.702378794191, 0.700866030346),\n    new Victor(0.702858129247, 0.699316131471),\n    new Victor(0.703228502307, 0.697736426848),\n    new Victor(0.703487470278, 0.696135222997),\n    new Victor(0.703634544541, 0.694519360583),\n    new Victor(0.703808492838, 0.692484263226),\n    new Victor(0.704005894839, 0.688243540547),\n    new Victor(0.704113390977, 0.683999886156),\n    new Victor(0.704130981255, 0.679754765908),\n    new Victor(0.704059154289, 0.675510622897),\n    new Victor(0.703896932843, 0.671268434362),\n    new Victor(0.703645294154, 0.667031132015),\n    new Victor(0.703303749604, 0.662799693094),\n    new Victor(0.702872787811, 0.658576560692),\n    new Victor(0.701225165173, 0.648144060414),\n    new Victor(0.699422161753, 0.637737456933),\n    new Victor(0.697463288931, 0.627358704724),\n    new Victor(0.695350012565, 0.617010735501),\n    new Victor(0.693864122754, 0.60962184181),\n    new Victor(0.691242194203, 0.596705692105),\n    new Victor(0.688638833167, 0.58378514483),\n    new Victor(0.686055016884, 0.570860688605),\n    new Victor(0.683489768115, 0.557932812049),\n    new Victor(0.679173798139, 0.53578860744),\n    new Victor(0.675031287842, 0.513610688133),\n    new Victor(0.671063214461, 0.491401008603),\n    new Victor(0.667269089377, 0.469161523326),\n    new Victor(0.663649889828, 0.446892232301),\n    new Victor(0.660205127196, 0.424595578622),\n    new Victor(0.65693480148, 0.402273028147),\n    new Victor(0.653839889918, 0.379925069493),\n    new Victor(0.65092039251, 0.357553168517),\n    new Victor(0.648176309256, 0.335159768314),\n    new Victor(0.645608128774, 0.312745357501),\n    new Victor(0.643215362447, 0.290311401936),\n    new Victor(0.641387928086, 0.272862824121),\n    new Victor(0.640313455316, 0.262524627274),\n    new Victor(0.639318138793, 0.252178123907),\n    new Victor(0.638402467138, 0.241824779876),\n    new Victor(0.637566440349, 0.231464595183),\n    new Victor(0.636809569807, 0.221098058444),\n    new Victor(0.636132344132, 0.210726146899),\n    new Victor(0.635534763324, 0.200349349165),\n    new Victor(0.635016338763, 0.189968153863),\n    new Victor(0.634136336281, 0.166283334136),\n    new Victor(0.633371647838, 0.14259411684),\n    new Victor(0.632722273436, 0.118901479213),\n    new Victor(0.632187724454, 0.0952059098725),\n    new Victor(0.631768489513, 0.0715078974381),\n    new Victor(0.631464568611, 0.0478084191472),\n    new Victor(0.63127547313, 0.0241079636186),\n    new Victor(0.631201691689, 0.000406530852484),\n    new Victor(0.631270098323, -0.0222394852774),\n    new Victor(0.631441114908, -0.0448845241697),\n    new Victor(0.631715230062, -0.0675285858243),\n    new Victor(0.632092443786, -0.0901711816225),\n    new Victor(0.63257226746, -0.112811822945),\n    new Victor(0.633154701085, -0.135450021174),\n    new Victor(0.63384023328, -0.158085776309),\n    new Victor(0.634628864044, -0.180717622493),\n    new Victor(0.635306089719, -0.195449968327),\n    new Victor(0.636126969325, -0.210174984878),\n    new Victor(0.637091014243, -0.22489120629),\n    new Victor(0.638198713093, -0.239597655326),\n    new Victor(0.639449577254, -0.254292377511),\n    new Victor(0.640843606728, -0.268974395606),\n    new Victor(0.642380801514, -0.283642243756),\n    new Victor(0.644060672993, -0.298293967485),\n    new Victor(0.64612020129, -0.31581290641),\n    new Victor(0.6482320118, -0.333325493289),\n    new Victor(0.65039757038, -0.350831239505),\n    new Victor(0.652615411173, -0.368331122296),\n    new Victor(0.654741880247, -0.384873800832),\n    new Victor(0.656970959272, -0.401402798041),\n    new Victor(0.659303625486, -0.417918113923),\n    new Victor(0.661739390269, -0.434418282622),\n    new Victor(0.664278253622, -0.450902815519),\n    new Victor(0.666919726926, -0.467371223995),\n    new Victor(0.66966381018, -0.483822530812),\n    new Victor(0.672510992004, -0.500256735972),\n    new Victor(0.675460295159, -0.516672862235),\n    new Victor(0.678512696885, -0.533069932364),\n    new Victor(0.681666731323, -0.54944794636),\n    new Victor(0.684923375712, -0.565805926984),\n    new Victor(0.688253801542, -0.582478578124),\n    new Victor(0.691624294115, -0.599143411363),\n    new Victor(0.695033876193, -0.615799938082),\n    new Victor(0.698483036394, -0.632448158282),\n    new Victor(0.700362264349, -0.641257466863),\n    new Victor(0.702110053844, -0.650093649478),\n    new Victor(0.703725916259, -0.658955240272),\n    new Victor(0.705209362975, -0.667839796151),\n    new Victor(0.705560191283, -0.670609776202),\n    new Victor(0.705811829972, -0.673129583421),\n    new Victor(0.705988709982, -0.675296119238),\n    new Victor(0.706054184903, -0.677469495719),\n    new Victor(0.706007766116, -0.679642872199),\n    new Victor(0.70584945362, -0.681811362492),\n    new Victor(0.705579736035, -0.683968614552),\n    new Victor(0.705199590599, -0.686109253572),\n    new Victor(0.704709505929, -0.688227904745),\n    new Victor(0.704111436502, -0.690317727409),\n    new Victor(0.702891355326, -0.694066410943),\n    new Victor(0.701505632372, -0.697756460219),\n    new Victor(0.699955733497, -0.701380545956),\n    new Victor(0.698245567651, -0.704932316108),\n    new Victor(0.696378555166, -0.708403464156),\n    new Victor(0.694358116374, -0.711788126674),\n    new Victor(0.692188648844, -0.715079462999),\n    new Victor(0.689874061527, -0.718270143849),\n    new Victor(0.688711148751, -0.719521985248),\n    new Victor(0.687505237521, -0.720732294048),\n    new Victor(0.686256816453, -0.721899115774),\n    new Victor(0.684968817262, -0.723021473187),\n    new Victor(0.683641728566, -0.724097900432),\n    new Victor(0.68227750484, -0.725126443034),\n    new Victor(0.68087761194, -0.726106612373),\n    new Victor(0.679444492961, -0.727036942593),\n    new Victor(0.669607619016, -0.733287843069),\n    new Victor(0.659707713245, -0.739438576688),\n    new Victor(0.649746730121, -0.745489632069),\n    new Victor(0.639724669646, -0.751439054737),\n    new Victor(0.626066307964, -0.75960143201),\n    new Victor(0.588245257356, -0.781929357292),\n    new Victor(0.550379253818, -0.804180569421),\n    new Victor(0.512467808729, -0.826354091159),\n    new Victor(0.474510922092, -0.848449922505),\n    new Victor(0.436509082523, -0.87046806346),\n    new Victor(0.398462290023, -0.892408514024),\n    new Victor(0.360370544593, -0.914271274197),\n    new Victor(0.322234334851, -0.936056343978),\n    new Victor(0.311636192795, -0.942000391839),\n    new Victor(0.303639945919, -0.946411153865),\n    new Victor(0.301535464691, -0.947610713051),\n    new Victor(0.299393848434, -0.94874333146),\n    new Victor(0.29721754024, -0.949807054616),\n    new Victor(0.295008494586, -0.9508013939),\n    new Victor(0.292769154566, -0.951725372076),\n    new Victor(0.290501474654, -0.952577523286),\n    new Victor(0.288207897946, -0.95335784753),\n    new Victor(0.285890867534, -0.954064878953),\n    new Victor(0.282197886545, -0.955003515693),\n    new Victor(0.278465327432, -0.955768692754),\n    new Victor(0.274700519477, -0.956358455661),\n    new Victor(0.270912257819, -0.956772315796),\n    new Victor(0.267109337597, -0.957008318683),\n    new Victor(0.263299088092, -0.957066464322),\n    new Victor(0.259490304444, -0.956946752712),\n    new Victor(0.255691781792, -0.956649183855),\n    new Victor(0.251910849416, -0.956174246369),\n    new Victor(0.248156302456, -0.95552340611),\n    new Victor(0.244436447432, -0.954697640316),\n    new Victor(0.240758613626, -0.953699392081),\n    new Victor(0.240319833932, -0.953534238922),\n    new Victor(0.238502171947, -0.952568728147),\n    new Victor(0.236709918141, -0.951555821348),\n    new Victor(0.234945026988, -0.950496007142),\n    new Victor(0.233208964345, -0.949390262768),\n    new Victor(0.23150270745, -0.948239076844),\n    new Victor(0.22982723354, -0.94704293799),\n    new Victor(0.228184008471, -0.945803312061),\n    new Victor(0.226574009482, -0.944520687677),\n    new Victor(0.224074235635, -0.942570121375),\n    new Victor(0.212583875626, -0.933021043911),\n    new Victor(0.201218113415, -0.923323914947),\n    new Victor(0.189977926239, -0.913481666195),\n    new Victor(0.178866245811, -0.903494297655),\n    new Victor(0.161323853183, -0.887790577622),\n    new Victor(0.143655885521, -0.872228557044),\n    new Victor(0.125862831443, -0.856809213159),\n    new Victor(0.107946156805, -0.841533523206),\n    new Victor(0.0899073274635, -0.82640295304),\n    new Victor(0.0717468320377, -0.811418479899),\n    new Victor(0.0534666250026, -0.796580103784),\n    new Victor(0.0350671949772, -0.781890267787),\n    new Victor(0.0165500078179, -0.767348483291),\n    new Victor(-0.00208395923779, -0.752956704771),\n    new Victor(-0.0208327517145, -0.738715420845),\n    new Victor(-0.0396958809936, -0.724625608751),\n    new Victor(-0.0586718812184, -0.710688245726),\n    new Victor(-0.0777597751514, -0.69690382039),\n    new Victor(-0.0969580969362, -0.683274287218),\n    new Victor(-0.116265380716, -0.66979964621),\n    new Victor(-0.135680649254, -0.656480874603),\n    new Victor(-0.155202436693, -0.643318949635),\n    new Victor(-0.174829765796, -0.630314359925),\n    new Victor(-0.194561170706, -0.617469059948),\n    new Victor(-0.214395674185, -0.604782561085),\n    new Victor(-0.234331321759, -0.592256329193),\n    new Victor(-0.254367624808, -0.579891341509),\n    new Victor(-0.274502628858, -0.567688086652),\n    new Victor(-0.29394086248, -0.556123456584),\n    new Victor(-0.313469979201, -0.54471371868),\n    new Victor(-0.333088513165, -0.533458384321),\n    new Victor(-0.352795975753, -0.522359407981),\n    new Victor(-0.372590901108, -0.511416789662),\n    new Victor(-0.392471334756, -0.500631017982),\n    new Victor(-0.412437276696, -0.490003070179),\n    new Victor(-0.432486283835, -0.47953392349),\n    new Victor(-0.452617867553, -0.469224066534),\n    new Victor(-0.472830073375, -0.459073499311),\n    new Victor(-0.493122412682, -0.449083687678),\n    new Victor(-0.513493419618, -0.439255120252),\n    new Victor(-0.533941628327, -0.429588285654),\n    new Victor(-0.554465572951, -0.420083183884),\n    new Victor(-0.575064276254, -0.410741769415),\n    new Victor(-0.595736272379, -0.401563065011),\n    new Victor(-0.61648009547, -0.392549025148),\n    new Victor(-0.637294768288, -0.383699161205),\n    new Victor(-0.658179313597, -0.37501493904),\n    new Victor(-0.679131776921, -0.366496358653),\n    new Victor(-0.698898362385, -0.3585812225),\n    new Victor(-0.718729934152, -0.350830262268),\n    new Victor(-0.738624537745, -0.34324250072),\n    new Victor(-0.758581195928, -0.33581989233),\n    new Victor(-0.778598442844, -0.32856194848),\n    new Victor(-0.798674812635, -0.32146915779),\n    new Victor(-0.818809328066, -0.314542497496),\n    new Victor(-0.83900003466, -0.307782456217),\n    new Victor(-0.849647527216, -0.304229708827),\n    new Victor(-0.859482935305, -0.301024369413),\n    new Victor(-0.86930319621, -0.297772122593),\n    new Victor(-0.879107821313, -0.294472968367),\n    new Victor(-0.888896810615, -0.291126906735),\n    new Victor(-0.898669186876, -0.287733937697),\n    new Victor(-0.908425927336, -0.284294061253),\n    new Victor(-0.918165566137, -0.28080825464),\n    new Victor(-0.927888591898, -0.277275540622),\n    new Victor(-0.931015263683, -0.276110673371),\n    new Victor(-0.934077437785, -0.27478553915),\n    new Victor(-0.937066807683, -0.273304046909),\n    new Victor(-0.939975066859, -0.271669128361),\n    new Victor(-0.942794886029, -0.269885669693),\n    new Victor(-0.945518447293, -0.267958557094),\n    new Victor(-0.948138909988, -0.265892676752),\n    new Victor(-0.950648456212, -0.263693892093),\n    new Victor(-0.953040245302, -0.261368066543),\n    new Victor(-0.955308902451, -0.258921063527),\n    new Victor(-0.957447586996, -0.256360212328),\n    new Victor(-0.959450435511, -0.25369186499),\n    new Victor(-0.961260768213, -0.251131991028),\n    new Victor(-0.962993410524, -0.248518368997),\n    new Victor(-0.96464591935, -0.245853930609),\n    new Victor(-0.966217317453, -0.24314063034),\n    new Victor(-0.972878657732, -0.231316055063),\n    new Victor(-0.972926053757, -0.0130031238537),\n    new Victor(-0.972925565138, 0.00628803550555),\n    new Victor(-0.97291628138, 0.0249869888634),\n    new Victor(-0.972898202484, 0.0430570898088),\n    new Victor(-0.972858135742, 0.0776097691758),\n    new Victor(-0.972741844464, 0.112162448543),\n    new Victor(-0.972548351414, 0.146714639291),\n    new Victor(-0.972277656592, 0.181266341421),\n    new Victor(-0.972203875151, 0.189501034277),\n    new Victor(-0.972085629398, 0.197735727134),\n    new Victor(-0.971922919333, 0.205968954135),\n    new Victor(-0.971715256338, 0.214201692516),\n    new Victor(-0.971568670694, 0.217132916776),\n    new Victor(-0.971310679961, 0.220056811754),\n    new Victor(-0.970942749994, 0.222968491261),\n    new Victor(-0.970464880795, 0.225864534966),\n    new Victor(-0.969878049601, 0.228740056681),\n    new Victor(-0.96918274503, 0.231591636074),\n    new Victor(-0.968380432939, 0.234414875576),\n    new Victor(-0.967472090565, 0.237205866236),\n    new Victor(-0.966500716365, 0.23992551855),\n    new Victor(-0.965406210223, 0.242597774839),\n    new Victor(-0.964191015235, 0.245217260296),\n    new Victor(-0.962857085875, 0.247778600114),\n    new Victor(-0.961408331095, 0.250276908105),\n    new Victor(-0.959846705368, 0.252705832225),\n    new Victor(-0.958176117646, 0.255061463523),\n    new Victor(-0.956399499642, 0.257337938573),\n    new Victor(-0.954520760305, 0.259531348425),\n    new Victor(-0.952544297207, 0.261636318272),\n    new Victor(-0.950473530677, 0.263649427781),\n    new Victor(-0.948313346904, 0.265565790766),\n    new Victor(-0.946067654839, 0.267381009657),\n    new Victor(-0.94374134067, 0.269092641359),\n    new Victor(-0.941339779204, 0.270695799685),\n    new Victor(-0.93886736801, 0.27218804154),\n    new Victor(-0.936329481894, 0.273565946593),\n    new Victor(-0.933731007046, 0.274826094512),\n    new Victor(-0.93107829551, 0.27596701944),\n    new Victor(-0.928375744855, 0.276985301047),\n    new Victor(-0.913861323012, 0.282438287001),\n    new Victor(-0.899294130338, 0.287750550737),\n    new Victor(-0.884676121307, 0.292920137779),\n    new Victor(-0.870008761776, 0.297948025366),\n    new Victor(-0.854391527272, 0.303278856616),\n    new Victor(-0.838793348902, 0.308665390412),\n    new Victor(-0.823214226666, 0.314107138133),\n    new Victor(-0.807654649182, 0.319603611161),\n    new Victor(-0.792114127832, 0.325155298116),\n    new Victor(-0.776593639853, 0.330761710377),\n    new Victor(-0.761093185246, 0.336423336564),\n    new Victor(-0.745613252629, 0.342139688058),\n  ];\n}\n\nexport default Vicious1Vertices;\n","import { degToRad } from '../common/geometry'\nimport Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    wiperType: {\n      title: 'Type',\n      type: 'dropdown',\n      choices: ['Lines', 'Spiral'],\n    },\n    wiperSize: {\n      title: 'Wiper size',\n      min: 1\n    },\n    wiperAngleDeg: {\n      title: 'Wiper angle',\n      isVisible: (state) => { return state.wiperType === 'Lines' },\n    },\n  }\n}\n\nconst outOfBounds = (point, width, height) => {\n  if (point.x < -width/2.0) {\n    return true\n  }\n  if (point.y < -height/2.0) {\n    return true\n  }\n  if (point.x > width/2.0) {\n    return true\n  }\n  if (point.y > height/2.0) {\n    return true\n  }\n  return false\n}\n\n// Intersect the line with the boundary, and return the point exactly on the boundary.\n// This will keep the shape. i.e. It will follow the line segment, and return the point on that line\n// segment.\nfunction boundPoint(good, bad, size_x, size_y) {\n  var dx = good.x - bad.x\n  var dy = good.y - bad.y\n\n  var fixed = Victor(bad.x, bad.y)\n  var distance = 0\n  if (bad.x < -size_x || bad.x > size_x) {\n    if (bad.x < -size_x) {\n      // we are leaving the left\n      fixed.x = -size_x\n    } else {\n      // we are leaving the right\n      fixed.x = size_x\n    }\n    distance = (fixed.x - good.x) / dx\n    fixed.y = good.y + distance * dy\n    // We fixed x, but y might have the same problem, so we'll rerun this, with different points.\n    return boundPoint(good, fixed, size_x, size_y)\n  }\n  if (bad.y < -size_y || bad.y > size_y) {\n    if (bad.y < -size_y) {\n      // we are leaving the bottom\n      fixed.y = -size_y\n    } else {\n      // we are leaving the top\n      fixed.y = size_y\n    }\n    distance = (fixed.y - good.y) / dy\n    fixed.x = good.x + distance * dx\n  }\n  return fixed\n}\n\nfunction nearEnough(end, point) {\n  if (point.clone().subtract(end).length() < 0.01) {\n    return true\n  }\n  return false\n}\n\nfunction spiralVertices(state) {\n  // Determine the max radius\n  let maxRadius = state.machine.maxRadius\n  if (state.machine.rectangular) {\n    const halfHeight = (state.machine.maxY - state.machine.minY)/2.0\n    const halfWidth = (state.machine.maxX - state.machine.minX)/2.0\n    maxRadius = Math.sqrt(Math.pow(halfHeight, 2.0) + Math.pow(halfWidth, 2.0))\n  }\n\n  let vertices = []\n  let emergencyBreak = 0\n  let radius = 0.1\n  let angle = 0\n  const arcLength = 1.0\n  const radiusPerAngle = state.shape.wiperSize / (2.0 * Math.PI)\n\n  while (radius <= maxRadius) {\n    // Save where we are right now.\n    vertices.push(new Victor(radius * Math.cos(angle), radius * Math.sin(angle)))\n\n    // We want to have the next point be about the right arc length.\n    let deltaAngle = arcLength / radius * 2.0 * Math.PI\n\n    // Limit this at small radii\n    deltaAngle = Math.min(deltaAngle, 0.1)\n\n    // Update for the next point.\n    angle += deltaAngle\n    radius += deltaAngle * radiusPerAngle\n\n    emergencyBreak += 1\n    if (emergencyBreak > 1e9) {\n      // If we get to this point: bail. We did something terrible.\n      break\n    }\n  }\n\n  return vertices\n}\n\nfunction linearVertices(state) {\n  // Get the angle between 0,180\n  let angle = (180.0 - (state.shape.wiperAngleDeg % 360)) % 180.0\n  if (angle < 0.0) {\n    angle += 180.0\n  }\n  angle = degToRad(angle)\n\n  // Start with the defaults for 0,45\n  let height = 1\n  let width = 1\n  let outputVertices = []\n  let machine = state.machine\n  if (machine.rectangular) {\n    height = machine.maxY - machine.minY\n    width = machine.maxX - machine.minX\n  } else {\n    height = machine.maxRadius * 2.0\n    width = height\n  }\n\n  let startLocation = Victor(-width/2.0, height/2.0)\n  let cosa = Math.cos(angle)\n  let sina = Math.sin(angle)\n\n  // These can be zero, but infinity isn't great for out math, so let's just clip it.\n  if (Math.abs(cosa) < 1.0e-10) {\n    cosa = 1.0e-10\n  }\n  if (Math.abs(sina) < 1.0e-10) {\n    sina = 1.0e-10\n  }\n  let orig_delta_w = Victor(state.shape.wiperSize / cosa, 0.0)\n  let orig_delta_h = Victor(0.0, -state.shape.wiperSize / sina)\n\n  if (angle > Math.PI/4.0 && angle < 0.75 * Math.PI) {\n    // flip the logic of x,y\n    let temp = orig_delta_w.clone()\n    orig_delta_w = orig_delta_h.clone()\n    orig_delta_h = temp\n  }\n  if (angle > Math.PI/2.0) {\n    startLocation = Victor(-width/2.0, -height/2.0)\n    orig_delta_w = orig_delta_w.clone().multiply(Victor(-1.0, -1.0))\n    orig_delta_h = orig_delta_h.clone().multiply(Victor(-1.0, -1.0))\n  }\n  let delta_w = orig_delta_w\n  let delta_h = orig_delta_h\n  let endLocation = startLocation.clone().multiply(Victor(-1.0, -1.0))\n  outputVertices.push(startLocation)\n  let nextWidthPoint = startLocation\n  let nextHeightPoint = startLocation\n\n  let emergency_break = 0\n  while (emergency_break < 1000) {\n    emergency_break += 1\n\n    // \"right\"\n    nextWidthPoint = nextWidthPoint.clone().add(delta_w)\n    if (outOfBounds(nextWidthPoint, width, height)) {\n      let corner = boundPoint(nextWidthPoint.clone().subtract(delta_w), nextWidthPoint, width/2.0, height/2.0)\n      outputVertices.push(corner)\n      if (nearEnough(endLocation, corner)) {\n        break\n      }\n      nextWidthPoint = boundPoint(nextHeightPoint, nextWidthPoint, width/2.0, height/2.0)\n      delta_w = orig_delta_h\n    }\n    outputVertices.push(nextWidthPoint)\n    if (nearEnough(endLocation, nextWidthPoint)) {\n      break\n    }\n\n    // \"down-left\"\n    nextHeightPoint = nextHeightPoint.clone().add(delta_h)\n    if (outOfBounds(nextHeightPoint, width, height)) {\n      nextHeightPoint = boundPoint(nextWidthPoint, nextHeightPoint, width/2.0, height/2.0)\n      delta_h = orig_delta_w\n    }\n    outputVertices.push(nextHeightPoint)\n    if (nearEnough(endLocation, nextHeightPoint)) {\n      break\n    }\n\n    // \"down\"\n    nextHeightPoint = nextHeightPoint.clone().add(delta_h)\n    outputVertices.push(nextHeightPoint)\n    if (nearEnough(endLocation, nextHeightPoint)) {\n      break\n    }\n    if (outOfBounds(nextHeightPoint, width, height)) {\n      let corner = boundPoint(nextHeightPoint.clone().subtract(delta_h), nextHeightPoint, width/2.0, height/2.0)\n      outputVertices.push(corner)\n      if (nearEnough(endLocation, corner)) {\n        break\n      }\n      nextHeightPoint = boundPoint(nextWidthPoint, nextHeightPoint, width/2.0, height/2.0)\n      delta_h = orig_delta_w\n    }\n    outputVertices.push(nextHeightPoint)\n    if (nearEnough(endLocation, nextHeightPoint)) {\n      break\n    }\n\n    // \"up-right\"\n    nextWidthPoint = nextWidthPoint.clone().add(delta_w)\n    outputVertices.push(nextWidthPoint)\n    if (nearEnough(endLocation, nextWidthPoint)) {\n      break\n    }\n    if (outOfBounds(nextWidthPoint, width, height)) {\n      nextWidthPoint = boundPoint(nextHeightPoint, nextWidthPoint, width/2.0, height/2.0)\n      delta_w = orig_delta_h\n    }\n  }\n  return outputVertices\n}\n\nexport default class Wiper extends Shape {\n  constructor() {\n    super('Wiper')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'wiper',\n        wiperAngleDeg: 15,\n        wiperSize: 12,\n        wiperType: 'Lines',\n        selectGroup: 'Erasers',\n        canTransform: false,\n        canChangeSize: false,\n        shouldCache: false,\n        autosize: false,\n        usesMachine: true,\n        repeatEnabled: false,\n      }\n    }\n  }\n\n  getVertices(state) {\n    if (state.shape.wiperType === 'Lines') {\n      return linearVertices(state)\n    } else {\n      return spiralVertices(state)\n    }\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Circle from '../models/Circle'\nimport Epicycloid from '../models/Epicycloid'\nimport FileImport from '../models/FileImport'\nimport FractalSpirograph from '../models/fractal_spirograph/FractalSpirograph'\nimport Heart from '../models/Heart'\nimport Hypocycloid from '../models/Hypocycloid'\nimport InputText from '../models/input_text/InputText'\nimport LSystem from '../models/lsystem/LSystem'\nimport Mask from '../models/Mask'\nimport NoiseWave from '../models/NoiseWave'\nimport Point from '../models/Point'\nimport Polygon from '../models/Polygon'\nimport Reuleaux from '../models/Reuleaux'\nimport Rose from '../models/Rose'\nimport SpaceFiller from '../models/space_filler/SpaceFiller'\nimport Star from '../models/Star'\nimport TessellationTwist from '../models/tessellation_twist/TessellationTwist'\nimport V1Engineering from '../models/v1_engineering/V1Engineering'\nimport Wiper from '../models/Wiper'\n\n/*----------------------------------------------\nSupported input shapes\n-----------------------------------------------*/\nexport const registeredShapes = {\n  polygon: new Polygon(),\n  star: new Star(),\n  circle: new Circle(),\n  heart: new Heart(),\n  reuleaux: new Reuleaux(),\n  epicycloid: new Epicycloid(),\n  hypocycloid: new Hypocycloid(),\n  rose: new Rose(),\n  inputText: new InputText(),\n  v1Engineering: new V1Engineering(),\n  lsystem: new LSystem(),\n  fractal_spirograph: new FractalSpirograph(),\n  tessellation_twist: new TessellationTwist(),\n  point: new Point(),\n  wiper: new Wiper(),\n  space_filler: new SpaceFiller(),\n  noise_wave: new NoiseWave(),\n  file_import: new FileImport(),\n  mask: new Mask()\n}\n\nexport const getShape = (layer) => {\n  return registeredShapes[layer.type]\n}\n\nexport const getShapeDefaults = () => {\n  return Object.keys(registeredShapes).map(id => {\n    const state = registeredShapes[id].getInitialState()\n    state.name = registeredShapes[id].name\n    state.id = id\n    return state\n  })\n}\n\nexport const getShapeSelectOptions = (includeEffects=true) => {\n  const groupOptions = []\n  const shapes = getShapeDefaults()\n\n  for (const shape of shapes) {\n    const optionLabel = { value: shape.id, label: shape.name }\n    var found = false\n\n    for (const group of groupOptions) {\n      if (group.label === shape.selectGroup) {\n        found = true\n        group.options.push(optionLabel)\n      }\n    }\n    if (!found) {\n      if (shape.selectGroup === 'import') {\n        // Users can't manually select this group.\n        continue\n      } else if (shape.selectGroup === 'effects' && !includeEffects) {\n        continue\n      }\n      const newOptions = [ optionLabel ]\n      groupOptions.push( { label: shape.selectGroup, options: newOptions } )\n    }\n  }\n\n  return groupOptions\n}\n","import Victor from 'victor'\nimport Shape from './Shape'\n\nexport default class Heart extends Shape {\n  constructor() {\n    super('Heart')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'heart',\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<128; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      let scale = 0.9\n      // heart equation from: http://mathworld.wolfram.com/HeartCurve.html\n      points.push(new Victor(scale * 1.0 * Math.pow(Math.sin(angle), 3),\n                         scale * (13.0/16.0 * Math.cos(angle) +\n                                    -5.0/16.0 * Math.cos(2.0 * angle) +\n                                    -2.0/16.0 * Math.cos(3.0 * angle) +\n                                    -1.0/16.0 * Math.cos(4.0 * angle))))\n    }\n    return points\n  }\n}\n","import Vicious1Vertices from './Vicious1Vertices'\nimport Shape from '../Shape'\n\nexport default class V1Engineering extends Shape {\n  constructor() {\n    super('V1Engineering')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'v1Engineering',\n      }\n    }\n  }\n\n  getVertices(state) {\n    return Vicious1Vertices()\n  }\n}\n","// adapted from https://github.com/mauriciopoppe/eulerian-trail/blob/master/lib/eulerian-trail.js\n// commented out thrown exceptions to return non-optimal eulerian paths\nexport default function(options) {\n  var g = []\n  var i\n  var edgePointer = []\n  var edgeUsed = []\n  var trail = []\n\n  var id = {}\n  var idReverse = []\n  var idCount = 0\n\n  function getId(x) {\n    if (!id.hasOwnProperty(x)) {\n      edgePointer[idCount] = 0\n      idReverse[idCount] = x\n      id[x] = idCount++\n    }\n    return id[x]\n  }\n\n  function dfs(v) {\n    for (; edgePointer[v] < g[v].length; edgePointer[v] += 1) {\n      var edge = g[v][edgePointer[v]]\n      var to = edge[0]\n      var id = edge[1]\n      if (!edgeUsed[id]) {\n        edgeUsed[id] = true\n        dfs(to)\n      }\n    }\n    trail.push(v)\n  }\n\n  function pushEdge(u, v, id) {\n    g[u] = g[u] || []\n    g[v] = g[v] || []\n    g[u].push([v, id])\n  }\n\n  var deg = []\n  var inDeg = [], outDeg = []\n\n  for (i = 0; i < options.edges.length; i += 1) {\n    var edge = options.edges[i]\n    var u = getId(edge[0])\n    var v = getId(edge[1])\n\n    pushEdge(u, v, i)\n    if (!options.directed) {\n      pushEdge(v, u, i)\n    }\n\n    if (options.directed) {\n      outDeg[u] = outDeg[u] || 0\n      inDeg[u] = inDeg[u] || 0\n      outDeg[v] = outDeg[v] || 0\n      inDeg[v] = inDeg[v] || 0\n      outDeg[u] += 1\n      inDeg[v] += 1\n    } else {\n      deg[u] = deg[u] || 0\n      deg[v] = deg[v] || 0\n      deg[u] += 1\n      deg[v] += 1\n    }\n  }\n\n  function checkDirected() {\n    var oddVertex = 0\n    var start = 0\n\n    for (i = 0; i < idCount; i += 1) {\n      if (outDeg[i] - inDeg[i] !== 0) {\n        if (outDeg[i] > inDeg[i]) {\n          start = i\n        }\n        oddVertex += 1\n      }\n    }\n    return {odd: oddVertex, start: start}\n  }\n\n  function checkUndirected() {\n    var oddVertex = 0\n    var start = 0\n\n    for (i = 0; i < idCount; i += 1) {\n      if (deg[i] % 2 !== 0) {\n        start = i\n        oddVertex += 1\n      }\n    }\n    return {odd: oddVertex, start: start}\n  }\n\n  var check = options.directed ? checkDirected() : checkUndirected()\n  if (check.odd % 2 !== 0 || check.odd > 2) {\n//    throw Error('the graph does not have an eulerian trail')\n  }\n  dfs(check.start)\n\n  if (trail.length !== options.edges.length + 1) {\n//    throw Error('the graph does not have an eulerian trail')\n  }\n\n  trail.reverse()\n\n  // id to input\n  return trail.map(function (id) {\n    return idReverse[id]\n  })\n}\n","import Victor from 'victor'\nimport Shape from './Shape'\n\nexport default class Point extends Shape {\n  constructor() {\n    super('Point')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'point',\n        canTransform: false,\n        shouldCache: false,\n        canChangeSize: false,\n        repeatEnabled: false,\n      }\n    }\n  }\n\n  getVertices(state) {\n    return [new Victor(0.0, 0.0), new Victor(0.0, 0.1)]\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport uniqueId from 'lodash/uniqueId'\nimport arrayMove from 'array-move'\nimport { getShape } from '../../models/shapes'\n\nconst protectedAttrs = [\n  'repeatEnabled', 'canTransform', 'selectGroup', 'canChangeSize', 'autosize',\n  'usesMachine', 'shouldCache', 'rotateCompleteLoop', 'canChangeHeight', 'canRotate'\n]\nconst newLayerType = localStorage.getItem('currentShape') || 'polygon'\nconst newLayerName = getShape({type: newLayerType}).name.toLowerCase()\n\nconst layersSlice = createSlice({\n  name: 'layer',\n  initialState: {\n    current: null,\n    selected: null,\n    newLayerType: newLayerType,\n    newLayerName: newLayerName,\n    newLayerNameOverride: false,\n    copyLayerName: null,\n    byId: {},\n    allIds: []\n  },\n  reducers: {\n    addLayer(state, action) {\n      let layer = { ...action.payload }\n      layer.id = uniqueId('layer-')\n      layer.name = layer.name || state.newLayerName\n      state.byId[layer.id] = layer\n\n      const index = state.allIds.findIndex(id => id === state.current) + 1\n      state.allIds.splice(index, 0, layer.id)\n\n      state.current = layer.id\n      state.selected = layer.id\n      state.newLayerNameOverride = false\n      state.newLayerName = layer.name\n      if (layer.type !== 'file_import' && !layer.effect) {\n        localStorage.setItem('currentShape', layer.type)\n      }\n    },\n    moveLayer(state, action) {\n      const { oldIndex, newIndex } = action.payload\n      state.allIds = arrayMove(state.allIds, oldIndex, newIndex)\n    },\n    copyLayer(state, action) {\n      const source = state.byId[action.payload]\n      const layer = { ...source, name: state.copyLayerName }\n      layer.id = uniqueId('layer-')\n      state.byId[layer.id] = layer\n\n      const index = state.allIds.findIndex(id => id === state.current) + 1\n      state.allIds.splice(index, 0, layer.id)\n\n      state.current = layer.id\n      state.selected = layer.id\n    },\n    removeLayer(state, action) {\n      const deleteId = action.payload\n      const idx = state.allIds.findIndex(id => id === deleteId)\n      state.allIds.splice(idx, 1)\n      delete state.byId[deleteId]\n\n      if (deleteId === state.current) {\n        if (idx === state.allIds.length) {\n          state.current = state.allIds[idx-1]\n          state.selected = state.allIds[idx-1]\n        } else {\n          state.current = state.allIds[idx]\n          state.selected = state.allIds[idx]\n        }\n      }\n    },\n    restoreDefaults(state, action) {\n      const id = action.payload\n      const layer = state.byId[id]\n      const defaults = getShape(layer).getInitialState(layer)\n\n      state.byId[layer.id] = {\n        id: layer.id,\n        name: layer.name,\n        ...defaults\n      }\n    },\n    setCurrentLayer(state, action) {\n      const current = state.byId[action.payload]\n\n      if (current) {\n        state.current = current.id\n        state.selected = current.id\n        state.copyLayerName = current.name\n      }\n    },\n    setSelectedLayer(state, action) {\n      state.selected = action.payload\n    },\n    setShapeType(state, action) {\n      const changes = action.payload\n      const defaults = getShape(changes).getInitialState()\n      const layer = state.byId[changes.id]\n\n      layer.type = changes.type\n      Object.keys(defaults).forEach(attr => {\n        if (layer[attr] === undefined) {\n          layer[attr] = defaults[attr]\n        }\n      })\n\n      protectedAttrs.forEach(attr => {\n        layer[attr] = defaults[attr]\n      })\n\n      state.byId[layer.id] = layer\n    },\n    setNewLayerType(state, action) {\n      let attrs = { newLayerType: action.payload }\n      if (!state.newLayerNameOverride) {\n        const shape = getShape({type: action.payload})\n        attrs.newLayerName = shape.name.toLowerCase()\n      }\n      Object.assign(state, attrs)\n    },\n    updateLayer(state, action) {\n      const layer = action.payload\n      state.byId[layer.id] = {...state.byId[layer.id], ...layer}\n    },\n    updateLayers(state, action) {\n      Object.assign(state, action.payload)\n    },\n    toggleRepeat(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].repeatEnabled = !state.byId[transform.id].repeatEnabled\n    },\n    toggleGrow(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].growEnabled = !state.byId[transform.id].growEnabled\n    },\n    toggleSpin(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].spinEnabled = !state.byId[transform.id].spinEnabled\n    },\n    toggleTrack(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].trackEnabled = !state.byId[transform.id].trackEnabled\n    },\n    toggleTrackGrow(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].trackGrowEnabled = !state.byId[transform.id].trackGrowEnabled\n    },\n    toggleVisible(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].visible = !state.byId[transform.id].visible\n    },\n  }\n})\n\nexport const {\n  addLayer,\n  copyLayer,\n  moveLayer,\n  removeLayer,\n  restoreDefaults,\n  setCurrentLayer,\n  setSelectedLayer,\n  setShapeType,\n  setNewLayerType,\n  updateLayer,\n  updateLayers,\n  toggleRepeat,\n  toggleSpin,\n  toggleGrow,\n  toggleTrack,\n  toggleTrackGrow,\n  toggleVisible\n} = layersSlice.actions\n\nexport default layersSlice.reducer\n","import { createSelector } from 'reselect'\n\nconst getLayers = state => state.layers\nexport const getCurrentLayerId = state => state.layers.current\n\nexport const getCurrentLayer = createSelector(\n  [ getCurrentLayerId, getLayers ],\n  (id, layers) => layers.byId[id]\n)\n\nexport const makeGetLayer = layerId => {\n  return createSelector(\n    getLayers,\n    (layers) => {\n      return layers.byId[layerId]\n    }\n  )\n}\n\nexport const makeGetLayerIndex = layerId => {\n  return createSelector(\n    getVisibleLayerIds,\n    (visibleLayerIds) => {\n      return visibleLayerIds.findIndex(id => id === layerId)\n    }\n  )\n}\n\n// returns the next layer id, discounting layer effects\nexport const makeGetNextLayerId = layerId => {\n  return createSelector(\n    [ getLayers, getVisibleLayerIds],\n    (layers, visibleLayerIds) => {\n      let index = visibleLayerIds.findIndex(id => id === layerId)\n\n      if (index === visibleLayerIds.length - 1) {\n        return null\n      } else {\n        index = index + 1\n        let id = visibleLayerIds[index]\n\n        while (id && layers.byId[id].effect) {\n          index = index + 1\n          id = visibleLayerIds[index]\n        }\n\n        return id\n      }\n    }\n  )\n}\n\n// returns any effects tied to a given layer\nexport const makeGetEffects = layerId => {\n  return createSelector(\n    [ getLayers, getVisibleLayerIds],\n    (layers, visibleLayerIds) => {\n      let layer = layers.byId[layerId]\n      let index = visibleLayerIds.findIndex(id => id === layerId)\n\n      if (layer.effect || index === visibleLayerIds.length - 1) {\n        return null\n      } else {\n        index = index + 1\n        const effects = []\n        let id = visibleLayerIds[index]\n\n        while (id && layers.byId[id].effect) {\n          effects.push(layers.byId[id])\n          index = index + 1\n          id = visibleLayerIds[index]\n        }\n\n        return effects\n      }\n    }\n  )\n}\n\nexport const getLayerInfo = createSelector(\n  getLayers,\n  (layers) => {\n      return layers.allIds.map(id => layers.byId[id])\n  }\n)\n\nexport const getNumLayers = createSelector(\n  getLayers,\n  (layers) => {\n    return layers.allIds.length\n  }\n)\n\nexport const getVisibleLayerIds = createSelector(\n  getLayers,\n  (layers) => {\n    return layers.allIds.filter(id => layers.byId[id].visible)\n  }\n)\n\nexport const getComputedLayerIds = createSelector(\n  getLayers,\n  (layers) => {\n    return layers.allIds.filter(id => layers.byId[id].visible && !layers.byId[id].effect)\n  }\n)\n\n// puts the current layer last in the list to ensure it can be rotated; else\n// the handle will not rotate\nexport const getKonvaLayerIds = createSelector(\n  [ getLayers, getCurrentLayer, getVisibleLayerIds ],\n  (layers, layer, visibleLayerIds) => {\n      const kIds = visibleLayerIds.filter(id => id !== layer.id)\n      if (layer.visible) {\n        kIds.push(layer.id)\n      }\n      return kIds\n  }\n)\n\nexport const isDragging = createSelector(\n  [ getLayers, getVisibleLayerIds ],\n  (layers, visibleIds) => {\n    return visibleIds.filter(id => layers.byId[id].dragging).length > 0\n  }\n)\n\nexport const getNumVisibleLayers = createSelector(\n  getVisibleLayerIds,\n  (layers) => {\n    return layers.length\n  }\n)\n","const transformOptions = {\n  startingWidth: {\n    title: 'Initial width',\n    min: 1,\n    isVisible: (state) => { return state.canChangeSize },\n  },\n  startingHeight: {\n    title: 'Initial height',\n    min: 1,\n    isVisible: (state) => { return state.canChangeSize && state.canChangeHeight },\n  },\n  offsetX: {\n    title: 'X offset',\n  },\n  offsetY: {\n    title: 'Y offset',\n  },\n  rotation: {\n    title: 'Rotate (degrees)',\n    isVisible: state => { return state.canRotate }\n  },\n  connectionMethod: {\n    title: 'Connect to next layer',\n    type: 'dropdown',\n    choices: ['line', 'along perimeter']\n  },\n  backtrackPct: {\n    title: 'Backtrack at end (%)',\n    min: 0,\n    max: 100,\n    step: 5\n  },\n  drawPortionPct: {\n    title: 'Draw portion of path (%)',\n    min: 0,\n    max: 100,\n    step: 5\n  },\n  rotateStartingPct: {\n    title: 'Rotate starting point (%)',\n    min: -100,\n    max: 100,\n    step: 5\n  },\n  reverse: {\n    title: 'Reverse path',\n    type: 'checkbox',\n    isVisible: (state) => { return !state.effect }\n  },\n  numLoops: {\n    title: 'Number of loops',\n    min: 1\n  },\n  transformMethod: {\n    title: 'When transforming shape',\n    type: 'dropdown',\n    choices: ['smear', 'intact'],\n  },\n  growEnabled: {\n    title: 'Scale'\n  },\n  growValue: {\n    title: 'Scale (+/-)',\n  },\n  growMethod: {\n    title: 'Scale by',\n    type: 'dropdown',\n    choices: ['constant', 'function']\n  },\n  growMathInput: {\n    title: 'Scale function (i)',\n    type: 'text',\n    isVisible: state => { return state.growMethod === 'function' },\n  },\n  growMath: {\n  },\n  spinEnabled: {\n    title: 'Spin',\n    isVisible: state => { return state.growMethod === 'constant'},\n  },\n  spinValue: {\n    title: 'Spin (+/-)',\n    step: 0.1,\n  },\n  spinMethod: {\n    title: 'Spin by',\n    type: 'dropdown',\n    choices: ['constant', 'function']\n  },\n  spinMathInput: {\n    title: 'Spin function (i)',\n    type: 'text',\n    isVisible: state => { return state.spinMethod === 'function' },\n  },\n  spinMath: {\n    title: 'Spin function (i)',\n  },\n  spinSwitchbacks: {\n    title: 'Switchbacks',\n    isVisible: state => { return state.spinMethod === 'constant'},\n  },\n  trackEnabled: {\n    title: 'Track'\n  },\n  trackGrowEnabled: {\n    title: 'Scale track'\n  },\n  rotateCompleteLoop: {\n    title: 'Complete loop?'\n  },\n  trackValue: {\n    title: 'Track size',\n  },\n  trackNumLoops: {\n    title: 'Number of loops at each track position',\n    min: 1\n  },\n  trackLength: {\n    title: 'Track length',\n    step: 0.05\n  },\n  trackGrow: {\n    title: 'Scale (+/-)',\n  },\n}\n\n// used as a way to keep a shape's transform settings separate. Actual state\n// is stored on Shape.\nexport default class Transform {\n  getOptions() {\n    return transformOptions\n  }\n}\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card,\n  Col,\n  Form,\n  Row,\n  ToggleButton,\n  ToggleButtonGroup,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport { updateLayer, toggleGrow } from '../layers/layersSlice'\nimport { getCurrentLayer } from '../layers/selectors'\nimport Transform from '../../models/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const layer = getCurrentLayer(state)\n\n  return {\n    layer: layer,\n    active: layer.growEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateLayer(attrs))\n    },\n    onGrowMethodChange: (value) => {\n      dispatch(updateLayer({ growMethod: value, id: id}))\n    },\n    onGrow: () => {\n      dispatch(toggleGrow({id: id}))\n    },\n  }\n}\n\nclass ScaleTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 1 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={`${activeClassName} overflow-auto`}>\n          <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.onGrow}>\n            <h3>Scale</h3>\n            Grows or shrinks the shape\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={1}>\n            <Card.Body>\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"growValue\"\n                optionKey=\"growValue\"\n                index={2}\n                model={this.props.layer} />\n              <Row className=\"align-items-center pb-2\">\n                <Col sm={5}>\n                  <Form.Label htmlFor=\"growMethod\">\n                    Scale by\n                  </Form.Label>\n                </Col>\n                <Col sm={7}>\n                  <ToggleButtonGroup id=\"growMethod\" type=\"radio\" name=\"growMethod\" value={this.props.layer.growMethod} onChange={this.props.onGrowMethodChange}>\n                    <ToggleButton variant=\"light\" value=\"constant\">constant</ToggleButton>\n                    <ToggleButton variant=\"light\" value=\"function\">function</ToggleButton>\n                  </ToggleButtonGroup>\n                </Col>\n              </Row>\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"growMathInput\"\n                optionKey=\"growMathInput\"\n                delayKey=\"growMath\"\n                index={1}\n                model={this.props.layer} />\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ScaleTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card,\n  Col,\n  Form,\n  Row,\n  ToggleButton,\n  ToggleButtonGroup,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport { toggleSpin, updateLayer } from '../layers/layersSlice'\nimport { getCurrentLayer } from '../layers/selectors'\nimport Transform from '../../models/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const layer = getCurrentLayer(state)\n\n  return {\n    layer: layer,\n    active: layer.spinEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateLayer(attrs))\n    },\n    onSpinMethodChange: (value) => {\n      dispatch(updateLayer({ spinMethod: value, id: id}))\n    },\n    onSpin: () => {\n      dispatch(toggleSpin({id: id}))\n    },\n  }\n}\n\nclass RotationTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 1 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={`${activeClassName} overflow-auto`}>\n          <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.onSpin}>\n            <h3>Spin</h3>\n            Spins the shape\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={1}>\n            <Card.Body>\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"spinValue\"\n                optionKey=\"spinValue\"\n                index={0}\n                model={this.props.layer} />\n\n              <Row className=\"align-items-center pb-2\">\n                <Col sm={5}>\n                  <Form.Label htmlFor=\"spinMethod\">\n                    Scale by\n                  </Form.Label>\n                </Col>\n\n                <Col sm={7}>\n                  <ToggleButtonGroup id=\"spinMethod\" type=\"radio\" name=\"spinMethod\" value={this.props.layer.spinMethod} onChange={this.props.onSpinMethodChange}>\n                    <ToggleButton variant=\"light\" value=\"constant\">constant</ToggleButton>\n                    <ToggleButton variant=\"light\" value=\"function\">function</ToggleButton>\n                  </ToggleButtonGroup>\n                </Col>\n              </Row>\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"spinMathInput\"\n                optionKey=\"spinMathInput\"\n                delayKey=\"spinMath\"\n                index={1}\n                model={this.props.layer} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"spinSwitchbacks\"\n                optionKey=\"spinSwitchbacks\"\n                index={0}\n                model={this.props.layer} />\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RotationTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  toggleTrack,\n  toggleTrackGrow,\n  updateLayer\n} from '../layers/layersSlice'\nimport { getCurrentLayer } from '../layers/selectors'\nimport Transform from '../../models/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const layer = getCurrentLayer(state)\n\n  return {\n    layer: layer,\n    active: layer.trackEnabled,\n    activeGrow: layer.trackGrowEnabled,\n    options: new Transform().getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateLayer(attrs))\n    },\n    onTrack: () => {\n      dispatch(toggleTrack({id: id}))\n    },\n    onTrackGrow: () => {\n      dispatch(toggleTrackGrow({id: id}))\n    },\n  }\n}\n\nclass TrackTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 1 : null\n    const activeGrowClassName = this.props.activeGrow ? 'active' : ''\n    const activeGrowKey = this.props.activeGrow ? 1 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={activeClassName}>\n          <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.onTrack}>\n            <h3>Track</h3>\n            Moves the shape along a track (shown in green)\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={1}>\n            <Card.Body>\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackValue\"\n                optionKey=\"trackValue\"\n                index={0}\n                model={this.props.layer} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackLength\"\n                optionKey=\"trackLength\"\n                index={0}\n                step={0.05}\n                model={this.props.layer} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackNumLoops\"\n                optionKey=\"trackNumLoops\"\n                index={0}\n                model={this.props.layer} />\n\n              <Accordion defaultActiveKey={activeGrowKey} className=\"mt-3\">\n                <Card className={activeGrowClassName}>\n                  <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.onTrackGrow}>\n                    <h3>Scale track</h3>\n                    Grows or shrinks the track\n                  </Accordion.Toggle>\n\n                  <Accordion.Collapse eventKey={1}>\n                    <Card.Body>\n                      <InputOption\n                        onChange={this.props.onChange}\n                        options={this.props.options}\n                        key=\"trackGrow\"\n                        optionKey=\"trackGrow\"\n                        index={0}\n                        model={this.props.layer} />\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              </Accordion>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TrackTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card,\n  Row,\n  Col,\n  Form,\n  ToggleButton,\n  ToggleButtonGroup\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport DropdownOption from '../../components/DropdownOption'\nimport { updateLayer, toggleRepeat } from '../layers/layersSlice'\nimport { getCurrentLayer } from '../layers/selectors'\nimport Transform from '../../models/Transform'\nimport ScaleTransform from './ScaleTransform'\nimport RotationTransform from './RotationTransform'\nimport TrackTransform from './TrackTransform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const layer = getCurrentLayer(state)\n\n  return {\n    layer: layer,\n    active: layer.repeatEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateLayer(attrs))\n    },\n    onRepeat: () => {\n      dispatch(toggleRepeat({id: id}))\n    },\n    ontransformMethodChange: (value) => {\n      dispatch(updateLayer({ transformMethod: value, id: id}))\n    }\n  }\n}\n\nclass Transforms extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 1 : null\n\n    return (\n      <div className=\"transforms\">\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"startingWidth\"\n          optionKey=\"startingWidth\"\n          index={0}\n          model={this.props.layer} />\n\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"startingHeight\"\n          optionKey=\"startingHeight\"\n          index={0}\n          model={this.props.layer} />\n\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"offsetX\"\n          optionKey=\"offsetX\"\n          index={0}\n          model={this.props.layer} />\n\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"offsetY\"\n          optionKey=\"offsetY\"\n          index={0}\n          model={this.props.layer} />\n\n         <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"rotation\"\n          optionKey=\"rotation\"\n          index={0}\n          model={this.props.layer} />\n\n         <CheckboxOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"reverse\"\n          optionKey=\"reverse\"\n          index={0}\n          model={this.props.layer} />\n\n        {this.props.layer.canTransform && <Accordion className=\"mt-3\" defaultActiveKey={activeKey} activeKey={activeKey}>\n          <Card className={activeClassName}>\n            <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.onRepeat}>\n              <h3>Loop and transform</h3>\n              Draws the shape multiple times, transforming it each time.\n            </Accordion.Toggle>\n\n            <Accordion.Collapse eventKey={1}>\n              <Card.Body>\n                <InputOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  key=\"numLoops\"\n                  optionKey=\"numLoops\"\n                  index={0}\n                  model={this.props.layer} />\n\n                  <Row className=\"align-items-center pb-2\">\n                    <Col sm={5}>\n                      <Form.Label htmlFor=\"transformMethod\">\n                        When transforming shape\n                      </Form.Label>\n                    </Col>\n\n                    <Col sm={7}>\n                      <ToggleButtonGroup id=\"transformMethod\" type=\"radio\" name=\"transformMethod\" value={this.props.layer.transformMethod} onChange={this.props.ontransformMethodChange}>\n                        <ToggleButton variant=\"light\" value=\"smear\">smear</ToggleButton>\n                        <ToggleButton variant=\"light\" value=\"intact\">keep intact</ToggleButton>\n                      </ToggleButtonGroup>\n                    </Col>\n                  </Row>\n\n                  <Accordion className=\"mt-3\">\n                    <ScaleTransform id={this.props.layer.id} />\n                    <RotationTransform id={this.props.layer.id} />\n                    <TrackTransform id={this.props.layer.id} />\n                  </Accordion>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      }\n\n      {!this.props.layer.effect && <Card className=\"mt-3\">\n        <Card.Body>\n          <h3 className=\"mb-3\">Fine tuning (advanced)</h3>\n          <DropdownOption\n            onChange={this.props.onChange}\n            options={this.props.options}\n            optionKey=\"connectionMethod\"\n            key=\"connectionMethod\"\n            index={0}\n            model={this.props.layer} />\n\n          <InputOption\n            onChange={this.props.onChange}\n            options={this.props.options}\n            key=\"drawPortionPct\"\n            optionKey=\"drawPortionPct\"\n            min={0}\n            max={100}\n            index={0}\n            model={this.props.layer} />\n\n          <InputOption\n            onChange={this.props.onChange}\n            options={this.props.options}\n            key=\"backtrackPct\"\n            optionKey=\"backtrackPct\"\n            min={0}\n            max={100}\n            index={0}\n            model={this.props.layer} />\n\n          <InputOption\n            onChange={this.props.onChange}\n            options={this.props.options}\n            key=\"rotateStartingPct\"\n            optionKey=\"rotateStartingPct\"\n            min={0}\n            max={100}\n            index={0}\n            model={this.props.layer} />\n        </Card.Body>\n      </Card>}\n    </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transforms)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport { Button, Card, Row, Col } from 'react-bootstrap'\nimport Select from 'react-select'\nimport CommentsBox from '../../components/CommentsBox'\nimport InputOption from '../../components/InputOption'\nimport DropdownOption from '../../components/DropdownOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport Transforms from '../transforms/Transforms'\nimport { updateLayer, setShapeType, restoreDefaults } from '../layers/layersSlice'\nimport { getCurrentLayer } from './selectors'\nimport { getShape, getShapeSelectOptions } from '../../models/shapes'\nimport './Layer.scss'\n\nconst mapStateToProps = (state, ownProps) => {\n  const layer = getCurrentLayer(state)\n  const shape = getShape(layer)\n\n  return {\n    layer: layer,\n    shape: shape,\n    options: shape.getOptions(),\n    selectOptions: getShapeSelectOptions(false),\n    showShapeSelectRender: layer.selectGroup !== 'import' && !layer.effect,\n    link: shape.link,\n    linkText: shape.linkText\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateLayer(attrs))\n    },\n    onChangeType: (selected) => {\n      dispatch(setShapeType({id: id, type: selected.value}))\n    },\n    onRestoreDefaults: (event) => {\n      dispatch(restoreDefaults(id))\n    }\n  }\n}\n\nclass Layer extends Component {\n  render() {\n    const selectedOption = { value: this.props.shape.id, label: this.props.shape.name }\n    const optionsRender = Object.keys(this.props.options).map((key, index) => {\n      const option = this.props.options[key]\n\n      if (option.type === 'dropdown') {\n        return  <DropdownOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.layer} />\n      } else if (option.type === 'checkbox') {\n        return <CheckboxOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.layer} />\n      } else if (option.type === 'comments') {\n        return <CommentsBox\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  comments={this.props.layer.comments} />\n      } else {\n        return  <InputOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.layer} />\n      }\n    })\n\n    const linkText = this.props.linkText || this.props.link\n    const linkRender = this.props.link ? <Row><Col sm={5}></Col><Col sm={7}><p className=\"mt-2\">See <a target=\"_blank\" rel=\"noopener noreferrer\" href={this.props.link}>{linkText}</a> for ideas.</p></Col></Row> : undefined\n    let optionsListRender = undefined\n\n    if (Object.entries(this.props.options).length > 0) {\n      optionsListRender =\n        <div className=\"m-0\">\n          {optionsRender}\n        </div>\n    }\n\n    let shapeSelectRender = undefined\n\n    if (this.props.showShapeSelectRender) {\n      shapeSelectRender =\n        <Row className=\"align-items-center\">\n          <Col sm={5}>\n            Shape\n          </Col>\n\n          <Col sm={7}>\n            <Select\n              value={selectedOption}\n              onChange={this.props.onChangeType}\n              maxMenuHeight={305}\n              options={this.props.selectOptions} />\n          </Col>\n        </Row>\n    }\n\n    return (\n      <Card className=\"p-3 overflow-auto flex-grow-1\" style={{borderTop: \"1px solid #aaa\", borderBottom: \"none\"}}>\n        <Row className=\"align-items-center mb-2\">\n          <Col sm={5}>\n            <h2 className=\"panel m-0\">Properties</h2>\n          </Col>\n          <Col sm={7}>\n            <Button className=\"ml-auto\" variant=\"outline-primary\" size=\"sm\" onClick={this.props.onRestoreDefaults}>Restore defaults</Button>\n          </Col>\n        </Row>\n\n        { shapeSelectRender }\n\n        { linkRender }\n\n        <div className=\"pt-1\">\n          { optionsListRender }\n          <Transforms id={this.props.layer.id} />\n        </div>\n      </Card>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layer)\n","export default class Importer {\n  constructor(fileName, text) {\n    this.fileName = fileName\n    this.text = text\n  }\n}\n","import Importer from './Importer'\n\nexport default class ThetaRhoImporter extends Importer {\n  constructor(fileName, text) {\n    super(fileName, text)\n    this.label = 'ThetaRho'\n  }\n\n  // calls callback, returning an object containing relevant properties\n  import(callback) {\n    let hasVertex = false\n    let props = {\n      comments: [],\n      originalAspectRatio: 1.0,\n      fileName: this.fileName\n    }\n\n    let lines = this.text.split('\\n')\n    let thetaRhos = []\n\n    for (let ii = 0; ii < lines.length; ii++) {\n      var line = lines[ii].trim()\n\n      if (line.length === 0) {\n        // blank lines\n        continue\n      }\n\n      if (line.indexOf(\"#\") === 0 && !hasVertex) {\n        props.comments.push(lines[ii])\n      }\n\n      if (line.indexOf(\"#\") !== 0) {\n        hasVertex = true\n\n        // This is a point, let's try to read it.\n        var pointStrings = line.split(/\\s+/)\n        if (pointStrings.length !== 2) {\n          continue\n        }\n\n        thetaRhos.push([parseFloat(pointStrings[0]), parseFloat(pointStrings[1])])\n      }\n    }\n\n    props.vertices = this.convertToXY(thetaRhos)\n    callback(this, props)\n  }\n\n  convertToXY(thetaRhos) {\n    var vertices = []\n    var previous = undefined\n    var max_angle = Math.PI / 64.0\n    for (let ii = 0; ii < thetaRhos.length; ii++) {\n      var next = thetaRhos[ii]\n      if (previous) {\n        if (Math.abs(next[0] - previous[0]) < max_angle) {\n          // These sin, cos elements are inverted. I'm not sure why\n          vertices.push({\n                        x: previous[1] * Math.sin(previous[0]),\n                        y: previous[1] * Math.cos(previous[0])\n          })\n        } else {\n          // We need to do some interpolating.\n          let deltaAngle = next[0] - previous[0]\n          let rhoStep = max_angle / Math.abs(deltaAngle) * (next[1] - previous[1])\n          var rho = previous[1]\n          if (deltaAngle > 0.0) {\n            var emergency_break = 0\n            for (let angle = previous[0]; angle < next[0]; angle += max_angle, rho += rhoStep) {\n              vertices.push({\n                            x: rho * Math.sin(angle),\n                            y: rho * Math.cos(angle)\n              })\n              if (emergency_break++ > 100000) {\n                break\n              }\n            }\n          } else {\n            for (let angle = previous[0]; angle > next[0]; angle -= max_angle, rho += rhoStep) {\n              vertices.push({\n                            x: rho * Math.sin(angle),\n                            y: rho * Math.cos(angle)\n              })\n              if (emergency_break++ > 100000) {\n                break\n              }\n            }\n          }\n        }\n      }\n      previous = next\n    }\n    return vertices\n  }\n}\n","import Importer from './Importer'\nimport Toolpath from 'gcode-toolpath';\n\nexport default class GCodeImporter extends Importer {\n  constructor(fileName, text) {\n    super(fileName, text)\n    this.label = 'Gcode'\n  }\n\n  // calls callback, returning an object containing relevant properties\n  import(callback) {\n    let props = {\n      comments: [],\n      vertices: [],\n      fileName: this.fileName\n    }\n    let lines = this.text.split('\\n')\n\n    // This assumes the line is already trimmed and not empty.\n    // The paranthesis isn't perfect, since it usually has a match, but I don't think anyone will\n    // care. I think there are firmwares that do this same kind of hack.\n    const isComment = (line) => {\n      return (line.indexOf(\";\") === 0) || (line.indexOf('(') === 0)\n    }\n\n    const addVertex = (x, y) => {\n      props.vertices.push({x: x,y: y})\n    }\n\n    // Read the initial comments\n    for (let ii = 0; ii < lines.length; ii++) {\n      let line = lines[ii].trim()\n      if (line.length === 0) {\n        // blank lines\n        continue\n      }\n      if (isComment(line)) {\n        props.comments.push(lines[ii])\n      } else {\n        break\n      }\n    }\n\n    // GCode reader object. More info here:\n    // https://github.com/cncjs/gcode-toolpath/blob/master/README.md\n    const toolpath = new Toolpath({\n      // @param {object} modal The modal object.\n      // @param {object} v1 A 3D vector of the start point.\n      // @param {object} v2 A 3D vector of the end point.\n      addLine: (modal, v1, v2) => {\n        if (v1.x !== v2.x || v1.y !== v2.y) {\n          addVertex(v2.x, v2.y)\n        }\n      },\n      // @param {object} modal The modal object.\n      // @param {object} v1 A 3D vector of the start point.\n      // @param {object} v2 A 3D vector of the end point.\n      // @param {object} v0 A 3D vector of the fixed point.\n      addArcCurve: (modal, v1, v2, v0) => {\n        if (v1.x !== v2.x || v1.y !== v2.y) {\n          // We can't use traceCircle, we have to go a specific direction (not the shortest path).\n          let startTheta = Math.atan2(v1.y-v0.y, v1.x-v0.x)\n          let endTheta   = Math.atan2(v2.y-v0.y, v2.x-v0.x)\n          let deltaTheta = endTheta - startTheta\n          const radius   = Math.sqrt(Math.pow(v2.x-v0.x, 2.0) + Math.pow(v2.y-v0.y, 2.0))\n          let direction  = 1.0 // Positive, so anticlockwise.\n\n          // Clockwise\n          if (modal.motion === 'G2') {\n            if (deltaTheta > 0.0) {\n              endTheta -= 2.0*Math.PI\n              deltaTheta -= 2.0*Math.PI\n            }\n            direction = -1.0\n          } else if (modal.motion === 'G3') {\n            // Anti-clockwise\n            if (deltaTheta < 0.0) {\n              endTheta += 2.0*Math.PI\n              deltaTheta += 2.0*Math.PI\n            }\n          }\n\n          // What angle do we need to have a resolution of approx. 0.5mm?\n          const arcResolution = 0.5\n          const arcLength = Math.abs(deltaTheta) * radius\n          const thetaStep = deltaTheta * arcResolution/arcLength\n          for (let theta = startTheta;\n               direction * theta <= direction * endTheta;\n               theta += thetaStep) {\n            addVertex(v0.x + radius * Math.cos(theta), v0.y + radius * Math.sin(theta))\n          }\n          // Save the final point, in case our math didn't quite get there.\n          addVertex(v2.x, v2.y)\n        }\n      }\n    });\n\n    toolpath.loadFromString(this.text, (err, results) => {\n      callback(this, this.normalizeCoords(props))\n    })\n  }\n\n  normalizeCoords(props) {\n    const vertices = props.vertices\n    let minX = 1e9\n    let minY = 1e9\n    let maxX = -1e9\n    let maxY = -1e9\n\n    vertices.forEach( (vertex) => {\n      minX = Math.min(vertex.x, minX)\n      minY = Math.min(vertex.y, minY)\n      maxX = Math.max(vertex.x, maxX)\n      maxY = Math.max(vertex.y, maxY)\n    })\n\n    const offsetX = (maxX + minX)/2.0\n    const offsetY = (maxY + minY)/2.0\n    const scaleX = 1.0/(maxX - offsetX)\n    const scaleY = 1.0/(maxY - offsetY)\n\n    props.originalAspectRatio = scaleX/scaleY\n    props.vertices = vertices.map(vertex => {\n      return {\n        x: scaleX * (vertex.x - offsetX),\n        y: scaleY * (vertex.y - offsetY)\n      }\n    })\n\n    return props\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Accordion, Button, Card, ListGroup, Modal, Row, Col, Form } from 'react-bootstrap'\nimport Select from 'react-select'\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc'\nimport { FaTrash, FaEye, FaEyeSlash, FaCopy } from 'react-icons/fa';\nimport { getLayerInfo, getCurrentLayer, getNumLayers } from '../layers/selectors'\nimport { setCurrentLayer, addLayer, copyLayer, updateLayers, removeLayer, moveLayer, toggleVisible, setNewLayerType } from '../layers/layersSlice'\nimport { registeredShapes, getShapeSelectOptions, getShape } from '../../models/shapes'\nimport ReactGA from 'react-ga'\nimport ThetaRhoImporter from '../importer/ThetaRhoImporter'\nimport GCodeImporter from '../importer/GCodeImporter'\nimport './Playlist.scss'\n\nconst mapStateToProps = (state, ownProps) => {\n  const layer = getCurrentLayer(state)\n  const shape = getShape(layer)\n\n  return {\n    layers: getLayerInfo(state),\n    numLayers: getNumLayers(state),\n    currentLayer: layer,\n    shape: shape,\n    newLayerType: state.layers.newLayerType,\n    newLayerName: state.layers.newLayerName,\n    newLayerNameOverride: state.layers.newLayerNameOverride,\n    copyLayerName: state.layers.copyLayerName,\n    selectOptions: getShapeSelectOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onLayerSelected: (event) => {\n      const id = event.target.closest('.list-group-item').id\n      dispatch(setCurrentLayer(id))\n    },\n    onLayerAdded: (type) => {\n      const attrs = registeredShapes[type].getInitialState()\n      dispatch(addLayer(attrs))\n    },\n    onLayerImport: (importProps) => {\n      const attrs = {\n        ...registeredShapes[\"file_import\"].getInitialState(importProps),\n        name: importProps.fileName\n      }\n      dispatch(addLayer(attrs))\n    },\n    onLayerCopied: (id) => {\n      dispatch(copyLayer(id))\n    },\n    onLayerRemoved: (event) => {\n      dispatch(removeLayer(event.target.closest('button').dataset.id))\n    },\n    onChangeNewType: (selected) => {\n      dispatch(setNewLayerType(selected.value))\n    },\n    onChangeNewName: (event) => {\n      dispatch(updateLayers({ newLayerName: event.target.value, newLayerNameOverride: true }))\n    },\n    onChangeCopyName: (event) => {\n      dispatch(updateLayers({ copyLayerName: event.target.value }))\n    },\n    onLayerMoved: ({oldIndex, newIndex}) => {\n      dispatch(moveLayer({oldIndex: oldIndex, newIndex: newIndex}))\n    },\n    onToggleLayerVisible: (event) => {\n      const id = event.target.closest('.list-group-item').id\n      dispatch(toggleVisible({id: id}))\n    }\n  }\n}\n\nconst customStyles = {\n  control: base => ({\n    ...base,\n    height: 55,\n    minHeight: 55\n  })\n}\n\nconst SortableItem = SortableElement(({id, name, active, effect, canRemove, visible, onCopyLayer, onLayerRemoved, onLayerSelected, onToggleLayerVisible}) => {\n  const activeClass = active ? 'active' : ''\n  const dragClass = canRemove ? 'cursor-move' : ''\n  const nameClass = effect ? 'no-select font-italic': 'no-select'\n\n  return <ListGroup.Item className={[activeClass, dragClass, 'd-flex align-items-center'].join(' ')} key={id} id={id} onClick={onLayerSelected}>\n    <Button className=\"layer-button\" variant=\"link\" data-id={id} onClick={onToggleLayerVisible}>\n      {visible && <FaEye />}\n      {!visible && <FaEyeSlash />}\n    </Button>\n    <div className={nameClass}>{effect && '\\u2937'} {name}</div>\n    <Button className=\"ml-auto layer-button\" variant=\"link\" data-id={id} onClick={onCopyLayer}>\n      <FaCopy />\n    </Button>\n    {canRemove && <Button className=\"layer-button\" variant=\"link\" data-id={id} onClick={onLayerRemoved}>\n      <FaTrash />\n    </Button>}\n  </ListGroup.Item>\n})\n\nconst SortableList = SortableContainer(({layers, currentLayer, numLayers, onCopyLayer, onLayerSelected, onLayerRemoved, onToggleLayerVisible}) => {\n  return (\n    <ListGroup variant=\"flush\" style={{maxHeight: \"200px\"}} className=\"border overflow-auto\" id=\"playlist-group\">\n      {layers.map((layer, index) => {\n        return (\n          <SortableItem\n            key={layer.id}\n            id={layer.id}\n            name={layer.name}\n            index={index}\n            active={currentLayer.id === layer.id}\n            visible={layer.visible}\n            effect={layer.effect}\n            canRemove={numLayers > 1}\n            onCopyLayer={onCopyLayer}\n            onLayerSelected={onLayerSelected}\n            onLayerRemoved={onLayerRemoved}\n            onToggleLayerVisible={onToggleLayerVisible}\n            />\n        )\n      })}\n    </ListGroup>\n  )\n})\n\nclass Playlist extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      showNewLayer: false,\n      showImportLayer: false,\n      showCopyLayer: false\n    }\n  }\n\n  scrollToBottom() {\n    // we're not supposed to directly access DOM with React, with instead use a ref. That said, I can't figure\n    // out how to get the nested ref in an elegant way.\n    const el = document.getElementById('playlist-group')\n    el.scrollTop = el.scrollHeight\n  }\n\n  toggleNewModal() {\n    this.setState({showNewLayer: !this.state.showNewLayer})\n  }\n\n  toggleImportModal() {\n    this.setState({showImportLayer: !this.state.showImportLayer})\n  }\n\n  onFileSelected(event) {\n    let file = event.target.files[0]\n    let reader = new FileReader()\n\n    reader.onload = (event) => {\n      this.startTime = performance.now()\n      var text = reader.result\n\n      let importer\n      if (file.name.toLowerCase().endsWith('.thr')) {\n        importer = new ThetaRhoImporter(file.name, text)\n      } else if (file.name.toLowerCase().endsWith('.gcode') || file.name.toLowerCase().endsWith('.nc')) {\n        importer = new GCodeImporter(file.name, text)\n      }\n\n      importer.import(this.onFileImported.bind(this))\n      this.toggleImportModal.bind(this)();\n    }\n\n    reader.readAsText(file)\n  }\n\n  onFileImported(importer, importerProps) {\n    this.props.onLayerImport(importerProps)\n\n    this.endTime = performance.now()\n    ReactGA.timing({\n      category: 'PatternImport',\n      variable: 'read' + importer.label,\n      value: this.endTime - this.startTime // in milliseconds\n    })\n  }\n\n  toggleCopyModal() {\n    this.setState({showCopyLayer: !this.state.showCopyLayer})\n  }\n\n  handleNameFocus(event) {\n    event.target.select()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.numLayers > prevProps.numLayers) {\n      // new layer added; make sure we scroll down to it\n      this.scrollToBottom()\n    }\n  }\n\n  render() {\n    const selectedShape = getShape({type: this.props.newLayerType})\n    const selectedOption = { value: selectedShape.id, label: selectedShape.name }\n    const namedInputRef = React.createRef()\n\n    return (\n      <div>\n        <Modal show={this.state.showNewLayer} onHide={this.toggleNewModal.bind(this)}>\n          <Modal.Header closeButton>\n            <Modal.Title>Create new layer</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <Row className=\"align-items-center\">\n              <Col sm={5}>\n                Type\n              </Col>\n              <Col sm={7}>\n                <Select\n                  value={selectedOption}\n                  onChange={this.props.onChangeNewType}\n                  styles={customStyles}\n                  maxMenuHeight={305}\n                  options={this.props.selectOptions} />\n              </Col>\n            </Row>\n            <Row className=\"align-items-center mt-2\">\n              <Col sm={5}>\n                Name\n              </Col>\n              <Col sm={7}>\n                <Form.Control\n                  value={this.props.newLayerName}\n                  onFocus={this.handleNameFocus}\n                  onChange={this.props.onChangeNewName}\n                />\n              </Col>\n            </Row>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button id=\"new-layer-close\" variant=\"link\" onClick={this.toggleNewModal.bind(this)}>Cancel</Button>\n            <Button id=\"new-layer-add\" variant=\"primary\" onClick={() => { this.props.onLayerAdded(this.props.newLayerType || this.props.currentLayer.type); this.toggleNewModal()}}>Create</Button>\n          </Modal.Footer>\n        </Modal>\n\n        <Modal size=\"lg\" show={this.state.showImportLayer} onHide={this.toggleImportModal.bind(this)}>\n          <Modal.Header closeButton>\n            <Modal.Title>Import new layer</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <Accordion className=\"mb-4\">\n              <Card className=\"active mt-2\">\n                <Card.Header as={Form.Label} htmlFor=\"fileUpload\" style={{ cursor: \"pointer\" }}>\n                  <h3>Import</h3>\n                  Imports a pattern file as a new layer. Supported formats are .thr, .gcode, and .nc.\n                  <Form.Control\n                      id=\"fileUpload\"\n                      type=\"file\"\n                      accept=\".thr,.gcode,.nc\"\n                      onChange={this.onFileSelected.bind(this)}\n                      style={{ display: \"none\" }} />\n                </Card.Header>\n              </Card>\n            </Accordion>\n            <div className=\"mt-2\">\n              <h3>Where to get .thr files</h3>\n              Sisyphus machines use theta rho (.thr) files. There is a large community sharing them.\n              <div className=\"row mt-2\">\n                <div className=\"col-6\">\n                  <ul className=\"list-unstyled\">\n                    <li><a href=\"https://reddit.com/u/markyland\">Markyland on Reddit</a></li>\n                    <li><a href=\"https://github.com/Dithermaster/sisyphus/\">Dithermaster's github</a></li>\n                    <li><a href=\"https://github.com/SlightlyLoony/JSisyphus\">JSisyphus by Slightly Loony</a></li>\n                  </ul>\n                </div>\n                <div className=\"col-6\">\n                  <ul className=\"list-unstyled\">\n                    <li><a href=\"https://reddit.com/r/SisyphusIndustries\">Sisyphus on Reddit</a></li>\n                    <li><a href=\"https://sisyphus-industries.com/community/community-tracks\">Sisyphus Community</a></li>\n                    <li><a href=\"http://thejuggler.net/sisyphus/\">The Juggler</a></li>\n                  </ul>\n                </div>\n              </div>\n\n              <h3 className=\"mt-3\">About copyrights</h3>\n              <p>Be careful and respectful. Understand that the original author put their labor, intensity, and ideas into this art. The creators have a right to own it (and they have a copyright, even if it doesn't say so). If you don't have permisson (a license) to use their art, then you shouldn't be. If you do have permission to use their art, then you should be thankful, and I'm sure they would appreciate you sending them a note of thanks. A picture of your table creating their shared art would probably make them smile.</p>\n              <p>Someone posting the .thr file to a forum or subreddit probably wants it to be shared, and drawing it on your home table is probably OK. Just be careful if you want to use them for something significant without explicit permission.</p>\n              <p>P.S. I am not a lawyer.</p>\n            </div>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button id=\"new-layer-close\" variant=\"primary\" onClick={this.toggleImportModal.bind(this)}>Done</Button>\n          </Modal.Footer>\n        </Modal>\n\n        <Modal show={this.state.showCopyLayer}\n          onHide={this.toggleCopyModal.bind(this)}\n          onEntered={() => namedInputRef.current.focus()}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Copy {this.props.currentLayer.name}</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <Row className=\"align-items-center\">\n              <Col sm={5}>\n                Name\n              </Col>\n              <Col sm={7}>\n                <Form.Control\n                  ref={namedInputRef}\n                  value={this.props.copyLayerName}\n                  onFocus={this.handleNameFocus}\n                  onChange={this.props.onChangeCopyName}\n                />\n              </Col>\n            </Row>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button id=\"copy-layer-close\" variant=\"link\" onClick={this.toggleCopyModal.bind(this)}>Cancel</Button>\n            <Button id=\"copy-layer-copy\" variant=\"primary\" onClick={() => { this.props.onLayerCopied(this.props.currentLayer.id); this.toggleCopyModal(); }}>Copy</Button>\n          </Modal.Footer>\n        </Modal>\n\n        <div className=\"p-3\">\n          <h2 className=\"panel\">Layers ({this.props.numLayers})</h2>\n          <SortableList\n            pressDelay={150}\n            layers={this.props.layers}\n            currentLayer={this.props.currentLayer}\n            numLayers={this.props.numLayers}\n            onLayerSelected={this.props.onLayerSelected}\n            onCopyLayer={this.toggleCopyModal.bind(this)}\n            onLayerRemoved={this.props.onLayerRemoved.bind(this)}\n            onSortEnd={this.props.onLayerMoved}\n            onToggleLayerVisible={this.props.onToggleLayerVisible}\n          />\n          <Button className=\"mt-2 mr-1\" variant=\"outline-primary\" size=\"sm\" onClick={this.toggleNewModal.bind(this)}>New</Button>\n          <Button className=\"mt-2\" variant=\"outline-primary\" size=\"sm\" onClick={this.toggleImportModal.bind(this)}>Import</Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Playlist)\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    sandifyVersion: '0.2.4', // Also change the version in package.json.\n    input: 'shape',\n  },\n  reducers: {\n    chooseInput(state, action) {\n      state.input = action.payload\n    },\n  }\n})\n\nexport const {\n  chooseInput\n} = appSlice.actions\n\nexport default appSlice.reducer\n","import React, { Component } from 'react'\nimport ReactGA from 'react-ga'\nimport { Tab, Tabs } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport MachineSettings from '../machine/MachineSettings'\nimport Footer from './Footer'\nimport Layer from '../layers/Layer'\nimport Playlist from '../layers/Playlist'\nimport { chooseInput } from '../app/appSlice'\nimport { getCurrentLayer } from '../layers/selectors'\n\nconst mapStateToProps = (state, ownProps) => {\n  const layer = getCurrentLayer(state)\n\n  return {\n    layer: layer\n  }\n}\n\nclass InputTabs extends Component {\n  handleSelect(key) {\n    ReactGA.event({\n      category: 'InputTabs',\n      action: 'handleSelect: ' + key,\n    })\n    this.props.dispatch(chooseInput(key))\n  }\n\n  render() {\n    return (\n       <Tabs defaultActiveKey=\"shape\" onSelect={this.handleSelect.bind(this)} id=\"input-tabs\">\n         <Tab eventKey=\"shape\" title=\"Draw\" className=\"full-page-tab\">\n           <div className=\"d-flex flex-column h-100\">\n             <Playlist />\n             <Layer key={this.props.layer.id} id={this.props.layer.id} />\n            </div>\n         </Tab>\n\n         <Tab eventKey=\"machine\" title=\"Machine\" className=\"full-page-tab\">\n           <MachineSettings />\n         </Tab>\n\n         <Tab eventKey=\"about\" title=\"About\" className=\"full-page-tab\">\n           <Footer />\n         </Tab>\n       </Tabs>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, null)(InputTabs)\n","import { createSlice } from \"@reduxjs/toolkit\"\n\nconst previewSlice = createSlice({\n  name: 'preview',\n  initialState: {\n    canvasWidth: 600,\n    canvasHeight: 600,\n    sliderValue: 0.0\n  },\n  reducers: {\n    updatePreview(state, action) {\n      Object.assign(state, action.payload)\n    },\n    setPreviewSize(state, action) {\n      state.canvasHeight = action.payload.height\n      state.canvasWidth = action.payload.width\n    },\n  }\n})\n\nexport const {\n  updatePreview,\n  setPreviewSize,\n} = previewSlice.actions\n\nexport default previewSlice.reducer\n","import LRUCache from 'lru-cache'\nimport { createSelector } from 'reselect'\nimport Victor from 'victor'\nimport Color from 'color'\nimport {\n  transformShapes,\n  transformShape,\n  polishVertices,\n  getMachineInstance\n} from './computer'\nimport { getShape } from '../../models/shapes'\nimport { makeGetLayer, makeGetLayerIndex, getNumVisibleLayers, getVisibleLayerIds, makeGetNextLayerId, makeGetEffects } from '../layers/selectors'\nimport { rotate, offset, getSliderBounds } from '../../common/geometry'\n\nconst cache = new LRUCache({\n  length: (n, key) => { return n.length },\n  max: 500000\n})\n\nconst getCacheKey = (state) => {\n  return JSON.stringify(state)\n}\n\nconst getState = state => state\nconst getLayers = state => state.layers\nconst getMachine = state => state.machine\nconst getPreview = state => state.preview\n\n// the make selector functions below are patterned after the comment here:\n// https://github.com/reduxjs/reselect/issues/74#issuecomment-472442728\nconst cachedSelectors = {}\n\n// by returning null for shapes which don't use machine settings, this selector will ensure\n// transformed vertices are not redrawn when machine settings change\nconst makeGetLayerMachine = layerId => {\n  return createSelector(\n    [ getLayers, getMachine ],\n    (layers, machine) => {\n      const layer = layers.byId[layerId]\n      return layer.usesMachine ? machine : null\n    }\n  )\n}\n\n// creates a selector that returns shape vertices for a given layer\nconst makeGetLayerVertices = layerId => {\n  return createSelector(\n    [ getCachedSelector(makeGetLayer, layerId), getCachedSelector(makeGetLayerMachine, layerId) ],\n    (layer, machine) => {\n      const state = {\n        shape: layer,\n        machine: machine\n      }\n      const metashape = getShape(layer)\n      if (layer.shouldCache) {\n        const key = getCacheKey(state)\n        let vertices = cache.get(key)\n\n        if (!vertices) {\n          vertices = metashape.getVertices(state)\n          cache.set(key, vertices)\n          // for debugging purposes\n          // console.log('caching shape...' + cache.length + ' ' + cache.itemCount)\n        }\n\n        return vertices\n      } else {\n        if (!state.shape.dragging && state.shape.effect) {\n          return []\n        } else {\n          return metashape.getVertices(state)\n        }\n      }\n    }\n  )\n}\n\n// creates a selector that returns transformed vertices for a given layer\nconst makeGetTransformedVertices = layerId => {\n  return createSelector(\n    [\n      getCachedSelector(makeGetLayerVertices, layerId),\n      getCachedSelector(makeGetLayer, layerId),\n      getCachedSelector(makeGetEffects, layerId)\n    ],\n    (vertices, layer, effects) => {\n      return transformShapes(vertices, layer, effects)\n    }\n  )\n}\n\n// creates a selector that returns computed (machine-bound) vertices for a given layer\nconst makeGetComputedVertices = layerId => {\n  return createSelector(\n    [\n      getCachedSelector(makeGetTransformedVertices, layerId),\n      getCachedSelector(makeGetLayerIndex, layerId),\n      getCachedSelector(makeGetNextLayerId, layerId),\n      getNumVisibleLayers,\n      getLayers,\n      getVisibleLayerIds,\n      getMachine\n    ],\n    (vertices, layerIndex, nextLayerId, numLayers, layers, visibleLayerIds, machine) => {\n      const state = { layers: layers, machine: machine }\n      let nextLayer\n\n      if (layerIndex < numLayers - 1) {\n        nextLayer = nextLayerId && layers.byId[nextLayerId]\n\n        if (nextLayer && !nextLayer.dragging) {\n          const nextVertices = getCachedSelector(makeGetComputedVertices, nextLayerId)(state)\n\n          if (nextVertices[0]) {\n            const layer = layers.byId[layerId]\n            if (layer.connectionMethod === 'along perimeter') {\n              const start = vertices[vertices.length - 1]\n              const end = nextVertices[0]\n              const machineInstance = getMachineInstance([], machine)\n              const startPerimeter = machineInstance.nearestPerimeterVertex(start)\n              const endPerimeter = machineInstance.nearestPerimeterVertex(end)\n              vertices = vertices.concat([startPerimeter, machineInstance.tracePerimeter(startPerimeter, endPerimeter), endPerimeter, end].flat())\n            } else {\n              vertices = vertices.concat(nextVertices[0])\n            }\n          }\n        }\n      }\n\n      return polishVertices(vertices, machine, {\n        start: layerIndex === 0,\n        end: layerIndex === numLayers - 1\n      })\n    }\n  )\n}\n\n// creates a selector that returns previewable vertices for a given layer\nexport const makeGetPreviewVertices = layerId => {\n  return createSelector(\n    [\n        getLayers,\n        getVisibleLayerIds,\n        getMachine,\n    ],\n    (layers, visibleLayerIds, machine) => {\n      const state = {\n        layers: layers,\n        machine: machine\n      }\n\n      let vertices\n      const layer = layers.byId[layerId]\n\n      if (layer.dragging) {\n        vertices = getCachedSelector(makeGetTransformedVertices, layerId)(state)\n      } else {\n        vertices = getCachedSelector(makeGetComputedVertices, layerId)(state)\n      }\n\n      const konvaScale = layer.autosize ? 5 : 1 // our transformer is 5 times bigger than the actual starting shape\n      const konvaDeltaX = (konvaScale - 1)/2 * layer.startingWidth\n      const konvaDeltaY = (konvaScale - 1)/2 * layer.startingHeight\n\n      return vertices.map(vertex => {\n        return offset(rotate(offset(vertex, -layer.offsetX, -layer.offsetY), layer.rotation), konvaDeltaX, -konvaDeltaY)\n      })\n    }\n  )\n}\n\n// ensures we only create a single selector for a given layer\nexport const getCachedSelector = (fn, layerId) => {\n  if (!cachedSelectors[fn.name]) {\n    cachedSelectors[fn.name] = {}\n  }\n\n  if (!cachedSelectors[fn.name][layerId]) {\n    cachedSelectors[fn.name][layerId] = fn(layerId)\n  }\n\n  return cachedSelectors[fn.name][layerId]\n}\n\n// returns a flattened list of all visible computed vertices (across layers)\nexport const getAllComputedVertices = createSelector(\n  [getState, getVisibleLayerIds],\n  (state, visibleLayerIds) => {\n    return visibleLayerIds.map(id => getCachedSelector(makeGetComputedVertices, id)(state)).flat()\n  }\n)\n\n// returns a flattened list of all visible preview vertices (across layers)\nexport const getAllPreviewVertices = createSelector(\n  [getState, getVisibleLayerIds],\n  (state, visibleLayerIds) => {\n    return visibleLayerIds.map(id => getCachedSelector(makeGetPreviewVertices, id)(state)).flat()\n  }\n)\n\n// returns the starting offset for each layer, given previous layers\nexport const getVertexOffsets = createSelector(\n  [getState, getVisibleLayerIds],\n  (state, visibleLayerIds) => {\n    let offsets = {}\n    let offset = 0\n\n    visibleLayerIds.forEach((id) => {\n      const vertices = getCachedSelector(makeGetComputedVertices, id)(state)\n      offsets[id] = offset\n      offset += vertices.length + 1\n    })\n    return offsets\n  }\n)\n\n// returns statistics across all layers\nexport const getVerticesStats = createSelector(\n  getAllComputedVertices,\n  (vertices) => {\n    let distance = 0.0\n    let previous = null\n\n    vertices.forEach((vertex) => {\n      if (previous) {\n        distance += Math.sqrt(Math.pow(vertex.x - previous.x, 2.0) +\n                              Math.pow(vertex.y - previous.y, 2.0))\n      }\n      previous = vertex\n    })\n\n    return {\n      numPoints: vertices.length,\n      distance: Math.floor(distance)\n    }\n  }\n)\n\n// returns a hash of { index => color } that specifies the gradient color of the\n// line drawn at each index.\nexport const getSliderColors = layerId => {\n  return createSelector(\n    [\n      getAllPreviewVertices,\n      getPreview,\n      getCachedSelector(makeGetPreviewVertices, layerId),\n      getVertexOffsets\n    ],\n    (vertices, preview, layerVertices, offsets) => {\n      const sliderValue = preview.sliderValue\n      const colors = {}\n      let start, end\n\n      if (sliderValue > 0) {\n        const bounds = getSliderBounds(vertices, sliderValue)\n        start = bounds.start\n        end = bounds.end\n      } else {\n        start = offsets[layerId]\n        end = start + layerVertices.length\n      }\n\n      let startColor = Color('yellow')\n      const colorStep = 3.0 / 8 / (end - start)\n\n      for(let i=end; i>=start; i--) {\n        colors[i] = startColor.darken(colorStep * (end-i)).hex()\n      }\n\n      return colors\n    }\n  )\n}\n\n// used by the preview window; reverses rotation and offsets because they are\n// re-added by Konva transformer.\nexport const makeGetPreviewTrackVertices = layerId => {\n  return createSelector(\n    getLayers,\n    (layers) => {\n      const layer = layers.byId[layerId]\n      const numLoops = layer.numLoops\n      const konvaScale = layer.autosize ? 5 : 1 // our transformer is 5 times bigger than the actual starting shape\n      const konvaDeltaX = (konvaScale - 1)/2 * layer.startingWidth\n      const konvaDeltaY = (konvaScale - 1)/2 * layer.startingHeight\n      let trackVertices = []\n\n      for (var i=0; i<numLoops; i++) {\n        if (layer.trackEnabled) {\n          trackVertices.push(transformShape(layer, new Victor(0.0, 0.0), i, i))\n        }\n      }\n\n      return trackVertices.map(vertex => {\n        return offset(rotate(offset(vertex, -layer.offsetX, -layer.offsetY), layer.rotation), konvaDeltaX, -konvaDeltaY)\n      })\n    }\n  )\n}\n","import React from 'react'\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux'\nimport { Shape, Transformer } from 'react-konva'\nimport Victor from 'victor'\nimport { makeGetPreviewTrackVertices, getCachedSelector, makeGetPreviewVertices, getSliderColors, getVertexOffsets, getAllPreviewVertices } from '../machine/selectors'\nimport { updateLayer, setSelectedLayer } from '../layers/layersSlice'\nimport { getCurrentLayer, makeGetLayerIndex, getNumVisibleLayers } from '../layers/selectors'\nimport { roundP } from '../../common/util'\nimport { getSliderBounds } from '../../common/geometry'\n\n// Renders the shapes in the preview window and allows the user to interact with the shape.\nconst PreviewLayer = (ownProps) => {\n  const mapStateToProps = (state) => {\n    // if a layer matching this shape's id does not exist, we have a zombie\n    // child. It has to do with a child (preview shape) subscribing to the store\n    // before its parent (preview window), and trying to render first after a\n    // layer is removed. This is a tangled, but well-known problem with React-Redux\n    // hooks, and the solution for now is to render the current layer instead.\n    // https://react-redux.js.org/api/hooks#stale-props-and-zombie-children\n    // It's quite likely there is a more elegant/proper way around this.\n    const layer = state.layers.byId[ownProps.id] || getCurrentLayer(state)\n    const index = getCachedSelector(makeGetLayerIndex, layer.id)(state)\n    const numLayers = getNumVisibleLayers(state)\n\n    return {\n      layer: layer,\n      start: index === 0,\n      end: index === numLayers - 1,\n      currentLayer: getCurrentLayer(state),\n      trackVertices: getCachedSelector(makeGetPreviewTrackVertices, layer.id)(state),\n      vertices: getCachedSelector(makeGetPreviewVertices, layer.id)(state),\n      allVertices: getAllPreviewVertices(state),\n      selected: state.layers.selected,\n      sliderValue: state.preview.sliderValue,\n      showTrack: true,\n      colors: state.layers.selected ? getSliderColors(state.layers.selected)(state) : [],\n      offsets: getVertexOffsets(state)\n    }\n  }\n\n  const props = useSelector(mapStateToProps, shallowEqual)\n  const dispatch = useDispatch()\n  const startingWidth = props.layer.startingWidth\n  const startingHeight = props.layer.startingHeight\n  const selectedColor = 'yellow'\n  const unselectedColor = 'rgba(195, 214, 230, 0.65)'\n  const backgroundSelectedColor = '#6E6E00'\n  const backgroundUnselectedColor = 'rgba(195, 214, 230, 0.4)'\n\n  // our transformer is 5 times bigger than the actual starting shape, so we need\n  // to account for it when drawing the preview; if you change this value, be sure\n  // to change it in machine/selectors#getPreviewVertices,getPreviewTrackVertices\n  const konvaScale = props.layer.autosize ? 5 : 1\n  const konvaSizeX = startingWidth * konvaScale\n  const konvaSizeY = startingHeight * konvaScale\n  const isSelected = props.selected === ownProps.id\n  const isSliding = props.sliderValue !== 0\n\n  function mmToPixels(vertex) {\n    // y for pixels starts at the top, and goes down.\n    if (vertex) {\n      return new Victor(vertex.x + startingWidth/2, -vertex.y + startingHeight/2)\n    } else {\n      return new Victor(0, 0)\n    }\n  }\n\n  function moveTo_mm(context, vertex) {\n    var in_mm = mmToPixels(vertex)\n    context.moveTo(in_mm.x, in_mm.y)\n  }\n\n  function lineTo_mm(context, vertex) {\n    var in_mm = mmToPixels(vertex)\n    context.lineTo(in_mm.x, in_mm.y)\n  }\n\n  function dot_mm(context, vertex, radius=4) {\n    var in_mm = mmToPixels(vertex)\n    context.arc(in_mm.x, in_mm.y, radius, 0, 2 * Math.PI, true)\n    context.fillStyle = context.strokeStyle\n    context.fill()\n    context.lineWidth = 1\n    context.strokeStyle = isSelected ? 'yellow' : unselectedColor\n    context.stroke()\n  }\n\n  // draws a colored path when user is using slider\n  function drawLayerVertices(context) {\n    const { end } = getSliderBounds(props.allVertices, props.sliderValue)\n    const stationaryColor = unselectedColor\n    const defaultColor = isSliding ? backgroundUnselectedColor : stationaryColor\n    let oldColor = defaultColor\n    let currentColor = defaultColor\n\n    context.beginPath()\n    context.lineWidth = 1\n    context.strokeStyle = currentColor\n    moveTo_mm(context, props.vertices[0])\n    context.stroke()\n\n    context.beginPath()\n    for (let i=1; i<props.vertices.length; i++) {\n      let absoluteI = i + props.offsets[props.layer.id]\n      let pathColor = isSliding ? (absoluteI <= end ? backgroundSelectedColor : backgroundUnselectedColor) : stationaryColor\n\n      currentColor = props.colors[absoluteI] || pathColor\n      if (currentColor !== oldColor) {\n        context.stroke()\n        context.strokeStyle = currentColor\n        oldColor = currentColor\n        context.beginPath()\n      }\n\n      moveTo_mm(context, props.vertices[i-1])\n      lineTo_mm(context, props.vertices[i])\n    }\n    context.stroke()\n  }\n\n  function drawStartAndEndPoints(context) {\n    context.beginPath()\n    context.strokeStyle = 'green'\n    dot_mm(context, props.vertices[0], props.start ? 5 : 3)\n    context.stroke()\n\n    let endOffset = (props.currentLayer.dragging || props.end) ? 1 : 2\n    context.beginPath()\n    context.strokeStyle = 'red'\n    dot_mm(context, props.vertices[props.vertices.length - endOffset], props.end ? 5 : 3)\n    context.stroke()\n  }\n\n  // draws the line representing the track the path follows\n  function drawTrackVertices(context) {\n    context.beginPath()\n    context.lineWidth = 4.0\n    context.strokeStyle = 'green'\n    moveTo_mm(context, props.trackVertices[0])\n    for (let i=0; i<props.trackVertices.length; i++) {\n      lineTo_mm(context, props.trackVertices[i])\n    }\n    context.stroke()\n  }\n\n  function drawSliderEndPoint(context) {\n    const { end } = getSliderBounds(props.allVertices, props.sliderValue)\n\n    // Draw a slider path end point if sliding\n    if (isSliding) {\n      let absoluteEnd = props.vertices.length + props.offsets[props.layer.id] - 1\n      let absoluteStart = props.offsets[props.layer.id]\n\n      if (end >= absoluteStart && end <= absoluteEnd) {\n        // end point is in this layer\n        const sliderEnd = props.allVertices[end]\n        context.beginPath()\n        context.strokeStyle = backgroundSelectedColor\n\n        moveTo_mm(context, sliderEnd)\n        context.strokeStyle = selectedColor\n        dot_mm(context, sliderEnd)\n      }\n\n      // START: uncomment these lines to show slider end point coordinates\n      // context.font = '20px Arial'\n      // context.fillText('(' + sliderEndPoint.x.toFixed(2) + ', ' + sliderEndPoint.y.toFixed(2) + ')', 10, 50)\n      // END\n      context.stroke()\n    }\n  }\n\n  // used by Konva to draw our custom shape\n  function sceneFunc(context, shape) {\n    if (props.vertices && props.vertices.length > 0) {\n      if (props.trackVertices && props.trackVertices.length > 0 && props.showTrack) {\n        drawTrackVertices(context)\n      }\n\n      drawLayerVertices(context)\n      if (props.start || props.end || isSelected) {\n        drawStartAndEndPoints(context)\n      }\n      drawSliderEndPoint(context)\n    }\n\n    context.fillStrokeShape(shape)\n  }\n\n  // used by Konva to mark boundaries of shape\n  function hitFunc(context) {\n    const vertices = props.vertices\n    if (vertices && vertices.length > 0) {\n      moveTo_mm(context, vertices[0])\n\n      for (let i=1; i<vertices.length; i++) {\n        moveTo_mm(context, vertices[i-1])\n        lineTo_mm(context, vertices[i])\n      }\n    }\n\n    context.fillStrokeShape(this)\n  }\n\n  function onChange(attrs) {\n    attrs.id = props.layer.id\n    dispatch(updateLayer(attrs))\n  }\n\n  function onSelect() {\n    dispatch(setSelectedLayer(props.selected == null ? props.currentLayer.id : null))\n  }\n\n  const shapeRef = React.createRef()\n  const trRef = React.createRef()\n\n  React.useEffect(() => {\n    if (props.layer.visible && isSelected && props.layer.canChangeSize && props.showTrack) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current])\n      trRef.current.getLayer().batchDraw()\n    }\n  }, [isSelected, props.layer, props.showTrack, shapeRef, trRef])\n\n  return (\n    <React.Fragment>\n      {props.layer.visible && <Shape\n        draggable={props.showTrack && props.layer.id === props.currentLayer.id}\n        width={konvaSizeX}\n        height={konvaSizeY}\n        offsetY={konvaSizeY/2}\n        offsetX={konvaSizeX/2}\n        x={(props.showTrack && props.layer.offsetX) || 0}\n        y={(props.showTrack && -props.layer.offsetY) || 0}\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...props}\n        strokeWidth={1}\n        rotation={(props.showTrack && props.layer.rotation) || 0}\n        sceneFunc={sceneFunc}\n        hitFunc={hitFunc}\n        onDragStart={e => {\n          onChange({dragging: true})\n        }}\n        onDragEnd={e => {\n          onChange({\n            dragging: false,\n            offsetX: roundP(e.target.x(), 0),\n            offsetY: roundP(-e.target.y(), 0)\n          })\n        }}\n        onTransformStart={e => {\n          onChange({dragging: true})\n        }}\n        onTransformEnd={e => {\n          const node = shapeRef.current\n          const scaleX = node.scaleX()\n          const scaleY = node.scaleY()\n\n          // we will reset it back\n          node.scaleX(1)\n          node.scaleY(1)\n\n          onChange({\n            dragging: false,\n            startingWidth: roundP(Math.max(5, props.layer.startingWidth * scaleX), 0),\n            startingHeight: roundP(Math.max(5, props.layer.startingHeight * scaleY), 0),\n            rotation: roundP(node.rotation(), 0)\n          })\n        }}\n      />}\n      {props.layer.visible && isSelected && props.layer.canChangeSize && props.showTrack && (\n        <Transformer\n          ref={trRef}\n          centeredScaling={true}\n          resizeEnabled={!props.layer.trackEnabled}\n          rotateEnabled={props.layer.canRotate}\n          rotationSnaps={[0, 90, 180, 270]}\n          enabledAnchors={!props.layer.canChangeHeight ? ['top-left', 'top-right', 'bottom-left', 'bottom-right'] : null }\n        />\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default PreviewLayer\n","import React, { Component } from 'react'\nimport { connect, ReactReduxContext, Provider } from 'react-redux'\nimport { Stage, Layer, Circle, Rect } from 'react-konva'\nimport throttle from 'lodash/throttle'\nimport { setPreviewSize, updatePreview } from './previewSlice'\nimport { updateLayer } from '../layers/layersSlice'\nimport { getCurrentLayer, getKonvaLayerIds, isDragging } from '../layers/selectors'\nimport { roundP } from '../../common/util'\nimport PreviewLayer from './PreviewLayer'\n\nexport const relativeScale = (props) => {\n  let width, height\n\n  if (props.use_rect) {\n    width = props.maxX - props.minX\n    height = props.maxY - props.minY\n  } else {\n    width = height = props.maxRadius * 2.0\n  }\n\n  return Math.min(props.canvasWidth / width, props.canvasHeight / height)\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    layers: state.layers,\n    currentLayer: getCurrentLayer(state),\n    selectedId: state.layers.selected,\n    konvaIds: getKonvaLayerIds(state),\n    use_rect: state.machine.rectangular,\n    dragging: isDragging(state),\n    minX: state.machine.minX,\n    maxX: state.machine.maxX,\n    minY: state.machine.minY,\n    maxY: state.machine.maxY,\n    maxRadius: state.machine.maxRadius,\n    canvasWidth: state.preview.canvasWidth,\n    canvasHeight: state.preview.canvasHeight,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onResize: (size) => {\n      dispatch(setPreviewSize(size))\n    },\n    onChange: (attrs) => {\n      dispatch(updatePreview(attrs))\n    },\n    onLayerChange: (attrs) => {\n      dispatch(updateLayer(attrs))\n    }\n  }\n}\n\n// Contains the preview window, and any parameters for the machine.\nclass PreviewWindow extends Component {\n  componentDidMount() {\n    const wrapper = document.getElementById('preview-wrapper')\n\n    this.throttledResize = throttle(this.resize, 200, {trailing: true}).bind(this)\n    window.addEventListener('resize', () => { this.throttledResize(wrapper) }, false)\n    setTimeout(() => {\n      this.visible = true\n      this.resize(wrapper)\n    }, 250)\n  }\n\n  resize(wrapper) {\n    const width = parseInt(getComputedStyle(wrapper).getPropertyValue('width'))\n    const height = parseInt(getComputedStyle(wrapper).getPropertyValue('height'))\n\n    if (this.props.canvasWidth !== width || this.props.canvasHeight !== height) {\n      this.props.onResize({width: width, height: height})\n    }\n  }\n\n  render() {\n    const {minX, minY, maxX, maxY} = this.props\n    const radius = this.props.maxRadius\n    const scale = relativeScale(this.props)\n    const reduceScale = 0.95\n    const width = this.props.use_rect ? maxX - minX : radius * 2\n    const height = this.props.use_rect ? maxY - minY : radius * 2\n    const visibilityClass = `preview-wrapper ${this.visible ? 'd-flex align-items-center' : 'd-none'}`\n\n    const checkDeselect = e => {\n      // deselect when clicked on empty area\n      if (e.target.className !== undefined && e.target.className !== 'Rect') {\n        this.props.onChange({selectedId: null})\n      }\n     }\n\n     // define Konva clip functions that will let us clip vertices not bound by\n     // machine limits when dragging, and produce a visually seamless experience.\n     const clipCircle = ctx => {\n       ctx.arc(0, 0, radius, 0, Math.PI * 2, false)\n     }\n     const clipRect = ctx => {\n       ctx.rect(-width/2, -height/2, width, height)\n     }\n\n    const scaleByWheel = (size, deltaY) => {\n      const sign = Math.sign(deltaY)\n      const scale = 1 + Math.log(Math.abs(deltaY))/30 * sign\n      let newSize = Math.max(roundP(size * scale, 0), 1)\n      if (newSize === size) {\n        // If the log scaled value isn't big enough to move the scale.\n        newSize = Math.max(sign+size, 1)\n      }\n      return newSize\n    }\n\n    const clipFunc = this.props.dragging ? (this.props.use_rect ? clipRect : clipCircle) : null\n\n    return (\n      // the consumer wrapper is needed to pass the store down to our shape\n      // which is not our usual React Component\n      <ReactReduxContext.Consumer>\n        {({store}) => (\n          <Stage className={visibilityClass}\n            scaleX={scale * reduceScale}\n            scaleY={scale * reduceScale}\n            height={height * scale}\n            width={width * scale}\n            onMouseDown={checkDeselect}\n            onTouchStart={checkDeselect}\n            offsetX={-width/2*(1/reduceScale)}\n            offsetY={-height/2*(1/reduceScale)}\n            onWheel={e => {\n              e.evt.preventDefault()\n              if (Math.abs(e.evt.deltaY) > 0) {\n                this.props.onLayerChange({\n                  startingWidth: scaleByWheel(this.props.currentLayer.startingWidth, e.evt.deltaY),\n                  startingHeight: scaleByWheel(this.props.currentLayer.startingHeight, e.evt.deltaY),\n                  id: this.props.currentLayer.id\n                })\n              }\n            }}\n            >\n            <Provider store={store}>\n              <Layer clipFunc={clipFunc}>\n                {!this.props.use_rect && <Circle x={0} y={0} radius={radius}\n                  fill=\"transparent\"\n                  stroke=\"gray\"\n                />}\n                {this.props.use_rect && <Rect x={0} y={0} width={width} height={height}\n                  fill=\"transparent\"\n                  stroke=\"gray\"\n                  offsetX={width/2}\n                  offsetY={height/2}\n                />}\n                {this.props.konvaIds.map((id, i) => {\n                  return (\n                    <PreviewLayer id={id} key={i} index={i} />\n                  )\n                })}\n              </Layer>\n            </Provider>\n          </Stage>\n        )}\n      </ReactReduxContext.Consumer>\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(PreviewWindow)\n","import { createSlice } from '@reduxjs/toolkit'\n\n// Determine default file type; this is a little fussy because we want to ensure\n// that if the user has a rectangular table, but somehow wants to export theta\n// rho (or vice versa), we'll save that setting.\nlet fileType\nif (localStorage.getItem('export_fileType')) {\n  fileType = localStorage.getItem('export_fileType')\n} else if (localStorage.getItem('machine_rect_active')) {\n  fileType = localStorage.getItem('machine_rect_active') ? 'GCode (.gcode)' : 'Theta Rho (.thr)'\n} else {\n  fileType = 'GCode (.gcode)'\n}\n\nconst exporterSlice = createSlice({\n  name: 'exporter',\n  initialState: {\n    fileName: 'sandify',\n    fileType: fileType,\n    pre: localStorage.getItem('export_pre') ? localStorage.getItem('export_pre') : '',\n    post: localStorage.getItem('export_post') ? localStorage.getItem('export_post') : '',\n    reverse: false,\n    show: false,\n    polarRhoMax: 1.0\n  },\n  reducers: {\n    updateExporter(state, action) {\n      Object.assign(state, action.payload)\n      Object.keys(action.payload).forEach(key => {\n        localStorage.setItem(\"export_\" + key, action.payload[key])\n      })\n    },\n  }\n})\n\nexport const {\n  updateExporter\n} = exporterSlice.actions\n\nexport default exporterSlice.reducer\n","export default class Exporter {\n  constructor(props) {\n    this.props = props\n    this.lines = []\n    this.indentLevel = 0\n  }\n\n  export() {\n    this.pre = this.props.pre\n    this.post = this.props.post\n    let vertices = this.props.vertices\n\n    if (this.props.reverse) {\n      vertices = vertices.reverse()\n    }\n    this.computeOutputVertices(vertices)\n    this.header()\n    this.startComments()\n    this.props.comments.forEach(comment => this.line(comment))\n    this.line()\n    this.keyValueLine('File name', \"'\" + this.props.fileName + \"'\")\n    this.line()\n    this.endComments()\n\n    if (this.pre !== '') {\n      this.startComments()\n      this.line('BEGIN PRE')\n      this.endComments()\n      this.line(this.pre, this.pre !== '')\n      this.startComments()\n      this.line('END PRE')\n      this.endComments()\n    }\n\n    this.line()\n    this.exportCode(this.vertices)\n    this.line()\n\n    if (this.post !== '') {\n      this.startComments()\n      this.line('BEGIN POST')\n      this.endComments()\n      this.line(this.post, this.post !== '')\n      this.startComments()\n      this.line('END POST')\n      this.endComments()\n    }\n    this.footer()\n    this.line()\n\n    return this.lines\n  }\n\n  header() {\n    // default does nothing\n  }\n\n  footer() {\n    // default does nothing\n  }\n\n  computeOutputVertices(vertices) {\n    // default does nothing\n    this.vertices = vertices\n  }\n\n  line(content='', add=true) {\n    if (add) {\n      let padding = ''\n      if (this.commenting) {\n        padding = this.commentChar + (content.length > 0 ? ' ' : '')\n        for (let i=0; i<this.indentLevel; i++) {\n          padding += '  '\n        }\n      }\n      this.lines.push(padding + content)\n    }\n  }\n\n  keyValueLine(key, value, add=true) {\n    this.line(key + ': ' + value, add)\n  }\n\n  optionLine(metamodel, instance, option, add=true) {\n    this.line(metamodel.getOptions()[option].title + ': ' + instance[option], add)\n  }\n\n  optionLines(metamodel, instance, options, add=true) {\n    options.forEach(option => {\n      const metaOption = metamodel.getOptions()[option]\n      const visible = metaOption.isVisible === undefined ? true : metaOption.isVisible(instance)\n\n      if (visible) {\n        this.optionLine(metamodel, instance, option, add)\n      }\n    })\n  }\n\n  indent() {\n    this.indentLevel++\n  }\n\n  dedent() {\n    this.indentLevel--\n  }\n\n  startComments() {\n    this.commenting = true\n  }\n\n  endComments() {\n    this.commenting = false\n  }\n}\n","import { getShape } from '../../models/shapes'\nimport { getLayerInfo } from '../layers/selectors'\nimport Machine from '../../models/Machine'\nimport Transform from '../../models/Transform'\nimport Exporter from './Exporter'\n\nexport default class CommentExporter extends Exporter {\n  constructor(props) {\n    super(props)\n    this.indentLevel = 0\n    this.startComments()\n    this.commentChar = ''\n  }\n\n  export() {\n    const state = this.props\n    const machine = new Machine()\n    const transform = new Transform()\n    let instance = state.machine\n\n    this.line('Created by Sandify')\n    this.line('https://sandify.org')\n    this.keyValueLine('Version', state.app.sandifyVersion)\n    this.line()\n\n    this.keyValueLine('Machine type', state.machine.rectangular ? 'Rectangular' : 'Polar')\n    this.indent()\n    this.optionLines(machine, instance, ['minX', 'maxX', 'minY', 'maxY'], state.machine.rectangular)\n    this.optionLines(machine, instance,  ['maxRadius', 'polarStartPoint', 'polarEndPoint'], !state.machine.rectangular)\n    this.dedent()\n\n    this.keyValueLine('Content type', state.app.input)\n\n    switch (state.app.input) {\n      case 'shape': // shapes\n        const layers = getLayerInfo(state)\n        layers.forEach(layer => {\n          const shape = getShape(layer)\n          const options = shape.getOptions()\n\n          this.line('Layer:')\n          this.indent()\n          this.keyValueLine('Shape', shape.name)\n          this.optionLines(shape, layer, Object.keys(options))\n          this.keyValueLine('Visible', layer.visible)\n          this.optionLines(transform, layer, ['startingWidth', 'startingHeight', 'offsetX', 'offsetY', 'rotation', 'reverse'])\n          this.optionLines(transform, layer, ['numLoops', 'transformMethod'], layer.repeatEnabled)\n\n          this.optionLine(transform, layer, 'growEnabled', layer.repeatEnabled)\n          this.indent()\n          this.optionLine(transform, layer, 'growValue', layer.repeatEnabled && layer.growEnabled)\n          this.optionLine(transform, layer, 'growMethod', layer.repeatEnabled && layer.growEnabled)\n          this.indent()\n          this.optionLine(transform, layer, 'growMath', layer.repeatEnabled && layer.growEnabled && layer.growMethod === 'function')\n          this.dedent()\n          this.dedent()\n\n          this.optionLine(transform, layer, 'spinEnabled', layer.repeatEnabled)\n          this.indent()\n          this.optionLines(transform, layer, ['spinValue', 'spinMethod'], layer.repeatEnabled && layer.spinEnabled)\n          this.indent()\n          this.optionLine(transform, layer, 'spinMath', layer.repeatEnabled && layer.spinEnabled && layer.spinMethod === 'function')\n          this.optionLine(transform, layer, 'spinSwitchbacks', layer.repeatEnabled && layer.spinEnabled && layer.spinMethod === 'constant')\n          this.dedent()\n          this.dedent()\n\n          this.optionLine(transform, layer, 'trackEnabled', layer.repeatEnabled)\n          this.indent()\n          this.optionLines(transform, layer, ['trackValue', 'trackLength', 'trackNumLoops'], layer.repeatEnabled && layer.trackEnabled)\n          this.optionLine(transform, layer, 'trackGrowEnabled', layer.repeatEnabled && layer.trackEnabled)\n          this.indent()\n          this.optionLine(transform, layer, 'trackGrow', layer.repeatEnabled && layer.trackGrowEnabled)\n          this.dedent()\n          this.dedent()\n\n          if (!layer.effect) {\n            this.line('Fine tuning:')\n            this.indent()\n            this.optionLines(transform, layer, ['connectionMethod', 'drawPortionPct', 'backtrackPct', 'rotateStartingPct'])\n            this.dedent()\n          }\n          this.dedent()\n        })\n        break\n\n      default:\n        break\n    }\n\n    this.dedent()\n    this.keyValueLine('Reverse export path', state.exporter.reverse)\n    return this.lines\n  }\n}\n","import { createSelector } from 'reselect'\nimport CommentExporter from './CommentExporter'\n\nconst getApp = state => state.app\nconst getLayers = state => state.layers\nconst getCurrentLayer = state => state.layers.byId[state.layers.current]\nconst getExporter = state => state.exporter\nconst getMachine = state => state.machine\n\nexport const getComments = createSelector(\n  [\n      getApp,\n      getLayers,\n      getCurrentLayer,\n      getExporter,\n      getMachine,\n  ],\n  (app, layers, layer, exporter, machine) => {\n    const state = {\n      app: app,\n      layers: layers,\n      layer: layer,\n      exporter: exporter,\n      machine: machine\n    }\n\n    return new CommentExporter(state).export()\n  }\n)\n","import Victor from 'victor'\nimport Exporter from './Exporter'\n\nfunction thetarho(vertex) {\n  return '' + vertex.x.toFixed(5) + ' ' + vertex.y.toFixed(5)\n}\n\nexport default class ThetaRhoExporter extends Exporter {\n  constructor(props) {\n    super(props)\n    this.fileExtension = '.thr'\n    this.label = 'ThetaRho'\n    this.commentChar = '#'\n  }\n\n  // computes vertices compatible with the theta rho format, and replaces\n  // placeholder variables in pre/post blocks.\n  computeOutputVertices(vertices) {\n    // First, downsample larger lines into smaller ones.\n    const maxLength = 2.0\n    let subsampledVertices = []\n    let previous = undefined\n    let next\n\n    for (next = 0; next < vertices.length; next++) {\n      if (previous !== undefined) {\n        const start = Victor.fromObject(vertices[previous])\n        const end = Victor.fromObject(vertices[next])\n\n        const delta = end.clone().subtract(start)\n        const deltaSegment = end.clone().subtract(start).normalize().multiply(Victor(maxLength, maxLength))\n\n        // This loads up (start, end].\n        for (let step = 0; step < (delta.magnitude() / maxLength) ; step++) {\n          subsampledVertices.push(\n            new Victor(start.x + step * deltaSegment.x,\n                       start.y + step * deltaSegment.y))\n        }\n\n      }\n      previous = next\n    }\n\n    // Add in the end\n    if (previous !== undefined) {\n      subsampledVertices.push(vertices[vertices.length - 1])\n    }\n\n    // Convert to theta, rho\n    this.vertices = []\n    let previousTheta = 0\n    let previousRawTheta = 0\n    let mintheta = 1e9\n    let minrho   = 1e9\n    let maxtheta = -1e9\n    let maxrho   = -1e9\n    for (next = 0; next < subsampledVertices.length; ++next) {\n      // Normalize the radius\n      let rhoMax = parseFloat(this.props.polarRhoMax)\n      if (rhoMax < 0) { rhoMax = 0.1 }\n      if ( rhoMax > 1) { rhoMax = 1.0 }\n\n      const rho = (Victor.fromObject(subsampledVertices[next]).magnitude() / this.props.maxRadius) * rhoMax\n      minrho = Math.min(rho, minrho)\n      maxrho = Math.max(rho, maxrho)\n\n      // What is the basic theta for this point?\n      let rawTheta = Math.atan2(subsampledVertices[next].x,\n                                subsampledVertices[next].y)\n      // Convert to [0, 2pi]\n      rawTheta = (rawTheta + 2.0 * Math.PI) % (2.0 * Math.PI)\n\n      // Compute the difference to the last point.\n      let deltaTheta = rawTheta - previousRawTheta\n\n      // Convert to [-pi,pi]\n      if (deltaTheta < -Math.PI) {\n        deltaTheta += 2.0 * Math.PI\n      }\n      if (deltaTheta > Math.PI) {\n        deltaTheta -= 2.0 * Math.PI\n      }\n\n      const theta = previousTheta + deltaTheta\n      mintheta = Math.min(theta, mintheta)\n      maxtheta = Math.max(theta, maxtheta)\n      previousRawTheta = rawTheta\n      previousTheta = theta\n      this.vertices.push(new Victor(theta, rho))\n    }\n\n    let starttheta = this.vertices[0].x\n    let startrho   = this.vertices[0].y\n    let endtheta   = this.vertices[this.vertices.length-1].x\n    let endrho     = this.vertices[this.vertices.length-1].y\n\n    // Replace pre/post placeholder variables\n    this.pre  =  this.pre.replace(/{starttheta}/gi, starttheta.toFixed(3))\n    this.pre  =  this.pre.replace(/{startrho}/gi,   startrho.toFixed(3))\n    this.pre  =  this.pre.replace(/{endtheta}/gi,   endtheta.toFixed(3))\n    this.pre  =  this.pre.replace(/{endrho}/gi,     endrho.toFixed(3))\n    this.pre  =  this.pre.replace(/{mintheta}/gi,   mintheta.toFixed(3))\n    this.pre  =  this.pre.replace(/{minrho}/gi,     minrho.toFixed(3))\n    this.pre  =  this.pre.replace(/{maxtheta}/gi,   maxtheta.toFixed(3))\n    this.pre  =  this.pre.replace(/{maxrho}/gi,     maxrho.toFixed(3))\n    this.post = this.post.replace(/{starttheta}/gi, starttheta.toFixed(3))\n    this.post = this.post.replace(/{startrho}/gi,   startrho.toFixed(3))\n    this.post = this.post.replace(/{endtheta}/gi,   endtheta.toFixed(3))\n    this.post = this.post.replace(/{endrho}/gi,     endrho.toFixed(3))\n    this.post = this.post.replace(/{mintheta}/gi,   mintheta.toFixed(3))\n    this.post = this.post.replace(/{minrho}/gi,     minrho.toFixed(3))\n    this.post = this.post.replace(/{maxtheta}/gi,   maxtheta.toFixed(3))\n    this.post = this.post.replace(/{maxrho}/gi,     maxrho.toFixed(3))\n  }\n\n  exportCode(vertices) {\n    vertices.map(thetarho).forEach(line => this.line(line))\n  }\n}\n","\nexport const gcodeTypeName = 'GCode (.gcode)'\nexport const thrTypeName = 'Theta Rho (.thr)'\nexport const svgTypeName = 'SVG (.svg)'\n\nconst exporterOptions = {\n  fileName: {\n    title: 'File name',\n    type: 'string'\n  },\n  fileType: {\n    title: 'Export as',\n    type: 'dropdown',\n    choices: [gcodeTypeName, thrTypeName, svgTypeName]\n  },\n  polarRhoMax: {\n    title: 'Maximum rho value (0-1)',\n    min: 0,\n    max: 1\n  },\n  post: {\n    title: 'Program end code',\n    type: 'textarea',\n    isVisible: (state) => { return state.fileType !== svgTypeName },\n  },\n  pre: {\n    title: 'Program start code',\n    type: 'textarea',\n    isVisible: (state) => { return state.fileType !== svgTypeName },\n  },\n  reverse: {\n    title: 'Reverse path in the code',\n  },\n}\n\nexport class Exporter {\n  getOptions() {\n    return exporterOptions\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, Modal, Col, Row } from 'react-bootstrap'\nimport DropdownOption from '../../components/DropdownOption'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport { updateExporter } from './exporterSlice'\nimport { getComments } from './selectors'\nimport { getAllComputedVertices } from '../machine/selectors'\nimport ReactGA from 'react-ga'\nimport ThetaRhoExporter from './ThetaRhoExporter'\nimport GCodeExporter from './GCodeExporter'\nimport SvgExporter from './SvgExporter'\nimport {\n  gcodeTypeName,\n  thrTypeName,\n  svgTypeName,\n  Exporter,\n} from '../../models/Exporter'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    reverse: state.exporter.reverse,\n    show: state.exporter.show,\n    vertices: getAllComputedVertices(state),\n    comments: getComments(state),\n    input: state.app.input,\n    layer: state.layers.current,\n    offsetX: (state.machine.rectangular ? (state.machine.minX + state.machine.maxX) / 2.0 : state.machine.maxRadius),\n    offsetY: (state.machine.rectangular ? (state.machine.minY + state.machine.maxY) / 2.0 : state.machine.maxRadius),\n    width:   (state.machine.rectangular ? (state.machine.maxX - state.machine.minX) : (2.0 * state.machine.maxRadius)),\n    height:  (state.machine.rectangular ? (state.machine.maxY - state.machine.minY) : (2.0 * state.machine.maxRadius)),\n    maxRadius: (state.machine.rectangular ?\n      Math.sqrt(Math.pow(state.machine.maxX - state.machine.minX, 2.0) +\n                Math.pow(state.machine.maxY - state.machine.minY, 2.0)) :\n      state.machine.maxRadius),\n    fileName: state.exporter.fileName,\n    fileType: state.exporter.fileType,\n    polarRhoMax: state.exporter.polarRhoMax,\n    pre: (state.exporter.fileType !== svgTypeName ? state.exporter.pre : ''),\n    post: (state.exporter.fileType !== svgTypeName ? state.exporter.post : ''),\n    options: new Exporter().getOptions()\n  }\n}\n\nconst exporters = {\n  [gcodeTypeName]: GCodeExporter,\n  [thrTypeName]: ThetaRhoExporter,\n  [svgTypeName]: SvgExporter,\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    open: () => {\n      dispatch(updateExporter({show: true}))\n    },\n    close: () => {\n      dispatch(updateExporter({show: false}))\n    },\n    onChange: (attrs) => {\n      dispatch(updateExporter(attrs))\n    },\n  }\n}\n\nclass Downloader extends Component {\n  // Record this event to google analytics.\n  gaRecord(fileType) {\n    let savedCode = 'Saved: ' + this.props.input\n    if (this.props.input === 'shape' || this.props.input === 'Shape') {\n      savedCode = savedCode + ': ' + this.props.layer\n    }\n    ReactGA.event({\n      category: fileType,\n      action: savedCode,\n    })\n  }\n\n  download() {\n    let exporter = new exporters[this.props.fileType](this.props)\n    let startTime = performance.now()\n    let fileName = this.props.fileName\n\n    exporter.export()\n\n    if (!fileName.includes('.')) {\n      fileName += exporter.fileExtension\n    }\n\n    this.gaRecord(exporter.label)\n    this.downloadFile(fileName, exporter.lines.join(\"\\n\"))\n    this.props.close()\n\n    let endTime = performance.now()\n    ReactGA.timing({\n      category: exporter.label,\n      variable: 'Save Code',\n      value: endTime - startTime, // in milliseconds\n    })\n  }\n\n  // Helper function to take a string and make the user download a text file with that text as the\n  // content. I don't really understand this, but I took it from here, and it seems to work:\n  // https://stackoverflow.com/a/18197511\n  downloadFile(fileName, text) {\n    let link = document.createElement('a')\n    link.download = fileName\n\n    let fileType = 'text/plain;charset=utf-8'\n    if (this.props.fileType === svgTypeName) {\n      fileType = 'image/svg+xml;charset=utf-8'\n    }\n    let blob = new Blob([text],{type: fileType})\n\n    // Windows Edge fix\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      window.navigator.msSaveOrOpenBlob(blob, fileName)\n    } else {\n      link.href = URL.createObjectURL(blob)\n      if (document.createEvent) {\n        var event = document.createEvent('MouseEvents')\n        event.initEvent('click', true, true)\n        link.dispatchEvent(event)\n      } else {\n        link.click()\n      }\n      URL.revokeObjectURL(link.href)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Button className=\"ml-2 mr-3\" variant=\"primary\" onClick={this.props.open}>Export</Button>\n        <Modal size=\"lg\" show={this.props.show} onHide={this.props.close}>\n          <Modal.Header closeButton>\n            <Modal.Title>Export to a file</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <DropdownOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              optionKey=\"fileType\"\n              key=\"fileType\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"fileName\"\n              optionKey=\"fileName\"\n              index={1}\n              model={this.props} />\n\n            {this.props.fileType === 'Theta Rho (.thr)' && <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"polarRhoMax\"\n              optionKey=\"polarRhoMax\"\n              index={2}\n              model={this.props} />}\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"pre\"\n              optionKey=\"pre\"\n              index={3}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"post\"\n              optionKey=\"post\"\n              index={4}\n              model={this.props} />\n\n            <Row>\n              <Col sm={5}>\n              </Col>\n              <Col sm={7}>\n                See <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/jeffeb3/sandify/wiki#export-variables\"> the wiki </a> for details on available program export variables.\n              </Col>\n            </Row>\n\n            <div className=\"mt-2\">\n              <CheckboxOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                optionKey=\"reverse\"\n                key=\"reverse\"\n                index={5}\n                model={this.props} />\n            </div>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button id=\"code-close\" variant=\"link\" onClick={this.props.close}>Close</Button>\n            <Button id=\"code-download\" variant=\"primary\" onClick={this.download.bind(this)}>Download</Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Downloader)\n","import Exporter from './Exporter'\n\nexport default class GCodeExporter extends Exporter {\n  constructor(props) {\n    super(props)\n    this.fileExtension = '.gcode'\n    this.label = 'Gcode'\n    this.commentChar = ';'\n  }\n\n  exportCode(vertices) {\n    vertices.map(this.gcode).forEach(line => this.line(line))\n  }\n\n  // computes vertices compatible with the gcode format, and replaces\n  // placeholder variables in pre/post blocks.\n  computeOutputVertices(vertices) {\n    // Collect some statistics about these vertices.\n    let minx = 1e9\n    let miny = 1e9\n    let maxx = -1e9\n    let maxy = -1e9\n    this.vertices = vertices.map(vertex => {\n      const x = vertex.x + this.props.offsetX\n      const y = vertex.y + this.props.offsetY\n      minx = Math.min(x, minx)\n      miny = Math.min(y, miny)\n      maxx = Math.max(x, maxx)\n      maxy = Math.max(y, maxy)\n\n      return {\n        ...vertex,\n        x: x,\n        y: y,\n      }\n    })\n    let startx = this.vertices[0].x\n    let starty = this.vertices[0].y\n    let endx = this.vertices[this.vertices.length-1].x\n    let endy = this.vertices[this.vertices.length-1].y\n\n    // Replace pre/post placeholder variables\n    this.pre  =  this.pre.replace(/{startx}/gi, startx.toFixed(3))\n    this.pre  =  this.pre.replace(/{starty}/gi, starty.toFixed(3))\n    this.pre  =  this.pre.replace(/{endx}/gi,   endx.toFixed(3))\n    this.pre  =  this.pre.replace(/{endy}/gi,   endy.toFixed(3))\n    this.pre  =  this.pre.replace(/{minx}/gi,   minx.toFixed(3))\n    this.pre  =  this.pre.replace(/{miny}/gi,   miny.toFixed(3))\n    this.pre  =  this.pre.replace(/{maxx}/gi,   maxx.toFixed(3))\n    this.pre  =  this.pre.replace(/{maxy}/gi,   maxy.toFixed(3))\n    this.post = this.post.replace(/{startx}/gi, startx.toFixed(3))\n    this.post = this.post.replace(/{starty}/gi, starty.toFixed(3))\n    this.post = this.post.replace(/{endx}/gi,   endx.toFixed(3))\n    this.post = this.post.replace(/{endy}/gi,   endy.toFixed(3))\n    this.post = this.post.replace(/{minx}/gi,   minx.toFixed(3))\n    this.post = this.post.replace(/{miny}/gi,   miny.toFixed(3))\n    this.post = this.post.replace(/{maxx}/gi,   maxx.toFixed(3))\n    this.post = this.post.replace(/{maxy}/gi,   maxy.toFixed(3))\n  }\n\n  gcode(vertex) {\n    let command = 'G01' +\n      ' X' + vertex.x.toFixed(3) +\n      ' Y' + vertex.y.toFixed(3)\n    return command\n  }\n}\n","import Exporter from './Exporter'\nimport { path } from 'd3'\n\nconst svgTrim = (svgString) => {\n  // Based on the svg trim method from msurguy (MIT):\n  //    https://github.com/msurguy/svg-file-downloader/blob/7d3409f60ca58fef90003f24bae2a85fdf324eb3/svg-file-downloader.js#L9\n  svgString = svgString.replace(/([+]?\\d*\\.\\d{3,}([eE][+]?\\d+)?)/g, function (x) {\n    return (+x).toFixed(2)\n  })\n  return svgString\n}\n\nexport default class SvgExporter extends Exporter {\n  constructor(props) {\n    super(props)\n    this.fileExtension = '.svg'\n    this.label = 'SVG'\n    this.indentLevel = 2\n  }\n\n  exportCode(vertices) {\n    var centeredVertices = vertices.map( (vertex) => {\n      return {\n        ...vertex,\n        x: vertex.x + this.props.width / 2,\n        y: this.props.height - (vertex.y + this.props.height / 2),\n      }\n    })\n\n    let svg = path()\n    if (centeredVertices.length > 0) {\n      const firstPoint = centeredVertices[0]\n      svg.moveTo(firstPoint.x, firstPoint.y)\n    }\n    centeredVertices.forEach(vertex => svg.lineTo(vertex.x, vertex.y))\n    this.line(\"    <desc>pwidth:\" + this.props.width + \";pheight:\" + this.props.height + \";</desc>\")\n    this.line(\"    <path\")\n    this.line(\"       stroke=\\\"#000000\\\"\")\n    this.line(\"       stroke-width=\\\"0.4mm\\\"\")\n    this.line(\"       fill=\\\"none\\\"\")\n    this.line(\"       d=\\\"\" + svgTrim(svg.toString()) + \"\\\"/>\")\n  }\n\n  header() {\n    this.line(\"<?xml version=\\\"1.0\\\" standalone=\\\"no\\\"?>\")\n    this.line(\"<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\">\")\n    this.line(\"<svg width=\\\"\" + this.props.width + \"\\\"\" +\n                  \" height=\\\"\" + this.props.height + \"\\\"\" +\n                  \" title=\\\"polygons\\\"\" +\n                  \" version=\\\"1.1\\\"\" +\n                  \" viewBox=\\\"0 0 \" + this.props.width + \" \" + this.props.height + \"\\\"\" +\n                  \" xmlns=\\\"http://www.w3.org/2000/svg\\\"\" +\n                  \" class=\\\"svg-paper\\\">\")\n\n    this.line(\"  <g>\")\n  }\n\n  footer() {\n    this.line(\"  </g>\")\n    this.line(\"</svg>\")\n  }\n\n  line(content='', add=true) {\n    if (add) {\n      let padding = ''\n      if (this.commenting) {\n        padding = ''\n        for (let i=0; i<this.indentLevel; i++) {\n          padding += '  '\n        }\n        if (content) {\n          this.lines.push(padding + \"<!-- \" + content + \" -->\")\n        } else {\n          this.lines.push(\"\")\n        }\n      } else {\n        this.lines.push(content)\n      }\n    }\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Slider from 'rc-slider'\nimport 'rc-slider/assets/index.css'\nimport PreviewWindow from './PreviewWindow'\nimport Downloader from '../exporter/Downloader'\nimport { updatePreview } from './previewSlice'\nimport { getVerticesStats } from '../machine/selectors'\nimport './MachinePreview.scss'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    sliderValue: state.preview.sliderValue,\n    verticesStats: getVerticesStats(state),\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onSlider: (value) => {\n      dispatch(updatePreview({sliderValue: value}))\n    },\n  }\n}\n\nclass MachinePreview extends Component {\n  render() {\n    return (\n      <div className=\"machine-preview d-flex flex-grow-1 flex-column\" id=\"machine-preview\">\n        <div className=\"flex-grow-1 d-flex flex-column\">\n          <div id=\"preview-wrapper\" className=\"preview-wrapper d-flex flex-column align-items-center\">\n            <PreviewWindow />\n          </div>\n\n          <div className=\"mt-auto pt-2 bg-white d-flex align-items-center\">\n            <div className=\"flex-grow-1\">\n              <div className=\"mx-2\">\n                Points: {this.props.verticesStats.numPoints}, Distance: {this.props.verticesStats.distance}\n              </div>\n\n              <div className=\"p-3\">\n                  <Slider\n                    value={this.props.sliderValue}\n                    step={0.05}\n                    min={0.0}\n                    max={100.0}\n                    onChange={this.props.onSlider}\n                  />\n              </div>\n            </div>\n            <Downloader />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MachinePreview)\n","export const loadState = (key='state') => {\n  try {\n    const serializedState = localStorage.getItem(key)\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState)\n  } catch (err) {\n    return undefined\n  }\n}\n\nexport const saveState = (state, key='state') => {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem(key, serializedState)\n  } catch {\n    // ignore write errors\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\"\nimport { combineReducers } from 'redux'\nimport appReducer from './appSlice'\nimport machineReducer from '../machine/machineSlice'\nimport exporterReducer from '../exporter/exporterSlice'\nimport previewReducer from '../preview/previewSlice'\nimport { registeredShapes } from '../../models/shapes'\nimport { loadState, saveState } from '../../common/localStorage'\nimport layersReducer, { setCurrentLayer, addLayer } from '../layers/layersSlice'\n\n//const customizedMiddleware = getDefaultMiddleware({\n//  immutableCheck: {\n//    ignoredPaths: ['importer.vertices']\n//  },\n//  serializableCheck: {\n//    ignoredPaths: ['importer.vertices']\n//  }\n//})\n\nconst store = configureStore({\n  reducer: combineReducers({\n    app: appReducer,\n    layers: layersReducer,\n    exporter: exporterReducer,\n    machine: machineReducer,\n    preview: previewReducer\n  })\n})\n\n// set to true when running locally if you want to preserve your shape\n// settings across page loads; don't forget to toggle false when done testing!\nconst persistState = false\n\n// if you want to save a multiple temporary states, use these keys. The first time\n// you save a new state, change persistSaveKey. Make a change, then change\n// persistInitKey to the same value. It's like doing a \"save as\"\nconst persistInitKey = 'state'\nconst persistSaveKey = 'state'\n\n// never persist state when running within a jest spec\nif (process.env.JEST_WORKER_ID === undefined && persistState) {\n  // override default values with saved ones\n  const persistedState = loadState(persistInitKey)\n\n  if (persistedState) {\n    persistedState.layers.allIds.forEach((id) => {\n      let layer = persistedState.layers.byId[id]\n\n      if (layer.startingWidth === undefined) layer.startingWidth = layer.startingSize\n      if (layer.startingHeight === undefined) layer.startingHeight = layer.startingWidth\n      if (layer.autosize === undefined) layer.autosize = true\n\n      store.dispatch(addLayer(layer))\n    })\n    store.dispatch(setCurrentLayer(persistedState.layers.current))\n  }\n} else {\n  const storedShape = localStorage.getItem('currentShape')\n  const currentShape = storedShape && registeredShapes[storedShape] ? storedShape : 'polygon'\n  const layer = registeredShapes[currentShape].getInitialState()\n\n  store.dispatch(addLayer(layer))\n\n  const state = store.getState()\n  store.dispatch(setCurrentLayer(state.layers.byId[state.layers.allIds[0]].id))\n}\n\nif (persistState) {\n  store.subscribe(() => {\n    const state = store.getState()\n\n    saveState({ layers: state.layers }, persistSaveKey)\n  })\n}\n\nexport default store\n","import React, { Component } from 'react'\nimport { Col, Row } from 'react-bootstrap'\nimport { Provider } from 'react-redux'\nimport Header from './Header'\nimport InputTabs from './InputTabs'\nimport MachinePreview from '../preview/MachinePreview'\nimport store from './store'\nimport './App.scss'\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Header />\n\n          <main>\n            <Row className=\"no-gutters\">\n              <Col className=\"full-page d-flex flex-column\">\n                <MachinePreview />\n              </Col>\n\n              <div id=\"sidebar\">\n                <InputTabs />\n              </div>\n            </Row>\n          </main>\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './features/app/reactGA'\nimport App from './features/app/App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}