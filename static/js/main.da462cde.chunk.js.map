{"version":3,"sources":["features/app/logo.svg","features/app/Header.js","features/shapes/shapesSlice.js","components/InputOption.js","components/DropdownOption.js","components/CheckboxOption.js","shapes/Transform.js","features/transforms/transformsSlice.js","common/Geometry.js","shapes/Shape.js","shapes/Polygon.js","shapes/Circle.js","shapes/Star.js","shapes/Reuleaux.js","shapes/Epicycloid.js","shapes/Hypocycloid.js","shapes/Rose.js","shapes/input_text/raysol_cursive.js","shapes/input_text/raysol_sanserif.js","shapes/input_text/Fonts.js","shapes/input_text/InputText.js","shapes/Wiper.js","shapes/v1_engineering/Vicious1Vertices.js","shapes/fractal_spirograph/Orbit.js","shapes/fractal_spirograph/FractalSpirograph.js","common/PriorityQueue.js","common/Graph.js","common/util.js","shapes/tessellation_twist/TessellationTwist.js","common/registeredShapes.js","shapes/Heart.js","shapes/v1_engineering/V1Engineering.js","common/eulerianTrail.js","features/shapes/selectors.js","features/transforms/ScaleTransform.js","features/transforms/RotationTransform.js","features/transforms/TrackTransform.js","features/transforms/Transforms.js","features/shapes/Shape.js","features/shapes/ShapeList.js","features/theta_rho/fileSlice.js","features/theta_rho/ThetaRho.js","features/machine/machineSlice.js","features/machine/RectSettings.js","features/machine/PolarSettings.js","features/machine/MachineSettings.js","features/app/Footer.js","features/app/appSlice.js","features/app/InputTabs.js","common/LimitEnforcer.js","common/Computer.js","features/machine/selectors.js","features/machine/PreviewWindow.js","features/gcode/gCodeSlice.js","features/gcode/selectors.js","features/gcode/GCodeGenerator.js","features/machine/MachinePreview.js","common/localStorage.js","features/app/store.js","features/app/App.js","index.js"],"names":["module","exports","Header","Component","render","className","src","logo","alt","shapesSlice","createSlice","name","initialState","currentId","byId","allIds","reducers","addShape","state","action","shape","payload","id","push","setCurrentShape","localStorage","setItem","updateShape","actions","InputOption","option","this","props","options","optionKey","model","optionType","type","minimum","parseFloat","min","maximum","max","Row","Col","sm","Form","Label","htmlFor","title","Control","step","isNaN","value","onChange","event","attrs","target","DropdownOption","currentChoice","key","index","label","choice","choices","map","CheckboxOption","Check","checked","transformOptions","offsetX","offsetY","numLoops","growValue","spinValue","spinSwitchbacks","trackValue","trackLength","trackGrow","Transform","getInitialState","repeatEnabled","growEnabled","spinEnabled","trackEnabled","trackGrowEnabled","getOptions","transformsSlice","addTransform","transform","meta","updateTransform","toggleRepeat","toggleGrow","toggleSpin","toggleTrack","toggleTrackGrow","Vertex","x","y","speed","f","shapeOptions","startingSize","Shape","constructor","canTransform","selectGroup","getVertices","polygonSides","circleLobes","points","starRatio","reuleauxSides","epicycloidA","epicycloidB","hypocycloidA","hypocycloidB","roseN","roseD","raysol_cursive","raysol_sanserif","billsey","curve","Array","keys","angle","Math","PI","cos","sin","billseyConverter","vertices","newVertices","prevPoint","forEach","vertex","width","abs","height","concat","cv","reverse","maxX","raysolConverter","MonospaceFont","ch","upper","toUpperCase","hasOwnProperty","CursiveFont","inputText","inputFont","wiperAngleDeg","wiperSize","outOfBounds","point","boundPoint","good","bad","size_x","size_y","dx","dy","fixed","Victor","distance","nearEnough","end","clone","subtract","length","Vicious1Vertices","Orbit","r","level","settings","parent","child","sign","alternateRotation","pow","velocity","resolution","addChild","newr","relativeSize","newx","newy","update","rsum","fractalSpirographVelocity","fractalSpirographResolution","fractalSpirographNumCircles","fractalSpirographRelativeSize","fractalSpirographAlternateRotation","PriorityQueue","collection","enqueue","element","isEmpty","added","i","splice","dequeue","shift","mix","u","v","s","result","vec2","args","Graph","nodes","adjacencyList","edges","addNode","node","addEdge","node1","node2","weight","toString","sort","dijkstraShortestPath","startNode","endNode","times","backtrace","pq","Infinity","currentNode","neighbor","time","path","lastStep","unshift","vec_triangle","vec_square","vec_pentagon","vec_hexagon","getEdges","a","b","c","count","da","db","dc","rotate","sqrt","ap","bp","cp","ab","ac","bc","tessellationTwistNumSides","tessellationTwistIterations","tessellationTwistRotate","registeredShapes","polygon","super","star","star_scale","circle","heart","scale","reuleaux","corners","coverageAngle","halfCoverageAngle","startAngle","corn","epicycloid","link","hypocycloid","rose","n","parseInt","d","thetaClose","theta","v1Engineering","prevLetter","chi","letter","search","undefined","vi","widthOffset","fractal_spirograph","numCircles","sun","next","j","tessellation_twist","tessellation","slice","vertexMap","Map","edgeMap","edge","v1","v2","set","graph","prevKey","trail","g","edgePointer","edgeUsed","idReverse","idCount","getId","pushEdge","deg","inDeg","outDeg","directed","check","oddVertex","start","odd","checkDirected","checkUndirected","dfs","to","eulerianTrail","from","values","walkedVertices","walkedEdges","Set","missingEdges","c1","c2","filter","includes","reduce","hash","split","get","edgeKey","walkedKey","walkedVertex","missingVertex","wiper","outputVertices","machine","rectangular","maxY","minY","minX","maxRadius","startLocation","cosa","sina","orig_delta_w","orig_delta_h","temp","multiply","delta_w","delta_h","endLocation","nextWidthPoint","nextHeightPoint","emergency_break","add","corner","getShapes","shapes","getCurrentShapeId","getShapesSelector","createSelector","getCurrentShapeSelector","getCurrentTransformSelector","transforms","getShape","ScaleTransform","activeClassName","active","activeKey","Accordion","defaultActiveKey","Card","Toggle","as","eventKey","onClick","onGrow","Collapse","Body","connect","ownProps","dispatch","RotationTransform","onSpin","TrackTransform","activeGrowClassName","activeGrow","activeGrowKey","onTrack","onTrackGrow","Transforms","onRepeat","optionsRender","Object","optionsListRender","entries","linkRender","rel","href","Button","variant","size","onRestoreDefaults","metashape","getShapeById","metatransform","tAttrs","customStyles","control","base","minHeight","ShapeList","groupOptions","optionLabel","found","group","newOptions","selectedOption","currentShape","styles","maxMenuHeight","selected","fileSlice","comments","zoom","aspectRatio","setFileVertices","setFileName","setFileComments","setFileZoom","toggleFileAspectRatio","ThetaRho","aspectRatioActive","commentsRender","comment","style","cursor","accept","setVertices","display","toggleAspectRatio","setZoom","file","parseThrFile","rv","reader","FileReader","onload","lines","has_vertex","ii","line","trim","indexOf","pointStrings","console","log","thetaRhos","previous","max_angle","deltaAngle","rhoStep","rho","convertToXY","readAsText","files","localMinX","getItem","localMaxX","localMinY","localMaxY","localMaxRadius","machineSlice","rectExpanded","polarExpanded","rectOrigin","polarStartPoint","polarEndPoint","canvasWidth","canvasHeight","sliderValue","updateMachine","assign","toggleMachineRectExpanded","toggleMachinePolarExpanded","setMachineRectOrigin","newValue","setMachineSize","RectSettings","activeCallback","FormControl","onMinXChange","onMaxXChange","onMinYChange","onMaxYChange","ToggleButtonGroup","origin","onOriginChange","ToggleButton","expanded","PolarSettings","onMaxRadiusChange","startPoint","onStartPointChange","endPoint","onEndPointChange","MachineSettings","Footer","appSlice","sandifyVersion","input","chooseInput","InputTabs","handleSelect","Tabs","onSelect","bind","Tab","pointLocation","location","intersection","line_start","line_end","side_start","side_end","side","lineCrossSidePerp","diff","t","clipLine","quadrant_start","quadrant_end","nearestVertex","sides","intersections","int_point","fromObject","Error","lengthSq","midpoint","traceCircle","endAngle","tracePoints","onSegment","clipLineCircle","rad_start","magnitude","rad_end","nearestVertexCircle","direction","normalize","distanceToLine","dt","point1","point2","on","getIntersections","other_point","scale_perc","data","fraction_index","transformed_vertex","offset","loop_period","spin_amount","angleDeg","loop_index","radius","track","polishVertices","outPoint","first","last","vFirst","vLast","nextCorner","addRectEndpoints","cleanVertices","pt","cleanerVertices","enforceRectLimits","enforcePolarLimits","addPolarEndpoints","gcode","transformShapes","fraction","app","x_scale","y_scale","thetaRho","getVerticesStats","numPoints","floor","getTrackVertices","currentTransform","trackVertices","PreviewWindow","componentDidMount","canvas","ReactDOM","findDOMNode","context","getContext","bigBox","document","getElementById","throttledResize","throttle","resize","trailing","window","addEventListener","setTimeout","visible","paint","componentDidUpdate","clearRect","mmToPixelsScale","machine_x","machine_y","use_rect","scale_x","scale_y","mmToPixels","min_scale","moveTo_mm","in_mm","moveTo","lineTo_mm","lineTo","dot_mm","arc","fillStyle","strokeStyle","fill","slice_vertices","begin_fraction","end_fraction","begin_vertex","round","end_vertex","save","beginPath","lineWidth","stroke","drawing_vertices","startColor","Color","colorStep","strokeColor","lighten","hex","showTrack","restore","getComputedStyle","getPropertyValue","onResize","visibilityClass","gCodeSlice","filename","pre","post","show","setGCodeFilename","setGCodePre","setGCodePost","setGCodeShow","toggleGCodeReverse","getComments","download","text","createElement","blob","Blob","navigator","msSaveOrOpenBlob","URL","createObjectURL","createEvent","initEvent","dispatchEvent","click","revokeObjectURL","command","toFixed","thetarho","GCodeGenerator","generateGCode","content","join","close","generateThetaRho","subsampledVertices","delta","deltaSegment","trVertices","previousTheta","previousRawTheta","rawTheta","atan2","deltaTheta","reverseActiveClass","open","Modal","onHide","closeButton","Title","Group","controlId","setFilename","setPre","setPost","toggleReverse","MachinePreview","verticesStats","onSlider","store","configureStore","reducer","combineReducers","appReducer","shapesReducer","transformsReducer","fileReducer","gcodeReducer","machineReducer","storedShape","App"],"mappings":"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AQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,IAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,GAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,IAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,GAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OACrhD,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,GAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,GAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,GAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OACntC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAC7wB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,IAAQ,CAAC,GAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,GAAM,KAAQ,CAAC,KAAM,IAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAClzB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAC74B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACryB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,OACx8B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACzuC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACpwC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,IAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAC9gD,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,IAAM,MA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AAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,OACtsC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ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O,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,KAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAA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MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAC7xB,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACv4B,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,OACriC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC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,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAC7iD,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CA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,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACr0C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MA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C,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACj7C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,OAC9jC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM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AAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACppB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC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KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACz8B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAA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,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACzvB,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO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AO,cAAgB,eACvBA,EAAO,cAAgB,aACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,cACvBA,EAAO,cAAgB,cACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,cACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,aAAe,eACtBA,EAAO,aAAe,eACtBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,cACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,cACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,cACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,aAAe,eACtBA,EAAO,cAAgB,eACvBA,EAAO,aAAe,eACtBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,cACvBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,gBACvBA,EAAO,cAAgB,gBACvBA,EAAO,cAAgB,gBACvBA,EAAO,aAAe,gBACtBA,EAAO,cAAgB,kBACvBA,EAAO,eAAiB,gBACxBA,EAAO,eAAiB,gBACxBA,EAAO,eAAiB,gBACxBA,EAAO,eAAiB,gBACxBA,EAAO,cAAgB,eACvBA,EAAO,eAAiB,eACxBA,EAAO,cAAgB,eACvBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,cACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,cAAgB,cACvBA,EAAO,aAAe,eACtBA,EAAO,cAAgB,eACvBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,cAAgB,eACvBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,cACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,cAAgB,eACvBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,eACvBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,cACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,cACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,cACxBA,EAAO,cAAgB,eACvBA,EAAO,eAAiB,aACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,cACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,cACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,cAAgB,eACvBA,EAAO,cAAgB,cACvBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,eAAiB,eACxBA,EAAO,gBAAkB,cACzBA,EAAO,gBAAkB,eACzBA,EAAO,gBAAkB,eACzBA,EAAO,gBAAkB,eACzBA,EAAO,gBAAkB,eACzBA,GAAQ,iBAAmB,eAC3BA,GAAQ,gBAAkB,eAC1BA,GAAQ,gBAAkB,eAC1BA,GAAQ,gBAAkB,eAC1BA,GAAQ,gBAAkB,cAC1BA,GAAQ,gBAAkB,eAC1BA,GAAQ,eAAiB,cACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,cAAgB,eACxBA,GAAQ,eAAiB,cACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,cACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,cAAgB,eACxBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,cACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,aACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,cACzBA,GAAQ,eAAiB,cACzBA,GAAQ,eAAiB,cACzBA,GAAQ,eAAiB,cACzBA,GAAQ,eAAiB,eACzBA,GAAQ,cAAgB,eACxBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,cAAgB,eACxBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,cACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,cACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,cACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,eACzBA,GAAQ,cAAgB,eACxBA,GAAQ,eAAiB,cACzBA,GAAQ,eAAiB,eACzBA,GAAQ,eAAiB,gBACzBA,GAAQ,cAAgB,iBACxBA,GAAQ,aAAe,gBACvBA,GAAQ,cAAgB,gBACxBA,GAAQ,cAAgB,gBACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,aAAe,eACvBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,cACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,aAAe,eACvBA,GAAQ,cAAgB,eACxBA,GAAQ,aAAe,cACvBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,aAAe,cACvBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,eACxBA,GAAQ,cAAgB,gBCpab,MAAM4E,GACnBpE,YAAYP,EAAGC,EAAG2E,EAAGC,EAAOC,EAAUC,GACpClJ,KAAKmE,EAAIA,EACTnE,KAAKoE,EAAIA,EACTpE,KAAK+I,EAAIA,EACT/I,KAAKmJ,MAAQ,KACbnJ,KAAK+F,MAAQC,KAAKC,GAAG,EACrBjG,KAAKgJ,MAAQA,EACbhJ,KAAKiJ,SAAWA,EAEhB,IAAIG,EAAOpJ,KAAKiJ,SAASI,mBAAqB,EAAI,EAClDrJ,KAAKqE,MAAQ2B,KAAKsD,IAAIL,EAASM,SAAWH,EAAMpJ,KAAKgJ,MAAQ,GAAKhD,KAAKC,GAAK,IAAMgD,EAASO,WAC3FxJ,KAAKkJ,OAASA,EAGhBO,WACE,IAAIC,EAAO1J,KAAK+I,EAAI/I,KAAKiJ,SAASU,aAC9BC,EAAO5J,KAAKmE,EAAInE,KAAK+I,EAAIW,EACzBG,EAAO7J,KAAKoE,EAEhB,OADApE,KAAKmJ,MAAQ,IAAIL,GAAMc,EAAMC,EAAMH,EAAM1J,KAAKgJ,MAAQ,EAAGhJ,KAAKiJ,SAAUjJ,MACjEA,KAAKmJ,MAGdW,SACE,GAAI9J,KAAKkJ,OAAQ,CACflJ,KAAK+F,OAAS/F,KAAKqE,MAEnB,IAAI0F,EAAO/J,KAAK+I,EAAI/I,KAAKkJ,OAAOH,EAChC/I,KAAKmE,EAAInE,KAAKkJ,OAAO/E,EAAI4F,EAAO/D,KAAKE,IAAIlG,KAAK+F,OAC9C/F,KAAKoE,EAAIpE,KAAKkJ,OAAO9E,EAAI2F,EAAO/D,KAAKG,IAAInG,KAAK+F,SCzBpD,MAAM7F,GAAO,eACRqE,EADQ,GAER,CACDyF,0BAA2B,CACzB9I,MAAO,WACPT,IAAK,GAEPwJ,4BAA6B,CAC3B/I,MAAO,aACPT,IAAK,GAEPyJ,4BAA6B,CAC3BhJ,MAAO,oBACPT,IAAK,EACLE,IAAK,GAEPwJ,8BAA+B,CAC7BjJ,MAAO,yCACPT,IAAK,EACLE,IAAK,GAEPyJ,mCAAoC,CAClClJ,MAAO,kCACPZ,KAAM,cC3BL,MAAM+J,GACX3F,cACE1E,KAAKsK,WAAa,GAGpBC,QAAQC,GACN,GAAIxK,KAAKyK,UACPzK,KAAKsK,WAAW9K,KAAKgL,OAChB,CACL,IAAIE,GAAQ,EACZ,IAAK,IAAIC,EAAI,EAAGA,GAAK3K,KAAKsK,WAAW1B,OAAQ+B,IAC3C,GAAIH,EAAQ,GAAKxK,KAAKsK,WAAWK,EAAE,GAAG,GAAG,CACvC3K,KAAKsK,WAAWM,OAAOD,EAAE,EAAG,EAAGH,GAC/BE,GAAQ,EACR,MAICA,GACH1K,KAAKsK,WAAW9K,KAAKgL,IAK3BK,UAEE,OADY7K,KAAKsK,WAAWQ,QAI9BL,UACE,OAAmC,IAA3BzK,KAAKsK,WAAW1B,QC5BrB,MAAMmC,GAAM,CAACC,EAAGC,EAAGC,KAExB,IADA,IAAIC,EAAS,GACJR,EAAI,EAAGA,EAAIK,EAAEpC,SAAU+B,EAC9BQ,EAAO3L,MAAM,EAAM0L,GAAKF,EAAEL,GAAKO,EAAID,EAAEN,IAGvC,OAAOQ,GAGIC,GAAO,IAAIC,KACtB,OAAQA,EAAKzC,QACX,KAAK,EAAGyC,EAAK7L,KAAK,GAAM,MACxB,QAAS6L,EAAK7L,KAAK,GAGrB,OAAO6L,EAAKT,OAAO,EAAG,IAGjB,MAAMU,GACX5G,cACE1E,KAAKuL,MAAQ,GACbvL,KAAKwL,cAAgB,GACrBxL,KAAKyL,MAAQ,GAGfC,QAAQC,GACN3L,KAAKuL,MAAM/L,KAAKmM,GAChB3L,KAAKwL,cAAcG,GAAQ,GAG7BC,QAAQC,EAAOC,EAAOC,EAAO,GAC3B/L,KAAKwL,cAAcK,GAAOrM,KAAK,CAACmM,KAAKG,EAAOC,OAAQA,IACpD/L,KAAKwL,cAAcM,GAAOtM,KAAK,CAACmM,KAAKE,EAAOE,OAAQA,IACpD/L,KAAKyL,MAAMjM,KAAK,CAACqM,EAAMG,WAAYF,EAAME,YAAYC,OAAOD,YAG9DE,qBAAqBC,EAAWC,GAC9B,IAAIC,EAAQ,GACRC,EAAY,GACZC,EAAK,IAAIlC,GAYb,IAVAgC,EAAMF,GAAa,EAEnBnM,KAAKuL,MAAM/E,QAAQmF,IACbA,IAASQ,IACXE,EAAMV,GAAQa,OAIlBD,EAAGhC,QAAQ,CAAC4B,EAAW,KAEfI,EAAG9B,WAAW,CACpB,IACIgC,EADeF,EAAG1B,UACS,GAC/B7K,KAAKwL,cAAciB,GAAajG,QAAQkG,IACtC,IAAIC,EAAON,EAAMI,GAAeC,EAASX,OAErCY,EAAON,EAAMK,EAASf,QACxBU,EAAMK,EAASf,MAAQgB,EACvBL,EAAUI,EAASf,MAAQc,EAC3BF,EAAGhC,QAAQ,CAACmC,EAASf,KAAMgB,OAKjC,IAAIC,EAAO,CAACR,GACRS,EAAWT,EACf,KAAMS,IAAaV,GACjBS,EAAKE,QAAQR,EAAUO,IACvBA,EAAWP,EAAUO,GAGvB,OAAOD,GC1EJ,MCMDG,GAAe,CACnB3B,IAAM,KAAO,aACbA,GAAM,KAAO,aACbA,GAAM,EAAM,cAGR4B,GAAa,CACjB5B,IAAM,IAAM,IACZA,GAAM,GAAM,IACZA,IAAM,GAAM,IAEZA,IAAM,IAAM,IACZA,GAAM,GAAM,IACZA,GAAM,IAAM,KAGd,IAAI6B,GAAe,CACjB7B,GAAK,EAAK,GACVA,GAAK,GAAM,GACXA,IAAM,SAAW,SAEjBA,GAAK,EAAK,GACVA,IAAM,SAAW,SACjBA,IAAM,QAAU,SAEhBA,GAAK,EAAK,GACVA,IAAM,QAAU,SAChBA,GAAK,QAAU,SAEfA,GAAK,EAAK,GACVA,GAAK,QAAU,SACfA,GAAK,SAAW,SAEhBA,GAAK,EAAK,GACVA,GAAK,SAAW,SAChBA,GAAK,GAAM,IAGT8B,GAAc,CAChB9B,GAAK,EAAK,GACVA,GAAK,GAAM,GACXA,IAAM,SAAW,IAEjBA,GAAK,EAAK,GACVA,IAAM,SAAW,IACjBA,IAAM,QAAU,IAEhBA,GAAK,EAAK,GACVA,IAAM,QAAU,IAChBA,GAAK,EAAK,GAEVA,GAAK,EAAK,GACVA,GAAK,EAAK,GACVA,GAAK,QAAU,IAEfA,GAAK,EAAK,GACVA,GAAK,QAAU,IACfA,GAAK,SAAW,IAEhBA,GAAK,EAAK,GACVA,GAAK,SAAW,IAChBA,GAAK,GAAM,IAGb,SAAS+B,GAAS1B,EAAO2B,EAAGC,EAAGC,EAAGC,EAAOtE,GACvC,IAAIuE,EAAIC,EAAIC,EAEZ,GAAc,IAAVH,EAAa,CACXtE,EAAS0E,OAAS,GACpBH,EAAKxH,KAAK4H,KAAK5H,KAAKsD,IAAI8D,EAAE,GAAI,GAAKpH,KAAKsD,IAAI8D,EAAE,GAAI,KAAOnE,EAAS0E,OAAS3H,KAAKC,GAAK,KACrFwH,EAAKzH,KAAK4H,KAAK5H,KAAKsD,IAAI+D,EAAE,GAAI,GAAKrH,KAAKsD,IAAI+D,EAAE,GAAI,KAAOpE,EAAS0E,OAAS3H,KAAKC,GAAK,KACrFyH,EAAK1H,KAAK4H,KAAK5H,KAAKsD,IAAIgE,EAAE,GAAI,GAAKtH,KAAKsD,IAAIgE,EAAE,GAAI,KAAOrE,EAAS0E,OAAS3H,KAAKC,GAAK,OAErFuH,EAAMvE,EAAS0E,OAAS3H,KAAKC,GAAK,IAClCwH,EAAMxE,EAAS0E,OAAS3H,KAAKC,GAAK,IAClCyH,EAAMzE,EAAS0E,OAAS3H,KAAKC,GAAK,KAGpC,IAAI4H,EAAKzC,GACNgC,EAAE,GAAKpH,KAAKE,IAAIsH,GAAQJ,EAAE,GAAKpH,KAAKG,IAAIqH,GACxCJ,EAAE,GAAKpH,KAAKG,IAAIqH,GAAQJ,EAAE,GAAKpH,KAAKE,IAAIsH,IACvCM,EAAK1C,GACNiC,EAAE,GAAKrH,KAAKE,IAAIuH,GAAQJ,EAAE,GAAKrH,KAAKG,IAAIsH,GACxCJ,EAAE,GAAKrH,KAAKG,IAAIsH,GAAQJ,EAAE,GAAKrH,KAAKE,IAAIuH,IACvCM,EAAK3C,GACNkC,EAAE,GAAKtH,KAAKE,IAAIwH,GAAQJ,EAAE,GAAKtH,KAAKG,IAAIuH,GACxCJ,EAAE,GAAKtH,KAAKG,IAAIuH,GAAQJ,EAAE,GAAKtH,KAAKE,IAAIwH,IAG3C,YADAjC,EAAMjM,KAAK,CAACqO,EAAIC,GAAK,CAACD,EAAIE,GAAK,CAACD,EAAIC,IAItC,IAAIC,EAAKjD,GAAIqC,EAAGC,EAAG,IACfY,EAAKlD,GAAIqC,EAAGE,EAAG,IACfY,EAAKnD,GAAIsC,EAAGC,EAAG,IAEnBH,GAAS1B,EAAOuC,EAAIC,EAAIC,EAAIX,EAAQ,EAAGtE,GACvCkE,GAAS1B,EAAO6B,EAAGW,EAAIC,EAAIX,EAAQ,EAAGtE,GACtCkE,GAAS1B,EAAO4B,EAAGa,EAAIF,EAAIT,EAAQ,EAAGtE,GACtCkE,GAAS1B,EAAO2B,EAAGY,EAAIC,EAAIV,EAAQ,EAAGtE,GAGxC,MAAM/I,GAAO,eACRqE,EADQ,GAER,CACD4J,0BAA2B,CACzBjN,MAAO,kBACPT,IAAK,EACLE,IAAK,GAEPyN,4BAA6B,CAC3BlN,MAAO,aACPT,IAAK,EACLE,IAAK,GAEP0N,wBAAyB,CACvBnN,MAAO,mBACPE,KAAM,EACNX,IAAK,KC3GJ,MAAM6N,GAAmB,CAC9BC,QAAS,InBLI,cAAsB9J,EACnCC,cACE8J,MAAM,WAGRvL,kBACE,OAAO,eACFuL,MAAMvL,kBADX,GAEK,CACD3C,KAAM,UACNwE,aAAc,IAKpBD,YAAY1F,GACV,IAAI6F,EAAS,GACb,IAAK,IAAI2F,EAAE,EAAGA,EAAExL,EAAME,MAAMyF,aAAc6F,IAAK,CAC7C,IAAI5E,EAAkB,EAAVC,KAAKC,GAAW9G,EAAME,MAAMyF,cAAgB,GAAM6F,GAC9D3F,EAAOxF,KAAK0E,EAAO8B,KAAKE,IAAIH,GAAQC,KAAKG,IAAIJ,KAE/C,OAAOf,EAGTzB,aACE,OAAOrD,ImBnBTuO,KAAM,IjBDO,cAAmBhK,EAChCC,cACE8J,MAAM,QAGRvL,kBACE,OAAO,eACFuL,MAAMvL,kBADX,GAEK,CACD3C,KAAM,OACN0E,OAAQ,EACRC,UAAW,KAKjBJ,YAAY1F,GACV,IAAI6F,EAAS,GACb,IAAK,IAAI2F,EAAE,EAAGA,EAAuB,EAArBxL,EAAME,MAAM2F,OAAY2F,IAAK,CAC3C,IAAI5E,EAAkB,EAAVC,KAAKC,IAAY,EAAM9G,EAAME,MAAM2F,QAAU2F,EACrD+D,EAAa,EACb/D,EAAI,IAAM,IACZ+D,GAAcvP,EAAME,MAAM4F,WAE5BD,EAAOxF,KAAK0E,EAAOwK,EAAa1I,KAAKE,IAAIH,GAAQ2I,EAAa1I,KAAKG,IAAIJ,KAEzE,OAAOf,EAGTzB,aACE,OAAOrD,IiB5BTyO,OAAQ,IlBPK,cAAqBlK,EAClCC,cACE8J,MAAM,UAGRvL,kBACE,OAAO,eACFuL,MAAMvL,kBADX,GAEK,CACD3C,KAAM,SACNyE,YAAa,IAKnBF,YAAY1F,GACV,IAAI6F,EAAS,GACb,IAAK,IAAI2F,EAAE,EAAGA,EAAE,IAAKA,IAAK,CACxB,IAAI5E,EAAkB,EAAVC,KAAKC,GAAW,IAAQ0E,EACpC3F,EAAOxF,KAAK0E,EAAO8B,KAAKE,IAAIH,GAAQC,KAAKG,IAAIhH,EAAME,MAAM0F,YAAcgB,GAAO5G,EAAME,MAAM0F,cAE5F,OAAOC,EAGTzB,aACE,OAAOrD,IkBjBT0O,MAAO,IClBM,cAAoBnK,EACjCC,cACE8J,MAAM,SAGRvL,kBACE,OAAO,eACFuL,MAAMvL,kBADX,GAEK,CACD3C,KAAM,UAKZuE,YAAY1F,GACV,IAAI6F,EAAS,GACb,IAAK,IAAI2F,EAAE,EAAGA,EAAE,IAAKA,IAAK,CACxB,IAAI5E,EAAkB,EAAVC,KAAKC,GAAW,IAAQ0E,EAChCkE,EAAQ,GAEZ7J,EAAOxF,KAAK0E,EAAe,EAAR2K,EAAc7I,KAAKsD,IAAItD,KAAKG,IAAIJ,GAAQ,GACxC8I,GAAS,GAAK,GAAO7I,KAAKE,IAAIH,IAClB,EAAI,GAAOC,KAAKE,IAAI,EAAMH,IAC1B,EAAI,GAAOC,KAAKE,IAAI,EAAMH,IAC1B,EAAI,GAAOC,KAAKE,IAAI,EAAMH,MAE3D,OAAOf,IDPT8J,SAAU,IhBRG,cAAuBrK,EACpCC,cACE8J,MAAM,YAGRvL,kBACE,OAAO,eACFuL,MAAMvL,kBADX,GAEK,CACD3C,KAAM,WACN4E,cAAe,IAKrBL,YAAY1F,GACV,IAAI6F,EAAS,GAET+J,EAAU,GAEVhJ,EAAQC,KAAKC,GAAG,EAEhB+I,EAAgBhJ,KAAKC,GAAG9G,EAAME,MAAM6F,cACpC+J,EAAoB,GAAMD,EAC9B,IAAK,IAAI1B,EAAE,EAAGA,EAAEnO,EAAME,MAAM6F,cAAeoI,IAAK,CAC9C,IAAI4B,EAAanJ,EAAQC,KAAKC,GAAKgJ,EACnCF,EAAQvP,KAAM,CAAC0E,EAAO8B,KAAKE,IAAIH,GAAQC,KAAKG,IAAIJ,IAASmJ,IACzDnJ,GAAS,EAAMC,KAAKC,GAAK9G,EAAME,MAAM6F,cAEvC,IAAI0D,EAAS,GAAM5C,KAAKE,IAAIF,KAAKC,GAAG,EAAI9G,EAAME,MAAM6F,eAEpD,IAAK,IAAIiK,EAAK,EAAGA,EAAOJ,EAAQnG,OAAQuG,IACtC,IAAK,IAAIxE,EAAE,EAAGA,EAAE,IAAKA,IAAK,CACxB,IAAI5E,EAAQiJ,GAAkBrE,EAAI,KAASoE,EAAQI,GAAM,GACzDnK,EAAOxF,KAAK0E,EAJF,KAIkB0E,EAASmG,EAAQI,GAAM,GAAGhL,EAAI6B,KAAKE,IAAIH,IAJzD,KAKkB6C,EAASmG,EAAQI,GAAM,GAAG/K,EAAI4B,KAAKG,IAAIJ,MAGvE,OAAOf,EAGTzB,aACE,OAAOrD,KgBjCTkP,WAAY,IfNC,cAAyB3K,EACtCC,cACE8J,MAAM,UACNxO,KAAKqP,KAAO,+CAGdpM,kBACE,OAAO,eACFuL,MAAMvL,kBADX,GAEK,CACD3C,KAAM,aACN6E,YAAa,EACbC,YAAa,MAKnBP,YAAY1F,GACV,IAAI6F,EAAS,GACToI,EAAI5M,WAAWrB,EAAME,MAAM8F,aAC3BkI,EAAI7M,WAAWrB,EAAME,MAAM+F,aAE/B,IAAK,IAAIuF,EAAE,EAAGA,EAAE,IAAKA,IAAK,CACxB,IAAI5E,EAAkB,EAAVC,KAAKC,GAAW,IAAQ0E,EAChCkE,EAAQ,IACZ7J,EAAOxF,KAAK0E,EAAO2K,GAASzB,EAAIC,GAAKrH,KAAKE,IAAIH,GAAS8I,EAAQxB,EAAIrH,KAAKE,KAAMkH,EAAIC,GAAKA,EAAKtH,GACzE8I,GAASzB,EAAIC,GAAKrH,KAAKG,IAAIJ,GAAS8I,EAAQxB,EAAIrH,KAAKG,KAAMiH,EAAIC,GAAKA,EAAKtH,KAE9F,OAAOf,EAGTzB,aACE,OAAOrD,KezBToP,YAAa,IdPA,cAAmB7K,EAChCC,cACE8J,MAAM,OACNxO,KAAKqP,KAAO,gDAGdpM,kBACE,OAAO,eACFuL,MAAMvL,kBADX,GAEK,CACD3C,KAAM,cACN+E,aAAc,IACdC,aAAc,MAKpBT,YAAY1F,GACV,IAAI6F,EAAS,GACToI,EAAI5M,WAAWrB,EAAME,MAAMgG,cAC3BgI,EAAI7M,WAAWrB,EAAME,MAAMiG,cAE/B,IAAK,IAAIqF,EAAE,EAAGA,EAAE,IAAKA,IAAK,CACxB,IAAI5E,EAAkB,EAAVC,KAAKC,GAAW,IAAQ0E,EAChCkE,EAAQ,IACZ7J,EAAOxF,KAAK0E,EAAO2K,GAASzB,EAAIC,GAAKrH,KAAKE,IAAIH,GAAS8I,EAAQxB,EAAIrH,KAAKE,KAAMkH,EAAIC,GAAKA,EAAKtH,GACzE8I,GAASzB,EAAIC,GAAKrH,KAAKG,IAAIJ,GAAS8I,EAAQxB,EAAIrH,KAAKG,KAAMiH,EAAIC,GAAKA,EAAKtH,KAE9F,OAAOf,EAGTzB,aACE,OAAOrD,KcxBTqP,KAAM,IbNO,cAAmB9K,EAChCC,cACE8J,MAAM,QACNxO,KAAKqP,KAAO,yCAGdpM,kBACE,OAAO,eACFuL,MAAMvL,kBADX,GAEK,CACD3C,KAAM,OACNiF,MAAO,EACPC,MAAO,IAKbX,YAAY1F,GACV,IAAI6F,EAAS,GAETwK,EAAIC,SAAStQ,EAAME,MAAMkG,OACzBmK,EAAID,SAAStQ,EAAME,MAAMmG,OAEzBmK,EAAaD,GADRF,EAAIE,EAAI,IAAM,EAAK,EAAI,GACP,GAAKF,EAC1BhG,EAAa,GAAKgG,EAEtB,IAAK,IAAI7E,EAAE,EAAGA,EAAEgF,EAAW,EAAGhF,IAAK,CACjC,IAAIiF,EAAkB,EAAV5J,KAAKC,GAAYuD,EAAcmB,EACvC5B,EAAI,EAAU/C,KAAKG,IAAKqJ,EAAIE,EAAKE,GACrC5K,EAAOxF,KAAK0E,EAAO6E,EAAI/C,KAAKE,IAAI0J,GAAQ7G,EAAI/C,KAAKG,IAAIyJ,KAEvD,OAAO5K,EAGTzB,aACE,OAAOrD,Ka5BT2P,cAAe,IEvBF,cAA4BpL,EACzCC,cACE8J,MAAM,iBAGRvL,kBACE,OAAO,eACFuL,MAAMvL,kBADX,GAEK,CACD3C,KAAM,kBAKZuE,YAAY1F,GACV,OAAO0J,OFSTrB,UAAW,ITRE,cAAwB/C,EACrCC,cACE8J,MAAM,QAGRvL,kBACE,OAAO,eACFuL,MAAMvL,kBADX,GAEK,CACD3C,KAAM,YACNkH,UAAW,UACXC,UAAW,UACXvE,eAAe,EACfsB,aAAc,KAKpBK,YAAY1F,GACV,IAAI6F,EAAS,GACT8K,EAAa,GACb3L,EAAI,EACR,IAAK,IAAI4L,EAAM,EAAGA,EAAM5Q,EAAME,MAAMmI,UAAUoB,OAAQmH,IAAO,CAC3D,IAAIC,EAAS7Q,EAAME,MAAMmI,UAAUuI,GAChB,MAAfD,GAAqC,MAAfA,GAAqC,MAAfA,GAAqC,MAAfA,GACpEA,EAAaE,GACqB,IAA9BA,EAAOC,OAAO,YAA+C,YAA1B9Q,EAAME,MAAMoI,YAEjDuI,GAAkB,MAIpBF,EAAaE,EAGf,IAAI3Q,OAAQ6Q,EACkB,YAA1B/Q,EAAME,MAAMoI,UACdpI,EAAQkI,GAAYyI,GACe,eAA1B7Q,EAAME,MAAMoI,WDuGCN,ECtGA6I,EAAtB3Q,EDuGFoG,GAAe6B,eAAeH,GACzBF,GAAgBvB,GAAgByB,IAEhCF,GAAgBvB,GAAgB,OCxGnCrG,EADmC,cAA1BF,EAAME,MAAMoI,UACbP,GAAc8I,GAGdzI,GAAYyI,GAGtB,IAAK,IAAIG,EAAK,EAAGA,EAAK9Q,EAAMgH,SAASuC,OAAQuH,IAC3CnL,EAAOxF,KAAK0E,EAAO7E,EAAMgH,SAAS8J,GAAIhM,EAAIA,EAAG9E,EAAMgH,SAAS8J,GAAI/L,IAElED,GAAK9E,EAAMgH,SAAShH,EAAMgH,SAASuC,OAAO,GAAGzE,ED2FrBgD,MCzF1B,IAAIiJ,EAAcjM,EAAI,EACtB,OAAOa,EAAO9C,IAAM2F,GACX3D,EAAO2D,EAAM1D,EAAIiM,EAAavI,EAAMzD,IAI/Cb,aACE,OAAOrD,KSlDTmQ,mBAAoB,ILKP,cAAgC5L,EAC7CC,cACE8J,MAAM,sBACNxO,KAAKqP,KAAO,uEAGdpM,kBACE,OAAO,eACFuL,MAAMvL,kBADX,GAEK,CACD3C,KAAM,qBACN4C,eAAe,EACfsB,aAAc,GACdwF,0BAA2B,EAC3BC,4BAA6B,EAC7BC,4BAA6B,EAC7BC,8BAA+B,EAC/BC,oCAAoC,IAK1CvF,YAAY1F,GACV,IAWIsJ,EAXAe,EAAaiG,SAAStQ,EAAME,MAAM4K,6BAClChB,EAAW,CACbO,WAAYA,EACZD,SAAUkG,SAAStQ,EAAME,MAAM2K,2BAC/BsG,WAAYb,SAAStQ,EAAME,MAAM6K,6BACjCP,aAAc8F,SAAStQ,EAAME,MAAM8K,+BACnCd,kBAAmBlK,EAAME,MAAM+K,oCAG7BmG,EAAM,IAAIzH,GAAM,EAAG,EAAG,EAAG,EAAGG,GAC5BuH,EAAOD,EAEPvL,EAAS,GAEb,IAAK,IAAI2F,EAAE,EAAGA,EAAE1B,EAASqH,WAAY3F,IACnC6F,EAAOA,EAAK/G,WAEdhB,EAAM+H,EAEN,IAAK,IAAI7F,EAAE,EAAGA,EAAEnB,EAAYmB,IAC1B,IAAK,IAAI8F,EAAE,EAAGA,EAAE,IAAKA,IAAK,CACxB,IAAID,EAAOD,EAEX,KAAe,MAARC,GACLA,EAAK1G,SACL0G,EAAOA,EAAKrH,MAGdnE,EAAOxF,KAAK0E,EAAOuE,EAAItE,EAAGsE,EAAIrE,IAIlC,OAAOY,EAGTzB,aACE,OAAOrD,KK/DTwQ,mBAAoB,IDqGP,cAAgCjM,EAC7CC,cACE8J,MAAM,sBAGRvL,kBACE,OAAO,eACFuL,MAAMvL,kBADX,GAEK,CACD3C,KAAM,qBACNkE,aAAc,IACdtB,eAAe,EACfiL,0BAA2B,EAC3BC,4BAA6B,EAC7BC,wBAAyB,IAK/BxJ,YAAY1F,GACV,IAAIkH,EACAoF,EAAQ,GACZ,MAAMkF,EAAelB,SAAStQ,EAAME,MAAM+O,6BAG1C,OAFcqB,SAAStQ,EAAME,MAAM8O,4BAGjC,QACA,KAAK,EACH9H,EAAW0G,GAAa6D,MAAM,GAC9B,MACF,KAAK,EACHvK,EAAW2G,GAAW4D,MAAM,GAC5B,MACF,KAAK,EACHvK,EAAW4G,GAAa2D,MAAM,GAC9B,MACF,KAAK,EACHvK,EAAW6G,GAAY0D,MAAM,GAKjC,IAAK,IAAIjG,EAAI,EAAGA,EAAItE,EAASuC,OAAQ+B,GAAK,EACxCwC,GAAS1B,EAAOpF,EAASsE,EAAI,GAAItE,EAASsE,EAAI,GAAItE,EAASsE,EAAI,GAC7DgG,EAAc,CAAEhD,OAAQ8B,SAAStQ,EAAME,MAAMgP,2BAMjD,IAAIwC,EAAY,IAAIC,IAChBC,EAAU,IAAID,IAElBrF,EAAMjF,QAASwK,IACb,IAAIC,EAAKD,EAAK,GACVE,EAAKF,EAAK,GACV1P,EAAQ,CAAC2P,EAAGjF,WAAYkF,EAAGlF,YAE/B6E,EAAUM,IAAIF,EAAGjF,WAAYiF,GAC7BJ,EAAUM,IAAID,EAAGlF,WAAYkF,GAC7BH,EAAQI,IAAI7P,EAAM2K,OAAOD,WAAY1K,KAIvC,IAAI8P,EAAQ,IAAI9F,GAChBuF,EAAUrK,QAAQ,CAACC,EAAQ5E,IAAQuP,EAAM1F,QAAQ7J,IACjDkP,EAAQvK,QAAQ,CAACwK,EAAMnP,IAAQuP,EAAMxF,QAAQoF,EAAK,GAAIA,EAAK,KAG3D,IAEIK,EADAC,EItMO,SAASpR,GACtB,IACIyK,EADA4G,EAAI,GAEJC,EAAc,GACdC,EAAW,GACXH,EAAQ,GAER/R,EAAK,GACLmS,EAAY,GACZC,EAAU,EAEd,SAASC,EAAMzN,GAMb,OALK5E,EAAG+H,eAAenD,KACrBqN,EAAYG,GAAW,EACvBD,EAAUC,GAAWxN,EACrB5E,EAAG4E,GAAKwN,KAEHpS,EAAG4E,GAgBZ,SAAS0N,EAAS7G,EAAGC,EAAG1L,GACtBgS,EAAEvG,GAAKuG,EAAEvG,IAAM,GACfuG,EAAEtG,GAAKsG,EAAEtG,IAAM,GACfsG,EAAEvG,GAAGxL,KAAK,CAACyL,EAAG1L,IAGhB,IAAIuS,EAAM,GACNC,EAAQ,GAAIC,EAAS,GAEzB,IAAKrH,EAAI,EAAGA,EAAIzK,EAAQuL,MAAM7C,OAAQ+B,GAAK,EAAG,CAC5C,IAAIqG,EAAO9Q,EAAQuL,MAAMd,GACrBK,EAAI4G,EAAMZ,EAAK,IACf/F,EAAI2G,EAAMZ,EAAK,IAEnBa,EAAS7G,EAAGC,EAAGN,GACVzK,EAAQ+R,UACXJ,EAAS5G,EAAGD,EAAGL,GAGbzK,EAAQ+R,UACVD,EAAOhH,GAAKgH,EAAOhH,IAAM,EACzB+G,EAAM/G,GAAK+G,EAAM/G,IAAM,EACvBgH,EAAO/G,GAAK+G,EAAO/G,IAAM,EACzB8G,EAAM9G,GAAK8G,EAAM9G,IAAM,EACvB+G,EAAOhH,IAAM,EACb+G,EAAM9G,IAAM,IAEZ6G,EAAI9G,GAAK8G,EAAI9G,IAAM,EACnB8G,EAAI7G,GAAK6G,EAAI7G,IAAM,EACnB6G,EAAI9G,IAAM,EACV8G,EAAI7G,IAAM,GAgCd,IAAIiH,EAAQhS,EAAQ+R,SA5BpB,WACE,IAAIE,EAAY,EACZC,EAAQ,EAEZ,IAAKzH,EAAI,EAAGA,EAAIgH,EAAShH,GAAK,EACxBqH,EAAOrH,GAAKoH,EAAMpH,KAAO,IACvBqH,EAAOrH,GAAKoH,EAAMpH,KACpByH,EAAQzH,GAEVwH,GAAa,GAGjB,MAAO,CAACE,IAAKF,EAAWC,MAAOA,GAgBFE,GAb/B,WACE,IAAIH,EAAY,EACZC,EAAQ,EAEZ,IAAKzH,EAAI,EAAGA,EAAIgH,EAAShH,GAAK,EACxBmH,EAAInH,GAAK,IAAM,IACjByH,EAAQzH,EACRwH,GAAa,GAGjB,MAAO,CAACE,IAAKF,EAAWC,MAAOA,GAGgBG,GAajD,OAZIL,EAAMG,IAAM,IAAM,GAAKH,EAAMG,IA5EjC,SAASG,EAAIvH,GACX,KAAOuG,EAAYvG,GAAKsG,EAAEtG,GAAGrC,OAAQ4I,EAAYvG,IAAM,EAAG,CACxD,IAAI+F,EAAOO,EAAEtG,GAAGuG,EAAYvG,IACxBwH,EAAKzB,EAAK,GACVzR,EAAKyR,EAAK,GACTS,EAASlS,KACZkS,EAASlS,IAAM,EACfiT,EAAIC,IAGRnB,EAAM9R,KAAKyL,GAqEbuH,CAAIN,EAAME,OAENd,EAAM1I,OAAW1I,EAAQuL,MAAM7C,OAInC0I,EAAMvK,UAGCuK,EAAMpP,KAAI,SAAU3C,GACzB,OAAOmS,EAAUnS,MJyFLmT,CAAc,CAACjH,MADd5F,MAAM8M,KAAK5B,EAAQ6B,YAG5BC,EAAiB,GACrB,IAAIC,EAAc,GAOlB,IAAKnI,EAAI,EAAGA,EAAI2G,EAAM1I,OAAO,EAAG+B,IAAK,CACnC,IAAIqG,EAAO,CAACM,EAAM3G,GAAI2G,EAAM3G,EAAE,IAAIsB,OAAOD,WACzC8G,EAAYtT,KAAKwR,GAEnB8B,EAAcjN,MAAM8M,KAAK,IAAII,IAAID,IACjC,IAAIE,GDvN2BC,ECuNDH,EDvNKI,ECuNQ9B,EAAM3F,MDtN5CwH,EAAGE,OAAOhP,IAAM+O,EAAGE,SAASjP,IAAI0C,OAAOqM,EAAGC,OAAOhP,IAAM8O,EAAGG,SAASjP,MCsNhBkP,OAAO,CAACC,EAAM5D,KAEpE4D,GADA5D,EAAIA,EAAE6D,MAAM,MACL,GAAK,IAAM7D,EAAE,IAAMA,EAAE,GAAK,IAAMA,EAAE,GAClC4D,GACN,ID3NmB,IAASL,EAAIC,ECmQnC,OAtCA5B,EAAM9K,QAAQ,CAAC3E,EAAKC,KAClB,IAAI2E,EAASoK,EAAU2C,IAAI3R,GAE3B,GAAIwP,EAAS,CACX,IAAIoC,EAAU,CAAC5R,EAAKwP,GAASpF,OAAOD,WAEpC,GAAK+E,EAAQyC,IAAIC,GAUfZ,EAAerT,KAAK8I,KAAO7B,EAAO,GAAIA,EAAO,SAVpB,CAEzB,IAAImG,EAAOwE,EAAMlF,qBAAqBmF,EAASxP,GAC/C+K,EAAK9B,QACL8B,EAAKpG,QAASkN,IACZ,IAAIC,EAAe9C,EAAU2C,IAAIE,GACjCb,EAAerT,KAAK8I,KAAOqL,EAAa,GAAIA,EAAa,OAE3Dd,EAAerT,KAAK8I,KAAO7B,EAAO,GAAIA,EAAO,WAK/CoM,EAAerT,KAAK8I,KAAO7B,EAAO,GAAIA,EAAO,KAI/C,GAAIuM,EAAanR,GAAM,CACrB,IAAI+R,EAAgB/C,EAAU2C,IAAIR,EAAanR,IAC3C4R,EAAU,CAAC5R,EAAKmR,EAAanR,IAAMoK,OAAOD,WAE1C+E,EAAQyC,IAAIC,KAEdZ,EAAerT,KAAK8I,KAAOsL,EAAc,GAAIA,EAAc,KAC3Df,EAAerT,KAAK8I,KAAO7B,EAAO,GAAIA,EAAO,aAExCuM,EAAanR,GAGtBwP,EAAUxP,IAGLgR,EAGTtP,aACE,OAAOrD,KCzOT2T,MAAO,IR8CM,cAAoBpP,EACjCC,cACE8J,MAAM,SAGRvL,kBACE,OAAO,eACFuL,MAAMvL,kBADX,GAEK,CACD3C,KAAM,QACNoH,cAAe,GACfC,UAAW,GACXnD,aAAc,EACdtB,eAAe,EACf0B,YAAa,UACbD,cAAc,IAKpBE,YAAY1F,GACV,IAAI2U,EAAiB,GAGrB,IAAI/N,GAAS,IAAS5G,EAAME,MAAMqI,cAAgB,KAAQ,IACtD3B,EAAQ,IACVA,GAAS,KAEXA,EAAiBA,Eb3FN,IAAQC,KAAKC,Ga8FxB,IAAIW,EAAS,EACTF,EAAQ,EACRqN,EAAU5U,EAAM4U,QAChBA,EAAQC,aACVpN,EAASmN,EAAQE,KAAOF,EAAQG,KAChCxN,EAAQqN,EAAQ/M,KAAO+M,EAAQI,OAE/BvN,EAA6B,EAApBmN,EAAQK,UACjB1N,EAAQE,GAGV,IAAIyN,EAAgB/L,MAAQ5B,EAAM,EAAKE,EAAO,GAC1C0N,EAAOtO,KAAKE,IAAIH,GAChBwO,EAAOvO,KAAKG,IAAIJ,GAGhBC,KAAKW,IAAI2N,GAAQ,QACnBA,EAAO,OAELtO,KAAKW,IAAI4N,GAAQ,QACnBA,EAAO,OAET,IAAIC,EAAelM,KAAOnJ,EAAME,MAAMsI,UAAY2M,EAAM,GACpDG,EAAenM,KAAO,GAAMnJ,EAAME,MAAMsI,UAAY4M,GAExD,GAAIxO,EAAQC,KAAKC,GAAG,GAAOF,EAAQ,IAAOC,KAAKC,GAAI,CAEjD,IAAIyO,EAAOF,EAAa9L,QACxB8L,EAAeC,EAAa/L,QAC5B+L,EAAeC,EAEb3O,EAAQC,KAAKC,GAAG,IAClBoO,EAAgB/L,MAAQ5B,EAAM,GAAME,EAAO,GAC3C4N,EAAeA,EAAa9L,QAAQiM,SAASrM,MAAQ,GAAM,IAC3DmM,EAAeA,EAAa/L,QAAQiM,SAASrM,MAAQ,GAAM,KAE7D,IAAIsM,EAAUJ,EACVK,EAAUJ,EACVK,EAAcT,EAAc3L,QAAQiM,SAASrM,MAAQ,GAAM,IAC/DwL,EAAetU,KAAK6U,GACpB,IAAIU,EAAiBV,EACjBW,EAAkBX,EAElBY,EAAkB,EACtB,KAAOA,EAAkB,KAAM,CAK7B,GAJAA,GAAmB,EAGnBF,EAAiBA,EAAerM,QAAQwM,IAAIN,GACxChN,GAAYmN,EAAgBrO,EAAOE,GAAS,CAC9C,IAAIuO,EAASrN,GAAWiN,EAAerM,QAAQC,SAASiM,GAAUG,EAAgBrO,EAAM,EAAKE,EAAO,GAEpG,GADAkN,EAAetU,KAAK2V,GAChB3M,GAAWsM,EAAaK,GAC1B,MAEFJ,EAAiBjN,GAAWkN,EAAiBD,EAAgBrO,EAAM,EAAKE,EAAO,GAC/EgO,EAAUH,EAGZ,GADAX,EAAetU,KAAKuV,GAChBvM,GAAWsM,EAAaC,GAC1B,MAUF,GANAC,EAAkBA,EAAgBtM,QAAQwM,IAAIL,GAC1CjN,GAAYoN,EAAiBtO,EAAOE,KACtCoO,EAAkBlN,GAAWiN,EAAgBC,EAAiBtO,EAAM,EAAKE,EAAO,GAChFiO,EAAUL,GAEZV,EAAetU,KAAKwV,GAChBxM,GAAWsM,EAAaE,GAC1B,MAMF,GAFAA,EAAkBA,EAAgBtM,QAAQwM,IAAIL,GAC9Cf,EAAetU,KAAKwV,GAChBxM,GAAWsM,EAAaE,GAC1B,MAEF,GAAIpN,GAAYoN,EAAiBtO,EAAOE,GAAS,CAC/C,IAAIuO,EAASrN,GAAWkN,EAAgBtM,QAAQC,SAASkM,GAAUG,EAAiBtO,EAAM,EAAKE,EAAO,GAEtG,GADAkN,EAAetU,KAAK2V,GAChB3M,GAAWsM,EAAaK,GAC1B,MAEFH,EAAkBlN,GAAWiN,EAAgBC,EAAiBtO,EAAM,EAAKE,EAAO,GAChFiO,EAAUL,EAGZ,GADAV,EAAetU,KAAKwV,GAChBxM,GAAWsM,EAAaE,GAC1B,MAMF,GAFAD,EAAiBA,EAAerM,QAAQwM,IAAIN,GAC5Cd,EAAetU,KAAKuV,GAChBvM,GAAWsM,EAAaC,GAC1B,MAEEnN,GAAYmN,EAAgBrO,EAAOE,KACrCmO,EAAiBjN,GAAWkN,EAAiBD,EAAgBrO,EAAM,EAAKE,EAAO,GAC/EgO,EAAUH,GAGd,OAAOX,EAGTvQ,aACE,OAAOrD,MYrNLkV,GAAYjW,GAASA,EAAMkW,OAE3BC,GAAoBnW,GAASA,EAAMkW,OAAOvW,UAEnCyW,GAAoBC,YAC/B,CAAEJ,IACFC,GAAUA,EAAOrW,OAAOkD,IAAI3C,GAAM8V,EAAOtW,KAAKQ,KAEnCkW,GAA0BD,YACrC,CAAEF,GAAmBF,IACrB,CAAC7V,EAAI8V,IAAWA,EAAOtW,KAAKQ,IAGjBmW,GAA8BF,YACzC,CAAEF,GAbkBnW,GAASA,EAAMwW,YAcnC,CAACpW,EAAIoW,IAAeA,EAAW5W,KAAKQ,IAGzBqW,GAAYvW,GAChBiP,GAAiBjP,EAAMiB,MCgBhC,MAAMuV,WAAuBzX,YAC3BC,SACE,MAAMyX,EAAkB9V,KAAKC,MAAM8V,OAAS,SAAW,GACjDC,EAAYhW,KAAKC,MAAM8V,OAAS,EAAI,KAE1C,OACE,kBAACE,EAAA,EAAD,CAAWC,iBAAkBF,EAAWA,UAAWA,GACjD,kBAACG,EAAA,EAAD,CAAM7X,UAAS,UAAKwX,EAAL,mBACb,kBAACG,EAAA,EAAUG,OAAX,CAAkBC,GAAIF,IAAKhY,OAAQmY,SAAU,EAAGC,QAASvW,KAAKC,MAAMuW,QAClE,qCADF,8BAKA,kBAACP,EAAA,EAAUQ,SAAX,CAAoBH,SAAU,GAC5B,kBAACH,EAAA,EAAKO,KAAN,KACE,kBAAC,EAAD,CACEnV,SAAUvB,KAAKC,MAAMsB,SACrBrB,QAASF,KAAKC,MAAMC,QACpB2B,IAAI,YACJ1B,UAAU,YACV2B,MAAO,EACP1B,MAAOJ,KAAKC,MAAMyD,iBAQnBiT,mBArDS,CAACxX,EAAOyX,KAC9B,MAAMlT,EAAYgS,GAA4BvW,GAE9C,MAAO,CACLuE,UAAWA,EACXqS,OAAQrS,EAAUP,YAClBjD,SAAU,IAAI8C,GAAaO,eAIJ,CAACsT,EAAUD,KAAc,MAC1CrX,EAAOqX,EAAPrX,GAER,MAAO,CACLgC,SAAWE,IACTA,EAAMlC,GAAKA,EACXsX,EAASjT,EAAgBnC,KAE3B+U,OAAQ,KACNK,EAAS/S,EAAW,CAACvE,GAAIA,QAkChBoX,CAA6Cd,IC7B5D,MAAMiB,WAA0B1Y,YAC9BC,SACE,MAAMyX,EAAkB9V,KAAKC,MAAM8V,OAAS,SAAW,GACjDC,EAAYhW,KAAKC,MAAM8V,OAAS,EAAI,KAE1C,OACE,kBAACE,EAAA,EAAD,CAAWC,iBAAkBF,EAAWA,UAAWA,GACjD,kBAACG,EAAA,EAAD,CAAM7X,UAAS,UAAKwX,EAAL,mBACb,kBAACG,EAAA,EAAUG,OAAX,CAAkBC,GAAIF,IAAKhY,OAAQmY,SAAU,EAAGC,QAASvW,KAAKC,MAAM8W,QAClE,oCADF,mBAKA,kBAACd,EAAA,EAAUQ,SAAX,CAAoBH,SAAU,GAC5B,kBAACH,EAAA,EAAKO,KAAN,KACE,kBAAC,EAAD,CACEnV,SAAUvB,KAAKC,MAAMsB,SACrBrB,QAASF,KAAKC,MAAMC,QACpB2B,IAAI,YACJ1B,UAAU,YACV2B,MAAO,EACP1B,MAAOJ,KAAKC,MAAMyD,YAEpB,kBAAC,EAAD,CACEnC,SAAUvB,KAAKC,MAAMsB,SACrBrB,QAASF,KAAKC,MAAMC,QACpB2B,IAAI,kBACJ1B,UAAU,kBACV2B,MAAO,EACP1B,MAAOJ,KAAKC,MAAMyD,iBASnBiT,mBA9DS,CAACxX,EAAOyX,KAC9B,MAAMlT,EAAYgS,GAA4BvW,GAE9C,MAAO,CACLuE,UAAWA,EACXqS,OAAQrS,EAAUN,YAClBlD,SAAU,IAAI8C,GAAaO,eAIJ,CAACsT,EAAUD,KAAc,MAC1CrX,EAAOqX,EAAPrX,GAER,MAAO,CACLgC,SAAWE,IACTA,EAAMlC,GAAKA,EACXsX,EAASjT,EAAgBnC,KAE3BsV,OAAQ,KACNF,EAAS9S,EAAW,CAACxE,GAAIA,QA2ChBoX,CAA6CG,ICjC5D,MAAME,WAAuB5Y,YAC3BC,SACE,MAAMyX,EAAkB9V,KAAKC,MAAM8V,OAAS,SAAW,GACjDC,EAAYhW,KAAKC,MAAM8V,OAAS,EAAI,KACpCkB,EAAsBjX,KAAKC,MAAMiX,WAAa,SAAW,GACzDC,EAAgBnX,KAAKC,MAAMiX,WAAa,EAAI,KAElD,OACE,kBAACjB,EAAA,EAAD,CAAWC,iBAAkBF,EAAWA,UAAWA,GACjD,kBAACG,EAAA,EAAD,CAAM7X,UAAWwX,GACf,kBAACG,EAAA,EAAUG,OAAX,CAAkBC,GAAIF,IAAKhY,OAAQmY,SAAU,EAAGC,QAASvW,KAAKC,MAAMmX,SAClE,qCADF,kDAKA,kBAACnB,EAAA,EAAUQ,SAAX,CAAoBH,SAAU,GAC5B,kBAACH,EAAA,EAAKO,KAAN,KACE,kBAAC,EAAD,CACEnV,SAAUvB,KAAKC,MAAMsB,SACrBrB,QAASF,KAAKC,MAAMC,QACpB2B,IAAI,aACJ1B,UAAU,aACV2B,MAAO,EACP1B,MAAOJ,KAAKC,MAAMyD,YAEpB,kBAAC,EAAD,CACEnC,SAAUvB,KAAKC,MAAMsB,SACrBrB,QAASF,KAAKC,MAAMC,QACpB2B,IAAI,cACJ1B,UAAU,cACV2B,MAAO,EACPV,KAAM,IACNhB,MAAOJ,KAAKC,MAAMyD,YAEpB,kBAACuS,EAAA,EAAD,CAAWC,iBAAkBiB,EAAe7Y,UAAU,QACpD,kBAAC6X,EAAA,EAAD,CAAM7X,UAAW2Y,GACf,kBAAChB,EAAA,EAAUG,OAAX,CAAkBC,GAAIF,IAAKhY,OAAQmY,SAAU,EAAGC,QAASvW,KAAKC,MAAMoX,aAClE,2CADF,8BAKA,kBAACpB,EAAA,EAAUQ,SAAX,CAAoBH,SAAU,GAC5B,kBAACH,EAAA,EAAKO,KAAN,KACE,kBAAC,EAAD,CACEnV,SAAUvB,KAAKC,MAAMsB,SACrBrB,QAASF,KAAKC,MAAMC,QACpB2B,IAAI,YACJ1B,UAAU,YACV2B,MAAO,EACP1B,MAAOJ,KAAKC,MAAMyD,qBAY3BiT,mBAzFS,CAACxX,EAAOyX,KAC9B,MAAMlT,EAAYgS,GAA4BvW,GAE9C,MAAO,CACLuE,UAAWA,EACXqS,OAAQrS,EAAUL,aAClB6T,WAAYxT,EAAUJ,iBACtBpD,SAAU,IAAI8C,GAAaO,eAIJ,CAACsT,EAAUD,KAAc,MAC1CrX,EAAOqX,EAAPrX,GAER,MAAO,CACLgC,SAAWE,IACTA,EAAMlC,GAAKA,EACXsX,EAASjT,EAAgBnC,KAE3B2V,QAAS,KACPP,EAAS7S,EAAY,CAACzE,GAAIA,MAE5B8X,YAAa,KACXR,EAAS5S,EAAgB,CAAC1E,GAAIA,QAkErBoX,CAA6CK,IC/D5D,MAAMM,WAAmBlZ,YACvBC,SACE,MAAMyX,EAAkB9V,KAAKC,MAAM8V,OAAS,SAAW,GACjDC,EAAYhW,KAAKC,MAAM8V,OAAS,EAAI,KAE1C,OACE,yBAAKzX,UAAU,cACb,kBAAC,EAAD,CACEiD,SAAUvB,KAAKC,MAAMsB,SACrBrB,QAASF,KAAKC,MAAMC,QACpB2B,IAAI,UACJ1B,UAAU,UACV2B,MAAO,EACP1B,MAAOJ,KAAKC,MAAMyD,YAEpB,kBAAC,EAAD,CACEnC,SAAUvB,KAAKC,MAAMsB,SACrBrB,QAASF,KAAKC,MAAMC,QACpB2B,IAAI,UACJ1B,UAAU,UACV2B,MAAO,EACP1B,MAAOJ,KAAKC,MAAMyD,YAEpB,kBAACuS,EAAA,EAAD,CAAW3X,UAAU,OAAO4X,iBAAkBF,EAAWA,UAAWA,GAClE,kBAACG,EAAA,EAAD,CAAM7X,UAAWwX,GACf,kBAACG,EAAA,EAAUG,OAAX,CAAkBC,GAAIF,IAAKhY,OAAQmY,SAAU,EAAGC,QAASvW,KAAKC,MAAMsX,UAClE,kDADF,8DAKA,kBAACtB,EAAA,EAAUQ,SAAX,CAAoBH,SAAU,GAC5B,kBAACH,EAAA,EAAKO,KAAN,KACE,kBAAC,EAAD,CACEnV,SAAUvB,KAAKC,MAAMsB,SACrBrB,QAASF,KAAKC,MAAMC,QACpB2B,IAAI,WACJ1B,UAAU,WACV2B,MAAO,EACP1B,MAAOJ,KAAKC,MAAMyD,YAElB,kBAACuS,EAAA,EAAD,CAAW3X,UAAU,QACnB,kBAAC,GAAD,CAAgBiB,GAAIS,KAAKC,MAAMyD,UAAUnE,KACzC,kBAAC,GAAD,CAAmBA,GAAIS,KAAKC,MAAMyD,UAAUnE,KAC5C,kBAAC,GAAD,CAAgBA,GAAIS,KAAKC,MAAMyD,UAAUnE,YAW9CoX,mBA9ES,CAACxX,EAAOyX,KAC9B,MAAMlT,EAAYgS,GAA4BvW,GAE9C,MAAO,CACLuE,UAAWA,EACXqS,OAAQrS,EAAUR,cAClBhD,SAAU,IAAI8C,GAAaO,eAIJ,CAACsT,EAAUD,KAAc,MAC1CrX,EAAOqX,EAAPrX,GAER,MAAO,CACLgC,SAAWE,IACTA,EAAMlC,GAAKA,EACXsX,EAASjT,EAAgBnC,KAE3B8V,SAAU,KACRV,EAAShT,EAAa,CAACtE,GAAIA,QA2DlBoX,CAA6CW,I,OC1C5D,MAAM7S,WAAcrG,YAClBC,SACE,MAAMmZ,EAAgBC,OAAO3R,KAAK9F,KAAKC,MAAMC,SAASgC,IAAI,CAACL,EAAKC,KAC9D,MAAM/B,EAASC,KAAKC,MAAMC,QAAQ2B,GAElC,MAAoB,aAAhB9B,EAAOO,KACD,kBAAC,EAAD,CACEiB,SAAUvB,KAAKC,MAAMsB,SACrBrB,QAASF,KAAKC,MAAMC,QACpBC,UAAW0B,EACXA,IAAKA,EACLC,MAAOA,EACP1B,MAAOJ,KAAKC,MAAMZ,QACH,aAAhBU,EAAOO,KACT,kBAAC,EAAD,CACGiB,SAAUvB,KAAKC,MAAMsB,SACrBrB,QAASF,KAAKC,MAAMC,QACpBC,UAAW0B,EACXA,IAAKA,EACLC,MAAOA,EACP1B,MAAOJ,KAAKC,MAAMZ,QAEpB,kBAAC,EAAD,CACEkC,SAAUvB,KAAKC,MAAMsB,SACrBrB,QAASF,KAAKC,MAAMC,QACpBC,UAAW0B,EACXA,IAAKA,EACLC,MAAOA,EACP1B,MAAOJ,KAAKC,MAAMZ,UAIhC,IAAIqY,OAAoBxH,EACxB,GAAIuH,OAAOE,QAAQ3X,KAAKC,MAAMC,SAAS0I,OAAS,EAAG,CACjD,MAAMgP,EAAa5X,KAAKC,MAAMoP,KAAO,uBAAG/Q,UAAU,QAAb,OAAwB,uBAAGoD,OAAO,SAASmW,IAAI,sBAAsBC,KAAM9X,KAAKC,MAAMoP,MAAOrP,KAAKC,MAAMoP,MAAxG,oBAAmIa,EAExKwH,EACE,yBAAKpZ,UAAU,iBACZsZ,EACAJ,GAIP,OACE,yBAAKlZ,UAAU,QACb,yBAAKA,UAAU,uCACb,kBAACyZ,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,KAAK,KAAK1B,QAASvW,KAAKC,MAAMiY,mBAAhE,qBAEAR,EACA1X,KAAKC,MAAMZ,MAAMsF,cAAgB,kBAAC,GAAD,CAAYpF,GAAIS,KAAKC,MAAMZ,MAAME,OAM7DoX,mBAzFS,CAACxX,EAAOyX,KAC9B,MAAMvX,EAAQoW,GAAwBtW,GAChCgZ,EAAYvC,GAASvW,GAE3B,MAAO,CACLA,MAAOA,EACPa,QAASiY,EAAU5U,aACnB8L,KAAM8I,EAAU9I,OAIO,CAACwH,EAAUD,KAAc,MAC1CrX,EAAOqX,EAAPrX,GACF4Y,ELPqB5Y,IACpB+O,GAAiB/O,GKMN6Y,CAAa7Y,GACzB8Y,EAAgB,IAAIrV,EAE1B,MAAO,CACLzB,SAAWE,IACTA,EAAMlC,GAAKA,EACXsX,EAASjX,EAAY6B,KAEvByW,kBAAoB1W,IAClB,IAAIC,EAAQ0W,EAAUlV,kBACtBxB,EAAMlC,GAAKA,EAEX,IAAI+Y,EAASD,EAAcpV,kBAC3BqV,EAAO/Y,GAAKA,EACZ+Y,EAAOpV,cAAgBzB,EAAMyB,cAC7B2T,EAASjX,EAAY6B,IACrBoV,EAASjT,EAAgB0U,OA4DhB3B,CAA6ClS,IC5F5D,MAeM8T,GAAe,CACnBC,QAASC,GAAI,eACRA,EADQ,CAEX7R,OAAQ,GACR8R,UAAW,MAIf,MAAMC,WAAkBva,YACtBC,SACE,MAAMua,EAAe,GADd,2BAEP,YAAoB5Y,KAAKC,MAAMoV,OAA/B,+CAAuC,CAAC,MAA7BhW,EAA4B,QAC/BwZ,EAAc,CAAEvX,MAAOjC,EAAME,GAAIwC,MAAO1C,EAAMT,MACpD,IAAIka,GAAQ,EAFyB,uBAGrC,YAAoBF,EAApB,+CAAkC,CAAC,MAAxBG,EAAuB,QAC5BA,EAAMhX,QAAU1C,EAAMuF,cACxBkU,GAAQ,EACRC,EAAM7Y,QAAQV,KAAKqZ,KANc,kFASrC,IAAKC,EAAO,CACV,MAAME,EAAa,CAAEH,GACrBD,EAAapZ,KAAM,CAAEuC,MAAO1C,EAAMuF,YAAa1E,QAAS8Y,MAbrD,kFAiBP,MAAMC,EAAiB,CACrB3X,MAAOtB,KAAKC,MAAMiZ,aAAa3Z,GAC/BwC,MAAO/B,KAAKC,MAAMiZ,aAAata,MAGjC,OACE,6BACE,kBAACuX,EAAA,EAAD,CAAM7X,UAAU,gBACd,kBAAC,IAAD,CACEgD,MAAO2X,EACP1X,SAAUvB,KAAKC,MAAMR,gBACrB0Z,OAAQZ,GACRa,cAAe,IACflZ,QAAS0Y,IAEX,kBAAC,GAAD,CAAO/W,IAAK7B,KAAKC,MAAMiZ,aAAa3Z,GAAIA,GAAIS,KAAKC,MAAMiZ,aAAa3Z,QAO/DoX,mBA/DS,CAACxX,EAAOyX,KACvB,CACLsC,aAAczD,GAAwBtW,GACtCkW,OAAQE,GAAkBpW,KAIH,CAAC0X,EAAUD,KAC7B,CACLnX,gBAAkB4Z,IAChBxC,EAASpX,EAAgB4Z,EAAS/X,WAqDzBqV,CAA6CgC,IC7E5D,MAAMW,GAAY3a,YAAY,CAC5BC,KAAM,iBACNC,aAAc,CACZD,KAAM,GACN2a,SAAU,GACVlT,SAAU,GACVmT,KAAM,IACNC,aAAa,GAEfxa,SAAU,CACRya,gBAAgBva,EAAOC,GACrBD,EAAMkH,SAAWjH,EAAOE,SAE1Bqa,YAAYxa,EAAOC,GACjBD,EAAMP,KAAOQ,EAAOE,SAEtBsa,gBAAgBza,EAAOC,GACrBD,EAAMoa,SAAWna,EAAOE,SAE1Bua,YAAY1a,EAAOC,GACjBD,EAAMqa,KAAOpa,EAAOE,SAEtBwa,sBAAsB3a,EAAOC,GAC3BD,EAAMsa,aAAeta,EAAMsa,gB,GAW7BH,GAAUzZ,QALZ6Z,G,GAAAA,gBACAC,G,GAAAA,YACAC,G,GAAAA,gBACAC,G,GAAAA,YACAC,G,GAAAA,sBAGaR,UAAf,QCgGA,MAAMS,WAAiB3b,YACrBC,SACE,IAAI2b,EAAoBha,KAAKC,MAAMwZ,YAAc,SAAW,GACxDQ,EAAiBja,KAAKC,MAAMsZ,SAASrX,IAAKgY,GACrC,8BAAOA,EAAQ,+BAGxB,OACE,yBAAK5b,UAAU,aACb,kBAAC6X,EAAA,EAAD,CAAM7X,UAAU,OACd,kBAAC2X,EAAA,EAAD,CAAW3X,UAAU,QACnB,kBAAC6X,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKhY,OAAN,CAAakY,GAAItV,IAAKC,MAAOC,QAAQ,aAAakZ,MAAO,CAAEC,OAAQ,YACjE,sCADF,8DAGE,kBAACrZ,EAAA,EAAKI,QAAN,CACI5B,GAAG,aACHe,KAAK,OACL+Z,OAAO,OACP9Y,SAAUvB,KAAKC,MAAMqa,YACrBH,MAAO,CAAEI,QAAS,aAK5B,yBAAKjc,UAAU,QAAf,SACS0B,KAAKC,MAAMrB,KADpB,IAC0B,6BAD1B,YAGE,yBAAKN,UAAU,QACX2b,GAJN,qBAMqBja,KAAKC,MAAMoG,SAASuC,QAGzC,kBAACqN,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAM7X,UAAS,UAAK0b,EAAL,mBACb,kBAAC/D,EAAA,EAAUG,OAAX,CAAkBC,GAAIF,IAAKhY,OAAQmY,SAAU,EAAGC,QAASvW,KAAKC,MAAMua,mBAClE,iDADF,iCAOJ,kBAAC5Z,EAAA,EAAD,CAAKtC,UAAU,2BACb,kBAACuC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAKC,MAAN,CAAYC,QAAQ,YAApB,SAIF,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAKI,QAAN,CAAcb,KAAK,SAASgB,MAAOtB,KAAKC,MAAMuZ,KAAMjY,SAAUvB,KAAKC,MAAMwa,aAK/E,yBAAKnc,UAAU,OACb,uDACA,wBAAIA,UAAU,iBACZ,4BAAI,uBAAGwZ,KAAK,kCAAR,wBACJ,4BAAI,uBAAGA,KAAK,6CAAR,0BACJ,4BAAI,uBAAGA,KAAK,8CAAR,gCACJ,4BAAI,uBAAGA,KAAK,2CAAR,uBACJ,4BAAI,uBAAGA,KAAK,8DAAR,uBACJ,4BAAI,uBAAGA,KAAK,mCAAR,iBAGN,wBAAIxZ,UAAU,QAAd,yBACA,8OACA,gVACA,qQACA,oDAOKqY,mBAlMS,CAACxX,EAAOyX,KACvB,CACLhY,KAAMO,EAAMub,KAAK9b,KACjB2a,SAAUpa,EAAMub,KAAKnB,SACrBlT,SAAUlH,EAAMub,KAAKrU,SACrBmT,KAAMra,EAAMub,KAAKlB,KACjBC,YAAata,EAAMub,KAAKjB,cAID,CAAC5C,EAAUD,KACpC,IAkDI+D,EAAgBD,IAClB,IAAIE,EAAK,CACTA,SAAc,GACdA,SAAc,IAEVC,EAAS,IAAIC,WAEjBD,EAAOE,OAAUvZ,IACf,IACIwZ,EADOH,EAAO1P,OACDoI,MAAM,MACnB0H,GAAa,EACjB,IAAK,IAAIC,EAAK,EAAGA,EAAKF,EAAMpS,OAAQsS,IAAM,CACxC,IAAIC,EAAOH,EAAME,GAAIE,OACrB,GAAoB,IAAhBD,EAAKvS,SAIiB,IAAtBuS,EAAKE,QAAQ,MAAeJ,GAC9BL,EAAGrB,SAAS/Z,KAAKwb,EAAME,IAGC,IAAtBC,EAAKE,QAAQ,MAAY,CAC3BJ,GAAa,EAEb,IAAIK,EAAeH,EAAK5H,MAAM,OAC9B,GAA4B,IAAxB+H,EAAa1S,OAAc,CAE7B2S,QAAQC,IAAIF,GACZ,SAEFV,EAAGvU,SAAS7G,KAAK,CAACgB,WAAW8a,EAAa,IAAK9a,WAAW8a,EAAa,OAI3EzE,EAAS+C,GAAgBgB,EAAGrB,WAC5B1C,EAAS6C,GArFM+B,KACjB,IAAIpV,EAAW,GACXqV,OAAWxL,EACXyL,EAAY3V,KAAKC,GAAK,GAC1B,IAAK,IAAIiV,EAAK,EAAGA,EAAKO,EAAU7S,OAAQsS,IAAM,CAC5C,IAAI1K,EAAOiL,EAAUP,GACrB,GAAIQ,EACF,GAAI1V,KAAKW,IAAI6J,EAAK,GAAKkL,EAAS,IAAMC,EAEpCtV,EAAS7G,KAAK,CACA2E,EAAGuX,EAAS,GAAK1V,KAAKG,IAAIuV,EAAS,IACnCtX,EAAGsX,EAAS,GAAK1V,KAAKE,IAAIwV,EAAS,IACnCpX,EAAG,UAEZ,CAEL,IAAIsX,EAAapL,EAAK,GAAKkL,EAAS,GAChCG,EAAUF,EAAY3V,KAAKW,IAAIiV,IAAepL,EAAK,GAAKkL,EAAS,IACrE,IAAII,EAAMJ,EAAS,GACnB,GAAIE,EAAa,EAAK,CACpB,IAAI3G,EAAkB,EACtB,IAAK,IAAIlP,EAAQ2V,EAAS,GAAI3V,EAAQyK,EAAK,KACzCnK,EAAS7G,KAAK,CACA2E,EAAG2X,EAAM9V,KAAKG,IAAIJ,GAClB3B,EAAG0X,EAAM9V,KAAKE,IAAIH,GAClBzB,EAAG,QAEb2Q,IAAoB,MANqBlP,GAAS4V,EAAWG,GAAOD,SAW1E,IAAK,IAAI9V,EAAQ2V,EAAS,GAAI3V,EAAQyK,EAAK,KACzCnK,EAAS7G,KAAK,CACA2E,EAAG2X,EAAM9V,KAAKG,IAAIJ,GAClB3B,EAAG0X,EAAM9V,KAAKE,IAAIH,GAClBzB,EAAG,QAEb2Q,IAAoB,MANqBlP,GAAS4V,EAAWG,GAAOD,IAahFH,EAAWlL,EAEb,OAAOnK,GAsCoB0V,CAAYnB,EAAGvU,aAG1CwU,EAAOmB,WAAWtB,IAGpB,MAAO,CACLJ,YAAc9Y,IACZ,IAAIkZ,EAAOlZ,EAAME,OAAOua,MAAM,GAC9BpF,EAAS8C,GAAYe,EAAK9b,OAC1B+b,EAAaD,IAEfD,QAAUjZ,IACRqV,EAASgD,GAAYrZ,WAAWgB,EAAME,OAAOJ,UAE/CkZ,kBAAoBhZ,IAClBqV,EAASiD,SAkFAnD,CAA6CoD,I,8BChN5D,MAAMmC,GAAY1b,WAAWd,aAAayc,QAAQ,SAAWzc,aAAayc,QAAQ,kBAC5EC,GAAY5b,WAAWd,aAAayc,QAAQ,SAAWzc,aAAayc,QAAQ,kBAC5EE,GAAY7b,WAAWd,aAAayc,QAAQ,SAAWzc,aAAayc,QAAQ,kBAC5EG,GAAY9b,WAAWd,aAAayc,QAAQ,SAAWzc,aAAayc,QAAQ,kBAC5EI,GAAiB/b,WAAWd,aAAayc,QAAQ,cAAgBzc,aAAayc,QAAQ,mBAEtFK,GAAe7d,YAAY,CAC/BC,KAAM,UACNC,aAAc,CACZmV,iBAAa9D,IAAcxQ,aAAayc,QAAQ,wBAAyBzc,aAAayc,QAAQ,uBAAyB,EACvHM,cAAc,EACdC,eAAe,EACfvI,KAAM+H,IAAa,EACnBlV,KAAMoV,IAAa,IACnBlI,KAAMmI,IAAa,EACnBpI,KAAMqI,IAAa,IACnBlI,UAAWmI,IAAkB,IAC7BI,WAAY,GACZC,gBAAiB,OACjBC,cAAe,OACfC,YAAa,IACbC,aAAc,IACdC,YAAa,GAEf/d,SAAU,CACRge,cAAc9d,EAAOC,GACnBqY,OAAOyF,OAAO/d,EAAOC,EAAOE,SAC5BmY,OAAO3R,KAAK1G,EAAOE,SAASkH,QAAQ3E,IAClCnC,aAAaC,QAAQkC,EAAKzC,EAAOE,QAAQuC,OAG7Csb,0BAA0Bhe,EAAOC,GAC/BD,EAAM6U,aAAc,EACpB7U,EAAMsd,cAAgBtd,EAAMsd,aAC5Btd,EAAMud,eAAgB,EACtBhd,aAAaC,QAAQ,sBAAuB,IAE9Cyd,2BAA2Bje,EAAOC,GAChCD,EAAM6U,aAAc,EACpB7U,EAAMsd,cAAe,EACrBtd,EAAMud,eAAiBvd,EAAMud,cAC7Bhd,aAAaC,QAAQ,sBAAuB,IAE9C0d,qBAAqBle,EAAOC,GAC1B,IAAIke,EAAW,GACXhc,EAAQlC,EAAOE,QAEnB,IAAK,IAAIqL,EAAI,EAAGA,EAAIrJ,EAAMsH,OAAS+B,IACjC,IAAKxL,EAAMwd,WAAWvJ,SAAS9R,EAAMqJ,IAAK,CACxC2S,EAAS9d,KAAK8B,EAAMqJ,IACpB,MAGJxL,EAAMwd,WAAaW,GAErBC,eAAepe,EAAOC,GACpBD,EAAM4d,aAAe3d,EAAOE,QAC5BH,EAAM2d,YAAc1d,EAAOE,Y,GAW7Bkd,GAAa3c,QALfod,G,GAAAA,cACAE,G,GAAAA,0BACAC,G,GAAAA,2BACAC,G,GAAAA,qBACAE,G,GAAAA,eAGaf,UAAf,QCrBA,MAAMgB,WAAqBpf,YACzBC,SACE,IAAIyX,EAAkB9V,KAAKC,MAAM8V,OAAS,SAAW,GAErD,OACE,kBAACI,EAAA,EAAD,CAAM7X,UAAS,UAAKwX,EAAL,mBACb,kBAACG,EAAA,EAAUG,OAAX,CAAkBC,GAAIF,IAAKhY,OAAQmY,SAAU,EAAGC,QAASvW,KAAKC,MAAMwd,gBAClE,mDADF,oCAKA,kBAACxH,EAAA,EAAUQ,SAAX,CAAoBH,SAAU,GAC5B,kBAACH,EAAA,EAAKO,KAAN,KACE,kBAAC9V,EAAA,EAAD,CAAKtC,UAAU,2BACb,kBAACuC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAKC,MAAN,CAAYC,QAAQ,QAApB,eAKF,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC4c,GAAA,EAAD,CAAane,GAAG,OAAOe,KAAK,SAASgB,MAAOtB,KAAKC,MAAMkU,KAAM5S,SAAUvB,KAAKC,MAAM0d,iBAItF,kBAAC/c,EAAA,EAAD,CAAKtC,UAAU,2BACb,kBAACuC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAKC,MAAN,CAAYC,QAAQ,QAApB,eAKF,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC4c,GAAA,EAAD,CAAane,GAAG,OAAOe,KAAK,SAASgB,MAAOtB,KAAKC,MAAM+G,KAAMzF,SAAUvB,KAAKC,MAAM2d,iBAItF,kBAAChd,EAAA,EAAD,CAAKtC,UAAU,2BACb,kBAACuC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAKC,MAAN,CAAYC,QAAQ,QAApB,eAKF,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC4c,GAAA,EAAD,CAAane,GAAG,OAAOe,KAAK,SAASgB,MAAOtB,KAAKC,MAAMiU,KAAM3S,SAAUvB,KAAKC,MAAM4d,iBAItF,kBAACjd,EAAA,EAAD,CAAKtC,UAAU,2BACb,kBAACuC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAKC,MAAN,CAAYC,QAAQ,QAApB,eAKF,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC4c,GAAA,EAAD,CAAane,GAAG,OAAOe,KAAK,SAASgB,MAAOtB,KAAKC,MAAMgU,KAAM1S,SAAUvB,KAAKC,MAAM6d,iBAItF,kBAACld,EAAA,EAAD,CAAKtC,UAAU,2BACb,kBAACuC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAKC,MAAN,CAAYC,QAAQ,UAApB,iBAKF,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACid,GAAA,EAAD,CAAmBxe,GAAG,aAAae,KAAK,WAAW1B,KAAK,SAAS0C,MAAOtB,KAAKC,MAAM+d,OAAQzc,SAAUvB,KAAKC,MAAMge,gBAC9G,kBAACC,GAAA,EAAD,CAAclG,QAAQ,QAAQ1W,MAAO,GAArC,cACA,kBAAC4c,GAAA,EAAD,CAAclG,QAAQ,QAAQ1W,MAAO,GAArC,cACA,kBAAC4c,GAAA,EAAD,CAAclG,QAAQ,QAAQ1W,MAAO,GAArC,eACA,kBAAC4c,GAAA,EAAD,CAAclG,QAAQ,QAAQ1W,MAAO,GAArC,sBAWHqV,mBAvHS,CAACxX,EAAOyX,KACvB,CACLuH,SAAUhf,EAAM4U,QAAQ0I,aACxB1G,OAAU5W,EAAM4U,QAAQC,YACxBG,KAAShV,EAAM4U,QAAQI,KACvBnN,KAAS7H,EAAM4U,QAAQ/M,KACvBkN,KAAS/U,EAAM4U,QAAQG,KACvBD,KAAS9U,EAAM4U,QAAQE,KACvB+J,OAAU7e,EAAM4U,QAAQ4I,aAID,CAAC9F,EAAUD,KAC7B,CACL6G,eAAiBjc,IACfqV,EAASsG,OAEXQ,aAAenc,IACbqV,EAASoG,GAAc,CAAC9I,KAAM3T,WAAWgB,EAAME,OAAOJ,WAExDsc,aAAepc,IACbqV,EAASoG,GAAc,CAACjW,KAAMxG,WAAWgB,EAAME,OAAOJ,WAExDuc,aAAerc,IACbqV,EAASoG,GAAc,CAAC/I,KAAM1T,WAAWgB,EAAME,OAAOJ,WAExDwc,aAAetc,IACbqV,EAASoG,GAAc,CAAChJ,KAAMzT,WAAWgB,EAAME,OAAOJ,WAExD2c,eAAiB3c,IACfuV,EAASwG,GAAqB/b,OAyFrBqV,CAA6C6G,IC7F5D,MAAMY,WAAsBhgB,YAC1BC,SACE,IAAIyX,EAAkB9V,KAAKC,MAAM8V,OAAS,SAAW,GAErD,OACE,kBAACI,EAAA,EAAD,CAAM7X,UAAS,UAAKwX,EAAL,mBACb,kBAACG,EAAA,EAAUG,OAAX,CAAkBC,GAAIF,IAAKhY,OAAQmY,SAAU,EAAGC,QAASvW,KAAKC,MAAMwd,gBAClE,6CADF,gCAKA,kBAACxH,EAAA,EAAUQ,SAAX,CAAoBH,SAAU,GAC5B,kBAACH,EAAA,EAAKO,KAAN,KACE,kBAAC9V,EAAA,EAAD,CAAKtC,UAAU,2BACb,kBAACuC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAKC,MAAN,CAAYC,QAAQ,aAApB,oBAIF,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAKI,QAAN,CAAc5B,GAAG,YAAYe,KAAK,SAASgB,MAAOtB,KAAKC,MAAMmU,UAAW7S,SAAUvB,KAAKC,MAAMoe,sBAIjG,kBAACzd,EAAA,EAAD,CAAKtC,UAAU,2BACb,kBAACuC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAKC,MAAN,CAAYC,QAAQ,cAApB,gBAKF,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACid,GAAA,EAAD,CAAmBxe,GAAG,aAAae,KAAK,QAAQ1B,KAAK,aAAa0C,MAAOtB,KAAKC,MAAMqe,WAAY/c,SAAUvB,KAAKC,MAAMse,oBACnH,kBAACL,GAAA,EAAD,CAAclG,QAAQ,QAAQ1W,MAAM,QAApC,QACA,kBAAC4c,GAAA,EAAD,CAAclG,QAAQ,QAAQ1W,MAAM,UAApC,UACA,kBAAC4c,GAAA,EAAD,CAAclG,QAAQ,QAAQ1W,MAAM,aAApC,gBAKN,kBAACV,EAAA,EAAD,CAAKtC,UAAU,2BACb,kBAACuC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAKC,MAAN,CAAYC,QAAQ,YAApB,cAKF,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACid,GAAA,EAAD,CAAmBxe,GAAG,WAAWe,KAAK,QAAQ1B,KAAK,WAAW0C,MAAOtB,KAAKC,MAAMue,SAAUjd,SAAUvB,KAAKC,MAAMwe,kBAC7G,kBAACP,GAAA,EAAD,CAAclG,QAAQ,QAAQ1W,MAAM,QAApC,QACA,kBAAC4c,GAAA,EAAD,CAAclG,QAAQ,QAAQ1W,MAAM,UAApC,UACA,kBAAC4c,GAAA,EAAD,CAAclG,QAAQ,QAAQ1W,MAAM,aAApC,oBAWHqV,mBAzFS,CAACxX,EAAOyX,KACvB,CACLuH,SAAYhf,EAAM4U,QAAQ2I,cAC1B3G,QAAa5W,EAAM4U,QAAQC,YAC3BI,UAAWjV,EAAM4U,QAAQK,UACzBkK,WAAYnf,EAAM4U,QAAQ6I,gBAC1B4B,SAAUrf,EAAM4U,QAAQ8I,gBAID,CAAChG,EAAUD,KAC7B,CACL6G,eAAiBjc,IACfqV,EAASuG,OAEXiB,kBAAoB7c,IAClBqV,EAASoG,GAAc,CAAC7I,UAAW5T,WAAWgB,EAAME,OAAOJ,WAE7Did,mBAAqBjd,IACnBuV,EAASoG,GAAc,CAACL,gBAAiBtb,MAE3Cmd,iBAAmBnd,IACjBuV,EAASoG,GAAc,CAACJ,cAAevb,QAmE9BqV,CAA6CyH,IC3F5D,MAAMM,WAAwBtgB,YAC5BC,SACE,OACE,yBAAKC,UAAU,OACb,kBAAC2X,EAAA,EAAD,CAAWC,iBAAkBlW,KAAKC,MAAM+T,YAAc,EAAI,GACxD,kBAAC,GAAD,MACA,kBAAC,GAAD,SAOK2C,mBAnBS,CAACxX,EAAOyX,KACvB,CACL5C,YAAa7U,EAAM4U,QAAQC,cAiBS,KAAzB2C,CAA+B+H,ICzB9C,MAAMC,WAAevgB,YACnBC,SACE,OACE,4BAAQC,UAAU,OAChB,6BACE,qCACA,gLACA,mHAEc,uBAAGwZ,KAAK,uCAAR,0BAAqE,8DAFnF,aAEsI,uBAAGA,KAAK,iCAAR,UAFtI,MAMF,6BACE,4CACA,4JACA,2BACE,uBAAGA,KAAK,yCAAR,8BACA,6BACA,uBAAGA,KAAK,6CAAR,2BAEF,8FACkE,uBAAGA,KAAK,oCAAR,uBADlE,kCAGA,iEAEE,uBAAGA,KAAK,qEAAR,4BAFF,MAMF,6BACE,sCACA,0DAA+B,uBAAGA,KAAK,sCAAR,QAA/B,mEAAoJ,uBAAGA,KAAK,6CAAR,iBAApJ,KACA,2FAAgE,uBAAGA,KAAK,0DAAR,gBAAhE,MAGF,6BACE,uCACA,yEAGA,mLAE6E,uBAAGA,KAAK,oEAAR,WAF7E,QAUK6G,UCnDf,MAAMC,GAAWjgB,YAAY,CAC3BC,KAAM,MACNC,aAAc,CACZggB,eAAgB,QAChBC,MAAO,SAET7f,SAAU,CACR8f,YAAY5f,EAAOC,GACjBD,EAAM2f,MAAQ1f,EAAOE,YAMzByf,GACEH,GAAS/e,QADXkf,YAGaH,UAAf,QCPA,MAAMI,WAAkB5gB,YACtB6gB,aAAapd,GACX7B,KAAKC,MAAM4W,SAASkI,GAAYld,IAGlCxD,SACE,OACG,kBAAC6gB,EAAA,EAAD,CAAMhJ,iBAAiB,SAASiJ,SAAUnf,KAAKif,aAAaG,KAAKpf,MAAOT,GAAG,cACzE,kBAAC8f,EAAA,EAAD,CAAK/I,SAAS,SAASpV,MAAM,SAAS5C,UAAU,iBAC9C,kBAAC,GAAD,OAGF,kBAAC+gB,EAAA,EAAD,CAAK/I,SAAS,UAAUpV,MAAM,UAAU5C,UAAU,iBAChD,kBAAC,GAAD,OAGF,kBAAC+gB,EAAA,EAAD,CAAK/I,SAAS,OAAOpV,MAAM,SAAS5C,UAAU,iBAC5C,kBAAC,GAAD,OAGF,kBAAC+gB,EAAA,EAAD,CAAK/I,SAAS,QAAQpV,MAAM,QAAQ5C,UAAU,iBAC5C,kBAAC,GAAD,SAOIqY,qBAAUqI,I,iBCrBzB,SAASM,GAAczX,EAAOI,EAAQC,GACpC,IAAIqX,EAAW,EAaf,OAZI1X,EAAM1D,GAAK8D,EACbsX,GAAY,EACH1X,EAAM1D,EAAI8D,IACnBsX,GAAY,GAGV1X,EAAMzD,GAAK8D,EACbqX,GAAY,EACH1X,EAAMzD,EAAI8D,IACnBqX,GAAY,GAGPA,EAIT,SAASC,GAAaC,EAAYC,EAAUC,EAAYC,GACtD,IAAIzE,EAAOuE,EAAShX,QAAQC,SAAS8W,GACjCI,EAAOD,EAASlX,QAAQC,SAASgX,GACjCG,EAAoB3E,EAAKhX,EAAI0b,EAAKzb,EAAI+W,EAAK/W,EAAIyb,EAAK1b,EAGxD,GAA0B,IAAtB2b,EACF,OAAO,KAGT,IAAIC,EAAOJ,EAAWjX,QAAQC,SAAS8W,GACnCO,GAAKD,EAAK5b,EAAI0b,EAAKzb,EAAI2b,EAAK3b,EAAIyb,EAAK1b,GAAK2b,EAC9C,GAAIE,EAAI,GAAKA,GAAK,EAChB,OAAO,KAGT,IAAIhV,GAAK+U,EAAK5b,EAAIgX,EAAK/W,EAAI2b,EAAK3b,EAAI+W,EAAKhX,GAAK2b,EAC9C,OAAI9U,EAAI,GAAKA,GAAK,EACT,KAGUyU,EAAW/W,QAAQwM,IAAIiG,EAAKzS,QAAQiM,SAASrM,KAAO0X,EAAGA,KAQ5E,SAASC,GAASR,EAAYC,EAAUzX,EAAQC,GAC9C,IAAIgY,EAAiBZ,GAAcG,EAAYxX,EAAQC,GACnDiY,EAAeb,GAAcI,EAAUzX,EAAQC,GAEnD,GAAuB,IAAnBgY,GAA8C,IAAjBC,EAE/B,MAAO,CAACV,EAAYC,GAGtB,GAAIQ,IAAmBC,EAErB,MAAO,CAACC,GAAcX,EAAYxX,EAAQC,GAASkY,GAAcV,EAAUzX,EAAQC,IAGrF,GAAIgY,EAAiBC,EAEnB,MAAO,CAACC,GAAcX,EAAYxX,EAAQC,GAASkY,GAAcV,EAAUzX,EAAQC,IAGrF,GAAuB,IAAnBgY,EAA0B,CAG5B,IAAI/E,EAAO,CAACsE,GAGZ,OAFAtE,EAAK3b,KAAKsI,GAAW2X,EAAYC,EAAUzX,EAAQC,IACnDiT,EAAK3b,KAAK4gB,GAAcV,EAAUzX,EAAQC,IACnCiT,EAGT,GAAqB,IAAjBgF,EAEF,MAAO,CAACrY,GAAW4X,EAAUD,EAAYxX,EAAQC,GAASwX,GAO5D,MAAMW,EAAQ,CAEZ,CAAC/X,MAAQL,GAASC,GAASI,MAAQL,EAAQC,IAE3C,CAACI,KAAOL,GAASC,GAASI,KAAOL,EAAQC,IAEzC,CAACI,MAAQL,GAASC,GAASI,KAAOL,GAASC,IAE3C,CAACI,MAAQL,EAAQC,GAASI,KAAOL,EAAQC,KAK3C,IADA,IAAIoY,EAAgB,GACXpV,EAAE,EAAGA,EAAEmV,EAAMzX,OAAQsC,IAAK,CACjC,IAAIqV,EAAYf,GAAalX,KAAOkY,WAAWf,GAClBnX,KAAOkY,WAAWd,GAClBW,EAAMnV,GAAG,GACTmV,EAAMnV,GAAG,IAClCqV,GACFD,EAAc9gB,KAAK0E,EAAOqc,EAAUpc,EAAGoc,EAAUnc,IAIrD,GAA6B,IAAzBkc,EAAc1X,OAAc,CAC9B,GAA6B,IAAzB0X,EAAc1X,OAIhB,MADA2S,QAAQC,IAAI8E,GACNG,MAAM,2BAKd,GAAInY,KAAOkY,WAAWF,EAAc,IAAI3X,SAASL,KAAOkY,WAAWf,IAAaiB,WAC5EpY,KAAOkY,WAAWF,EAAc,IAAI3X,SAASL,KAAOkY,WAAWf,IAAaiB,WAAY,CAC1F,IAAIhM,EAAO4L,EAAc,GACzBA,EAAc,GAAKA,EAAc,GACjCA,EAAc,GAAK5L,EAErB,MAAO,IAAI4L,EAAeF,GAAcV,EAAUzX,EAAQC,IAS5D,IAAIyY,EAAWrY,KAAOkY,WAAWf,GAAYvK,IAAI5M,KAAOkY,WAAWd,IAAW/K,SAASrM,KAAO,GAAK,KAEnG,MAAO,IAAI2X,GAASR,EAAYkB,EAAU1Y,EAAQC,MACvC+X,GAASU,EAAYjB,EAAUzX,EAAQC,IAKpD,SAASkY,GAAc3Z,EAAQwB,EAAQC,GACrC,OAAOhE,EAAO8B,KAAKvF,IAAIwH,EAAQjC,KAAKrF,KAAKsH,EAAQxB,EAAOtC,IAC1C6B,KAAKvF,IAAIyH,EAAQlC,KAAKrF,KAAKuH,EAAQzB,EAAOrC,KAM1D,SAAS0D,GAAWC,EAAMC,EAAKC,EAAQC,GACrC,IAAIC,EAAKJ,EAAK5D,EAAI6D,EAAI7D,EAClBiE,EAAKL,EAAK3D,EAAI4D,EAAI5D,EAElBiE,EAAQnE,EAAO8D,EAAI7D,EAAG6D,EAAI5D,GAC1BmE,EAAW,EACf,OAAIP,EAAI7D,GAAK8D,GAAUD,EAAI7D,EAAI8D,GACzBD,EAAI7D,GAAK8D,EAEXI,EAAMlE,GAAK8D,EAGXI,EAAMlE,EAAI8D,EAEZM,GAAYF,EAAMlE,EAAI4D,EAAK5D,GAAKgE,EAChCE,EAAMjE,EAAI2D,EAAK3D,EAAImE,EAAWH,EAEvBN,GAAWC,EAAMM,EAAOJ,EAAQC,MAErCF,EAAI5D,GAAK8D,GAAUF,EAAI5D,EAAI8D,KACzBF,EAAI5D,GAAK8D,EAEXG,EAAMjE,GAAK8D,EAGXG,EAAMjE,EAAI8D,EAEZK,GAAYF,EAAMjE,EAAI2D,EAAK3D,GAAKgE,EAChCC,EAAMlE,EAAI4D,EAAK5D,EAAIoE,EAAWJ,GAEzBE,GAIT,SAASuY,GAAYxO,EAAO3J,EAAKwP,GAC/B,MAAM/I,EAAakD,EAAMrM,QACnB8a,EAAWpY,EAAI1C,QACrB,IAAIyD,EAAsB,EAARxD,KAAKC,GAAU,IAC7B2V,GAAeiF,EAAW3R,EAAc,EAAMlJ,KAAKC,KAAO,EAAMD,KAAKC,IACrE2V,EAAa5V,KAAKC,KACpB2V,GAAc,EAAM5V,KAAKC,IAEvB2V,EAAa,IACfpS,IAAe,GAIjB,IADA,IAAIsX,EAAc,GACT1f,EAAO,EAAGA,EAAQwa,EAAWpS,EAAcpI,IAClD0f,EAAYthB,KAAK8I,KAAO2P,EAAOjS,KAAKE,IAAIsD,EAAapI,EAAO8N,GACpC+I,EAAOjS,KAAKG,IAAIqD,EAAapI,EAAO8N,KAE9D,OAAO4R,EAGT,SAASC,GAAU3O,EAAO3J,EAAKZ,GAC7B,OAAIuK,EAAM7J,SAASV,GAASY,EAAIF,SAASV,GAASuK,EAAM7J,SAASE,GAAO,KA6C1E,SAASuY,GAAevB,EAAYC,EAAUzH,GAmB5C,MAAM7F,EAAQ9J,KAAOkY,WAAWf,GAC1BhX,EAAMH,KAAOkY,WAAWd,GAGxBuB,EAAY7O,EAAM8O,YAClBC,EAAU1Y,EAAIyY,YAGpB,GAAID,GAAahJ,GAAQkJ,GAAWlJ,EAElC,MAAO,CAACwH,EAAYC,GAItB,GAAItN,EAAM7J,SAASE,GAAO,KACvB,MAAO,CAAC2Y,GAAoBhP,EAAO6F,IAGtC,IAAIqI,EA3EN,SAA0BlO,EAAO3J,EAAKwP,GACpC,IAAIoJ,EAAY5Y,EAAIC,QAAQC,SAASyJ,GAAO1J,QAAQ4Y,YAEhDtB,GAAmB,EAAfqB,EAAUld,EAAWiO,EAAMjO,GAAmB,EAAfkd,EAAUjd,EAAWgO,EAAMhO,EAG9Dmd,EAFIF,EAAU3Y,QAAQiM,SAASrM,KAAO0X,EAAEA,IAAI9K,IAAI9C,GAE7B8O,YAEvB,GAAIK,GAAkBtJ,EAEpB,MAAO,CACLuH,cAAc,EACdxa,OAAQ,IAIZ,IAAIwc,EAAKxb,KAAK4H,KAAKqK,EAAKA,EAAOsJ,EAAeA,GAC1CE,EAASJ,EAAU3Y,QAAQiM,SAASrM,KAAO0X,EAAIwB,EAAGxB,EAAIwB,IAAKtM,IAAI9C,GAC/DsP,EAASL,EAAU3Y,QAAQiM,SAASrM,KAAO0X,EAAIwB,EAAGxB,EAAIwB,IAAKtM,IAAI9C,GAEnE,MAAO,CACLoN,cAAc,EACdxa,OAAQ,CACN,CACE6C,MAAO4Z,EACPE,GAAIZ,GAAU3O,EAAO3J,EAAKgZ,IAE5B,CACE5Z,MAAO6Z,EACPC,GAAIZ,GAAU3O,EAAO3J,EAAKiZ,MA8CZE,CAAiBxP,EAAO3J,EAAKwP,GAEjD,IAAMqI,EAAcd,aAGlB,OAAOoB,GAAYxO,EAAO3J,EAAKwP,GAIjC,IAAKqI,EAActb,OAAO,GAAG2c,KAAQrB,EAActb,OAAO,GAAG2c,GAC3D,OAAOf,GAAYxO,EAAO3J,EAAKwP,GAIjC,GAAIgJ,EAAYhJ,EAAO,MAAUkJ,EAAUlJ,EAAO,KAAQ,CACxD,IAAIpQ,EAAQyY,EAActb,OAAO,GAAG6C,MAChCga,EAAcvB,EAActb,OAAO,GAAG6C,MAE1C,MAAO,IACF+Y,GAAYxO,EAAOvK,EAAOoQ,GAC7BpQ,KACG+Y,GAAYiB,EAAapZ,EAAKwP,IAKrC,GAAIgJ,GAAahJ,EAAM,CACrB,IAAIwJ,EAAUnB,EAActb,OAAO,GAAG2c,IAAM3b,KAAKW,IAAI2Z,EAActb,OAAO,GAAG6C,MAAQuK,GAAS,KAAUkO,EAActb,OAAO,GAAG6C,MAAQyY,EAActb,OAAO,GAAG6C,MAChK,MAAO,CACLuK,KACGwO,GAAYa,EAAQhZ,EAAKwP,GAC5BxP,GAIF,MAAO,IACFmY,GAAYxO,EAFjBqP,EAASnB,EAActb,OAAO,GAAG2c,GAAKrB,EAActb,OAAO,GAAG6C,MAAQyY,EAActb,OAAO,GAAG6C,MAE9DoQ,GAC9BwJ,EACAhZ,GAON,SAAS2Y,GAAoB3a,EAAQwR,GACnC,MAAMpQ,EAAQS,KAAOkY,WAAW/Z,GAChC,GAAKoB,EAAMe,SAAWqP,EAAM,CAC1B,IAAIpJ,EAAQoJ,EAAOpQ,EAAMe,SACzB,OAAOf,EAAM8M,SAASrM,KAAOuG,EAAOA,IAEpC,OAAOhH,EClVX,SAASgH,GAAMpI,EAAQqb,GACrB,IAAIjT,EAAQiT,EAAa,IACzB,MAAO,CACL3d,EAAGsC,EAAOtC,EAAI0K,EACdzK,EAAGqC,EAAOrC,EAAIyK,EACdvK,EAAGmC,EAAOnC,GAyBP,MAAMZ,GAAY,CAACqe,EAAMtb,EAAQub,KACtC,IAAIC,EAAqBxb,EAQzB,GANIsb,EAAK7e,eAAiB6e,EAAK5e,cAC7B8e,EAAqBpT,GAAMoT,EAAoB,IAASF,EAAKrf,UAAYsf,IAG3EC,EA5BF,SAAgBxb,EAAQlE,EAASC,GAC/B,MAAO,CACL2B,EAAGsC,EAAOtC,EAAI5B,EACd6B,EAAGqC,EAAOrC,EAAI5B,EACd8B,EAAGmC,EAAOnC,GAwBS4d,CAAOD,EAAoBF,EAAKxf,SAAW,EAAGwf,EAAKvf,SAAW,GAE/Euf,EAAK7e,eAAiB6e,EAAK3e,YAAa,CAC1C,MAAM+e,EAAcJ,EAAKtf,UAAYgN,SAASsS,EAAKnf,iBAAmB,GAEhEye,EADQW,EAAeG,EACF,EAAI,EAAI,GAAO,EAC1C,IAAIC,EAAcf,GAAaW,EAAiBG,GAAeJ,EAAKpf,UAGhE0e,EAAY,IACde,GAAeD,EAAcJ,EAAKpf,WAEpCsf,EAzDJ,SAAgBxb,EAAQ4b,GACtB,IAAItc,EAAQC,KAAKC,GAAK,IAAQoc,EAC9B,OAAOne,EACEuC,EAAOtC,EAAI6B,KAAKE,IAAIH,GAASU,EAAOrC,EAAI4B,KAAKG,IAAIJ,GACjDU,EAAOtC,EAAI6B,KAAKG,IAAIJ,GAASU,EAAOrC,EAAI4B,KAAKE,IAAIH,GACjDU,EAAOnC,GAoDOqJ,CAAOsU,EAAoBG,GAOlD,OAJIL,EAAK7e,eAAiB6e,EAAK1e,eAC7B4e,EApCJ,SAAexb,EAAQsb,EAAMO,GAC3B,IAAIvc,EAAQgc,EAAKjf,YAAcwf,EAAa,GAAK,EAAMtc,KAAKC,GACxDsc,EAAS,EAIb,OAHIR,EAAKze,mBACPif,EAAS,EAAMD,EAAa,GAAOP,EAAKhf,UAAY,KAE/C,CACLoB,EAAGsC,EAAOtC,EAAIoe,EAASR,EAAKlf,WAAamD,KAAKE,IAAIH,GAClD3B,EAAGqC,EAAOrC,EAAIme,EAASR,EAAKlf,WAAamD,KAAKG,IAAIJ,GAClDzB,EAAGmC,EAAOnC,GA2BWke,CAAMP,EAAoBF,EAAMC,IAGhDC,GA4GF,MAAMQ,GAAiB,CAACtjB,EAAOkH,KACpC,MAAM0N,EAAU5U,EAAM4U,QAEtB,GAAI1N,EAASuC,OAAS,EACpB,GAAImL,EAAQC,YAAa,CACW,IAA9BD,EAAQ4I,WAAW/T,SACrBvC,EA9GR,SAA0B0N,EAAS1N,GAOjC,MAAM8B,GAAM4L,EAAQ/M,KAAO+M,EAAQI,MAAQ,EACrC/L,GAAM2L,EAAQE,KAAOF,EAAQG,MAAQ,EACrCnF,EAAU,CACd,CAAC5K,GAAIgE,EAAI/D,GAAIgE,GACb,CAACjE,GAAIgE,EAAI/D,EAAIgE,GACb,CAACjE,EAAIgE,EAAI/D,EAAIgE,GACb,CAACjE,EAAIgE,EAAI/D,GAAIgE,IAGf,IAKIsa,EALAC,EAAQtc,EAAS,GACjBuc,EAAOvc,EAASA,EAASuC,OAAO,GAChCwL,EAAYpO,KAAK4H,KAAK5H,KAAKsD,IAAI,EAAInB,EAAG,GAAOnC,KAAKsD,IAAI,EAAIlB,EAAI,IAAQ,EACtEya,EAASva,KAAOkY,WAAWmC,GAC3BG,EAAQxa,KAAOkY,WAAWoC,GAE1Btc,EAAc,GAElB,GAAIuc,EAAO3B,aAAe4B,EAAM5B,YAAa,CAE3C,IAAIrS,EAAQuF,EAAY0O,EAAM5B,YAC9BwB,EAAWI,EAAMnO,SAASrM,KAAOuG,EAAMA,IACvCvI,EAAY9G,KAAZ,eAAsBojB,EAAtB,CAA4Bze,EAAGue,EAASve,EAAGC,EAAGse,EAASte,SAClD,CACL,IAAIyK,EAAQuF,EAAYyO,EAAO3B,YAC/BwB,EAAWG,EAAOlO,SAASrM,KAAOuG,EAAMA,IACxCvI,EAAY9G,KAAZ,eAAsBmjB,EAAtB,CAA6Bxe,EAAGue,EAASve,EAAGC,EAAGse,EAASte,KAG1D,IAAI2e,EAAa,EAoBjB,IAnBIL,EAASve,GAAKgE,EAEhB4a,EAAa,EACJL,EAASve,IAAMgE,EAExB4a,EAAa,EACJL,EAASte,GAAKgE,EAEvB2a,EAAa,GACJL,EAASte,IAAMgE,GAIxBmT,QAAQC,IAAI,SAFZuH,EAAa,GAQRA,IAAehP,EAAQ4I,WAAW,IACvCrW,EAAY9G,KAAZ,eAAsBmjB,EAAtB,CAA6Bxe,EAAG4K,EAAQgU,GAAY5e,EAAGC,EAAG2K,EAAQgU,GAAY3e,KAC9E2e,GAAc,EACVA,EAAa,IACfA,EAAa,GAajB,OATAzc,EAAY9G,KAAZ,eAAsBmjB,EAAtB,CAA6Bxe,EAAG4K,EAAQgU,GAAY5e,EAAGC,EAAG2K,EAAQgU,GAAY3e,KAI5EiC,EAFEwc,EAAO3B,aAAe4B,EAAM5B,YAEnB7a,EAASQ,OAAOP,GAEhBA,EAAYS,UAAUF,OAAOR,GAyCzB2c,CAAiBjP,EAAS1N,IAKvCA,EDyK2B,SAASA,EAAU4B,EAAQC,GAC1D,IAAI+a,EAAgB,GAChBvH,EAAW,KAEXzT,EAAS,IACXA,IAAW,GAETC,EAAS,IACXA,IAAW,GAEb,IAAK,IAAIsI,EAAK,EAAGA,EAAKnK,EAASuC,OAAQ4H,IAAQ,CAC7C,IAAI/J,EAASJ,EAASmK,GACtB,GAAIkL,EAEF,IADA,IAAIP,EAAO8E,GAASvE,EAAUjV,EAAQwB,EAAQC,GACrCgb,EAAG,EAAGA,EAAG/H,EAAKvS,OAAQsa,IACzB/H,EAAK+H,KAAQxH,GACfuH,EAAczjB,KAAK2b,EAAK+H,SAI5BD,EAAczjB,KAAK4gB,GAAc3Z,EAAQwB,EAAQC,IAEnDwT,EAAWjV,EAKbiV,EAAW,KAEX,IADA,IAAIyH,EAAkB,GACbxY,EAAE,EAAGA,EAAEsY,EAAcra,OAAQ+B,IAAK,CACzC,GAAI+Q,EAAU,CACZ,IAAItJ,EAAQ9J,KAAOkY,WAAWyC,EAActY,IACxClC,EAAMH,KAAOkY,WAAW9E,GACxBtJ,EAAM7J,SAASE,GAAO,MACxB0a,EAAgB3jB,KAAK4gB,GAAc6C,EAActY,GAAI1C,EAAQC,SAG/Dib,EAAgB3jB,KAAK4gB,GAAc6C,EAActY,GAAI1C,EAAQC,IAE/DwT,EAAWuH,EAActY,GAG3B,OAAOwY,ECnNQC,CAAkB/c,GAFd0N,EAAQ/M,KAAO+M,EAAQI,MAAM,GAC7BJ,EAAQE,KAAOF,EAAQG,MAAM,QAI5C7N,EDmN4B,SAASA,EAAU4R,GAInD,IAHA,IAAIgL,EAAgB,GAChBvH,EAAW,KAENlL,EAAK,EAAGA,EAAKnK,EAASuC,OAAQ4H,IAAQ,CAC7C,IAAI/J,EAASJ,EAASmK,GACtB,GAAIkL,EAEF,IADA,IAAIP,EAAO6F,GAAetF,EAAUjV,EAAQwR,GACnCiL,EAAG,EAAGA,EAAG/H,EAAKvS,OAAQsa,IACzB/H,EAAK+H,KAAQxH,GACfuH,EAAczjB,KAAK2b,EAAK+H,SAI5BD,EAAczjB,KAAK4hB,GAAoB3a,EAAQwR,IAEjDyD,EAAWjV,EAKbiV,EAAW,KAEX,IADA,IAAIyH,EAAkB,GACbxY,EAAE,EAAGA,EAAEsY,EAAcra,OAAQ+B,IAAK,CACzC,GAAI+Q,EAAU,CACZ,IAAItJ,EAAQ9J,KAAOkY,WAAWyC,EAActY,IACxClC,EAAMH,KAAOkY,WAAW9E,GACxBtJ,EAAM7J,SAASE,GAAO,MACxB0a,EAAgB3jB,KAAK4hB,GAAoB6B,EAActY,GAAIsN,SAG7DkL,EAAgB3jB,KAAK4hB,GAAoB6B,EAActY,GAAIsN,IAE7DyD,EAAWuH,EAActY,GAE3B,OAAOwY,ECtPQE,CADXhd,EA1CN,SAA2B0N,EAAS1N,GAClC,MAAM+N,EAAYL,EAAQK,UAE1B,GAAgC,SAA5BL,EAAQ6I,gBACV,GAAgC,WAA5B7I,EAAQ6I,gBACVvW,EAASyG,QAAQ5I,EAAO,EAAK,QACxB,CACL,MAAMye,EAAQra,KAAOkY,WAAWna,EAAS,IACnCwI,EAAQuF,EAAYuO,EAAMzB,YAC1B5C,EAAaqE,EAAMhO,SAASrM,KAAOuG,EAAOA,IAChDxI,EAASyG,QAAQ5I,EAAOoa,EAAWna,EAAGma,EAAWla,IAIrD,GAA8B,SAA1B2P,EAAQ8I,cACV,GAA8B,WAA1B9I,EAAQ8I,cACVxW,EAAS7G,KAAK0E,EAAO,EAAK,QACrB,CACL,MAAM0e,EAAOta,KAAOkY,WAAWna,EAASA,EAASuC,OAAO,IAClDiG,EAAQuF,EAAYwO,EAAK1B,YACzB1C,EAAWoE,EAAKjO,SAASrM,KAAOuG,EAAOA,IAC7CxI,EAAS7G,KAAK0E,EAAOsa,EAASra,EAAGqa,EAASpa,IAI9C,OAAOiC,EAiBQid,CAAkBvP,EAAS1N,GACE0N,EAAQK,WAQpD,OAJIjV,EAAMokB,MAAMxc,SACdV,EAASU,UAGJV,GAyBImd,GAAmBrkB,IAC9B,MAAME,EAAQuW,GAASzW,EAAME,OAC7B,IAAIyf,EAAQ,GAERzf,IACFyf,EAAQzf,EAAMwF,YAAY1F,GAAO+C,IAAMuE,GAC9BoI,GAAMpI,EAAQ,IAAQtH,EAAME,MAAMmF,gBAI7C,MAAM/B,EAAWtD,EAAMuE,UAAUR,cAAgB/D,EAAMuE,UAAUjB,SAAW,EAC5E,IAAIqR,EAAiB,GAErB,IAAK,IAAInJ,EAAE,EAAGA,EAAElI,EAAUkI,IACxB,IAAK,IAAI8F,EAAE,EAAGA,EAAEqO,EAAMlW,OAAQ6H,IAAK,CACjC,MAAMgT,EAAWhT,EAAEqO,EAAMlW,OACzBkL,EAAetU,KAAKkE,GAAUvE,EAAMuE,UAAWob,EAAMrO,GAAI9F,EAAE8Y,IAI/D,OAAOhB,GAAetjB,EAAO2U,IC3OlBjP,GAAc2Q,YACzB,CARarW,GAASA,EAAMukB,IACZvkB,GAASA,EAAMkW,OACXlW,GAASA,EAAMwW,WACrBxW,GAASA,EAAMub,KACdvb,GAASA,EAAMokB,MACbpkB,GAASA,EAAM4U,SAWhC,CAAC2P,EAAKrO,EAAQM,EAAY+E,EAAM6I,EAAOxP,KACrC,IAAI5U,EAAQ,CACVukB,IAAKA,EACLrO,OAAQA,EACRhW,MAAOgW,EAAOtW,KAAKsW,EAAOvW,WAC1B6W,WAAYA,EACZjS,UAAWiS,EAAW5W,KAAKsW,EAAOvW,WAClC4b,KAAMA,EACN6I,MAAOA,EACPxP,QAASA,GAGX,MAAwB,UAApB5U,EAAMukB,IAAI5E,MACL0E,GAAgBrkB,GACM,SAApBA,EAAMukB,IAAI5E,MD0KA3f,KACvB,IAAI4U,EAAU5U,EAAM4U,QACpB,IAAI4P,GAAW5P,EAAQ/M,KAAO+M,EAAQI,MAAM,EAAM,IAAOhV,EAAMub,KAAKlB,KAChEoK,GAAW7P,EAAQE,KAAOF,EAAQG,MAAM,EAAM,IAAO/U,EAAMub,KAAKlB,KAC/DzF,EAAQC,cACX2P,EAAUC,EAAU7P,EAAQK,WAE9BuP,GAAW,IAAOxkB,EAAMub,KAAKlB,KAC7BoK,GAAW,IAAOzkB,EAAMub,KAAKlB,KACzBra,EAAMub,KAAKjB,cACbkK,EAAUC,EAAU5d,KAAKvF,IAAIkjB,EAAQC,IAGvC,MAAMtd,EAAcnH,EAAMub,KAAKrU,SAASnE,IAAMuE,GACrC,eAAIA,EAAX,CACEtC,EAAGsC,EAAOtC,EAAIwf,EACdvf,EAAGqC,EAAOrC,EAAIwf,KAGlB,OAAOnB,GAAetjB,EAAOmH,IC5LlBud,CAAS1kB,GAETqkB,GAAgBrkB,KAKhB2kB,GAAmBtO,YAC9B,CACI3Q,IAEHwB,IACC,IAAIkC,EAAW,EACf,IAAImT,EAAW,KAUf,OARArV,EAASG,QAAUC,IACbiV,IACFnT,GAAYvC,KAAK4H,KAAK5H,KAAKsD,IAAI7C,EAAOtC,EAAIuX,EAASvX,EAAG,GAChC6B,KAAKsD,IAAI7C,EAAOrC,EAAIsX,EAAStX,EAAG,KAExDsX,EAAWjV,IAGN,CACLsd,UAAW1d,EAASuC,OACpBL,SAAUvC,KAAKge,MAAMzb,M,8CCnD3B,MAGM0b,GAAmBzO,YACvB,CAHgBrW,GAASA,EAAMkW,OADXlW,GAASA,EAAMwW,YAQnC,CAACN,EAAQM,KACP,IAAIuO,EAAmBvO,EAAW5W,KAAKsW,EAAOvW,WAI9C,IAFA,IAAI2D,EAAWyhB,EAAiBzhB,SAC5B0hB,EAAgB,GACXxZ,EAAE,EAAGA,EAAElI,EAAUkI,IACpBuZ,EAAiB7gB,cACnB8gB,EAAc3kB,KAAKkE,GAAUwgB,EAAkB,CAAC/f,EAAG,EAAKC,EAAG,GAAMuG,IAGrE,OAAOwZ,IA8BX,MAAMC,WAAsBhmB,YAC1BimB,oBACE,MAAMC,EAASC,IAASC,YAAYxkB,MAC9BykB,EAAUH,EAAOI,WAAW,MAC5BC,EAASC,SAASC,eAAe,mBAEvC7kB,KAAK8kB,gBAAkBC,KAAS/kB,KAAKglB,OAAQ,IAAK,CAACC,UAAU,IAAO7F,KAAKpf,MAEzEklB,OAAOC,iBAAiB,SAAU,KAAQnlB,KAAK8kB,gBAAgBR,EAAQK,KAAW,GAClFS,WAAW,KACTplB,KAAKqlB,SAAU,EACfrlB,KAAKglB,OAAOV,EAAQK,IACnB,KACH3kB,KAAKslB,MAAMb,GAGbc,qBACE,IAAIjB,EAASC,IAASC,YAAYxkB,MACpBskB,EAAOI,WAAW,MACxBc,UAAU,EAAG,EAAGxlB,KAAKC,MAAM6c,YAAa9c,KAAKC,MAAM8c,cAC3D,IAAI4H,EAASC,SAASC,eAAe,mBAErC7kB,KAAKglB,OAAOV,EAAQK,GAItBc,kBACE,IAAIC,EAAY,EACZC,EAAY,EACZ3lB,KAAKC,MAAM2lB,UACbF,EAAY1lB,KAAKC,MAAM+G,KAAOhH,KAAKC,MAAMkU,KACzCwR,EAAY3lB,KAAKC,MAAMgU,KAAOjU,KAAKC,MAAMiU,MAGzCyR,EADAD,EAAmC,EAAvB1lB,KAAKC,MAAMmU,UAIzB,IAAIyR,EAAU7lB,KAAKC,MAAM6c,YAAc4I,EACnCI,EAAU9lB,KAAKC,MAAM8c,aAAe4I,EAExC,MAAoC,IAA7B3f,KAAKvF,IAAIolB,EAASC,GAG3BC,WAAWtf,GACT,IAAIuf,EAAYhmB,KAAKylB,kBAEjBthB,EAAIsC,EAAOtC,EAAI6hB,EAAYhmB,KAAKC,MAAM6c,YAAY,EAElD1Y,GAAKqC,EAAOrC,EAAI4hB,EAAYhmB,KAAKC,MAAM8c,aAAa,EAExD,OAAO7Y,EAAOC,EAAGC,GAGnB6hB,UAAUxB,EAAShe,GACjB,IAAIyf,EAAQlmB,KAAK+lB,WAAWtf,GAC5Bge,EAAQ0B,OAAOD,EAAM/hB,EAAG+hB,EAAM9hB,GAGhCgiB,UAAU3B,EAAShe,GACjB,IAAIyf,EAAQlmB,KAAK+lB,WAAWtf,GAC5Bge,EAAQ4B,OAAOH,EAAM/hB,EAAG+hB,EAAM9hB,GAGhCkiB,OAAO7B,EAAShe,GACd,IAAIyf,EAAQlmB,KAAK+lB,WAAWtf,GAC5Bge,EAAQ8B,IAAIL,EAAM/hB,EAAG+hB,EAAM9hB,EAAG4B,KAAKrF,IAAI,EAA8B,IAAzBX,KAAKylB,mBAA0B,EAAG,EAAIzf,KAAKC,IAAI,GAC3Fwe,EAAQ+B,UAAY/B,EAAQgC,YAC5BhC,EAAQiC,OAGVC,eAAetgB,EAAU2W,GAEvB,GAAoB,IAAhBA,EACF,OAAO3W,EAKT,MAAMugB,EAAiB5J,EAAc,IAC/B6J,GARa,GAQgB7J,GAAe,IAE5C8J,EAAe9gB,KAAK+gB,MAAM1gB,EAASuC,OAASge,GAC5CI,EAAahhB,KAAK+gB,MAAM1gB,EAASuC,OAASie,GAEhD,OAAOxgB,EAASuK,MAAMkW,EAAcE,GAGtC1B,MAAMb,GAOJ,GANAA,EAAQwC,OAGRxC,EAAQyC,YACRzC,EAAQ0C,UAAY,IACpB1C,EAAQgC,YAAc,YAClBzmB,KAAKC,MAAM2lB,SACb5lB,KAAKimB,UAAUxB,EAASvgB,GAAQlE,KAAKC,MAAMkU,KAAOnU,KAAKC,MAAM+G,MAAM,GAAMhH,KAAKC,MAAMiU,KAAOlU,KAAKC,MAAMgU,MAAM,IAC5GjU,KAAKomB,UAAU3B,EAASvgB,GAAQlE,KAAKC,MAAM+G,KAAOhH,KAAKC,MAAMkU,MAAM,GAAMnU,KAAKC,MAAMiU,KAAOlU,KAAKC,MAAMgU,MAAM,IAC5GjU,KAAKomB,UAAU3B,EAASvgB,GAAQlE,KAAKC,MAAM+G,KAAOhH,KAAKC,MAAMkU,MAAM,GAAMnU,KAAKC,MAAMgU,KAAOjU,KAAKC,MAAMiU,MAAM,IAC5GlU,KAAKomB,UAAU3B,EAASvgB,GAAQlE,KAAKC,MAAMkU,KAAOnU,KAAKC,MAAM+G,MAAM,GAAMhH,KAAKC,MAAMgU,KAAOjU,KAAKC,MAAMiU,MAAM,IAC5GlU,KAAKomB,UAAU3B,EAASvgB,GAAQlE,KAAKC,MAAMkU,KAAOnU,KAAKC,MAAM+G,MAAM,GAAMhH,KAAKC,MAAMiU,KAAOlU,KAAKC,MAAMgU,MAAM,QACvG,CACLjU,KAAKimB,UAAUxB,EAASvgB,EAAOlE,KAAKC,MAAMmU,UAAW,IACrD,IAAI5K,EAAa,IACjB,IAAK,IAAImB,EAAE,EAAGA,GAAGnB,EAAYmB,IAAK,CAChC,IAAI5E,EAAkB,EAAVC,KAAKC,GAAWuD,EAAamB,EACzC3K,KAAKomB,UAAU3B,EAASvgB,EAAOlE,KAAKC,MAAMmU,UAAYpO,KAAKE,IAAIH,GAChC/F,KAAKC,MAAMmU,UAAYpO,KAAKG,IAAIJ,MAGnE0e,EAAQ2C,SAER,IAAIC,EAAmBrnB,KAAKC,MAAMoG,SAElC,IADAghB,EAAmBrnB,KAAK2mB,eAAeU,EAAkBrnB,KAAKC,MAAM+c,eAC5CqK,EAAiBze,OAAS,EAAG,CAEnD,GAA+B,IAA3B5I,KAAKC,MAAM+c,YAAmB,CAChCyH,EAAQyC,YACRzC,EAAQ0C,UAAYnnB,KAAKylB,kBACzBhB,EAAQgC,YAAc,4BACtBzmB,KAAKimB,UAAUxB,EAASzkB,KAAKC,MAAMoG,SAAS,IAC5C,IAAK,IAAIsE,EAAE,EAAGA,EAAE3K,KAAKC,MAAMoG,SAASuC,OAAQ+B,IAC1C3K,KAAKomB,UAAU3B,EAASzkB,KAAKC,MAAMoG,SAASsE,IAE9C8Z,EAAQ2C,SAIV,IAAIE,EAAaC,KAAM,WACvB,MAAMC,EAAY,IAAQH,EAAiBze,OAAS,IAEpD6b,EAAQyC,YACRzC,EAAQ0C,UAAYnnB,KAAKylB,kBACzBzlB,KAAKimB,UAAUxB,EAAS4C,EAAiB,IACzC5C,EAAQ2C,SAER,IAAK,IAAIzc,EAAE,EAAGA,EAAE0c,EAAiBze,OAAQ+B,IAAK,CAC5C,MAAM8c,EAAyC,IAA3BznB,KAAKC,MAAM+c,YAAoBsK,EAAWI,QAAQF,EAAY7c,GAAGgd,MAAQ,SAE7FlD,EAAQyC,YACRzC,EAAQgC,YAAcgB,EACtBhD,EAAQ0C,UAAYnnB,KAAKylB,kBACzBzlB,KAAKimB,UAAUxB,EAAS4C,EAAiB1c,EAAE,IAC3C3K,KAAKomB,UAAU3B,EAAS4C,EAAiB1c,IACzC8Z,EAAQ2C,SAIV3C,EAAQyC,YACRzC,EAAQ0C,UAAY,EACpB1C,EAAQgC,YAAc,QACtBzmB,KAAKsmB,OAAO7B,EAASzkB,KAAKC,MAAMoG,SAAS,IACzCoe,EAAQ2C,SACR3C,EAAQyC,YACRzC,EAAQ0C,UAAY,EACpB1C,EAAQgC,YAAc,MACtBzmB,KAAKsmB,OAAO7B,EAASzkB,KAAKC,MAAMoG,SAASrG,KAAKC,MAAMoG,SAASuC,OAAO,IACpE6b,EAAQ2C,SAGV,GAAIpnB,KAAKC,MAAMkkB,eAAiBnkB,KAAKC,MAAMkkB,cAAcvb,OAAS,GAAK5I,KAAKC,MAAM2nB,UAAW,CAE3FnD,EAAQyC,YACRzC,EAAQ0C,UAAY,EACpB1C,EAAQgC,YAAc,QACtBzmB,KAAKimB,UAAUxB,EAASzkB,KAAKC,MAAMkkB,cAAc,IACjD,IAAK,IAAIxZ,EAAE,EAAGA,EAAE3K,KAAKC,MAAMkkB,cAAcvb,OAAQ+B,IAC/C3K,KAAKomB,UAAU3B,EAASzkB,KAAKC,MAAMkkB,cAAcxZ,IAEnD8Z,EAAQ2C,SAGV3C,EAAQoD,UAGV7C,OAAOV,EAAQK,GACb,MAAMje,EAAQ+I,SAASqY,iBAAiBnD,GAAQoD,iBAAiB,UAC3DnhB,EAAS6I,SAASqY,iBAAiBnD,GAAQoD,iBAAiB,WAC5D9P,EAAOjS,KAAKrF,IAAIqF,KAAKvF,IAAIiG,EAAOE,IAElC5G,KAAKC,MAAM6c,cAAgB7E,GAC7BjY,KAAKC,MAAM+nB,SAAS/P,GAGtB,IAAIwM,EAAUH,EAAOI,WAAW,MAChC1kB,KAAKslB,MAAMb,GAGbpmB,SAAU,MAAD,EAC6B2B,KAAKC,MAAlC6c,EADA,EACAA,YAAaC,EADb,EACaA,aACdkL,EAAe,yBAAqBjoB,KAAKqlB,QAAU,WAAa,UAEtE,OACE,4BACE/mB,UAAW2pB,EACXrhB,OAAQmW,EACRrW,MAAOoW,KAIAnG,mBAjOS,CAACxX,EAAOyX,KACvB,CACLgP,SAAUzmB,EAAM4U,QAAQC,YACxBG,KAAMhV,EAAM4U,QAAQI,KACpBnN,KAAM7H,EAAM4U,QAAQ/M,KACpBkN,KAAM/U,EAAM4U,QAAQG,KACpBD,KAAM9U,EAAM4U,QAAQE,KACpBG,UAAWjV,EAAM4U,QAAQK,UACzB0I,YAAa3d,EAAM4U,QAAQ+I,YAC3BC,aAAc5d,EAAM4U,QAAQgJ,aAC5B1W,SAAUxB,GAAY1F,GACtB6d,YAAa7d,EAAM4U,QAAQiJ,YAC3B4K,UAA+B,UAApBzoB,EAAMukB,IAAI5E,MACrBqF,cAAeF,GAAiB9kB,KAIT,CAAC0X,EAAUD,KAC7B,CACLoR,SAAW/P,IACTpB,EAAS0G,GAAetF,OA6MftB,CAA6CyN,I,UChQ5D,MAAM8D,GAAavpB,YAAY,CAC7BC,KAAM,QACNC,aAAc,CACZspB,SAAU,UACVC,IAAK1oB,aAAayc,QAAQ,aAAezc,aAAayc,QAAQ,aAAe,GAC7EkM,KAAM3oB,aAAayc,QAAQ,cAAgBzc,aAAayc,QAAQ,cAAgB,GAChFpV,SAAS,EACTuhB,MAAM,GAERrpB,SAAU,CACRspB,iBAAiBppB,EAAOC,GACtBD,EAAMgpB,SAAW/oB,EAAOE,SAE1BkpB,YAAYrpB,EAAOC,GACjBD,EAAMipB,IAAMhpB,EAAOE,QACnBI,aAAaC,QAAQ,YAAaR,EAAMipB,MAE1CK,aAAatpB,EAAOC,GAClBD,EAAMkpB,KAAOjpB,EAAOE,QACpBI,aAAaC,QAAQ,aAAcR,EAAMkpB,OAE3CK,aAAavpB,EAAOC,GAClBD,EAAMmpB,KAAOlpB,EAAOE,SAEtBqpB,mBAAmBxpB,EAAOC,GACxBD,EAAM4H,SAAW5H,EAAM4H,Y,GAWzBmhB,GAAWroB,QALb0oB,G,GAAAA,iBACAC,G,GAAAA,YACAC,G,GAAAA,aACAC,G,GAAAA,aACAC,G,GAAAA,mBAGaT,UAAf,QCrCA,MAOaU,GAAcpT,YACzB,CARarW,GAASA,EAAMukB,IACZvkB,GAASA,EAAMkW,OACXlW,GAASA,EAAMwW,WACrBxW,GAASA,EAAMub,KACdvb,GAASA,EAAMokB,MACbpkB,GAASA,EAAM4U,SAWhC,CAAC2P,EAAKrO,EAAQM,EAAY+E,EAAM6I,EAAOxP,KACrC,IAAI5U,EAAQ,CACVukB,IAAKA,EACLrO,OAAQA,EACRhW,MAAOgW,EAAOtW,KAAKsW,EAAOvW,WAC1B6W,WAAYA,EACZjS,UAAWiS,EAAW5W,KAAKsW,EAAOvW,WAClC4b,KAAMA,EACN6I,MAAOA,EACPxP,QAASA,GAGPwF,EAAW,GAoBf,OAlBAA,EAAS/Z,KAAK,sBACd+Z,EAAS/Z,KAAK,IACd+Z,EAAS/Z,KAAK,yBACd+Z,EAAS/Z,KAAK,IACd+Z,EAAS/Z,KAAK,sBAAwBL,EAAMukB,IAAI7E,gBAChDtF,EAAS/Z,KAAK,IACd+Z,EAAS/Z,KAAK,oBAAsBL,EAAM4U,QAAQC,YAAc,cAAgB,UAE5E7U,EAAM4U,QAAQC,YAChBuF,EAAS/Z,KAAK,aAAeL,EAAM4U,QAAQI,KAAO,UAAYhV,EAAM4U,QAAQ/M,KAAO,UAAY7H,EAAM4U,QAAQG,KAAO,UAAY/U,EAAM4U,QAAQE,OAE9IsF,EAAS/Z,KAAK,mBAAqBL,EAAM4U,QAAQK,WACjDmF,EAAS/Z,KAAK,oBAAsBL,EAAM4U,QAAQ6I,iBAClDrD,EAAS/Z,KAAK,kBAAoBL,EAAM4U,QAAQ8I,gBAGlDtD,EAAS/Z,KAAK,mBAAqBL,EAAMukB,IAAI5E,OAErC3f,EAAMukB,IAAI5E,OAChB,IAAK,QACH,MAAMzf,EAAQF,EAAMkW,OAAOtW,KAAKI,EAAMkW,OAAOvW,WACvCqZ,EAAYvC,GAASvW,GACrBkF,EAAe4T,EAAU5U,aAE/BgW,EAAS/Z,KAAK,sBAAwBH,EAAMmF,cAC5C+U,EAAS/Z,KAAK,kBAAoBL,EAAMuE,UAAUnB,QAAU,OAASpD,EAAMuE,UAAUlB,SACrF+W,EAAS/Z,KAAK,uBAAyB2Y,EAAUvZ,MAEjD6Y,OAAO3R,KAAKvB,GAAciC,QAAS3E,IACjC0X,EAAS/Z,KAAK,SAAW+E,EAAa1C,GAAKX,MAAQ,KAAO7B,EAAMwC,MAGlE0X,EAAS/Z,KAAK,wBAA0BL,EAAMuE,UAAUjB,UACxD8W,EAAS/Z,KAAK,aAAeL,EAAMuE,UAAUN,aACzCjE,EAAMuE,UAAUN,cAClBmW,EAAS/Z,KAAK,qBAAuBL,EAAMuE,UAAUf,WACrD4W,EAAS/Z,KAAK,2BAA6BL,EAAMuE,UAAUd,kBAE7D2W,EAAS/Z,KAAK,aAAeL,EAAMuE,UAAUP,aACzChE,EAAMuE,UAAUP,aAClBoW,EAAS/Z,KAAK,qBAAuBL,EAAMuE,UAAUhB,WAEvD6W,EAAS/Z,KAAK,cAAgBL,EAAMuE,UAAUL,cAC1ClE,EAAMuE,UAAUL,eAClBkW,EAAS/Z,KAAK,qBAAuBL,EAAMuE,UAAUb,YACrD0W,EAAS/Z,KAAK,uBAAyBL,EAAMuE,UAAUZ,aACvDyW,EAAS/Z,KAAK,qBAAuBL,EAAMuE,UAAUJ,kBACjDnE,EAAMuE,UAAUJ,kBAClBiW,EAAS/Z,KAAK,+BAAiCL,EAAMuE,UAAUX,YAGnE,MAEF,IAAK,OACHwW,EAAS/Z,KAAK,mBAAqBL,EAAMub,KAAK9b,MAC9C2a,EAAS/Z,KAAK,aAAgBL,EAAMub,KAAKlB,MACzCD,EAAS/Z,KAAK,qBAAuBL,EAAMub,KAAKjB,aAChD,MAEF,QACEF,EAAS/Z,KAAK,2BAMlB,OAFA+Z,EAAS/Z,KAAK,oBAAsBL,EAAMokB,MAAMxc,SAChDwS,EAAS/Z,KAAK,IACP+Z,IC1EX,SAASsP,GAASV,EAAUW,GAC1B,IAAIzZ,EAAOuV,SAASmE,cAAc,KAClC1Z,EAAKwZ,SAAWV,EAEhB,IAAIa,EAAO,IAAIC,KAAK,CAACH,GAAM,CAACxoB,KAAM,6BAGlC,GAAI4kB,OAAOgE,WAAahE,OAAOgE,UAAUC,iBACvCjE,OAAOgE,UAAUC,iBAAiBH,EAAMb,OACnC,CAEL,GADA9Y,EAAKyI,KAAOsR,IAAIC,gBAAgBL,GAC5BpE,SAAS0E,YAAa,CACxB,IAAI9nB,EAAQojB,SAAS0E,YAAY,eACjC9nB,EAAM+nB,UAAU,SAAS,GAAM,GAC/Bla,EAAKma,cAAchoB,QAEnB6N,EAAKoa,QAEPL,IAAIM,gBAAgBra,EAAKyI,OAI7B,SAASyL,GAAM9c,GACb,IAAIkjB,EAAU,QACLljB,EAAOtC,EAAEylB,QAAQ,GACxB,KAAOnjB,EAAOrC,EAAEwlB,QAAQ,GAI1B,OAHInjB,EAAOpC,MAAQ,IACjBslB,GAAW,KAAOljB,EAAOnC,GAEpBqlB,EAAU,KAGnB,SAASE,GAASpjB,GAChB,OAAYA,EAAOtC,EAAEylB,QAAQ,GAAK,IAAMnjB,EAAOrC,EAAEwlB,QAAQ,GAAK,KA4ChE,MAAME,WAAuB1rB,YAC3B2rB,gBACE,IAAIC,EAAU,KAAOhqB,KAAKC,MAAMgJ,SAASghB,KAAK,QAC9CD,GAAW,KACXA,GAAW,gBAAkBhqB,KAAKC,MAAMkoB,SAAW,QACnD6B,GAAW,gBACXA,GAAWhqB,KAAKC,MAAMmoB,IACtB4B,GAAW,cAWXA,GATuBhqB,KAAKC,MAAMoG,SAASnE,IAAMuE,GACxC,eACFA,EADL,CAEEtC,EAAGsC,EAAOtC,EAAInE,KAAKC,MAAMsC,QACzB6B,EAAGqC,EAAOrC,EAAIpE,KAAKC,MAAMuC,WAIAN,IAAIqhB,IAChB0G,KAAK,IACtBD,GAAW,KACXA,GAAW,iBACXA,GAAWhqB,KAAKC,MAAMooB,KACtB2B,GAAW,eAEX,IAAI7B,EAAWnoB,KAAKC,MAAMkoB,SACrBA,EAAS/U,SAAS,OACrB+U,GAAY,UAGdU,GAASV,EAAU6B,GACnBhqB,KAAKC,MAAMiqB,QAGbC,mBACE,IAAIH,EAAU,KAAOhqB,KAAKC,MAAMgJ,SAASghB,KAAK,QAC9CD,GAAW,KACXA,GAAW,gBAAkBhqB,KAAKC,MAAMkoB,SAAW,QACnD6B,GAAW,gBACXA,GAAWhqB,KAAKC,MAAMmoB,IACtB4B,GAAW,cACXA,GAAW,KAGX,IAGIxZ,EAFA4Z,EAAqB,GACrB1O,OAAWxL,EAEf,IAAKM,EAAO,EAAGA,EAAOxQ,KAAKC,MAAMoG,SAASuC,OAAQ4H,IAAQ,CACxD,QAAiBN,IAAbwL,EAAwB,CAC1B,IAAItJ,EAAQ9J,KAAOkY,WAAWxgB,KAAKC,MAAMoG,SAASqV,IAC9CjT,EAAMH,KAAOkY,WAAWxgB,KAAKC,MAAMoG,SAASmK,IAE5C6Z,EAAQ5hB,EAAIC,QAAQC,SAASyJ,GAC7BkY,EAAe7hB,EAAIC,QAAQC,SAASyJ,GAAOkP,YAAY3M,SAASrM,KAVxD,MAaZ,IAAK,IAAIlH,EAAO,EAAGA,EAAQipB,EAAMnJ,YAbrB,EAagD9f,IAC1DgpB,EAAmB5qB,KAAK0E,EAAOkO,EAAMjO,EAAI/C,EAAOkpB,EAAanmB,EAC9BiO,EAAMhO,EAAIhD,EAAOkpB,EAAalmB,EAC9BpE,KAAKC,MAAMoG,SAASmK,GAAMlM,IAI7DoX,EAAWlL,OAGIN,IAAbwL,GACF0O,EAAmB5qB,KAAKQ,KAAKC,MAAMoG,SAASrG,KAAKC,MAAMoG,SAASuC,OAAS,IAI3E,IAAI2hB,EAAa,GACbC,EAAgB,EAChBC,EAAmB,EACvB,IAAKja,EAAO,EAAGA,EAAO4Z,EAAmBxhB,SAAU4H,EAAM,CAEvD,IAAIsL,EAAMxT,KAAOkY,WAAW4J,EAAmB5Z,IAAO0Q,YAAclhB,KAAKC,MAAMmU,UAG3EsW,EAAW1kB,KAAK2kB,MAAMP,EAAmB5Z,GAAMrM,EACzBimB,EAAmB5Z,GAAMpM,GAK/CwmB,GAHJF,GAAYA,EAAW,EAAM1kB,KAAKC,KAAO,EAAMD,KAAKC,KAGxBwkB,EAExBG,GAAc5kB,KAAKC,KACrB2kB,GAAc,EAAM5kB,KAAKC,IAEvB2kB,EAAa5kB,KAAKC,KACpB2kB,GAAc,EAAM5kB,KAAKC,IAE3B,IAAI2J,EAAQ4a,EAAgBI,EAC5BH,EAAmBC,EACnBF,EAAgB5a,EAEhB2a,EAAW/qB,KAAK0E,EAAO0L,EAAOkM,EAAKsO,EAAmB5Z,GAAMlM,IAK9D0lB,GAFYO,EAAWroB,IAAI2nB,IAEVI,KAAK,IAEtBD,GAAW,KACXA,GAAW,iBACXA,GAAWhqB,KAAKC,MAAMooB,KACtB2B,GAAW,eAEX,IAAI7B,EAAWnoB,KAAKC,MAAMkoB,SACrBA,EAAS/U,SAAS,OACrB+U,GAAY,QAEdU,GAASV,EAAU6B,GAEnBhqB,KAAKC,MAAMiqB,QAGb7rB,SACE,IAAIwsB,EAAsB7qB,KAAKC,MAAM8G,QAAU,SAAW,KAE1D,OACE,6BACE,kBAACgR,EAAA,EAAD,CAAQzZ,UAAU,YAAY0Z,QAAQ,UAAUzB,QAASvW,KAAKC,MAAM6qB,MAApE,iBAEA,kBAACC,GAAA,EAAD,CAAOzC,KAAMtoB,KAAKC,MAAMqoB,KAAM0C,OAAQhrB,KAAKC,MAAMiqB,OAC/C,kBAACa,GAAA,EAAM5sB,OAAP,CAAc8sB,aAAW,GACvB,kBAACF,GAAA,EAAMG,MAAP,yBAGF,kBAACH,GAAA,EAAMrU,KAAP,KACE,kBAAC3V,EAAA,EAAKoqB,MAAN,CAAYC,UAAU,oBACpB,kBAACrqB,EAAA,EAAKC,MAAN,uBACA,kBAACD,EAAA,EAAKI,QAAN,CAAcb,KAAK,OAAOgB,MAAOtB,KAAKC,MAAMkoB,SAAU5mB,SAAUvB,KAAKC,MAAMorB,eAG7E,kBAACtqB,EAAA,EAAKoqB,MAAN,CAAYC,UAAU,YACpB,kBAACrqB,EAAA,EAAKC,MAAN,2BACA,kBAACD,EAAA,EAAKI,QAAN,CAAckV,GAAG,WAAW/U,MAAOtB,KAAKC,MAAMmoB,IAAK7mB,SAAUvB,KAAKC,MAAMqrB,UAG1E,kBAACvqB,EAAA,EAAKoqB,MAAN,CAAYC,UAAU,aACpB,kBAACrqB,EAAA,EAAKC,MAAN,yBACA,kBAACD,EAAA,EAAKI,QAAN,CAAckV,GAAG,WAAW/U,MAAOtB,KAAKC,MAAMooB,KAAM9mB,SAAUvB,KAAKC,MAAMsrB,WAG3E,kBAACtV,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAM7X,UAAS,UAAKusB,EAAL,mBACb,kBAAC5U,EAAA,EAAUG,OAAX,CAAkBC,GAAIF,IAAKhY,OAAQmY,SAAU,EAAGC,QAASvW,KAAKC,MAAMurB,eAClE,4CADF,wDAQN,kBAACT,GAAA,EAAMpM,OAAP,KACE,kBAAC5G,EAAA,EAAD,CAAQxY,GAAG,aAAayY,QAAQ,OAAOzB,QAASvW,KAAKC,MAAMiqB,OAA3D,SACA,kBAACnS,EAAA,EAAD,CAAQxY,GAAG,iBAAiByY,QAAQ,UAAUzB,QAASvW,KAAK+pB,cAAc3K,KAAKpf,OAA/E,kBACA,kBAAC+X,EAAA,EAAD,CAAQxY,GAAG,oBAAoByY,QAAQ,UAAUzB,QAASvW,KAAKmqB,iBAAiB/K,KAAKpf,OAArF,0BAQG2W,mBAhNS,CAACxX,EAAOyX,KACvB,CACL7P,QAAS5H,EAAMokB,MAAMxc,QACrBuhB,KAAMnpB,EAAMokB,MAAM+E,KAClBjiB,SAAUxB,GAAY1F,GACtB8J,SAAU2f,GAAYzpB,GACtBoD,SAAUpD,EAAM4U,QAAQI,KAAOhV,EAAM4U,QAAQ/M,MAAQ,EACrDxE,SAAUrD,EAAM4U,QAAQG,KAAO/U,EAAM4U,QAAQE,MAAQ,EACrDG,UAAWjV,EAAM4U,QAAQK,UACzB+T,SAAUhpB,EAAMokB,MAAM4E,SACtBC,IAAKjpB,EAAMokB,MAAM6E,IACjBC,KAAMlpB,EAAMokB,MAAM8E,OAIK,CAACxR,EAAUD,KAC7B,CACLkU,KAAM,KACJjU,EAAS6R,IAAa,KAExBwB,MAAO,KACLrT,EAAS6R,IAAa,KAExB8C,cAAe,KACb3U,EAAS8R,OAEX0C,YAAc7pB,IACZqV,EAAS0R,GAAiB/mB,EAAME,OAAOJ,SAEzCgqB,OAAS9pB,IACPqV,EAAS2R,GAAYhnB,EAAME,OAAOJ,SAEpCiqB,QAAU/pB,IACRqV,EAAS4R,GAAajnB,EAAME,OAAOJ,WA+K1BqV,CAA6CmT,I,OCpP5D,MAAM2B,WAAuBrtB,YAC3BC,SACE,OACE,yBAAKC,UAAU,iDAAiDiB,GAAG,mBACjE,yBAAKjB,UAAU,kCACb,yBAAKiB,GAAG,kBAAkBjB,UAAU,6DAClC,kBAAC,GAAD,OAGF,yBAAKA,UAAU,mDACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,QAAf,WACW0B,KAAKC,MAAMyrB,cAAc3H,UADpC,eAC2D/jB,KAAKC,MAAMyrB,cAAcnjB,UAGpF,yBAAKjK,UAAU,OACX,kBAAC,KAAD,CACEgD,MAAOtB,KAAKC,MAAM+c,YAClB5b,KAAM,EACNX,IAAK,EACLE,IAAK,IACLY,SAAUvB,KAAKC,MAAM0rB,aAI7B,kBAAC,GAAD,UAQGhV,mBAhDS,CAACxX,EAAOyX,KACvB,CACLoG,YAAa7d,EAAM4U,QAAQiJ,YAC3B0O,cAAe5H,GAAiB3kB,KAIT,CAAC0X,EAAUD,KAC7B,CACL+U,SAAWrqB,IACTuV,EAASoG,GAAc,CAACD,YAAa1b,QAsC5BqV,CAA6C8U,I,SC1DrD,MCaDG,GAAQC,YAAe,CAC3BC,QAASC,aAAgB,CACvBrI,IAAKsI,GACL3W,OAAQ4W,EACRtW,WAAYuW,EACZxR,KAAMyR,GACN5I,MAAO6I,GACPrY,QAASsY,OAKb5U,OAAO3R,KAAKwI,IAAkB9H,QAAQ3E,IACpC,IAAIxC,EAAQiP,GAAiBzM,GACzB1C,EAAQE,EAAM4D,kBAElB9D,EAAMI,GAAKsC,EACX1C,EAAMP,KAAOS,EAAMT,KACnBgtB,GAAM/U,SAASpT,EAAa,CAAClE,GAAIJ,EAAMI,GAAI2D,cAAe/D,EAAM+D,iBAChE0oB,GAAM/U,SAAS3X,EAASC,MAyB1B,MAAMmtB,GAAc5sB,aAAayc,QAAQ,gBACnCjD,GAAeoT,IAAehe,GAAiBge,IAAeA,GAAc,UAClFV,GAAM/U,SAASpX,EAAgByZ,KAahB0S,U,OC5Df,MAAMW,WAAYnuB,YAChBC,SACE,OACE,kBAAC,IAAD,CAAUutB,MAAOA,IACf,yBAAKttB,UAAU,OACb,kBAAC,EAAD,MAEA,8BACE,kBAACsC,EAAA,EAAD,CAAKtC,UAAU,cACb,kBAACuC,EAAA,EAAD,CAAKvC,UAAU,gCACb,kBAAC,GAAD,OAGF,yBAAKiB,GAAG,WACN,kBAAC,GAAD,YAUDgtB,U,OC/BfhI,IAASlmB,OACP,kBAAC,GAAD,MACAumB,SAASC,eAAe,W","file":"static/js/main.da462cde.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a6ab37e6.svg\";","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './Header.scss'\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <img src={logo} className=\"app-logo mr-2\" alt=\"logo\" />\n          <h1 className=\"d-inline m-0\">sandify</h1>\n          <p className=\"ml-4 d-none d-lg-block\">create patterns for robots that draw in sand with ball bearings</p>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default Header\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst shapesSlice = createSlice({\n  name: 'shape',\n  initialState: {\n    currentId: null,\n    byId: {},\n    allIds: []\n  },\n  reducers: {\n    addShape(state, action) {\n      let shape = { ...action.payload }\n      state.byId[shape.id] = shape\n      state.allIds.push(shape.id)\n    },\n    setCurrentShape(state, action) {\n      state.currentId = action.payload\n      localStorage.setItem('currentShape', state.currentId)\n    },\n    updateShape(state, action) {\n      const shape = action.payload\n      state.byId[shape.id] = {...state.byId[shape.id], ...shape}\n    }\n  }\n})\n\nexport const {\n  addShape,\n  setCurrentShape,\n  updateShape\n} = shapesSlice.actions\n\nexport default shapesSlice.reducer\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Form,\n  Row\n} from 'react-bootstrap'\n\nclass InputOption extends Component {\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n    const optionType = option.type || 'number'\n    const minimum = parseFloat(option.min)\n    const maximum = parseFloat(option.max)\n\n    return (\n      <Row className=\"align-items-center pb-1\">\n        <Col sm={5}>\n        <Form.Label htmlFor=\"options-step\">\n          {option.title}\n        </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Form.Control\n            id=\"options-step\"\n            type={optionType}\n            step={option.step ? option.step : 1}\n            min={!isNaN(minimum) ? minimum : ''}\n            max={!isNaN(maximum) ? maximum : ''}            \n            value={model[this.props.optionKey]}\n            onChange={(event) => {\n              let attrs = {}\n              let value = event.target.value\n\n              if (optionType === 'number') value = value === '' ? '' : parseFloat(value)\n              attrs[this.props.optionKey] = value\n              this.props.onChange(attrs)\n            }} />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default InputOption\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Form,\n  Row\n} from 'react-bootstrap'\nimport Select from 'react-select'\n\nclass DropdownOption extends Component {\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n    const currentChoice = model[this.props.optionKey]\n\n    return (\n      <Row className=\"align-items-center pb-2\" key={this.props.index}>\n        <Col sm={5}>\n          <Form.Label htmlFor=\"options-dropdown\">\n            {option.title}\n          </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Select\n            value={{value: currentChoice, label: currentChoice}}\n            onChange={(choice) => {\n              const value = choice.value\n              let attrs = {}\n              attrs[this.props.optionKey] = value\n              this.props.onChange(attrs)\n            }}\n            options={option.choices.map((choice) => {\n              return { value: choice, label: choice}\n            })}\n            />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default DropdownOption\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Row,\n  Form,\n} from 'react-bootstrap'\n\nclass CheckboxOption extends Component {\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n\n    return (\n      <Row className=\"align-items-center pb-2\">\n        <Col sm={5}>\n        <Form.Label htmlFor=\"options-step\">\n          {option.title}\n        </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Form.Check\n            checked={model[this.props.optionKey]}\n            onChange={(event) => {\n              let attrs = {}\n              let value = event.target.checked\n\n              attrs[this.props.optionKey] = value\n              this.props.onChange(attrs)\n            }} />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default CheckboxOption\n","const transformOptions = {\n  offsetX: {\n    title: 'X offset',\n  },\n  offsetY: {\n    title: 'Y offset',\n  },\n  numLoops: {\n    title: 'Number of loops',\n    min: 1\n  },\n  growValue: {\n    title: 'Scale step (+/-)',\n  },\n  spinValue: {\n    title: 'Spin step (+/-)',\n    step: 0.1\n  },\n  spinSwitchbacks: {\n    title: 'Switchbacks',\n  },\n  trackValue: {\n    title: 'Track size',\n  },\n  trackLength: {\n    title: 'Track length',\n    step: 0.05\n  },\n  trackGrow: {\n    title: 'Scale step (+/-)',\n  },\n}\n\nexport default class Transform {\n  getInitialState() {\n    return {\n      offsetX: 0.0,\n      offsetY: 0.0,\n      numLoops: 10,\n      repeatEnabled: true,\n      growEnabled: true,\n      growValue: 100,\n      spinEnabled: false,\n      spinValue: 2,\n      spinSwitchbacks: 0,\n      trackEnabled: false,\n      trackGrowEnabled: false,\n      trackValue: 10,\n      trackLength: 0.2,\n      trackGrow: 50.0\n    }\n  }\n\n  getOptions() {\n    return transformOptions\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport Transform from '../../shapes/Transform'\n\nconst transformsSlice = createSlice({\n  name: 'transforms',\n  initialState: {\n    byId: {},\n    allIds: []\n  },\n  reducers: {\n    addTransform(state, action) {\n      const transform = action.payload\n      const meta = new Transform()\n      state.byId[transform.id] = {...meta.getInitialState(), ...transform}\n      state.allIds.push(transform.id)\n    },\n    updateTransform(state, action) {\n      const transform = action.payload\n      state.byId[transform.id] = {...state.byId[transform.id], ...transform}\n    },\n    toggleRepeat(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].repeatEnabled = !state.byId[transform.id].repeatEnabled\n    },\n    toggleGrow(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].growEnabled = !state.byId[transform.id].growEnabled\n    },\n    toggleSpin(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].spinEnabled = !state.byId[transform.id].spinEnabled\n    },\n    toggleTrack(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].trackEnabled = !state.byId[transform.id].trackEnabled\n    },\n    toggleTrackGrow(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].trackGrowEnabled = !state.byId[transform.id].trackGrowEnabled\n    },\n  }\n})\n\nexport const {\n  addTransform,\n  updateTransform,\n  toggleRepeat,\n  toggleSpin,\n  toggleGrow,\n  toggleTrack,\n  toggleTrackGrow,\n} = transformsSlice.actions\n\nexport default transformsSlice.reducer\n","// A simple struct that we can use everywhere we need vertices. I don't see a\n// problem letting this bloat a little.\n//\nexport const Vertex = (x, y, speed=0) => {\n  return {\n    x: x,\n    y: y,\n    f: speed\n  }\n}\n\n// convert degrees to radians\nexport const degToRad = (deg) => {\n  return deg / 180.0 * Math.PI\n}\n\n// convert radians to degrees\nexport const radToDeg = (rad) => {\n  return rad * 180.0 / Math.PI\n}\n","export const shapeOptions = {\n  startingSize: {\n    title: 'Starting size',\n    min: 1\n  }\n}\n\nexport default class Shape {\n  constructor(name) {\n    this.name = name\n  }\n\n  getInitialState() {\n    return {\n      repeatEnabled: true,\n      canTransform: true,\n      selectGroup: \"Shapes\",\n      startingSize: 10\n    }\n  }\n\n  getOptions() {\n    return shapeOptions\n  }\n\n  getVertices() {\n    return []\n  }\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    polygonSides: {\n      title: 'Number of sides',\n      min: 3\n    }\n  }\n}\n\nexport default class Polygon extends Shape {\n  constructor() {\n    super('Polygon')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'polygon',\n        polygonSides: 4\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<state.shape.polygonSides; i++) {\n      let angle = Math.PI * 2.0 / state.shape.polygonSides * (0.5 + i)\n      points.push(Vertex(Math.cos(angle), Math.sin(angle)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    circleLobes: {\n      title: 'Number of lobes',\n      min: 1\n    }\n  }\n}\n\nexport default class Circle extends Shape {\n  constructor() {\n    super('Circle')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'circle',\n        circleLobes: 1\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<128; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      points.push(Vertex(Math.cos(angle), Math.sin(state.shape.circleLobes * angle)/state.shape.circleLobes))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    points: {\n      title: 'Number of points',\n      min: 2\n    },\n    starRatio: {\n      title: 'Size of points',\n      step: 0.05,\n      min: 0.05\n    },\n  }\n}\n\nexport default class Star extends Shape {\n  constructor() {\n    super('Star')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'star',\n        points: 5,\n        starRatio: 0.5\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<state.shape.points * 2; i++) {\n      let angle = Math.PI * 2.0 / (2.0 * state.shape.points) * i\n      let star_scale = 1.0\n      if (i % 2 === 0) {\n        star_scale *= state.shape.starRatio\n      }\n      points.push(Vertex(star_scale * Math.cos(angle), star_scale * Math.sin(angle)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    reuleauxSides: {\n      title: 'Number of sides',\n      step: 1,\n      min: 2\n    },\n  }\n}\n\nexport default class Reuleaux extends Shape {\n  constructor() {\n    super('Reuleaux')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'reuleaux',\n        reuleauxSides: 3\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    // Construct an equalateral triangle\n    let corners = []\n    // Initial location at PI/2\n    let angle = Math.PI/2.0\n    // How much of the circle in one side?\n    let coverageAngle = Math.PI/state.shape.reuleauxSides\n    let halfCoverageAngle = 0.5 * coverageAngle\n    for (let c=0; c<state.shape.reuleauxSides; c++) {\n      let startAngle = angle + Math.PI - halfCoverageAngle\n      corners.push( [Vertex(Math.cos(angle), Math.sin(angle)), startAngle] )\n      angle += 2.0 * Math.PI / state.shape.reuleauxSides\n    }\n    let length = 0.5 / Math.cos(Math.PI/2.0/state.shape.reuleauxSides)\n    const scale = 1.7\n    for (let corn=0; corn < corners.length; corn++) {\n      for (let i=0; i<128; i++) {\n        let angle = coverageAngle  * (i / 128.0) + corners[corn][1]\n        points.push(Vertex(scale * (length * corners[corn][0].x + Math.cos(angle)),\n                           scale * (length * corners[corn][0].y + Math.sin(angle))))\n      }\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    epicycloidA: {\n      title: \"Large circle radius\",\n      step: 0.1,\n    },\n    epicycloidB: {\n      title: \"Small circle radius\",\n      step: 0.1,\n    },\n  }\n}\n\nexport default class Epicycloid extends Shape {\n  constructor() {\n    super('Clover')\n    this.link = 'http://mathworld.wolfram.com/Epicycloid.html'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'epicycloid',\n        epicycloidA: 1.0,\n        epicycloidB: .25\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = parseFloat(state.shape.epicycloidA)\n    let b = parseFloat(state.shape.epicycloidB)\n\n    for (let i=0; i<128; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      let scale = 0.65\n      points.push(Vertex(scale * (a + b) * Math.cos(angle) - scale * b * Math.cos(((a + b) / b) * angle),\n                         scale * (a + b) * Math.sin(angle) - scale * b * Math.sin(((a + b) / b) * angle)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    hypocycloidA: {\n      title: 'Large circle radius',\n      step: 0.1,\n    },\n    hypocycloidB: {\n      title: 'Small circle radius',\n      step: 0.1,\n    },\n  }\n}\n\nexport default class Star extends Shape {\n  constructor() {\n    super('Web')\n    this.link = 'http://mathworld.wolfram.com/Hypocycloid.html'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'hypocycloid',\n        hypocycloidA: 1.5,\n        hypocycloidB: 0.25\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = parseFloat(state.shape.hypocycloidA)\n    let b = parseFloat(state.shape.hypocycloidB)\n\n    for (let i=0; i<128; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      let scale = 0.65\n      points.push(Vertex(scale * (a - b) * Math.cos(angle) + scale * b * Math.cos(((a - b) / b) * angle),\n                         scale * (a - b) * Math.sin(angle) - scale * b * Math.sin(((a - b) / b) * angle)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    roseN: {\n      title: 'Numerator',\n      step: 1,\n      min: 1\n    },\n    roseD: {\n      title: 'Denominator',\n      step: 1,\n      min: 1\n    },\n  }\n}\n\nexport default class Rose extends Shape {\n  constructor() {\n    super('Rose')\n    this.link = 'http://mathworld.wolfram.com/Rose.html'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'rose',\n        roseN: 3,\n        roseD: 2\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = 2\n    let n = parseInt(state.shape.roseN)\n    let d = parseInt(state.shape.roseD)\n    let p = (n * d % 2 === 0) ? 2 : 1\n    let thetaClose = d * p * 32 * n\n    let resolution = 64 * n\n\n    for (let i=0; i<thetaClose+1; i++) {\n      let theta = Math.PI * 2.0 / (resolution) * i\n      let r = 0.5 * a * Math.sin((n / d) * theta)\n      points.push(Vertex(r * Math.cos(theta), r * Math.sin(theta)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export let raysol_cursive = {\n  ' ' : [ [0.000,-0.637], [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637],  ],\n  '0' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.275,-0.637], [0.285,-0.630], [0.320,-0.592], [0.365,-0.524], [0.377,-0.493], [0.400,-0.399], [0.417,-0.273], [0.417,-0.168], [0.417,-0.062], [0.417,0.043], [0.417,0.148], [0.417,0.254], [0.417,0.359], [0.417,0.464], [0.417,0.570], [0.417,0.680], [0.405,0.748], [0.389,0.794], [0.375,0.839], [0.355,0.887], [0.315,0.935], [0.285,0.935], [0.257,0.935], [0.221,0.887], [0.187,0.839], [0.170,0.794], [0.157,0.748], [0.145,0.680], [0.145,0.571], [0.145,0.462], [0.145,0.353], [0.145,0.244], [0.145,0.135], [0.145,0.026], [0.145,-0.083], [0.145,-0.192], [0.145,-0.301], [0.157,-0.410], [0.175,-0.506], [0.194,-0.552], [0.224,-0.593], [0.244,-0.613], [0.275,-0.637], [0.327,-0.637], [0.365,-0.637], [0.408,-0.637], [0.451,-0.637], [0.493,-0.637], [0.535,-0.637], [0.578,-0.637],  ],\n  '1' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.170,-0.480], [0.170,-0.323], [0.170,-0.166], [0.170,-0.009], [0.170,0.149], [0.170,0.306], [0.170,0.463], [0.170,0.621], [0.170,0.778], [0.170,0.935], [0.170,0.778], [0.170,0.621], [0.170,0.463], [0.170,0.306], [0.170,0.149], [0.170,-0.009], [0.170,-0.166], [0.170,-0.323], [0.170,-0.480], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637],  ],\n  '2' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.553], [0.221,-0.388], [0.272,-0.181], [0.312,-0.025], [0.330,0.181], [0.344,0.361], [0.349,0.444], [0.354,0.576], [0.357,0.663], [0.354,0.744], [0.345,0.808], [0.338,0.851], [0.332,0.875], [0.315,0.901], [0.293,0.918], [0.272,0.909], [0.247,0.893], [0.221,0.876], [0.187,0.850], [0.153,0.774], [0.123,0.723], [0.153,0.774], [0.187,0.850], [0.221,0.876], [0.247,0.893], [0.272,0.909], [0.293,0.918], [0.315,0.901], [0.332,0.875], [0.338,0.851], [0.345,0.808], [0.354,0.744], [0.357,0.663], [0.354,0.576], [0.349,0.444], [0.344,0.361], [0.330,0.181], [0.312,-0.025], [0.272,-0.181], [0.221,-0.388], [0.170,-0.553], [0.213,-0.552], [0.272,-0.484], [0.306,-0.450], [0.340,-0.425], [0.383,-0.442], [0.425,-0.467], [0.468,-0.518], [0.510,-0.595], [0.552,-0.637],  ],\n  '3' : [ [0.043,-0.637], [0.085,-0.637], [0.136,-0.637], [0.165,-0.637], [0.202,-0.637], [0.221,-0.637], [0.247,-0.623], [0.280,-0.603], [0.306,-0.569], [0.324,-0.534], [0.338,-0.504], [0.354,-0.469], [0.365,-0.399], [0.382,-0.324], [0.391,-0.247], [0.392,-0.163], [0.388,-0.092], [0.382,-0.032], [0.375,0.026], [0.350,0.120], [0.310,0.170], [0.272,0.187], [0.213,0.205], [0.279,0.236], [0.293,0.260], [0.320,0.314], [0.348,0.383], [0.367,0.486], [0.375,0.580], [0.370,0.665], [0.363,0.749], [0.356,0.808], [0.336,0.889], [0.321,0.926], [0.293,0.935], [0.269,0.926], [0.242,0.918], [0.206,0.893], [0.166,0.859], [0.206,0.893], [0.242,0.918], [0.269,0.926], [0.293,0.935], [0.321,0.926], [0.336,0.889], [0.356,0.808], [0.363,0.749], [0.370,0.665], [0.375,0.580], [0.367,0.486], [0.348,0.383], [0.320,0.314], [0.293,0.260], [0.279,0.236], [0.242,0.205], [0.272,0.187], [0.310,0.170], [0.350,0.120], [0.375,0.026], [0.382,-0.032], [0.388,-0.092], [0.392,-0.163], [0.391,-0.247], [0.382,-0.324], [0.365,-0.399], [0.354,-0.469], [0.338,-0.504], [0.324,-0.534], [0.306,-0.569], [0.280,-0.603], [0.247,-0.623], [0.213,-0.612], [0.179,-0.595], [0.145,-0.569], [0.111,-0.467], [0.145,-0.569], [0.179,-0.595], [0.213,-0.612], [0.247,-0.623], [0.280,-0.603], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637],  ],\n  '4' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.383,-0.480], [0.383,-0.323], [0.383,-0.166], [0.383,-0.009], [0.383,0.149], [0.383,0.306], [0.383,0.463], [0.383,0.621], [0.383,0.778], [0.383,0.935], [0.340,0.804], [0.298,0.673], [0.255,0.542], [0.213,0.411], [0.170,0.280], [0.128,0.149], [0.178,0.149], [0.228,0.149], [0.279,0.149], [0.329,0.149], [0.380,0.149], [0.430,0.149], [0.481,0.149], [0.531,0.149], [0.570,0.149], [0.531,0.149], [0.481,0.149], [0.430,0.149], [0.380,0.149], [0.383,-0.009], [0.383,-0.166], [0.383,-0.323], [0.383,-0.480], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637], [0.552,-0.637], [0.595,-0.637], [0.637,-0.637], [0.680,-0.637],  ],\n  '5' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.219,-0.637], [0.260,-0.637], [0.303,-0.637], [0.330,-0.634], [0.365,-0.600], [0.398,-0.549], [0.427,-0.463], [0.442,-0.348], [0.446,-0.170], [0.443,-0.018], [0.425,0.085], [0.398,0.187], [0.372,0.249], [0.340,0.271], [0.304,0.293], [0.270,0.272], [0.220,0.230], [0.189,0.192], [0.151,0.135], [0.151,0.294], [0.151,0.452], [0.151,0.610], [0.151,0.768], [0.151,0.876], [0.179,0.876], [0.208,0.876], [0.236,0.876], [0.264,0.876], [0.292,0.876], [0.320,0.876], [0.365,0.876], [0.425,0.876], [0.365,0.876], [0.320,0.876], [0.292,0.876], [0.264,0.876], [0.236,0.876], [0.208,0.876], [0.179,0.876], [0.151,0.876], [0.151,0.768], [0.151,0.610], [0.151,0.452], [0.151,0.294], [0.151,0.135], [0.189,0.192], [0.220,0.230], [0.270,0.272], [0.304,0.293], [0.340,0.271], [0.372,0.249], [0.398,0.187], [0.425,0.085], [0.443,-0.018], [0.446,-0.170], [0.442,-0.348], [0.427,-0.463], [0.398,-0.549], [0.365,-0.600], [0.330,-0.634], [0.303,-0.637], [0.260,-0.637], [0.213,-0.603], [0.179,-0.552], [0.145,-0.467], [0.119,-0.382], [0.093,-0.340], [0.076,-0.323], [0.093,-0.340], [0.119,-0.382], [0.145,-0.467], [0.179,-0.552], [0.213,-0.603], [0.260,-0.637], [0.303,-0.637], [0.330,-0.637], [0.408,-0.637], [0.451,-0.637], [0.493,-0.637], [0.535,-0.637], [0.578,-0.637], [0.620,-0.637], [0.663,-0.637],  ],\n  '6' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.224,-0.593], [0.244,-0.613], [0.275,-0.637], [0.327,-0.630], [0.363,-0.592], [0.407,-0.524], [0.419,-0.493], [0.433,-0.458], [0.462,-0.273], [0.463,-0.174], [0.455,-0.064], [0.448,-0.019], [0.432,0.050], [0.417,0.096], [0.398,0.144], [0.360,0.183], [0.309,0.191], [0.279,0.183], [0.257,0.174], [0.227,0.147], [0.166,0.078], [0.186,0.182], [0.207,0.286], [0.228,0.390], [0.248,0.494], [0.269,0.598], [0.289,0.702], [0.310,0.806], [0.331,0.910], [0.310,0.806], [0.289,0.702], [0.269,0.598], [0.248,0.494], [0.228,0.390], [0.207,0.286], [0.186,0.182], [0.166,0.078], [0.138,-0.051], [0.132,-0.125], [0.128,-0.198], [0.137,-0.340], [0.153,-0.410], [0.175,-0.506], [0.196,-0.552], [0.244,-0.613], [0.275,-0.637], [0.327,-0.630], [0.365,-0.637], [0.408,-0.637], [0.451,-0.637], [0.493,-0.637], [0.535,-0.637], [0.578,-0.637],  ],\n  '7' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.196,-0.480], [0.221,-0.323], [0.247,-0.166], [0.272,-0.009], [0.298,0.149], [0.323,0.306], [0.349,0.463], [0.374,0.621], [0.400,0.778], [0.425,0.935], [0.388,0.935], [0.351,0.935], [0.313,0.935], [0.276,0.935], [0.239,0.935], [0.202,0.935], [0.165,0.935], [0.128,0.935], [0.165,0.935], [0.202,0.935], [0.239,0.935], [0.276,0.935], [0.313,0.935], [0.351,0.935], [0.388,0.935], [0.425,0.935], [0.400,0.778], [0.374,0.621], [0.349,0.463], [0.323,0.306], [0.298,0.149], [0.272,-0.009], [0.247,-0.166], [0.221,-0.323], [0.196,-0.480], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637], [0.552,-0.637],  ],\n  '8' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.278,-0.635], [0.309,-0.637], [0.347,-0.614], [0.378,-0.584], [0.398,-0.515], [0.426,-0.411], [0.439,-0.281], [0.435,-0.185], [0.423,-0.118], [0.398,0.017], [0.370,0.116], [0.337,0.214], [0.322,0.246], [0.305,0.281], [0.281,0.315], [0.264,0.349], [0.247,0.396], [0.230,0.442], [0.213,0.510], [0.196,0.595], [0.204,0.694], [0.230,0.793], [0.255,0.850], [0.285,0.883], [0.322,0.909], [0.358,0.883], [0.388,0.850], [0.414,0.793], [0.439,0.694], [0.448,0.595], [0.431,0.510], [0.414,0.442], [0.397,0.396], [0.380,0.349], [0.363,0.315], [0.338,0.281], [0.289,0.246], [0.274,0.214], [0.241,0.116], [0.213,0.017], [0.188,-0.118], [0.176,-0.185], [0.172,-0.281], [0.185,-0.411], [0.213,-0.515], [0.233,-0.584], [0.264,-0.614], [0.302,-0.637], [0.333,-0.635], [0.347,-0.614], [0.378,-0.584], [0.398,-0.515], [0.426,-0.411], [0.439,-0.281], [0.435,-0.185], [0.423,-0.118], [0.398,0.017], [0.370,0.116], [0.398,0.017], [0.423,-0.118], [0.435,-0.185], [0.439,-0.281], [0.426,-0.411], [0.398,-0.515], [0.378,-0.584], [0.347,-0.614], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637], [0.552,-0.637],  ],\n  '9' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.357,-0.637], [0.359,-0.463], [0.359,-0.306], [0.359,-0.148], [0.359,0.010], [0.359,0.168], [0.359,0.326], [0.359,0.484], [0.359,0.642], [0.359,0.799], [0.359,0.935], [0.324,0.935], [0.260,0.935], [0.208,0.893], [0.170,0.808], [0.153,0.672], [0.146,0.513], [0.149,0.379], [0.158,0.296], [0.170,0.235], [0.194,0.119], [0.221,0.086], [0.254,0.094], [0.279,0.119], [0.309,0.145], [0.332,0.162], [0.359,0.168], [0.359,0.010], [0.359,-0.148], [0.359,-0.306], [0.359,-0.463], [0.357,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637],  ],\n  'A' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.229,-0.632], [0.267,-0.610], [0.312,-0.562], [0.358,-0.452], [0.397,-0.358], [0.358,-0.452], [0.312,-0.562], [0.267,-0.610], [0.229,-0.632], [0.191,-0.594], [0.154,-0.512], [0.125,-0.437], [0.103,-0.326], [0.087,-0.173], [0.085,-0.042], [0.094,0.146], [0.113,0.296], [0.142,0.435], [0.169,0.524], [0.217,0.658], [0.260,0.745], [0.319,0.834], [0.395,0.910], [0.432,0.935], [0.431,0.855], [0.430,0.732], [0.429,0.609], [0.429,0.486], [0.428,0.362], [0.427,0.239], [0.426,0.116], [0.425,-0.007], [0.424,-0.131], [0.423,-0.254], [0.423,-0.317], [0.434,-0.414], [0.477,-0.486], [0.517,-0.552], [0.554,-0.595], [0.606,-0.637],  ],\n  'B' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.128,-0.480], [0.128,-0.322], [0.128,-0.164], [0.128,-0.006], [0.128,0.151], [0.128,0.309], [0.128,0.467], [0.128,0.625], [0.128,0.782], [0.140,0.808], [0.164,0.850], [0.190,0.893], [0.223,0.922], [0.251,0.926], [0.276,0.926], [0.294,0.910], [0.323,0.875], [0.350,0.829], [0.367,0.779], [0.382,0.705], [0.380,0.604], [0.374,0.538], [0.361,0.434], [0.344,0.340], [0.311,0.255], [0.258,0.213], [0.238,0.213], [0.258,0.213], [0.298,0.174], [0.325,0.112], [0.340,0.087], [0.374,0.001], [0.395,-0.099], [0.405,-0.163], [0.407,-0.303], [0.406,-0.341], [0.398,-0.417], [0.390,-0.471], [0.349,-0.569], [0.311,-0.613], [0.286,-0.637], [0.238,-0.637], [0.187,-0.637], [0.128,-0.637], [0.187,-0.637], [0.238,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637],  ],\n  'C' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.603], [0.230,-0.544], [0.198,-0.456], [0.179,-0.399], [0.166,-0.303], [0.153,-0.178], [0.149,-0.059], [0.149,0.043], [0.149,0.165], [0.159,0.332], [0.169,0.459], [0.193,0.591], [0.231,0.734], [0.274,0.824], [0.326,0.895], [0.388,0.935], [0.436,0.916], [0.481,0.792], [0.510,0.640], [0.520,0.500], [0.510,0.640], [0.481,0.792], [0.436,0.916], [0.388,0.935], [0.326,0.895], [0.274,0.824], [0.231,0.734], [0.193,0.591], [0.169,0.459], [0.159,0.332], [0.149,0.165], [0.149,0.043], [0.149,-0.059], [0.153,-0.178], [0.166,-0.303], [0.198,-0.456], [0.230,-0.544], [0.272,-0.599], [0.341,-0.637], [0.388,-0.637], [0.425,-0.637], [0.442,-0.637], [0.476,-0.637], [0.510,-0.637], [0.552,-0.637], [0.595,-0.637], [0.637,-0.637],  ],\n  'D' : [ [0.062,-0.637], [0.107,-0.637], [0.160,-0.637], [0.200,-0.637], [0.232,-0.637], [0.272,-0.637], [0.319,-0.637], [0.386,-0.615], [0.459,-0.562], [0.477,-0.527], [0.510,-0.443], [0.536,-0.311], [0.545,-0.208], [0.552,-0.050], [0.551,0.038], [0.541,0.184], [0.531,0.332], [0.519,0.420], [0.505,0.505], [0.491,0.584], [0.450,0.695], [0.408,0.782], [0.374,0.833], [0.323,0.890], [0.283,0.915], [0.248,0.910], [0.213,0.882], [0.213,0.753], [0.213,0.675], [0.213,0.492], [0.213,0.298], [0.213,0.119], [0.213,-0.007], [0.213,-0.293], [0.213,-0.395], [0.213,-0.552], [0.232,-0.637], [0.272,-0.637], [0.319,-0.637], [0.374,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637], [0.552,-0.637], [0.595,-0.637], [0.637,-0.637], [0.680,-0.637],  ],\n  'E' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.552], [0.190,-0.465], [0.158,-0.338], [0.138,-0.212], [0.137,-0.072], [0.155,-0.009], [0.178,0.034], [0.203,0.077], [0.247,0.119], [0.282,0.155], [0.315,0.176], [0.357,0.176], [0.315,0.176], [0.285,0.213], [0.254,0.269], [0.237,0.292], [0.193,0.378], [0.165,0.462], [0.146,0.587], [0.147,0.701], [0.160,0.809], [0.192,0.892], [0.239,0.935], [0.282,0.935], [0.315,0.935], [0.337,0.935], [0.362,0.935], [0.400,0.935], [0.362,0.935], [0.337,0.935], [0.315,0.935], [0.282,0.935], [0.239,0.935], [0.192,0.892], [0.160,0.809], [0.147,0.701], [0.146,0.587], [0.165,0.462], [0.193,0.378], [0.237,0.292], [0.254,0.269], [0.285,0.213], [0.315,0.176], [0.357,0.176], [0.315,0.176], [0.282,0.155], [0.247,0.119], [0.203,0.077], [0.178,0.034], [0.155,-0.009], [0.137,-0.072], [0.138,-0.212], [0.158,-0.338], [0.190,-0.465], [0.222,-0.549], [0.250,-0.586], [0.291,-0.620], [0.348,-0.632], [0.393,-0.631], [0.432,-0.631], [0.468,-0.630],  ],\n  'F' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.289,-0.637], [0.332,-0.637], [0.362,-0.618], [0.396,-0.550], [0.426,-0.409], [0.426,-0.291], [0.427,-0.172], [0.427,-0.054], [0.428,0.064], [0.429,0.183], [0.429,0.301], [0.430,0.419], [0.430,0.538], [0.431,0.656], [0.431,0.774], [0.485,0.757], [0.538,0.737], [0.587,0.765], [0.641,0.803], [0.697,0.850], [0.641,0.803], [0.587,0.765], [0.538,0.737], [0.485,0.757], [0.431,0.774], [0.381,0.812], [0.316,0.862], [0.233,0.862], [0.159,0.777], [0.123,0.552], [0.159,0.777], [0.233,0.862], [0.316,0.862], [0.381,0.812], [0.431,0.774], [0.431,0.656], [0.430,0.538], [0.430,0.419], [0.429,0.301], [0.429,0.183], [0.371,0.186], [0.316,0.203], [0.221,0.220], [0.316,0.203], [0.371,0.186], [0.429,0.183], [0.480,0.184], [0.537,0.192], [0.612,0.201], [0.537,0.192], [0.480,0.184], [0.429,0.183], [0.428,0.064], [0.427,-0.054], [0.427,-0.172], [0.427,-0.246], [0.425,-0.357], [0.426,-0.409], [0.417,-0.501], [0.387,-0.564], [0.332,-0.620], [0.296,-0.617], [0.282,-0.625], [0.269,-0.625], [0.250,-0.617], [0.226,-0.552], [0.210,-0.501], [0.206,-0.434], [0.211,-0.370], [0.237,-0.316], [0.255,-0.293], [0.287,-0.289], [0.326,-0.293], [0.370,-0.347], [0.433,-0.467], [0.463,-0.538], [0.517,-0.607], [0.540,-0.654], [0.606,-0.688], [0.655,-0.680], [0.703,-0.671], [0.746,-0.637],  ],\n  'G' : [ [0.042,-0.637], [0.086,-0.612], [0.122,-0.563], [0.158,-0.511], [0.195,-0.460], [0.244,-0.358], [0.287,-0.249], [0.305,-0.192], [0.329,-0.105], [0.354,0.024], [0.379,0.153], [0.391,0.231], [0.410,0.326], [0.419,0.423], [0.429,0.541], [0.440,0.657], [0.442,0.746], [0.441,0.860], [0.421,0.948], [0.381,0.921], [0.360,0.894], [0.349,0.854], [0.320,0.739], [0.315,0.709], [0.306,0.594], [0.304,0.544], [0.314,0.392], [0.327,0.327], [0.348,0.237], [0.417,0.118], [0.466,0.121], [0.524,0.187], [0.558,0.255], [0.589,0.385], [0.631,0.554], [0.623,0.374], [0.605,0.053], [0.590,-0.086], [0.570,-0.240], [0.552,-0.346], [0.516,-0.476], [0.478,-0.558], [0.432,-0.609], [0.385,-0.638], [0.340,-0.633], [0.299,-0.613], [0.250,-0.561], [0.228,-0.483], [0.213,-0.407], [0.190,-0.332], [0.162,-0.181], [0.233,-0.240], [0.318,-0.319], [0.392,-0.399], [0.455,-0.437], [0.516,-0.476], [0.571,-0.514], [0.623,-0.528], [0.675,-0.550], [0.744,-0.595], [0.806,-0.637],  ],\n  'H' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.248,-0.637], [0.248,-0.460], [0.248,-0.330], [0.248,-0.199], [0.248,-0.068], [0.248,0.063], [0.248,0.193], [0.248,0.324], [0.248,0.455], [0.248,0.552], [0.248,0.657], [0.238,0.753], [0.227,0.836], [0.196,0.893], [0.136,0.935], [0.196,0.893], [0.227,0.836], [0.238,0.753], [0.248,0.657], [0.248,0.552], [0.248,0.455], [0.248,0.324], [0.248,0.193], [0.318,0.220], [0.387,0.246], [0.456,0.272], [0.526,0.298], [0.552,0.324], [0.552,0.455], [0.552,0.552], [0.552,0.657], [0.552,0.765], [0.561,0.850], [0.582,0.909], [0.637,0.935], [0.582,0.909], [0.561,0.850], [0.552,0.765], [0.552,0.657], [0.552,0.552], [0.552,0.455], [0.552,0.324], [0.552,0.193], [0.552,0.063], [0.552,-0.068], [0.552,-0.199], [0.552,-0.330], [0.552,-0.460], [0.570,-0.552], [0.595,-0.612], [0.637,-0.629], [0.680,-0.637], [0.723,-0.637], [0.765,-0.637],  ],\n  'I' : [ [0.042,-0.637], [0.085,-0.637], [0.144,-0.637], [0.212,-0.637], [0.257,-0.624], [0.298,-0.645], [0.342,-0.652], [0.391,-0.624], [0.419,-0.453], [0.457,-0.324], [0.438,-0.200], [0.416,-0.003], [0.395,0.155], [0.386,0.345], [0.383,0.447], [0.386,0.666], [0.399,0.799], [0.416,0.889], [0.442,0.951], [0.510,0.953], [0.535,0.949], [0.560,0.851], [0.576,0.777], [0.594,0.536], [0.599,0.357], [0.590,0.084], [0.583,-0.017], [0.550,-0.254], [0.523,-0.360], [0.503,-0.428], [0.450,-0.532], [0.391,-0.624], [0.342,-0.652], [0.298,-0.645], [0.257,-0.624], [0.210,-0.570], [0.190,-0.491], [0.179,-0.415], [0.158,-0.339], [0.135,-0.187], [0.204,-0.248], [0.287,-0.330], [0.358,-0.413], [0.419,-0.453], [0.479,-0.494], [0.532,-0.534], [0.584,-0.550], [0.636,-0.573], [0.704,-0.612], [0.765,-0.637],  ],\n  'J' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.229,-0.584], [0.296,-0.566], [0.214,-0.359], [0.171,-0.187], [0.150,0.053], [0.146,0.206], [0.143,0.435], [0.158,0.681], [0.191,0.852], [0.220,0.903], [0.253,0.929], [0.296,0.939], [0.345,0.931], [0.367,0.888], [0.394,0.765], [0.401,0.702], [0.407,0.535], [0.409,0.358], [0.404,0.090], [0.400,-0.104], [0.394,-0.292], [0.390,-0.465], [0.383,-0.658], [0.376,-0.803], [0.380,-0.978], [0.368,-1.143], [0.356,-1.289], [0.331,-1.356], [0.302,-1.382], [0.213,-1.384], [0.183,-1.359], [0.155,-1.290], [0.149,-1.147], [0.155,-0.994], [0.173,-0.806], [0.198,-0.695], [0.229,-0.584], [0.294,-0.566], [0.338,-0.582], [0.381,-0.599], [0.424,-0.615], [0.468,-0.631], [0.510,-0.630], [0.553,-0.630], [0.594,-0.637],  ],\n  'K' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.270,-0.478], [0.276,-0.345], [0.281,-0.211], [0.287,-0.078], [0.292,0.055], [0.298,0.189], [0.290,0.307], [0.282,0.425], [0.273,0.542], [0.265,0.660], [0.257,0.778], [0.249,0.896], [0.221,0.893], [0.191,0.885], [0.158,0.828], [0.134,0.756], [0.111,0.681], [0.134,0.756], [0.158,0.828], [0.191,0.885], [0.221,0.893], [0.249,0.896], [0.257,0.778], [0.265,0.660], [0.273,0.542], [0.282,0.425], [0.290,0.307], [0.298,0.189], [0.344,0.236], [0.376,0.314], [0.407,0.391], [0.439,0.469], [0.470,0.546], [0.502,0.624], [0.533,0.702], [0.565,0.779], [0.575,0.889], [0.565,0.779], [0.533,0.702], [0.502,0.624], [0.470,0.546], [0.439,0.469], [0.407,0.391], [0.376,0.314], [0.344,0.236], [0.313,0.159], [0.338,0.082], [0.363,0.006], [0.388,-0.070], [0.412,-0.146], [0.437,-0.222], [0.462,-0.299], [0.487,-0.375], [0.512,-0.451], [0.537,-0.527], [0.562,-0.612], [0.610,-0.637], [0.650,-0.637], [0.681,-0.637], [0.721,-0.637], [0.763,-0.637],  ],\n  'L' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.162,-0.629], [0.185,-0.617], [0.203,-0.625], [0.216,-0.625], [0.230,-0.617], [0.260,-0.594], [0.279,-0.564], [0.315,-0.501], [0.341,-0.421], [0.358,-0.357], [0.361,-0.246], [0.370,-0.156], [0.374,-0.030], [0.375,0.104], [0.371,0.297], [0.370,0.373], [0.378,0.412], [0.375,0.502], [0.388,0.686], [0.394,0.749], [0.412,0.860], [0.436,0.932], [0.447,0.976], [0.484,0.999], [0.513,0.944], [0.531,0.872], [0.541,0.745], [0.535,0.666], [0.525,0.613], [0.485,0.515], [0.470,0.492], [0.424,0.437], [0.404,0.424], [0.330,0.406], [0.312,0.408], [0.250,0.437], [0.193,0.492], [0.143,0.559], [0.193,0.492], [0.250,0.437], [0.312,0.408], [0.330,0.406], [0.404,0.424], [0.424,0.437], [0.470,0.492], [0.485,0.515], [0.525,0.613], [0.535,0.666], [0.541,0.745], [0.531,0.872], [0.513,0.944], [0.484,0.999], [0.447,0.976], [0.436,0.932], [0.412,0.860], [0.394,0.749], [0.388,0.686], [0.375,0.502], [0.378,0.412], [0.370,0.373], [0.371,0.297], [0.375,0.104], [0.374,-0.030], [0.370,-0.156], [0.361,-0.246], [0.358,-0.357], [0.341,-0.421], [0.315,-0.501], [0.279,-0.564], [0.260,-0.594], [0.230,-0.617], [0.216,-0.625], [0.203,-0.625], [0.185,-0.617], [0.160,-0.552], [0.145,-0.501], [0.141,-0.434], [0.145,-0.370], [0.171,-0.316], [0.190,-0.293], [0.221,-0.289], [0.261,-0.293], [0.305,-0.347], [0.367,-0.467], [0.398,-0.538], [0.452,-0.607], [0.474,-0.637], [0.540,-0.637], [0.590,-0.637], [0.637,-0.637], [0.680,-0.637],  ],\n  'M' : [ [0.043,-0.637], [0.106,-0.637], [0.170,-0.637], [0.234,-0.637], [0.291,-0.587], [0.296,-0.473], [0.301,-0.358], [0.306,-0.244], [0.311,-0.129], [0.316,-0.015], [0.322,0.100], [0.327,0.214], [0.332,0.329], [0.337,0.443], [0.342,0.558], [0.327,0.683], [0.314,0.783], [0.296,0.898], [0.250,0.944], [0.206,0.903], [0.161,0.834], [0.119,0.725], [0.161,0.834], [0.206,0.903], [0.250,0.944], [0.296,0.898], [0.314,0.783], [0.327,0.683], [0.342,0.558], [0.337,0.443], [0.332,0.329], [0.327,0.214], [0.322,0.100], [0.316,-0.015], [0.311,-0.129], [0.306,-0.244], [0.301,-0.358], [0.296,-0.473], [0.291,-0.587], [0.296,-0.473], [0.301,-0.358], [0.306,-0.244], [0.311,-0.129], [0.316,-0.015], [0.322,0.100], [0.327,0.214], [0.332,0.329], [0.337,0.443], [0.342,0.558], [0.364,0.724], [0.400,0.868], [0.461,0.942], [0.529,0.956], [0.561,0.879], [0.581,0.793], [0.594,0.718], [0.616,0.555], [0.612,0.441], [0.607,0.327], [0.602,0.212], [0.598,0.098], [0.593,-0.017], [0.589,-0.131], [0.584,-0.245], [0.579,-0.360], [0.575,-0.474], [0.570,-0.588], [0.575,-0.474], [0.579,-0.360], [0.584,-0.245], [0.589,-0.131], [0.593,-0.017], [0.598,0.098], [0.602,0.212], [0.607,0.327], [0.612,0.441], [0.616,0.555], [0.640,0.748], [0.677,0.892], [0.699,0.946], [0.740,0.984], [0.810,0.980], [0.837,0.916], [0.856,0.843], [0.868,0.768], [0.875,0.692], [0.873,0.569], [0.872,0.446], [0.870,0.323], [0.868,0.200], [0.867,0.077], [0.865,-0.046], [0.863,-0.169], [0.861,-0.292], [0.860,-0.415], [0.858,-0.538], [0.908,-0.597], [0.961,-0.637], [1.000,-0.637], [1.043,-0.637], [1.093,-0.637],  ],\n  'N' : [ [0.064,-0.637], [0.128,-0.637], [0.213,-0.637], [0.284,-0.616], [0.288,-0.561], [0.290,-0.454], [0.292,-0.348], [0.293,-0.241], [0.295,-0.134], [0.297,-0.028], [0.298,0.079], [0.300,0.186], [0.302,0.292], [0.303,0.399], [0.305,0.506], [0.291,0.686], [0.279,0.786], [0.264,0.896], [0.235,0.953], [0.203,0.949], [0.166,0.894], [0.141,0.814], [0.117,0.726], [0.141,0.814], [0.166,0.894], [0.203,0.949], [0.235,0.953], [0.264,0.896], [0.279,0.786], [0.291,0.686], [0.305,0.506], [0.303,0.399], [0.302,0.292], [0.300,0.186], [0.298,0.079], [0.297,-0.028], [0.295,-0.134], [0.293,-0.241], [0.292,-0.348], [0.290,-0.454], [0.288,-0.561], [0.284,-0.616], [0.288,-0.561], [0.290,-0.454], [0.292,-0.348], [0.293,-0.241], [0.295,-0.134], [0.297,-0.028], [0.298,0.079], [0.300,0.186], [0.302,0.292], [0.303,0.399], [0.305,0.506], [0.317,0.620], [0.329,0.753], [0.356,0.872], [0.379,0.944], [0.420,0.974], [0.474,0.975], [0.505,0.924], [0.539,0.841], [0.554,0.766], [0.565,0.614], [0.571,0.449], [0.570,0.348], [0.570,0.248], [0.569,0.148], [0.569,0.048], [0.569,-0.052], [0.568,-0.153], [0.568,-0.253], [0.567,-0.353], [0.567,-0.453], [0.566,-0.554], [0.599,-0.605], [0.617,-0.637], [0.653,-0.637], [0.677,-0.637], [0.710,-0.637], [0.752,-0.637],  ],\n  'O' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.283,-0.621], [0.310,-0.626], [0.357,-0.620], [0.403,-0.584], [0.433,-0.552], [0.456,-0.495], [0.480,-0.438], [0.514,-0.280], [0.531,-0.097], [0.533,0.004], [0.533,0.173], [0.523,0.414], [0.518,0.528], [0.493,0.667], [0.459,0.817], [0.391,0.935], [0.357,0.935], [0.325,0.909], [0.286,0.848], [0.251,0.805], [0.217,0.721], [0.190,0.643], [0.166,0.527], [0.147,0.445], [0.135,0.318], [0.128,0.213], [0.128,0.123], [0.128,0.043], [0.133,-0.057], [0.153,-0.222], [0.170,-0.297], [0.186,-0.370], [0.208,-0.443], [0.225,-0.519], [0.255,-0.578], [0.283,-0.621], [0.310,-0.626], [0.357,-0.620], [0.468,-0.637], [0.510,-0.637], [0.552,-0.637], [0.595,-0.637], [0.637,-0.637], [0.680,-0.637], [0.723,-0.637],  ],\n  'P' : [ [0.043,-0.637], [0.085,-0.637], [0.119,-0.637], [0.145,-0.637], [0.145,-0.492], [0.145,-0.346], [0.145,-0.200], [0.145,-0.055], [0.145,0.091], [0.157,0.094], [0.205,0.064], [0.238,0.050], [0.302,0.078], [0.338,0.110], [0.389,0.200], [0.400,0.224], [0.428,0.366], [0.431,0.397], [0.433,0.486], [0.431,0.537], [0.428,0.612], [0.414,0.674], [0.388,0.785], [0.374,0.822], [0.344,0.897], [0.328,0.921], [0.302,0.935], [0.281,0.935], [0.247,0.918], [0.220,0.886], [0.200,0.850], [0.177,0.800], [0.162,0.748], [0.145,0.674], [0.145,0.528], [0.145,0.383], [0.145,0.237], [0.145,0.091], [0.145,-0.055], [0.145,-0.200], [0.145,-0.346], [0.145,-0.492], [0.145,-0.637], [0.187,-0.637], [0.230,-0.637], [0.272,-0.637], [0.315,-0.637], [0.357,-0.637], [0.400,-0.637], [0.442,-0.637], [0.485,-0.637], [0.510,-0.637], [0.552,-0.637],  ],\n  'Q' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.310,-0.637], [0.283,-0.621], [0.255,-0.578], [0.225,-0.519], [0.208,-0.443], [0.186,-0.370], [0.170,-0.297], [0.153,-0.222], [0.133,-0.057], [0.128,0.043], [0.128,0.123], [0.128,0.213], [0.135,0.318], [0.147,0.445], [0.166,0.527], [0.190,0.643], [0.217,0.721], [0.251,0.805], [0.286,0.859], [0.325,0.909], [0.357,0.935], [0.408,0.926], [0.459,0.817], [0.493,0.667], [0.518,0.528], [0.531,0.340], [0.533,0.173], [0.533,0.004], [0.531,-0.097], [0.514,-0.280], [0.480,-0.438], [0.456,-0.495], [0.433,-0.552], [0.403,-0.584], [0.357,-0.620], [0.310,-0.637], [0.283,-0.621], [0.255,-0.578], [0.225,-0.519], [0.208,-0.443], [0.222,-0.382], [0.239,-0.332], [0.275,-0.281], [0.337,-0.281], [0.387,-0.323], [0.430,-0.383], [0.457,-0.446], [0.506,-0.518], [0.546,-0.583], [0.591,-0.637], [0.630,-0.637], [0.676,-0.637],  ],\n  'R' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.162,-0.637], [0.204,-0.637], [0.204,-0.491], [0.204,-0.345], [0.204,-0.199], [0.204,-0.052], [0.204,0.094], [0.204,0.240], [0.204,0.386], [0.204,0.533], [0.204,0.679], [0.204,0.876], [0.240,0.893], [0.276,0.893], [0.324,0.893], [0.365,0.893], [0.408,0.893], [0.447,0.852], [0.483,0.765], [0.503,0.693], [0.513,0.643], [0.527,0.527], [0.525,0.425], [0.518,0.340], [0.499,0.281], [0.470,0.218], [0.425,0.153], [0.369,0.133], [0.315,0.119], [0.281,0.115], [0.255,0.112], [0.217,0.117], [0.225,0.058], [0.264,-0.042], [0.298,-0.170], [0.327,-0.251], [0.341,-0.288], [0.360,-0.338], [0.379,-0.387], [0.398,-0.436], [0.425,-0.501], [0.446,-0.561], [0.466,-0.620], [0.484,-0.654], [0.504,-0.671], [0.541,-0.680], [0.565,-0.671], [0.595,-0.637], [0.637,-0.637],  ],\n  'S' : [ [0.043,-0.637], [0.085,-0.637], [0.119,-0.612], [0.153,-0.569], [0.179,-0.527], [0.196,-0.450], [0.217,-0.348], [0.247,-0.178], [0.272,-0.042], [0.310,0.085], [0.344,0.213], [0.395,0.303], [0.417,0.383], [0.438,0.484], [0.455,0.578], [0.460,0.669], [0.461,0.763], [0.452,0.839], [0.435,0.898], [0.412,0.926], [0.370,0.935], [0.327,0.926], [0.292,0.909], [0.274,0.883], [0.263,0.830], [0.257,0.754], [0.253,0.697], [0.255,0.612], [0.258,0.552], [0.272,0.455], [0.293,0.323], [0.344,0.213], [0.395,0.128], [0.436,-0.041], [0.472,-0.153], [0.459,-0.291], [0.442,-0.357], [0.425,-0.425], [0.383,-0.535], [0.340,-0.599], [0.290,-0.612], [0.260,-0.617], [0.238,-0.625], [0.213,-0.625], [0.172,-0.617], [0.149,-0.569], [0.132,-0.501], [0.128,-0.434], [0.133,-0.370], [0.156,-0.316], [0.177,-0.293], [0.212,-0.281], [0.251,-0.281], [0.290,-0.293], [0.334,-0.347], [0.397,-0.467], [0.428,-0.538], [0.482,-0.607], [0.523,-0.654], [0.570,-0.688], [0.619,-0.680], [0.667,-0.637],  ],\n  'T' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.220,-0.637], [0.257,-0.637], [0.289,-0.620], [0.310,-0.601], [0.342,-0.553], [0.359,-0.510], [0.379,-0.418], [0.395,-0.340], [0.405,-0.212], [0.410,-0.080], [0.415,0.052], [0.420,0.184], [0.425,0.317], [0.430,0.449], [0.436,0.581], [0.441,0.713], [0.441,0.846], [0.460,0.830], [0.493,0.808], [0.526,0.804], [0.561,0.808], [0.594,0.830], [0.637,0.867], [0.697,0.908], [0.637,0.867], [0.594,0.830], [0.561,0.808], [0.526,0.804], [0.493,0.808], [0.460,0.830], [0.441,0.846], [0.392,0.879], [0.365,0.896], [0.340,0.911], [0.298,0.918], [0.236,0.877], [0.170,0.801], [0.236,0.877], [0.298,0.918], [0.340,0.911], [0.365,0.896], [0.392,0.879], [0.441,0.846], [0.441,0.713], [0.436,0.581], [0.430,0.449], [0.425,0.317], [0.420,0.184], [0.415,0.052], [0.410,-0.080], [0.405,-0.212], [0.395,-0.340], [0.290,-0.612], [0.260,-0.617], [0.238,-0.625], [0.213,-0.625], [0.172,-0.617], [0.149,-0.569], [0.132,-0.501], [0.128,-0.434], [0.133,-0.370], [0.156,-0.316], [0.177,-0.293], [0.212,-0.281], [0.251,-0.281], [0.290,-0.293], [0.334,-0.347], [0.397,-0.467], [0.428,-0.538], [0.482,-0.607], [0.523,-0.654], [0.570,-0.688], [0.619,-0.680], [0.667,-0.671], [0.710,-0.654], [0.752,-0.637], [0.795,-0.637],  ],\n  'U' : [ [0.043,-0.637], [0.085,-0.636], [0.127,-0.634], [0.170,-0.632], [0.210,-0.596], [0.251,-0.560], [0.275,-0.512], [0.260,-0.472], [0.246,-0.386], [0.244,-0.206], [0.251,-0.088], [0.259,0.030], [0.267,0.148], [0.275,0.266], [0.282,0.383], [0.290,0.501], [0.298,0.619], [0.306,0.737], [0.297,0.792], [0.269,0.879], [0.249,0.904], [0.201,0.878], [0.174,0.807], [0.144,0.703], [0.126,0.642], [0.097,0.589], [0.126,0.642], [0.144,0.703], [0.174,0.807], [0.201,0.878], [0.249,0.904], [0.269,0.879], [0.297,0.792], [0.306,0.737], [0.298,0.619], [0.290,0.501], [0.282,0.383], [0.275,0.266], [0.267,0.148], [0.259,0.030], [0.251,-0.088], [0.244,-0.206], [0.246,-0.386], [0.260,-0.472], [0.275,-0.512], [0.296,-0.566], [0.339,-0.610], [0.382,-0.621], [0.419,-0.589], [0.451,-0.538], [0.468,-0.502], [0.483,-0.445], [0.503,-0.402], [0.531,-0.345], [0.536,-0.167], [0.544,-0.046], [0.551,0.076], [0.559,0.198], [0.566,0.319], [0.574,0.441], [0.581,0.562], [0.589,0.684], [0.596,0.806], [0.609,0.966], [0.596,0.806], [0.589,0.684], [0.581,0.562], [0.574,0.441], [0.566,0.319], [0.559,0.198], [0.551,0.076], [0.544,-0.046], [0.536,-0.167], [0.533,-0.269], [0.531,-0.345], [0.537,-0.460], [0.548,-0.510], [0.563,-0.561], [0.601,-0.603], [0.637,-0.612], [0.679,-0.637], [0.721,-0.637], [0.765,-0.637],  ],\n  'V' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.629], [0.213,-0.620], [0.255,-0.595], [0.298,-0.569], [0.323,-0.510], [0.341,-0.441], [0.359,-0.501], [0.376,-0.540], [0.395,-0.586], [0.433,-0.637], [0.485,-0.612], [0.511,-0.567], [0.542,-0.422], [0.559,-0.276], [0.568,-0.151], [0.576,-0.026], [0.584,0.100], [0.593,0.225], [0.601,0.351], [0.610,0.476], [0.618,0.601], [0.626,0.727], [0.635,0.852], [0.643,0.935], [0.671,0.893], [0.710,0.837], [0.743,0.823], [0.771,0.848], [0.807,0.884], [0.771,0.848], [0.743,0.823], [0.710,0.837], [0.671,0.893], [0.643,0.935], [0.635,0.852], [0.626,0.727], [0.618,0.601], [0.610,0.476], [0.601,0.351], [0.593,0.225], [0.584,0.100], [0.576,-0.026], [0.568,-0.151], [0.559,-0.276], [0.542,-0.422], [0.511,-0.567], [0.485,-0.612], [0.433,-0.637], [0.395,-0.586], [0.376,-0.540], [0.359,-0.501], [0.341,-0.441], [0.321,-0.277], [0.321,-0.113], [0.321,0.052], [0.321,0.216], [0.321,0.380], [0.321,0.544], [0.313,0.737], [0.296,0.813], [0.276,0.884], [0.253,0.935], [0.230,0.909], [0.207,0.867], [0.185,0.816], [0.162,0.770], [0.128,0.691], [0.162,0.770], [0.185,0.816], [0.207,0.867], [0.230,0.909], [0.253,0.935], [0.276,0.884], [0.296,0.813], [0.313,0.737], [0.321,0.544], [0.321,0.380], [0.321,0.216], [0.321,0.052], [0.321,-0.113], [0.321,-0.277], [0.341,-0.441], [0.359,-0.501], [0.376,-0.540], [0.395,-0.586], [0.433,-0.637], [0.485,-0.612], [0.511,-0.567], [0.552,-0.603], [0.595,-0.620], [0.637,-0.637], [0.680,-0.637], [0.723,-0.637], [0.765,-0.637], [0.807,-0.637], [0.850,-0.637], [0.892,-0.637],  ],\n  'W' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.276,-0.590], [0.258,-0.498], [0.243,-0.420], [0.229,-0.281], [0.227,-0.205], [0.225,-0.103], [0.228,0.053], [0.231,0.210], [0.234,0.367], [0.238,0.523], [0.241,0.680], [0.239,0.809], [0.230,0.873], [0.206,0.952], [0.179,0.924], [0.153,0.808], [0.119,0.680], [0.153,0.808], [0.179,0.924], [0.206,0.952], [0.230,0.873], [0.239,0.809], [0.241,0.680], [0.238,0.523], [0.234,0.367], [0.231,0.210], [0.228,0.053], [0.225,-0.103], [0.227,-0.205], [0.229,-0.281], [0.243,-0.420], [0.258,-0.498], [0.276,-0.590], [0.300,-0.611], [0.326,-0.617], [0.363,-0.604], [0.394,-0.575], [0.428,-0.532], [0.456,-0.432], [0.475,-0.345], [0.493,-0.126], [0.495,-0.015], [0.496,0.097], [0.498,0.209], [0.499,0.321], [0.501,0.432], [0.502,0.544], [0.504,0.656], [0.505,0.768], [0.507,0.879], [0.509,0.935], [0.507,0.879], [0.505,0.768], [0.504,0.656], [0.502,0.544], [0.501,0.432], [0.499,0.321], [0.498,0.209], [0.496,0.097], [0.495,-0.015], [0.493,-0.126], [0.495,-0.394], [0.513,-0.495], [0.540,-0.546], [0.579,-0.612], [0.625,-0.612], [0.667,-0.569], [0.700,-0.523], [0.718,-0.473], [0.723,-0.325], [0.727,-0.177], [0.732,-0.030], [0.736,0.118], [0.741,0.266], [0.746,0.414], [0.750,0.562], [0.755,0.710], [0.759,0.857], [0.764,0.935], [0.759,0.857], [0.755,0.710], [0.750,0.562], [0.746,0.414], [0.741,0.266], [0.736,0.118], [0.732,-0.030], [0.727,-0.177], [0.723,-0.325], [0.718,-0.473], [0.757,-0.529], [0.801,-0.569], [0.844,-0.603], [0.887,-0.637], [0.930,-0.637], [0.973,-0.637],  ],\n  'X' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.161,-0.533], [0.194,-0.429], [0.227,-0.324], [0.260,-0.220], [0.293,-0.115], [0.326,-0.011], [0.359,0.094], [0.393,0.198], [0.426,0.303], [0.459,0.407], [0.492,0.512], [0.525,0.616], [0.558,0.721], [0.591,0.825], [0.625,0.930], [0.591,0.825], [0.558,0.721], [0.525,0.616], [0.492,0.512], [0.459,0.407], [0.426,0.303], [0.390,0.293], [0.380,0.414], [0.370,0.536], [0.360,0.657], [0.350,0.778], [0.318,0.917], [0.256,0.879], [0.213,0.791], [0.185,0.726], [0.154,0.624], [0.185,0.726], [0.213,0.791], [0.256,0.879], [0.318,0.917], [0.350,0.778], [0.360,0.657], [0.370,0.536], [0.380,0.414], [0.390,0.293], [0.400,0.172], [0.410,0.050], [0.420,-0.071], [0.430,-0.192], [0.440,-0.314], [0.451,-0.435], [0.474,-0.536], [0.492,-0.633], [0.518,-0.637], [0.518,-0.637], [0.558,-0.637], [0.607,-0.637], [0.637,-0.637], [0.680,-0.637], [0.723,-0.637],  ],\n  'Y' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.183,-0.552], [0.194,-0.432], [0.188,-0.317], [0.192,-0.191], [0.202,0.015], [0.213,0.220], [0.223,0.425], [0.234,0.630], [0.237,0.783], [0.223,0.898], [0.205,0.935], [0.170,0.926], [0.128,0.901], [0.170,0.926], [0.205,0.935], [0.223,0.898], [0.237,0.783], [0.234,0.630], [0.223,0.425], [0.213,0.220], [0.202,0.015], [0.192,-0.191], [0.188,-0.317], [0.194,-0.432], [0.212,-0.535], [0.233,-0.601], [0.261,-0.607], [0.287,-0.584], [0.314,-0.537], [0.343,-0.475], [0.365,-0.399], [0.395,-0.340], [0.433,-0.281], [0.443,-0.154], [0.453,-0.027], [0.463,0.099], [0.474,0.226], [0.484,0.353], [0.494,0.480], [0.504,0.607], [0.515,0.734], [0.525,0.850], [0.535,0.935], [0.525,0.850], [0.515,0.734], [0.504,0.607], [0.494,0.480], [0.484,0.353], [0.474,0.226], [0.463,0.099], [0.453,-0.027], [0.443,-0.154], [0.433,-0.281], [0.424,-0.422], [0.414,-0.563], [0.405,-0.703], [0.396,-0.844], [0.387,-0.985], [0.377,-1.126], [0.362,-1.254], [0.340,-1.335], [0.310,-1.360], [0.281,-1.373], [0.238,-1.385], [0.204,-1.335], [0.188,-1.270], [0.183,-1.157], [0.196,-1.068], [0.221,-0.960], [0.255,-0.850], [0.285,-0.742], [0.313,-0.684], [0.357,-0.637], [0.391,-0.637], [0.417,-0.637], [0.465,-0.637], [0.493,-0.637], [0.527,-0.637], [0.570,-0.637], [0.612,-0.637],  ],\n  'Z' : [ [0.043,-0.637], [0.085,-0.637], [0.123,-0.637], [0.162,-0.552], [0.198,-0.428], [0.244,-0.313], [0.313,-0.091], [0.349,0.058], [0.375,0.200], [0.392,0.341], [0.398,0.519], [0.381,0.683], [0.374,0.720], [0.351,0.806], [0.314,0.896], [0.281,0.901], [0.223,0.864], [0.171,0.774], [0.157,0.741], [0.128,0.679], [0.157,0.741], [0.171,0.774], [0.223,0.864], [0.281,0.901], [0.314,0.896], [0.351,0.806], [0.374,0.720], [0.381,0.683], [0.398,0.519], [0.392,0.341], [0.375,0.200], [0.349,0.058], [0.313,-0.091], [0.244,-0.313], [0.198,-0.428], [0.162,-0.552], [0.192,-0.535], [0.208,-0.516], [0.266,-0.512], [0.281,-0.537], [0.333,-0.801], [0.326,-0.969], [0.323,-1.018], [0.293,-1.236], [0.285,-1.280], [0.249,-1.421], [0.190,-1.431], [0.152,-1.411], [0.137,-1.374], [0.126,-1.326], [0.117,-1.209], [0.123,-1.062], [0.156,-0.938], [0.188,-0.821], [0.221,-0.722], [0.251,-0.650], [0.298,-0.612], [0.323,-0.620], [0.357,-0.637], [0.396,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637],  ],\n  'a' : [ [0.043,-0.569], [0.073,-0.408], [0.073,-0.351], [0.076,-0.306], [0.090,-0.246], [0.102,-0.204], [0.110,-0.170], [0.123,-0.127], [0.136,-0.085], [0.149,-0.042], [0.167,-0.009], [0.190,0.017], [0.216,0.051], [0.264,0.094], [0.314,0.113], [0.339,0.113], [0.349,0.000], [0.344,-0.144], [0.340,-0.255], [0.332,-0.340], [0.327,-0.443], [0.323,-0.490], [0.281,-0.569], [0.251,-0.624], [0.213,-0.652], [0.179,-0.671], [0.140,-0.652], [0.115,-0.605], [0.106,-0.582], [0.092,-0.532], [0.075,-0.467], [0.073,-0.408], [0.073,-0.351], [0.076,-0.306], [0.090,-0.246], [0.102,-0.204], [0.110,-0.170], [0.123,-0.127], [0.136,-0.085], [0.149,-0.042], [0.167,-0.009], [0.190,0.017], [0.216,0.051], [0.264,0.094], [0.314,0.113], [0.339,0.113], [0.349,0.000], [0.344,-0.144], [0.340,-0.255], [0.332,-0.340], [0.327,-0.443], [0.323,-0.490], [0.339,-0.595], [0.364,-0.652], [0.391,-0.637], [0.425,-0.637], [0.468,-0.637],  ],\n  'b' : [ [0.021,-0.637], [0.043,-0.612], [0.064,-0.578], [0.085,-0.544], [0.099,-0.518], [0.114,-0.476], [0.128,-0.425], [0.142,-0.348], [0.157,-0.281], [0.171,-0.212], [0.185,-0.119], [0.200,-0.042], [0.214,0.043], [0.228,0.145], [0.243,0.213], [0.257,0.289], [0.271,0.390], [0.286,0.469], [0.293,0.548], [0.294,0.659], [0.286,0.751], [0.265,0.823], [0.237,0.892], [0.216,0.899], [0.199,0.888], [0.183,0.873], [0.171,0.835], [0.162,0.776], [0.159,0.646], [0.158,0.517], [0.157,0.387], [0.156,0.257], [0.158,0.127], [0.159,-0.003], [0.160,-0.133], [0.161,-0.263], [0.162,-0.393], [0.167,-0.523], [0.176,-0.569], [0.191,-0.622], [0.206,-0.637], [0.231,-0.637], [0.250,-0.633], [0.268,-0.615], [0.282,-0.597], [0.295,-0.539], [0.302,-0.485], [0.311,-0.424], [0.318,-0.365], [0.328,-0.297], [0.331,-0.228], [0.335,-0.144], [0.336,-0.051], [0.337,0.037], [0.372,0.009], [0.395,-0.009], [0.421,0.000],  ],\n  'c' : [ [0.017,-0.620], [0.026,-0.586], [0.038,-0.527], [0.048,-0.450], [0.057,-0.416], [0.068,-0.365], [0.082,-0.297], [0.105,-0.195], [0.123,-0.119], [0.136,-0.073], [0.148,-0.042], [0.165,-0.003], [0.180,0.026], [0.198,0.055], [0.221,0.068], [0.242,0.077], [0.264,0.085], [0.298,0.085], [0.323,0.043], [0.340,-0.042], [0.323,0.043], [0.298,0.085], [0.264,0.085], [0.242,0.077], [0.221,0.068], [0.198,0.055], [0.180,0.026], [0.165,-0.003], [0.148,-0.042], [0.136,-0.073], [0.123,-0.119], [0.099,-0.258], [0.099,-0.348], [0.101,-0.416], [0.110,-0.508], [0.123,-0.559], [0.131,-0.582], [0.140,-0.605], [0.153,-0.646], [0.177,-0.680], [0.223,-0.697], [0.280,-0.680], [0.319,-0.671], [0.349,-0.663], [0.383,-0.654], [0.425,-0.646], [0.468,-0.637],  ],\n  'd' : [ [0.043,-0.637], [0.068,-0.620], [0.091,-0.552], [0.119,-0.467], [0.139,-0.408], [0.141,-0.351], [0.145,-0.306], [0.149,-0.246], [0.156,-0.170], [0.167,-0.093], [0.179,-0.042], [0.213,0.026], [0.235,0.060], [0.258,0.077], [0.315,0.106], [0.349,0.113], [0.391,0.113], [0.349,0.113], [0.315,0.106], [0.258,0.077], [0.235,0.060], [0.213,0.026], [0.179,-0.042], [0.167,-0.093], [0.156,-0.170], [0.149,-0.246], [0.145,-0.306], [0.141,-0.351], [0.139,-0.408], [0.143,-0.467], [0.160,-0.532], [0.183,-0.605], [0.208,-0.652], [0.230,-0.661], [0.255,-0.659], [0.281,-0.652], [0.319,-0.624], [0.349,-0.569], [0.400,-0.501], [0.433,-0.490], [0.433,-0.443], [0.433,-0.340], [0.433,-0.255], [0.433,-0.144], [0.433,0.000], [0.433,0.213], [0.433,0.383], [0.433,0.552], [0.433,0.723], [0.433,0.893], [0.433,0.723], [0.433,0.552], [0.433,0.383], [0.433,0.213], [0.433,0.000], [0.433,-0.144], [0.433,-0.255], [0.433,-0.340], [0.433,-0.443], [0.433,-0.490], [0.438,-0.552], [0.449,-0.595], [0.475,-0.652], [0.501,-0.675], [0.534,-0.666], [0.561,-0.663], [0.595,-0.637],  ],\n  'e' : [ [0.043,-0.637], [0.085,-0.637], [0.145,-0.595], [0.189,-0.544], [0.230,-0.510], [0.252,-0.467], [0.269,-0.399], [0.281,-0.348], [0.286,-0.297], [0.288,-0.255], [0.290,-0.187], [0.288,-0.127], [0.284,-0.080], [0.280,-0.042], [0.275,-0.011], [0.267,0.043], [0.258,0.077], [0.243,0.102], [0.222,0.119], [0.201,0.128], [0.179,0.119], [0.158,0.102], [0.143,0.077], [0.134,0.043], [0.126,-0.011], [0.122,-0.042], [0.117,-0.080], [0.113,-0.127], [0.111,-0.187], [0.113,-0.255], [0.116,-0.297], [0.121,-0.348], [0.133,-0.399], [0.150,-0.467], [0.171,-0.510], [0.211,-0.552], [0.255,-0.595], [0.303,-0.612], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637],  ],\n  'f' : [ [0.021,-0.637], [0.038,-0.630], [0.054,-0.624], [0.072,-0.595], [0.096,-0.561], [0.113,-0.535], [0.132,-0.518], [0.160,-0.493], [0.187,-0.443], [0.213,-0.399], [0.225,-0.297], [0.234,-0.212], [0.242,-0.127], [0.251,-0.042], [0.259,0.043], [0.267,0.111], [0.276,0.196], [0.283,0.280], [0.291,0.361], [0.302,0.448], [0.310,0.551], [0.316,0.655], [0.307,0.756], [0.289,0.816], [0.268,0.829], [0.242,0.833], [0.213,0.820], [0.187,0.801], [0.165,0.768], [0.149,0.680], [0.147,0.577], [0.146,0.448], [0.147,0.318], [0.148,0.149], [0.148,-0.023], [0.148,-0.127], [0.149,-0.236], [0.148,-0.340], [0.148,-0.449], [0.148,-0.561], [0.148,-0.680], [0.146,-0.782], [0.145,-0.892], [0.143,-0.977], [0.140,-1.105], [0.140,-1.207], [0.139,-1.317], [0.136,-1.453], [0.162,-1.453], [0.187,-1.452], [0.211,-1.445], [0.237,-1.402], [0.255,-1.360], [0.271,-1.317], [0.275,-1.232], [0.271,-1.147], [0.267,-1.062], [0.261,-0.977], [0.254,-0.892], [0.245,-0.807], [0.234,-0.739], [0.221,-0.697], [0.191,-0.603], [0.210,-0.620], [0.234,-0.654], [0.255,-0.680], [0.284,-0.663], [0.320,-0.654], [0.361,-0.646], [0.404,-0.637], [0.446,-0.637],  ],\n  'g' : [ [0.017,-0.629], [0.033,-0.612], [0.058,-0.578], [0.072,-0.557], [0.102,-0.513], [0.119,-0.484], [0.142,-0.443], [0.159,-0.408], [0.175,-0.357], [0.192,-0.309], [0.200,-0.281], [0.217,-0.235], [0.233,-0.188], [0.250,-0.142], [0.264,-0.102], [0.279,-0.068], [0.301,-0.026], [0.317,0.000], [0.339,0.017], [0.364,0.034], [0.390,0.051], [0.415,0.063], [0.441,0.060], [0.451,0.026], [0.449,-0.042], [0.447,-0.110], [0.445,-0.178], [0.444,-0.246], [0.442,-0.314], [0.440,-0.382], [0.439,-0.450], [0.437,-0.518], [0.435,-0.586], [0.408,-0.612], [0.381,-0.637], [0.339,-0.663], [0.305,-0.675], [0.264,-0.663], [0.228,-0.637], [0.200,-0.605], [0.177,-0.527], [0.167,-0.443], [0.159,-0.408], [0.175,-0.357], [0.192,-0.309], [0.200,-0.281], [0.217,-0.235], [0.233,-0.188], [0.250,-0.142], [0.264,-0.102], [0.279,-0.068], [0.301,-0.026], [0.317,0.000], [0.339,0.017], [0.364,0.034], [0.390,0.051], [0.415,0.063], [0.441,0.060], [0.451,0.026], [0.449,-0.042], [0.447,-0.110], [0.445,-0.178], [0.444,-0.246], [0.442,-0.314], [0.440,-0.382], [0.439,-0.450], [0.437,-0.518], [0.435,-0.586], [0.433,-0.654], [0.432,-0.722], [0.430,-0.790], [0.428,-0.858], [0.427,-0.926], [0.425,-0.994], [0.423,-1.062], [0.422,-1.130], [0.420,-1.198], [0.418,-1.266], [0.417,-1.335], [0.415,-1.402], [0.413,-1.470], [0.383,-1.466], [0.349,-1.459], [0.323,-1.449], [0.298,-1.419], [0.272,-1.377], [0.247,-1.317], [0.230,-1.249], [0.221,-1.198], [0.213,-1.130], [0.217,-1.079], [0.230,-1.037], [0.250,-0.976], [0.265,-0.935], [0.284,-0.892], [0.313,-0.841], [0.347,-0.799], [0.373,-0.765], [0.400,-0.722], [0.437,-0.680], [0.475,-0.671], [0.518,-0.663], [0.552,-0.654], [0.595,-0.637],  ],\n  'h' : [ [0.023,-0.561], [0.036,-0.517], [0.055,-0.462], [0.067,-0.415], [0.084,-0.366], [0.099,-0.318], [0.110,-0.270], [0.125,-0.225], [0.139,-0.178], [0.151,-0.127], [0.163,-0.093], [0.174,-0.051], [0.192,-0.006], [0.216,0.066], [0.241,0.111], [0.254,0.162], [0.275,0.213], [0.288,0.280], [0.301,0.351], [0.309,0.398], [0.320,0.446], [0.325,0.518], [0.330,0.587], [0.331,0.672], [0.325,0.765], [0.321,0.842], [0.299,0.891], [0.271,0.918], [0.241,0.918], [0.203,0.887], [0.178,0.851], [0.161,0.785], [0.147,0.660], [0.147,0.574], [0.147,0.488], [0.147,0.376], [0.147,0.263], [0.147,0.150], [0.147,0.038], [0.147,-0.075], [0.147,-0.187], [0.147,-0.300], [0.147,-0.412], [0.147,-0.525], [0.147,-0.637], [0.149,-0.525], [0.151,-0.412], [0.164,-0.365], [0.184,-0.298], [0.196,-0.237], [0.210,-0.158], [0.224,-0.106], [0.238,-0.036], [0.253,0.000], [0.282,0.017], [0.312,0.026], [0.339,0.017], [0.371,-0.017], [0.384,-0.080], [0.380,-0.158], [0.377,-0.226], [0.374,-0.304], [0.374,-0.384], [0.381,-0.474], [0.393,-0.568], [0.422,-0.617], [0.460,-0.645], [0.502,-0.637],  ],\n  'i' : [ [0.043,-0.642], [0.086,-0.654], [0.128,-0.662], [0.145,-0.616], [0.158,-0.563], [0.165,-0.486], [0.167,-0.401], [0.168,-0.359], [0.171,-0.282], [0.173,-0.223], [0.176,-0.138], [0.176,-0.053], [0.177,0.006], [0.178,0.117], [0.179,0.006], [0.179,-0.053], [0.178,-0.138], [0.180,-0.223], [0.182,-0.283], [0.184,-0.359], [0.185,-0.402], [0.185,-0.487], [0.192,-0.563], [0.204,-0.616], [0.221,-0.662], [0.259,-0.680], [0.292,-0.646], [0.339,-0.637],  ],\n  'j' : [ [0.021,-0.612], [0.049,-0.585], [0.065,-0.544], [0.080,-0.509], [0.094,-0.464], [0.100,-0.440], [0.113,-0.399], [0.125,-0.367], [0.136,-0.319], [0.147,-0.271], [0.159,-0.211], [0.167,-0.150], [0.171,-0.115], [0.180,-0.046], [0.186,0.049], [0.191,0.100], [0.191,0.050], [0.191,-0.018], [0.191,-0.127], [0.191,-0.246], [0.191,-0.364], [0.191,-0.483], [0.191,-0.602], [0.191,-0.720], [0.191,-0.839], [0.191,-0.958], [0.191,-1.076], [0.191,-1.195], [0.184,-1.256], [0.174,-1.317], [0.163,-1.365], [0.148,-1.381], [0.128,-1.385], [0.109,-1.369], [0.098,-1.347], [0.086,-1.257], [0.081,-1.147], [0.080,-1.062], [0.087,-0.977], [0.098,-0.904], [0.109,-0.856], [0.120,-0.808], [0.132,-0.760], [0.143,-0.712], [0.150,-0.688], [0.164,-0.659], [0.178,-0.631], [0.192,-0.604], [0.204,-0.593], [0.220,-0.585], [0.237,-0.584], [0.255,-0.601], [0.276,-0.618], [0.297,-0.637],  ],\n  'k' : [ [0.021,-0.595], [0.038,-0.552], [0.053,-0.510], [0.068,-0.467], [0.085,-0.399], [0.103,-0.351], [0.120,-0.304], [0.136,-0.258], [0.149,-0.235], [0.168,-0.156], [0.192,-0.077], [0.216,0.002], [0.239,0.080], [0.263,0.159], [0.278,0.205], [0.292,0.252], [0.303,0.298], [0.311,0.344], [0.329,0.410], [0.339,0.458], [0.348,0.505], [0.357,0.553], [0.366,0.600], [0.375,0.648], [0.383,0.714], [0.386,0.784], [0.369,0.825], [0.347,0.833], [0.327,0.833], [0.302,0.833], [0.276,0.825], [0.251,0.808], [0.225,0.761], [0.200,0.711], [0.179,0.615], [0.170,0.518], [0.170,0.422], [0.170,0.325], [0.170,0.228], [0.170,0.159], [0.170,0.083], [0.170,0.006], [0.170,-0.070], [0.170,-0.147], [0.170,-0.223], [0.170,-0.300], [0.170,-0.376], [0.170,-0.452], [0.170,-0.529], [0.170,-0.605], [0.170,-0.698], [0.170,-0.605], [0.170,-0.529], [0.170,-0.452], [0.170,-0.376], [0.170,-0.300], [0.177,-0.223], [0.199,-0.212], [0.233,-0.204], [0.267,-0.195], [0.309,-0.178], [0.343,-0.153], [0.377,-0.127], [0.398,-0.085], [0.411,-0.049], [0.406,0.009], [0.394,0.060], [0.379,0.090], [0.360,0.117], [0.326,0.094], [0.301,0.043], [0.258,-0.042], [0.233,-0.127], [0.216,-0.187], [0.191,-0.229], [0.207,-0.272], [0.228,-0.304], [0.244,-0.351], [0.261,-0.397], [0.277,-0.443], [0.289,-0.490], [0.295,-0.513], [0.311,-0.559], [0.328,-0.605], [0.344,-0.652], [0.364,-0.697], [0.386,-0.722], [0.407,-0.714], [0.428,-0.697], [0.449,-0.680], [0.471,-0.663], [0.486,-0.654], [0.506,-0.637], [0.532,-0.654], [0.552,-0.637],  ],\n  'l' : [ [0.030,-0.595], [0.049,-0.545], [0.062,-0.497], [0.072,-0.467], [0.086,-0.425], [0.097,-0.377], [0.112,-0.328], [0.128,-0.281], [0.145,-0.232], [0.153,-0.183], [0.170,-0.137], [0.189,-0.089], [0.201,-0.042], [0.218,0.034], [0.230,0.094], [0.241,0.162], [0.250,0.205], [0.255,0.244], [0.262,0.289], [0.267,0.339], [0.274,0.386], [0.277,0.433], [0.283,0.500], [0.289,0.552], [0.293,0.629], [0.297,0.715], [0.298,0.762], [0.293,0.831], [0.275,0.883], [0.258,0.920], [0.240,0.931], [0.225,0.935], [0.200,0.930], [0.174,0.916], [0.162,0.868], [0.158,0.821], [0.154,0.781], [0.152,0.723], [0.152,0.637], [0.152,0.550], [0.152,0.463], [0.152,0.376], [0.152,0.290], [0.152,0.203], [0.152,0.116], [0.152,0.030], [0.152,-0.057], [0.152,-0.144], [0.152,-0.231], [0.152,-0.317], [0.152,-0.404], [0.152,-0.491], [0.156,-0.553], [0.172,-0.603], [0.191,-0.629], [0.217,-0.635], [0.242,-0.658], [0.269,-0.672], [0.302,-0.654], [0.338,-0.646], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637],  ],\n  'm' : [ [0.033,-0.595], [0.050,-0.559], [0.058,-0.536], [0.075,-0.490], [0.083,-0.466], [0.100,-0.420], [0.108,-0.397], [0.116,-0.374], [0.125,-0.351], [0.135,-0.314], [0.148,-0.264], [0.158,-0.235], [0.162,-0.212], [0.167,-0.188], [0.175,-0.165], [0.186,-0.127], [0.194,-0.102], [0.208,-0.073], [0.225,-0.026], [0.233,-0.003], [0.241,0.020], [0.250,0.043], [0.264,0.068], [0.283,0.080], [0.302,0.094], [0.324,0.090], [0.333,0.066], [0.334,0.046], [0.337,-0.005], [0.340,-0.056], [0.342,-0.107], [0.345,-0.158], [0.348,-0.209], [0.343,-0.253], [0.338,-0.298], [0.333,-0.342], [0.328,-0.386], [0.324,-0.430], [0.319,-0.475], [0.314,-0.519], [0.309,-0.563], [0.304,-0.607], [0.299,-0.652], [0.304,-0.607], [0.309,-0.563], [0.314,-0.519], [0.319,-0.475], [0.324,-0.430], [0.328,-0.386], [0.333,-0.342], [0.338,-0.298], [0.343,-0.253], [0.348,-0.209], [0.358,-0.165], [0.371,-0.127], [0.383,-0.096], [0.391,-0.073], [0.399,-0.049], [0.408,-0.026], [0.416,-0.003], [0.424,0.020], [0.441,0.060], [0.458,0.085], [0.483,0.105], [0.507,0.113], [0.516,0.090], [0.524,0.066], [0.532,0.043], [0.537,0.006], [0.542,-0.031], [0.547,-0.068], [0.552,-0.105], [0.557,-0.142], [0.551,-0.191], [0.546,-0.239], [0.540,-0.288], [0.534,-0.337], [0.528,-0.385], [0.522,-0.434], [0.516,-0.483], [0.511,-0.531], [0.505,-0.580], [0.505,-0.628], [0.505,-0.580], [0.511,-0.531], [0.516,-0.483], [0.522,-0.434], [0.528,-0.385], [0.534,-0.337], [0.540,-0.288], [0.546,-0.239], [0.551,-0.191], [0.557,-0.142], [0.566,-0.119], [0.578,-0.085], [0.591,-0.049], [0.599,-0.026], [0.608,0.009], [0.624,0.043], [0.632,0.066], [0.645,0.090], [0.679,0.111], [0.715,0.090], [0.732,0.043], [0.740,0.020], [0.749,-0.026], [0.744,-0.075], [0.740,-0.123], [0.736,-0.171], [0.732,-0.220], [0.728,-0.268], [0.724,-0.317], [0.719,-0.365], [0.715,-0.413], [0.711,-0.462], [0.707,-0.510], [0.707,-0.559], [0.724,-0.605], [0.732,-0.628], [0.748,-0.654], [0.790,-0.663], [0.815,-0.663], [0.839,-0.650], [0.865,-0.646], [0.892,-0.637],  ],\n  'n' : [ [0.017,-0.637], [0.033,-0.637], [0.043,-0.595], [0.051,-0.552], [0.060,-0.476], [0.072,-0.382], [0.085,-0.297], [0.098,-0.212], [0.111,-0.085], [0.128,0.043], [0.146,0.159], [0.166,0.213], [0.187,0.187], [0.200,0.136], [0.207,0.090], [0.211,0.043], [0.216,0.000], [0.218,-0.049], [0.215,-0.105], [0.215,-0.161], [0.215,-0.216], [0.215,-0.272], [0.215,-0.327], [0.215,-0.383], [0.215,-0.439], [0.215,-0.494], [0.215,-0.550], [0.215,-0.605], [0.215,-0.550], [0.215,-0.494], [0.215,-0.439], [0.215,-0.383], [0.215,-0.327], [0.215,-0.272], [0.215,-0.216], [0.215,-0.161], [0.215,-0.105], [0.230,-0.093], [0.242,-0.068], [0.254,-0.049], [0.262,-0.026], [0.271,-0.003], [0.279,0.020], [0.293,0.051], [0.310,0.090], [0.328,0.136], [0.346,0.159], [0.371,0.159], [0.387,0.136], [0.396,0.113], [0.404,0.090], [0.408,0.043], [0.412,0.000], [0.412,-0.085], [0.412,-0.144], [0.412,-0.212], [0.412,-0.272], [0.412,-0.331], [0.412,-0.374], [0.412,-0.425], [0.412,-0.467], [0.412,-0.513], [0.412,-0.559], [0.417,-0.612], [0.432,-0.663], [0.462,-0.671], [0.483,-0.663], [0.512,-0.637],  ],\n  'o' : [ [0.043,-0.578], [0.067,-0.510], [0.081,-0.459], [0.093,-0.408], [0.102,-0.365], [0.107,-0.331], [0.119,-0.281], [0.128,-0.246], [0.133,-0.212], [0.145,-0.170], [0.157,-0.119], [0.165,-0.096], [0.173,-0.073], [0.186,-0.034], [0.199,-0.003], [0.207,0.020], [0.215,0.043], [0.224,0.066], [0.241,0.077], [0.262,0.094], [0.292,0.094], [0.313,0.077], [0.324,0.066], [0.335,0.043], [0.343,0.026], [0.349,0.000], [0.357,-0.026], [0.360,-0.075], [0.360,-0.123], [0.362,-0.171], [0.361,-0.219], [0.358,-0.268], [0.355,-0.316], [0.351,-0.364], [0.344,-0.413], [0.336,-0.461], [0.327,-0.509], [0.321,-0.552], [0.310,-0.603], [0.298,-0.646], [0.276,-0.680], [0.255,-0.697], [0.230,-0.705], [0.199,-0.693], [0.186,-0.671], [0.174,-0.642], [0.157,-0.605], [0.149,-0.582], [0.140,-0.559], [0.132,-0.536], [0.126,-0.510], [0.118,-0.467], [0.109,-0.425], [0.104,-0.382], [0.107,-0.331], [0.119,-0.281], [0.128,-0.246], [0.133,-0.212], [0.145,-0.170], [0.157,-0.119], [0.165,-0.096], [0.173,-0.073], [0.186,-0.034], [0.199,-0.003], [0.207,0.020], [0.215,0.043], [0.224,0.066], [0.241,0.077], [0.262,0.043], [0.272,0.000], [0.285,-0.034], [0.298,-0.051], [0.315,-0.068], [0.332,-0.076], [0.349,-0.076], [0.365,-0.076], [0.383,-0.076], [0.400,-0.072], [0.417,-0.068], [0.433,-0.059], [0.451,-0.042], [0.468,-0.026], [0.485,0.000],  ],\n  'p' : [ [0.034,-0.652], [0.065,-0.618], [0.091,-0.544], [0.106,-0.461], [0.116,-0.375], [0.126,-0.289], [0.137,-0.203], [0.146,-0.151], [0.158,-0.108], [0.168,-0.030], [0.182,0.013], [0.186,-0.066], [0.185,-0.174], [0.184,-0.282], [0.183,-0.390], [0.182,-0.497], [0.181,-0.605], [0.180,-0.713], [0.180,-0.821], [0.179,-0.929], [0.178,-1.037], [0.177,-1.145], [0.176,-1.253], [0.175,-1.361], [0.176,-1.253], [0.177,-1.145], [0.178,-1.037], [0.179,-0.929], [0.180,-0.821], [0.180,-0.713], [0.181,-0.605], [0.182,-0.497], [0.183,-0.390], [0.184,-0.282], [0.185,-0.174], [0.186,-0.066], [0.187,0.042], [0.182,0.013], [0.203,0.058], [0.219,0.101], [0.239,0.129], [0.255,0.147], [0.267,0.156], [0.282,0.166], [0.305,0.159], [0.331,0.138], [0.354,0.072], [0.361,0.045], [0.377,-0.021], [0.385,-0.133], [0.386,-0.208], [0.387,-0.320], [0.380,-0.389], [0.374,-0.467], [0.363,-0.505], [0.345,-0.545], [0.325,-0.565], [0.294,-0.605], [0.265,-0.598], [0.238,-0.595], [0.213,-0.578], [0.238,-0.595], [0.265,-0.598], [0.294,-0.605], [0.312,-0.599], [0.339,-0.614], [0.381,-0.628], [0.407,-0.634], [0.439,-0.654], [0.468,-0.654], [0.498,-0.646], [0.527,-0.637],  ],\n  'q' : [ [0.017,-0.629], [0.033,-0.612], [0.058,-0.578], [0.072,-0.557], [0.091,-0.513], [0.108,-0.466], [0.116,-0.443], [0.138,-0.399], [0.150,-0.357], [0.166,-0.309], [0.175,-0.281], [0.191,-0.235], [0.208,-0.188], [0.225,-0.142], [0.238,-0.102], [0.254,-0.068], [0.275,-0.026], [0.291,0.000], [0.313,0.017], [0.339,0.034], [0.364,0.051], [0.390,0.063], [0.416,0.060], [0.425,0.026], [0.423,-0.042], [0.422,-0.110], [0.420,-0.178], [0.418,-0.246], [0.417,-0.314], [0.415,-0.382], [0.413,-0.450], [0.411,-0.518], [0.410,-0.586], [0.383,-0.612], [0.356,-0.637], [0.313,-0.663], [0.279,-0.675], [0.238,-0.663], [0.203,-0.637], [0.175,-0.605], [0.152,-0.527], [0.141,-0.443], [0.150,-0.357], [0.166,-0.309], [0.175,-0.281], [0.191,-0.235], [0.208,-0.188], [0.225,-0.142], [0.238,-0.102], [0.254,-0.068], [0.275,-0.026], [0.291,0.000], [0.313,0.017], [0.339,0.034], [0.364,0.051], [0.390,0.063], [0.416,0.060], [0.425,0.026], [0.423,-0.042], [0.422,-0.110], [0.420,-0.178], [0.418,-0.246], [0.417,-0.314], [0.415,-0.382], [0.413,-0.450], [0.411,-0.518], [0.410,-0.586], [0.408,-0.654], [0.406,-0.722], [0.405,-0.790], [0.403,-0.858], [0.401,-0.926], [0.400,-0.994], [0.398,-1.062], [0.396,-1.130], [0.394,-1.198], [0.393,-1.266], [0.391,-1.335], [0.389,-1.402], [0.388,-1.470], [0.408,-1.466], [0.433,-1.459], [0.451,-1.449], [0.468,-1.419], [0.485,-1.377], [0.501,-1.317], [0.518,-1.249], [0.527,-1.198], [0.531,-1.130], [0.527,-1.079], [0.518,-1.037], [0.501,-0.976], [0.485,-0.935], [0.468,-0.892], [0.451,-0.841], [0.433,-0.799], [0.425,-0.765], [0.425,-0.705], [0.449,-0.680], [0.476,-0.663], [0.501,-0.646], [0.527,-0.637], [0.570,-0.637], [0.612,-0.637],  ],\n  'r' : [ [0.043,-0.637], [0.085,-0.603], [0.111,-0.552], [0.128,-0.510], [0.145,-0.467], [0.155,-0.382], [0.166,-0.297], [0.174,-0.204], [0.181,-0.144], [0.187,-0.085], [0.195,-0.017], [0.200,0.043], [0.264,0.043], [0.306,0.043], [0.349,0.043], [0.391,0.043], [0.433,0.043], [0.433,0.000], [0.429,-0.085], [0.425,-0.170], [0.417,-0.255], [0.408,-0.340], [0.404,-0.425], [0.417,-0.510], [0.433,-0.552], [0.468,-0.595], [0.510,-0.620], [0.561,-0.637], [0.620,-0.637],  ],\n  's' : [ [0.033,-0.620], [0.067,-0.582], [0.084,-0.552], [0.100,-0.518], [0.128,-0.466], [0.156,-0.382], [0.191,-0.297], [0.208,-0.229], [0.221,-0.170], [0.225,-0.093], [0.225,-0.042], [0.213,0.085], [0.255,0.009], [0.281,-0.042], [0.306,-0.085], [0.326,-0.127], [0.349,-0.170], [0.365,-0.253], [0.374,-0.297], [0.378,-0.341], [0.383,-0.385], [0.378,-0.429], [0.370,-0.473], [0.357,-0.517], [0.340,-0.561], [0.316,-0.598], [0.284,-0.637], [0.259,-0.652], [0.234,-0.654], [0.209,-0.652], [0.187,-0.637], [0.153,-0.612], [0.119,-0.578], [0.153,-0.612], [0.187,-0.637], [0.209,-0.652], [0.234,-0.654], [0.259,-0.652], [0.284,-0.637], [0.316,-0.598], [0.339,-0.620], [0.360,-0.637], [0.381,-0.637], [0.403,-0.637], [0.425,-0.637], [0.468,-0.637],  ],\n  't' : [ [0.043,-0.637], [0.085,-0.637], [0.119,-0.637], [0.149,-0.637], [0.187,-0.637], [0.222,-0.637], [0.242,-0.610], [0.250,-0.456], [0.257,-0.303], [0.264,-0.150], [0.272,0.003], [0.279,0.157], [0.286,0.310], [0.294,0.463], [0.276,0.463], [0.261,0.463], [0.233,0.463], [0.206,0.463], [0.170,0.463], [0.128,0.463], [0.085,0.463], [0.128,0.463], [0.170,0.463], [0.206,0.463], [0.233,0.463], [0.261,0.463], [0.276,0.463], [0.316,0.463], [0.344,0.463], [0.365,0.463], [0.392,0.463], [0.420,0.463], [0.448,0.463], [0.489,0.463], [0.531,0.463], [0.489,0.463], [0.448,0.463], [0.420,0.463], [0.392,0.463], [0.365,0.463], [0.344,0.463], [0.316,0.463], [0.294,0.463], [0.301,0.616], [0.309,0.770], [0.316,0.923], [0.316,0.770], [0.316,0.616], [0.316,0.463], [0.316,0.310], [0.316,0.157], [0.316,0.003], [0.316,-0.150], [0.316,-0.303], [0.316,-0.456], [0.316,-0.610], [0.329,-0.656], [0.360,-0.667], [0.404,-0.650], [0.447,-0.642], [0.489,-0.637], [0.531,-0.637], [0.574,-0.637], [0.616,-0.637],  ],\n  'u' : [ [0.021,-0.612], [0.043,-0.595], [0.064,-0.578], [0.078,-0.561], [0.089,-0.541], [0.102,-0.497], [0.111,-0.453], [0.119,-0.408], [0.128,-0.357], [0.143,-0.342], [0.146,-0.293], [0.150,-0.243], [0.153,-0.194], [0.156,-0.145], [0.159,-0.096], [0.163,-0.046], [0.166,0.003], [0.169,0.052], [0.172,0.101], [0.169,0.052], [0.166,0.003], [0.163,-0.046], [0.159,-0.096], [0.156,-0.145], [0.153,-0.194], [0.150,-0.243], [0.146,-0.293], [0.143,-0.342], [0.140,-0.391], [0.137,-0.440], [0.133,-0.490], [0.130,-0.539], [0.127,-0.588], [0.130,-0.637], [0.145,-0.654], [0.166,-0.663], [0.191,-0.654], [0.213,-0.646], [0.230,-0.629], [0.251,-0.612], [0.272,-0.595], [0.292,-0.578], [0.308,-0.561], [0.323,-0.535], [0.336,-0.501], [0.341,-0.456], [0.343,-0.409], [0.345,-0.362], [0.346,-0.315], [0.348,-0.267], [0.350,-0.220], [0.352,-0.173], [0.354,-0.126], [0.356,-0.079], [0.357,-0.031], [0.359,0.016], [0.361,0.075], [0.363,0.126], [0.361,0.075], [0.359,0.016], [0.357,-0.031], [0.356,-0.079], [0.354,-0.126], [0.352,-0.173], [0.350,-0.220], [0.348,-0.267], [0.346,-0.315], [0.356,-0.380], [0.360,-0.433], [0.365,-0.484], [0.374,-0.535], [0.378,-0.586], [0.395,-0.637], [0.422,-0.654], [0.451,-0.654], [0.472,-0.646], [0.510,-0.637],  ],\n  'v' : [ [0.015,-0.635], [0.025,-0.586], [0.035,-0.538], [0.045,-0.490], [0.055,-0.442], [0.065,-0.394], [0.075,-0.345], [0.086,-0.282], [0.092,-0.226], [0.102,-0.178], [0.112,-0.130], [0.122,-0.082], [0.132,-0.033], [0.142,0.015], [0.161,0.064], [0.174,0.089], [0.194,0.103], [0.215,0.095], [0.227,0.073], [0.238,0.052], [0.244,0.015], [0.249,-0.027], [0.254,-0.063], [0.254,-0.095], [0.253,-0.131], [0.251,-0.172], [0.250,-0.214], [0.249,-0.255], [0.248,-0.297], [0.247,-0.338], [0.245,-0.379], [0.244,-0.421], [0.243,-0.462], [0.247,-0.508], [0.255,-0.558], [0.262,-0.600], [0.277,-0.641], [0.297,-0.665], [0.317,-0.644], [0.337,-0.617], [0.344,-0.574], [0.352,-0.531], [0.359,-0.488], [0.366,-0.445], [0.368,-0.398], [0.376,-0.353], [0.379,-0.301], [0.384,-0.259], [0.390,-0.182], [0.396,-0.106], [0.401,-0.030], [0.407,0.047], [0.443,0.039], [0.480,0.019], [0.508,0.006], [0.529,0.000],  ],\n  'w' : [ [0.015,-0.632], [0.025,-0.605], [0.041,-0.559], [0.051,-0.535], [0.061,-0.510], [0.073,-0.462], [0.085,-0.415], [0.096,-0.367], [0.108,-0.319], [0.120,-0.271], [0.131,-0.212], [0.142,-0.141], [0.153,-0.070], [0.164,0.001], [0.175,0.072], [0.180,0.108], [0.178,0.023], [0.176,-0.061], [0.174,-0.145], [0.172,-0.230], [0.169,-0.314], [0.171,-0.368], [0.175,-0.453], [0.180,-0.521], [0.195,-0.589], [0.217,-0.634], [0.248,-0.650], [0.283,-0.627], [0.294,-0.579], [0.306,-0.531], [0.318,-0.483], [0.328,-0.436], [0.337,-0.388], [0.345,-0.341], [0.352,-0.293], [0.356,-0.209], [0.359,-0.125], [0.363,-0.041], [0.367,0.044], [0.371,0.085], [0.377,0.029], [0.383,-0.070], [0.388,-0.168], [0.394,-0.267], [0.400,-0.366], [0.406,-0.465], [0.412,-0.563], [0.434,-0.631], [0.456,-0.637], [0.476,-0.626], [0.494,-0.574], [0.507,-0.533], [0.519,-0.485], [0.530,-0.438], [0.537,-0.381], [0.543,-0.299], [0.545,-0.254], [0.551,-0.165], [0.556,-0.075], [0.561,0.014], [0.567,0.085], [0.594,0.077], [0.622,0.060], [0.649,0.043], [0.678,0.000],  ],\n  'x' : [ [0.043,-0.637], [0.085,-0.637], [0.110,-0.572], [0.131,-0.518], [0.152,-0.465], [0.173,-0.411], [0.194,-0.357], [0.215,-0.303], [0.236,-0.249], [0.261,-0.188], [0.278,-0.142], [0.299,-0.088], [0.320,-0.034], [0.341,0.020], [0.362,0.074], [0.383,0.128], [0.400,0.170], [0.383,0.128], [0.362,0.074], [0.341,0.020], [0.320,-0.034], [0.299,-0.088], [0.278,-0.142], [0.261,-0.188], [0.223,-0.281], [0.209,-0.234], [0.190,-0.166], [0.172,-0.099], [0.153,-0.032], [0.135,0.035], [0.116,0.103], [0.098,0.170], [0.116,0.103], [0.135,0.035], [0.153,-0.032], [0.172,-0.099], [0.190,-0.166], [0.209,-0.234], [0.223,-0.281], [0.246,-0.368], [0.264,-0.436], [0.282,-0.503], [0.301,-0.570], [0.319,-0.637], [0.340,-0.675], [0.359,-0.681], [0.382,-0.697], [0.400,-0.693], [0.417,-0.688], [0.432,-0.671], [0.451,-0.659], [0.468,-0.646], [0.493,-0.637],  ],\n  'y' : [ [0.017,-0.629], [0.033,-0.611], [0.049,-0.590], [0.062,-0.571], [0.072,-0.535], [0.083,-0.499], [0.094,-0.463], [0.104,-0.427], [0.115,-0.391], [0.125,-0.355], [0.136,-0.319], [0.147,-0.282], [0.157,-0.246], [0.168,-0.210], [0.178,-0.174], [0.189,-0.138], [0.199,-0.102], [0.210,-0.066], [0.221,-0.030], [0.231,0.006], [0.256,0.026], [0.273,0.026], [0.293,0.011], [0.302,-0.012], [0.306,-0.049], [0.303,-0.092], [0.300,-0.130], [0.293,-0.209], [0.285,-0.288], [0.277,-0.366], [0.269,-0.445], [0.262,-0.523], [0.261,-0.586], [0.266,-0.639], [0.275,-0.662], [0.284,-0.685], [0.293,-0.708], [0.304,-0.729], [0.317,-0.746], [0.335,-0.753], [0.352,-0.753], [0.386,-0.744], [0.419,-0.708], [0.435,-0.674], [0.472,-0.596], [0.475,-0.525], [0.478,-0.454], [0.482,-0.384], [0.485,-0.313], [0.489,-0.242], [0.492,-0.171], [0.496,-0.100], [0.499,-0.030], [0.503,0.017], [0.499,-0.030], [0.496,-0.100], [0.492,-0.171], [0.489,-0.242], [0.485,-0.313], [0.482,-0.384], [0.478,-0.454], [0.475,-0.525], [0.472,-0.596], [0.468,-0.667], [0.465,-0.738], [0.461,-0.808], [0.458,-0.879], [0.454,-0.950], [0.451,-1.021], [0.448,-1.092], [0.444,-1.162], [0.441,-1.233], [0.437,-1.304], [0.434,-1.375], [0.419,-1.422], [0.394,-1.435], [0.360,-1.444], [0.326,-1.452], [0.295,-1.444], [0.271,-1.427], [0.262,-1.404], [0.253,-1.381], [0.244,-1.358], [0.236,-1.327], [0.233,-1.289], [0.237,-1.238], [0.249,-1.199], [0.255,-1.165], [0.267,-1.126], [0.274,-1.092], [0.283,-1.056], [0.291,-1.032], [0.298,-1.009], [0.306,-0.985], [0.313,-0.962], [0.321,-0.938], [0.328,-0.915], [0.349,-0.889], [0.374,-0.863], [0.398,-0.837], [0.423,-0.810], [0.492,-0.748], [0.519,-0.709], [0.547,-0.678], [0.575,-0.660], [0.604,-0.642], [0.629,-0.637],  ],\n  'z' : [ [0.017,-0.603], [0.033,-0.559], [0.042,-0.536], [0.058,-0.490], [0.067,-0.466], [0.083,-0.420], [0.091,-0.397], [0.108,-0.351], [0.116,-0.327], [0.133,-0.281], [0.143,-0.246], [0.158,-0.204], [0.166,-0.178], [0.183,-0.136], [0.194,-0.102], [0.220,-0.042], [0.245,0.026], [0.258,0.066], [0.274,0.102], [0.288,0.119], [0.308,0.113], [0.324,0.090], [0.333,0.066], [0.341,0.043], [0.349,0.020], [0.354,-0.042], [0.349,-0.096], [0.339,-0.170], [0.326,-0.237], [0.308,-0.304], [0.291,-0.351], [0.271,-0.425], [0.250,-0.490], [0.233,-0.536], [0.225,-0.559], [0.200,-0.628], [0.191,-0.652], [0.200,-0.628], [0.225,-0.559], [0.233,-0.536], [0.250,-0.490], [0.274,-0.490], [0.288,-0.518], [0.299,-0.559], [0.308,-0.582], [0.321,-0.620], [0.333,-0.675], [0.335,-0.698], [0.333,-0.721], [0.333,-0.767], [0.333,-0.814], [0.326,-0.935], [0.313,-1.020], [0.301,-1.094], [0.291,-1.138], [0.283,-1.161], [0.266,-1.231], [0.258,-1.254], [0.247,-1.283], [0.230,-1.346], [0.216,-1.370], [0.200,-1.385], [0.183,-1.370], [0.175,-1.346], [0.152,-1.292], [0.141,-1.254], [0.135,-1.207], [0.141,-1.161], [0.152,-1.118], [0.166,-1.069], [0.175,-1.045], [0.183,-1.022], [0.191,-0.999], [0.200,-0.976], [0.208,-0.953], [0.216,-0.930], [0.225,-0.906], [0.233,-0.883], [0.250,-0.853], [0.268,-0.816], [0.285,-0.782], [0.303,-0.748], [0.320,-0.722], [0.338,-0.697], [0.355,-0.680], [0.373,-0.663], [0.390,-0.654], [0.408,-0.642], [0.425,-0.637], [0.446,-0.629], [0.468,-0.629], [0.489,-0.637],  ],\n  'a*' : [ [0.034,-0.026], [0.068,0.000], [0.102,0.017], [0.136,0.051], [0.170,0.060], [0.216,0.068], [0.264,0.094], [0.314,0.113], [0.339,0.113], [0.349,0.000], [0.344,-0.144], [0.340,-0.255], [0.332,-0.340], [0.327,-0.443], [0.323,-0.490], [0.281,-0.569], [0.251,-0.624], [0.213,-0.652], [0.179,-0.671], [0.140,-0.652], [0.115,-0.605], [0.106,-0.582], [0.092,-0.532], [0.075,-0.467], [0.073,-0.408], [0.073,-0.351], [0.076,-0.306], [0.090,-0.246], [0.102,-0.204], [0.110,-0.170], [0.123,-0.127], [0.136,-0.085], [0.149,-0.042], [0.167,-0.009], [0.190,0.017], [0.216,0.068], [0.264,0.094], [0.314,0.113], [0.339,0.113], [0.349,0.000], [0.344,-0.144], [0.340,-0.255], [0.332,-0.340], [0.327,-0.443], [0.323,-0.490], [0.339,-0.595], [0.364,-0.652], [0.391,-0.637], [0.425,-0.637],  ],\n  'b*' : [ [0.021,-0.009], [0.043,-0.017], [0.064,-0.009], [0.089,-0.009], [0.115,-0.013], [0.140,-0.009], [0.166,0.009], [0.183,0.034], [0.196,0.085], [0.207,0.145], [0.221,0.213], [0.236,0.289], [0.250,0.390], [0.264,0.469], [0.272,0.548], [0.273,0.659], [0.265,0.751], [0.243,0.823], [0.215,0.892], [0.195,0.899], [0.177,0.888], [0.162,0.873], [0.150,0.835], [0.140,0.776], [0.138,0.646], [0.137,0.517], [0.136,0.387], [0.135,0.257], [0.137,0.127], [0.138,-0.003], [0.139,-0.133], [0.139,-0.263], [0.140,-0.393], [0.145,-0.523], [0.155,-0.569], [0.169,-0.622], [0.185,-0.637], [0.210,-0.637], [0.229,-0.633], [0.247,-0.615], [0.261,-0.597], [0.274,-0.539], [0.281,-0.485], [0.290,-0.424], [0.297,-0.365], [0.306,-0.297], [0.310,-0.228], [0.314,-0.144], [0.315,-0.051], [0.316,0.037], [0.350,0.009], [0.374,-0.009], [0.400,0.000],  ],\n  'c*' : [ [0.043,0.009], [0.088,0.017], [0.122,0.026], [0.156,0.043], [0.184,0.060], [0.207,0.068], [0.228,0.077], [0.250,0.085], [0.283,0.085], [0.309,0.043], [0.326,-0.042], [0.309,0.043], [0.283,0.085], [0.250,0.085], [0.228,0.077], [0.207,0.068], [0.184,0.055], [0.165,0.026], [0.150,-0.003], [0.134,-0.042], [0.122,-0.073], [0.109,-0.119], [0.085,-0.258], [0.085,-0.348], [0.087,-0.416], [0.095,-0.508], [0.109,-0.559], [0.117,-0.582], [0.125,-0.605], [0.139,-0.646], [0.163,-0.680], [0.208,-0.697], [0.266,-0.680], [0.304,-0.671], [0.334,-0.663], [0.368,-0.654], [0.411,-0.646], [0.453,-0.637],  ],\n  'd*' : [ [0.034,-0.009], [0.068,-0.017], [0.102,-0.009], [0.136,0.009], [0.170,0.026], [0.213,0.026], [0.235,0.060], [0.258,0.077], [0.315,0.106], [0.349,0.113], [0.391,0.113], [0.349,0.113], [0.315,0.106], [0.258,0.077], [0.235,0.060], [0.213,0.026], [0.179,-0.042], [0.167,-0.093], [0.156,-0.170], [0.149,-0.246], [0.145,-0.306], [0.141,-0.351], [0.139,-0.408], [0.143,-0.467], [0.160,-0.532], [0.183,-0.605], [0.208,-0.652], [0.230,-0.661], [0.255,-0.659], [0.281,-0.652], [0.319,-0.624], [0.349,-0.569], [0.400,-0.501], [0.433,-0.490], [0.433,-0.443], [0.433,-0.340], [0.433,-0.255], [0.433,-0.144], [0.433,0.000], [0.433,0.213], [0.433,0.383], [0.433,0.552], [0.433,0.723], [0.433,0.893], [0.433,0.723], [0.433,0.552], [0.433,0.383], [0.433,0.213], [0.433,0.000], [0.433,-0.144], [0.433,-0.255], [0.433,-0.340], [0.433,-0.443], [0.433,-0.490], [0.438,-0.552], [0.449,-0.595], [0.475,-0.652], [0.501,-0.675], [0.534,-0.666], [0.561,-0.663], [0.595,-0.646], [0.637,-0.637],  ],\n  'e*' : [ [0.043,0.000], [0.068,-0.013], [0.085,-0.026], [0.102,-0.042], [0.116,-0.059], [0.132,-0.093], [0.157,-0.127], [0.191,-0.178], [0.225,-0.195], [0.251,-0.187], [0.276,-0.119], [0.283,-0.080], [0.284,-0.042], [0.280,-0.011], [0.271,0.043], [0.263,0.077], [0.247,0.102], [0.226,0.119], [0.205,0.128], [0.184,0.119], [0.162,0.102], [0.147,0.077], [0.130,0.043], [0.117,0.000], [0.116,-0.059], [0.116,-0.119], [0.116,-0.178], [0.117,-0.255], [0.120,-0.297], [0.125,-0.348], [0.130,-0.399], [0.140,-0.467], [0.149,-0.518], [0.166,-0.552], [0.183,-0.586], [0.208,-0.612], [0.242,-0.620], [0.276,-0.629], [0.310,-0.637], [0.340,-0.637], [0.383,-0.637],  ],\n  'f*' : [ [0.021,-0.042], [0.038,-0.085], [0.055,-0.161], [0.072,-0.246], [0.089,-0.297], [0.106,-0.340], [0.123,-0.382], [0.140,-0.425], [0.160,-0.493], [0.187,-0.443], [0.213,-0.399], [0.225,-0.297], [0.234,-0.212], [0.242,-0.127], [0.251,-0.042], [0.259,0.043], [0.267,0.111], [0.276,0.196], [0.283,0.280], [0.291,0.361], [0.302,0.448], [0.310,0.551], [0.316,0.655], [0.307,0.756], [0.289,0.816], [0.268,0.829], [0.242,0.833], [0.213,0.820], [0.187,0.801], [0.165,0.768], [0.149,0.680], [0.147,0.577], [0.146,0.448], [0.147,0.318], [0.148,0.149], [0.148,-0.023], [0.148,-0.127], [0.149,-0.236], [0.148,-0.340], [0.148,-0.449], [0.148,-0.561], [0.148,-0.680], [0.146,-0.782], [0.145,-0.892], [0.143,-0.977], [0.140,-1.105], [0.140,-1.207], [0.139,-1.317], [0.136,-1.453], [0.162,-1.453], [0.187,-1.452], [0.211,-1.445], [0.237,-1.402], [0.255,-1.360], [0.271,-1.317], [0.275,-1.232], [0.271,-1.147], [0.267,-1.062], [0.261,-0.977], [0.254,-0.892], [0.245,-0.807], [0.234,-0.739], [0.221,-0.697], [0.191,-0.603], [0.210,-0.620], [0.234,-0.654], [0.255,-0.680], [0.284,-0.663], [0.320,-0.654], [0.361,-0.646], [0.404,-0.637],  ],\n  'g*' : [ [0.034,-0.009], [0.068,-0.017], [0.102,-0.026], [0.136,-0.034], [0.170,-0.026], [0.196,-0.030], [0.224,-0.026], [0.240,0.000], [0.262,0.017], [0.288,0.034], [0.313,0.051], [0.339,0.063], [0.365,0.060], [0.374,0.026], [0.372,-0.042], [0.371,-0.110], [0.369,-0.178], [0.367,-0.246], [0.365,-0.314], [0.364,-0.382], [0.362,-0.450], [0.360,-0.518], [0.359,-0.586], [0.332,-0.612], [0.305,-0.637], [0.262,-0.663], [0.228,-0.675], [0.187,-0.663], [0.152,-0.637], [0.124,-0.605], [0.101,-0.527], [0.090,-0.443], [0.088,-0.399], [0.099,-0.357], [0.115,-0.309], [0.124,-0.281], [0.140,-0.235], [0.157,-0.188], [0.174,-0.142], [0.187,-0.102], [0.203,-0.068], [0.224,-0.026], [0.240,0.000], [0.262,0.017], [0.288,0.034], [0.313,0.051], [0.339,0.063], [0.365,0.060], [0.374,0.026], [0.372,-0.042], [0.371,-0.110], [0.369,-0.178], [0.367,-0.246], [0.365,-0.314], [0.364,-0.382], [0.362,-0.450], [0.360,-0.518], [0.359,-0.586], [0.357,-0.654], [0.355,-0.722], [0.354,-0.790], [0.352,-0.858], [0.350,-0.926], [0.349,-0.994], [0.347,-1.062], [0.345,-1.130], [0.343,-1.198], [0.342,-1.266], [0.340,-1.335], [0.338,-1.402], [0.337,-1.470], [0.306,-1.466], [0.272,-1.459], [0.247,-1.449], [0.221,-1.419], [0.196,-1.377], [0.170,-1.317], [0.153,-1.249], [0.145,-1.198], [0.136,-1.130], [0.140,-1.079], [0.153,-1.037], [0.174,-0.976], [0.189,-0.935], [0.207,-0.892], [0.237,-0.841], [0.271,-0.799], [0.296,-0.765], [0.323,-0.722], [0.360,-0.680], [0.398,-0.671], [0.442,-0.663], [0.485,-0.654], [0.527,-0.637],  ],\n  'h*' : [ [0.034,-0.026], [0.068,-0.051], [0.102,-0.068], [0.136,-0.076], [0.162,-0.068], [0.151,-0.127], [0.163,-0.093], [0.174,-0.051], [0.192,-0.006], [0.216,0.066], [0.241,0.111], [0.254,0.162], [0.275,0.213], [0.288,0.280], [0.301,0.351], [0.309,0.398], [0.320,0.446], [0.325,0.518], [0.330,0.587], [0.331,0.672], [0.325,0.765], [0.321,0.842], [0.299,0.891], [0.271,0.918], [0.241,0.918], [0.203,0.887], [0.178,0.851], [0.161,0.785], [0.147,0.660], [0.147,0.574], [0.147,0.488], [0.147,0.376], [0.147,0.263], [0.147,0.150], [0.147,0.038], [0.147,-0.075], [0.147,-0.187], [0.147,-0.300], [0.147,-0.412], [0.147,-0.525], [0.147,-0.637], [0.149,-0.525], [0.151,-0.412], [0.164,-0.365], [0.184,-0.298], [0.196,-0.237], [0.210,-0.158], [0.224,-0.106], [0.238,-0.036], [0.253,0.000], [0.282,0.017], [0.312,0.026], [0.339,0.017], [0.371,-0.017], [0.384,-0.080], [0.380,-0.158], [0.377,-0.226], [0.374,-0.304], [0.374,-0.384], [0.381,-0.474], [0.393,-0.568], [0.422,-0.617], [0.460,-0.645], [0.502,-0.637],  ],\n  'i*' : [ [0.026,-0.017], [0.042,-0.018], [0.059,-0.011], [0.077,0.006], [0.096,0.065], [0.116,0.123], [0.113,0.013], [0.112,-0.046], [0.109,-0.131], [0.108,-0.216], [0.108,-0.276], [0.108,-0.352], [0.108,-0.395], [0.107,-0.480], [0.110,-0.557], [0.121,-0.610], [0.136,-0.657], [0.173,-0.678], [0.216,-0.654],  ],\n  'j*' : [ [0.017,-0.006], [0.031,-0.013], [0.048,-0.017], [0.065,-0.026], [0.082,-0.009], [0.099,0.009], [0.116,0.034], [0.133,0.060], [0.150,0.077], [0.158,0.094], [0.166,0.099], [0.179,0.111], [0.191,0.100], [0.191,0.050], [0.191,-0.018], [0.191,-0.127], [0.191,-0.246], [0.191,-0.364], [0.191,-0.483], [0.191,-0.602], [0.191,-0.720], [0.191,-0.839], [0.191,-0.958], [0.191,-1.076], [0.191,-1.195], [0.184,-1.256], [0.174,-1.317], [0.163,-1.365], [0.148,-1.381], [0.128,-1.385], [0.109,-1.369], [0.098,-1.347], [0.086,-1.257], [0.081,-1.147], [0.080,-1.062], [0.087,-0.977], [0.098,-0.904], [0.109,-0.856], [0.120,-0.808], [0.132,-0.760], [0.143,-0.712], [0.150,-0.688], [0.164,-0.659], [0.178,-0.631], [0.192,-0.604], [0.204,-0.593], [0.220,-0.585], [0.237,-0.584], [0.255,-0.601], [0.276,-0.618], [0.297,-0.637],  ],\n  'k*' : [ [0.021,-0.017], [0.043,-0.042], [0.060,-0.059], [0.076,-0.102], [0.093,-0.127], [0.111,-0.127], [0.136,-0.110], [0.162,-0.085], [0.168,-0.156], [0.192,-0.077], [0.216,0.002], [0.239,0.080], [0.263,0.159], [0.278,0.205], [0.292,0.252], [0.303,0.298], [0.311,0.344], [0.329,0.410], [0.339,0.458], [0.348,0.505], [0.357,0.553], [0.366,0.600], [0.375,0.648], [0.383,0.714], [0.386,0.784], [0.369,0.825], [0.347,0.833], [0.327,0.833], [0.302,0.833], [0.276,0.825], [0.251,0.808], [0.225,0.761], [0.200,0.711], [0.179,0.615], [0.170,0.518], [0.170,0.422], [0.170,0.325], [0.170,0.228], [0.170,0.159], [0.170,0.083], [0.170,0.006], [0.170,-0.070], [0.170,-0.147], [0.170,-0.223], [0.170,-0.300], [0.170,-0.376], [0.170,-0.452], [0.170,-0.529], [0.170,-0.605], [0.170,-0.698], [0.170,-0.605], [0.170,-0.529], [0.170,-0.452], [0.170,-0.376], [0.170,-0.300], [0.177,-0.223], [0.199,-0.212], [0.233,-0.204], [0.267,-0.195], [0.309,-0.178], [0.343,-0.153], [0.377,-0.127], [0.398,-0.085], [0.411,-0.049], [0.406,0.009], [0.394,0.060], [0.379,0.090], [0.360,0.117], [0.326,0.094], [0.301,0.043], [0.258,-0.042], [0.233,-0.127], [0.216,-0.187], [0.191,-0.229], [0.207,-0.272], [0.228,-0.304], [0.244,-0.351], [0.261,-0.397], [0.277,-0.443], [0.289,-0.490], [0.295,-0.513], [0.311,-0.559], [0.328,-0.605], [0.344,-0.652], [0.364,-0.697], [0.386,-0.722], [0.407,-0.714], [0.428,-0.697], [0.449,-0.680], [0.471,-0.663], [0.486,-0.654], [0.506,-0.637], [0.532,-0.637], [0.552,-0.637],  ],\n  'l*' : [ [0.015,-0.009], [0.027,-0.026], [0.044,-0.042], [0.061,-0.085], [0.078,-0.127], [0.104,-0.153], [0.121,-0.170], [0.142,-0.178], [0.153,-0.183], [0.170,-0.137], [0.189,-0.089], [0.201,-0.042], [0.218,0.034], [0.230,0.094], [0.241,0.162], [0.250,0.205], [0.255,0.244], [0.262,0.289], [0.267,0.339], [0.274,0.386], [0.277,0.433], [0.283,0.500], [0.289,0.552], [0.293,0.629], [0.297,0.715], [0.298,0.762], [0.293,0.831], [0.275,0.883], [0.258,0.920], [0.240,0.931], [0.225,0.935], [0.200,0.930], [0.174,0.916], [0.162,0.868], [0.158,0.821], [0.154,0.781], [0.152,0.723], [0.152,0.637], [0.152,0.550], [0.152,0.463], [0.152,0.376], [0.152,0.290], [0.152,0.203], [0.152,0.116], [0.152,0.030], [0.152,-0.057], [0.152,-0.144], [0.152,-0.231], [0.152,-0.317], [0.152,-0.404], [0.152,-0.491], [0.156,-0.553], [0.172,-0.603], [0.191,-0.629], [0.217,-0.635], [0.242,-0.658], [0.269,-0.672], [0.302,-0.654], [0.338,-0.646], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637],  ],\n  'm*' : [ [0.017,0.000], [0.043,0.009], [0.068,0.009], [0.093,0.017], [0.119,0.026], [0.136,0.043], [0.157,0.077], [0.174,0.094], [0.197,0.090], [0.205,0.066], [0.207,0.046], [0.210,-0.005], [0.212,-0.056], [0.215,-0.107], [0.217,-0.158], [0.220,-0.209], [0.215,-0.253], [0.211,-0.298], [0.206,-0.342], [0.201,-0.386], [0.196,-0.430], [0.191,-0.475], [0.186,-0.519], [0.182,-0.563], [0.177,-0.607], [0.172,-0.652], [0.177,-0.607], [0.182,-0.563], [0.186,-0.519], [0.191,-0.475], [0.196,-0.430], [0.201,-0.386], [0.206,-0.342], [0.211,-0.298], [0.215,-0.253], [0.220,-0.209], [0.230,-0.165], [0.244,-0.127], [0.255,-0.096], [0.263,-0.073], [0.272,-0.049], [0.280,-0.026], [0.288,-0.003], [0.297,0.020], [0.313,0.060], [0.330,0.085], [0.356,0.105], [0.380,0.113], [0.388,0.090], [0.396,0.066], [0.405,0.043], [0.410,0.006], [0.415,-0.031], [0.420,-0.068], [0.425,-0.105], [0.430,-0.142], [0.424,-0.191], [0.418,-0.239], [0.412,-0.288], [0.406,-0.337], [0.401,-0.385], [0.395,-0.434], [0.389,-0.483], [0.383,-0.531], [0.377,-0.580], [0.377,-0.628], [0.377,-0.580], [0.383,-0.531], [0.389,-0.483], [0.395,-0.434], [0.401,-0.385], [0.406,-0.337], [0.412,-0.288], [0.418,-0.239], [0.424,-0.191], [0.430,-0.142], [0.438,-0.119], [0.451,-0.085], [0.463,-0.049], [0.471,-0.026], [0.480,0.009], [0.496,0.043], [0.505,0.066], [0.518,0.090], [0.551,0.111], [0.588,0.090], [0.604,0.043], [0.613,0.020], [0.621,-0.026], [0.617,-0.075], [0.613,-0.123], [0.609,-0.171], [0.604,-0.220], [0.600,-0.268], [0.596,-0.317], [0.592,-0.365], [0.588,-0.413], [0.584,-0.462], [0.579,-0.510], [0.579,-0.559], [0.596,-0.605], [0.604,-0.628], [0.620,-0.654], [0.663,-0.663], [0.687,-0.663], [0.711,-0.654], [0.737,-0.650], [0.782,-0.646], [0.825,-0.637],  ],\n  'n*' : [ [0.026,0.017], [0.051,0.034], [0.076,0.051], [0.102,0.102], [0.119,0.145], [0.132,0.170], [0.145,0.187], [0.166,0.213], [0.187,0.187], [0.200,0.136], [0.207,0.090], [0.211,0.043], [0.216,0.000], [0.218,-0.049], [0.215,-0.105], [0.215,-0.161], [0.215,-0.216], [0.215,-0.272], [0.215,-0.327], [0.215,-0.383], [0.215,-0.439], [0.215,-0.494], [0.215,-0.550], [0.215,-0.605], [0.215,-0.550], [0.215,-0.494], [0.215,-0.439], [0.215,-0.383], [0.215,-0.327], [0.215,-0.272], [0.215,-0.216], [0.215,-0.161], [0.215,-0.105], [0.230,-0.093], [0.242,-0.068], [0.254,-0.049], [0.262,-0.026], [0.271,-0.003], [0.279,0.020], [0.293,0.051], [0.310,0.090], [0.328,0.136], [0.346,0.159], [0.371,0.159], [0.387,0.136], [0.396,0.113], [0.404,0.090], [0.408,0.043], [0.412,0.000], [0.412,-0.085], [0.412,-0.144], [0.412,-0.212], [0.412,-0.272], [0.412,-0.331], [0.412,-0.374], [0.412,-0.425], [0.412,-0.467], [0.412,-0.513], [0.412,-0.559], [0.417,-0.612], [0.432,-0.663], [0.462,-0.671], [0.483,-0.663], [0.512,-0.637], [0.544,-0.637],  ],\n  'o*' : [ [0.026,-0.021], [0.051,-0.026], [0.076,-0.017], [0.102,-0.009], [0.128,0.000], [0.153,0.009], [0.173,-0.003], [0.182,0.020], [0.190,0.043], [0.198,0.066], [0.216,0.077], [0.237,0.094], [0.267,0.094], [0.288,0.077], [0.298,0.066], [0.309,0.043], [0.317,0.026], [0.323,0.000], [0.331,-0.026], [0.335,-0.075], [0.334,-0.123], [0.337,-0.171], [0.336,-0.219], [0.332,-0.268], [0.330,-0.316], [0.326,-0.364], [0.319,-0.413], [0.310,-0.461], [0.302,-0.509], [0.296,-0.552], [0.285,-0.603], [0.272,-0.646], [0.251,-0.680], [0.230,-0.697], [0.204,-0.705], [0.173,-0.693], [0.160,-0.671], [0.148,-0.642], [0.132,-0.605], [0.123,-0.582], [0.115,-0.559], [0.107,-0.536], [0.101,-0.510], [0.092,-0.467], [0.084,-0.425], [0.078,-0.382], [0.082,-0.331], [0.093,-0.281], [0.103,-0.246], [0.108,-0.212], [0.119,-0.170], [0.132,-0.119], [0.140,-0.096], [0.148,-0.073], [0.160,-0.034], [0.173,-0.003], [0.182,0.020], [0.190,0.043], [0.198,0.066], [0.216,0.077], [0.236,0.043], [0.247,0.000], [0.259,-0.034], [0.272,-0.051], [0.289,-0.068], [0.306,-0.076], [0.323,-0.076], [0.340,-0.076], [0.357,-0.076], [0.374,-0.072], [0.391,-0.068], [0.408,-0.059], [0.425,-0.042], [0.442,-0.026], [0.459,0.000],  ],\n  'p*' : [ [0.021,-0.004], [0.043,-0.009], [0.068,-0.009], [0.093,-0.009], [0.119,0.009], [0.139,0.013], [0.144,-0.066], [0.143,-0.174], [0.142,-0.282], [0.141,-0.390], [0.140,-0.497], [0.139,-0.605], [0.138,-0.713], [0.137,-0.821], [0.136,-0.929], [0.135,-1.037], [0.134,-1.145], [0.133,-1.253], [0.132,-1.361], [0.133,-1.253], [0.134,-1.145], [0.135,-1.037], [0.136,-0.929], [0.137,-0.821], [0.138,-0.713], [0.139,-0.605], [0.140,-0.497], [0.141,-0.390], [0.142,-0.282], [0.143,-0.174], [0.144,-0.066], [0.145,0.042], [0.139,0.013], [0.161,0.058], [0.176,0.101], [0.196,0.129], [0.212,0.147], [0.224,0.156], [0.240,0.166], [0.263,0.159], [0.289,0.138], [0.312,0.072], [0.318,0.045], [0.334,-0.021], [0.343,-0.133], [0.343,-0.208], [0.344,-0.320], [0.338,-0.389], [0.332,-0.467], [0.321,-0.505], [0.303,-0.545], [0.283,-0.565], [0.252,-0.605], [0.223,-0.598], [0.196,-0.595], [0.170,-0.578], [0.196,-0.595], [0.223,-0.598], [0.252,-0.605], [0.270,-0.599], [0.296,-0.614], [0.339,-0.628], [0.365,-0.634], [0.397,-0.654], [0.425,-0.654], [0.455,-0.646], [0.485,-0.637],  ],\n  'q*' : [ [0.026,-0.004], [0.051,-0.009], [0.076,-0.013], [0.102,-0.017], [0.128,-0.034], [0.153,-0.051], [0.179,-0.042], [0.204,-0.034], [0.230,-0.017], [0.257,0.000], [0.279,0.017], [0.305,0.034], [0.330,0.051], [0.356,0.063], [0.382,0.060], [0.391,0.026], [0.389,-0.042], [0.388,-0.110], [0.386,-0.178], [0.384,-0.246], [0.383,-0.314], [0.381,-0.382], [0.379,-0.450], [0.377,-0.518], [0.376,-0.586], [0.349,-0.612], [0.322,-0.637], [0.279,-0.663], [0.245,-0.675], [0.204,-0.663], [0.169,-0.637], [0.141,-0.605], [0.118,-0.527], [0.107,-0.443], [0.104,-0.399], [0.116,-0.357], [0.132,-0.309], [0.141,-0.281], [0.157,-0.235], [0.174,-0.188], [0.191,-0.142], [0.204,-0.102], [0.220,-0.068], [0.241,-0.026], [0.257,0.000], [0.279,0.017], [0.305,0.034], [0.330,0.051], [0.356,0.063], [0.382,0.060], [0.391,0.026], [0.389,-0.042], [0.388,-0.110], [0.386,-0.178], [0.384,-0.246], [0.383,-0.314], [0.381,-0.382], [0.379,-0.450], [0.377,-0.518], [0.376,-0.586], [0.374,-0.654], [0.372,-0.722], [0.371,-0.790], [0.369,-0.858], [0.367,-0.926], [0.365,-0.994], [0.364,-1.062], [0.362,-1.130], [0.360,-1.198], [0.359,-1.266], [0.357,-1.335], [0.355,-1.402], [0.354,-1.470], [0.374,-1.466], [0.400,-1.459], [0.417,-1.449], [0.433,-1.419], [0.451,-1.377], [0.468,-1.317], [0.485,-1.249], [0.493,-1.198], [0.497,-1.130], [0.493,-1.079], [0.485,-1.037], [0.468,-0.976], [0.451,-0.935], [0.433,-0.892], [0.417,-0.841], [0.400,-0.799], [0.391,-0.765], [0.391,-0.705], [0.415,-0.680], [0.442,-0.663], [0.468,-0.654], [0.493,-0.650], [0.510,-0.646], [0.552,-0.642], [0.603,-0.637],  ],\n  'r*' : [ [0.043,-0.026], [0.085,-0.034], [0.085,0.085], [0.128,0.085], [0.170,0.085], [0.213,0.085], [0.255,0.085], [0.255,0.000], [0.251,-0.085], [0.247,-0.170], [0.238,-0.255], [0.230,-0.340], [0.225,-0.425], [0.238,-0.510], [0.255,-0.552], [0.289,-0.595], [0.332,-0.620], [0.383,-0.637],  ],\n  's*' : [ [0.043,0.000], [0.085,-0.009], [0.111,-0.026], [0.136,-0.051], [0.162,-0.085], [0.187,-0.085], [0.213,-0.076], [0.238,-0.068], [0.264,-0.051], [0.281,-0.042], [0.302,-0.017], [0.332,0.004], [0.374,0.030], [0.409,0.043], [0.410,-0.026], [0.415,-0.073], [0.421,-0.140], [0.428,-0.204], [0.433,-0.253], [0.433,-0.297], [0.433,-0.341], [0.429,-0.385], [0.425,-0.429], [0.421,-0.473], [0.412,-0.517], [0.391,-0.561], [0.329,-0.620], [0.306,-0.608], [0.273,-0.586], [0.248,-0.535], [0.224,-0.467], [0.198,-0.382], [0.177,-0.297], [0.166,-0.212], [0.162,-0.127], [0.166,-0.212], [0.177,-0.297], [0.198,-0.382], [0.224,-0.467], [0.248,-0.535], [0.273,-0.586], [0.306,-0.608], [0.329,-0.620], [0.350,-0.637], [0.371,-0.646], [0.392,-0.654], [0.425,-0.663], [0.468,-0.654], [0.510,-0.646], [0.552,-0.637],  ],\n  't*' : [ [0.043,-0.042], [0.085,-0.085], [0.128,-0.127], [0.170,-0.110], [0.213,-0.042], [0.255,0.043], [0.279,0.157], [0.286,0.310], [0.294,0.463], [0.276,0.463], [0.261,0.463], [0.233,0.463], [0.206,0.463], [0.170,0.463], [0.128,0.463], [0.085,0.463], [0.128,0.463], [0.170,0.463], [0.206,0.463], [0.233,0.463], [0.261,0.463], [0.276,0.463], [0.316,0.463], [0.344,0.463], [0.365,0.463], [0.392,0.463], [0.420,0.463], [0.448,0.463], [0.489,0.463], [0.531,0.463], [0.489,0.463], [0.448,0.463], [0.420,0.463], [0.392,0.463], [0.365,0.463], [0.344,0.463], [0.316,0.463], [0.294,0.463], [0.301,0.616], [0.309,0.770], [0.316,0.923], [0.316,0.770], [0.316,0.616], [0.316,0.463], [0.316,0.310], [0.316,0.157], [0.316,0.003], [0.316,-0.150], [0.316,-0.303], [0.316,-0.456], [0.316,-0.610], [0.329,-0.656], [0.360,-0.667], [0.404,-0.650], [0.447,-0.642], [0.489,-0.637], [0.531,-0.637], [0.574,-0.637], [0.616,-0.637],  ],\n  'u*' : [ [0.021,-0.009], [0.043,-0.017], [0.064,-0.009], [0.081,-0.009], [0.098,0.009], [0.115,0.043], [0.136,0.068], [0.153,0.094], [0.172,0.101], [0.169,0.052], [0.166,0.003], [0.163,-0.046], [0.159,-0.096], [0.156,-0.145], [0.153,-0.194], [0.150,-0.243], [0.146,-0.293], [0.143,-0.342], [0.140,-0.391], [0.137,-0.440], [0.133,-0.490], [0.130,-0.539], [0.127,-0.588], [0.130,-0.637], [0.145,-0.654], [0.166,-0.663], [0.191,-0.654], [0.213,-0.646], [0.230,-0.629], [0.251,-0.612], [0.272,-0.595], [0.292,-0.578], [0.308,-0.561], [0.323,-0.535], [0.336,-0.501], [0.341,-0.456], [0.343,-0.409], [0.345,-0.362], [0.346,-0.315], [0.348,-0.267], [0.350,-0.220], [0.352,-0.173], [0.354,-0.126], [0.356,-0.079], [0.357,-0.031], [0.359,0.016], [0.361,0.075], [0.363,0.126], [0.361,0.075], [0.359,0.016], [0.357,-0.031], [0.356,-0.079], [0.354,-0.126], [0.352,-0.173], [0.350,-0.220], [0.348,-0.267], [0.346,-0.315], [0.356,-0.380], [0.360,-0.433], [0.365,-0.484], [0.374,-0.535], [0.378,-0.586], [0.395,-0.637], [0.422,-0.654], [0.451,-0.654], [0.472,-0.646], [0.510,-0.637],  ],\n  'v*' : [ [0.026,-0.009], [0.051,0.009], [0.068,0.026], [0.081,0.051], [0.093,0.068], [0.105,0.094], [0.122,0.095], [0.134,0.073], [0.144,0.052], [0.151,0.015], [0.156,-0.027], [0.161,-0.063], [0.161,-0.095], [0.159,-0.131], [0.158,-0.172], [0.157,-0.214], [0.156,-0.255], [0.154,-0.297], [0.153,-0.338], [0.152,-0.379], [0.151,-0.421], [0.149,-0.462], [0.153,-0.508], [0.161,-0.558], [0.169,-0.600], [0.184,-0.641], [0.203,-0.665], [0.224,-0.644], [0.243,-0.617], [0.251,-0.574], [0.258,-0.531], [0.266,-0.488], [0.273,-0.445], [0.275,-0.398], [0.283,-0.353], [0.286,-0.301], [0.291,-0.259], [0.296,-0.182], [0.302,-0.106], [0.308,-0.030], [0.314,0.047], [0.349,0.039], [0.387,0.019], [0.414,0.006], [0.435,0.000],  ],\n  'w*' : [ [0.026,0.021], [0.051,0.034], [0.076,0.068], [0.093,0.085], [0.112,0.108], [0.110,0.023], [0.108,-0.061], [0.106,-0.145], [0.104,-0.230], [0.101,-0.314], [0.103,-0.368], [0.107,-0.453], [0.112,-0.521], [0.127,-0.589], [0.149,-0.634], [0.180,-0.650], [0.215,-0.627], [0.226,-0.579], [0.238,-0.531], [0.250,-0.483], [0.260,-0.436], [0.269,-0.388], [0.277,-0.341], [0.284,-0.293], [0.288,-0.209], [0.291,-0.125], [0.295,-0.041], [0.299,0.044], [0.303,0.085], [0.309,0.029], [0.315,-0.070], [0.320,-0.168], [0.326,-0.267], [0.332,-0.366], [0.338,-0.465], [0.344,-0.563], [0.366,-0.631], [0.388,-0.637], [0.408,-0.626], [0.426,-0.574], [0.439,-0.533], [0.451,-0.485], [0.462,-0.438], [0.469,-0.381], [0.475,-0.299], [0.477,-0.254], [0.483,-0.165], [0.488,-0.075], [0.493,0.014], [0.499,0.085], [0.526,0.077], [0.554,0.060], [0.581,0.043], [0.610,0.000],  ],\n  'x*' : [ [0.021,0.043], [0.043,0.085], [0.064,0.145], [0.098,0.170], [0.116,0.103], [0.135,0.035], [0.153,-0.032], [0.172,-0.099], [0.190,-0.166], [0.209,-0.234], [0.223,-0.281], [0.215,-0.303], [0.194,-0.357], [0.173,-0.411], [0.152,-0.465], [0.131,-0.518], [0.110,-0.572], [0.085,-0.637], [0.110,-0.572], [0.131,-0.518], [0.152,-0.465], [0.173,-0.411], [0.194,-0.357], [0.215,-0.303], [0.236,-0.249], [0.261,-0.188], [0.278,-0.142], [0.299,-0.088], [0.320,-0.034], [0.341,0.020], [0.362,0.074], [0.383,0.128], [0.400,0.170], [0.383,0.128], [0.362,0.074], [0.341,0.020], [0.320,-0.034], [0.299,-0.088], [0.278,-0.142], [0.261,-0.188], [0.236,-0.249], [0.223,-0.281], [0.246,-0.368], [0.264,-0.436], [0.282,-0.503], [0.301,-0.570], [0.319,-0.637], [0.340,-0.675], [0.359,-0.681], [0.382,-0.697], [0.400,-0.693], [0.417,-0.688], [0.432,-0.671], [0.451,-0.659], [0.468,-0.646], [0.493,-0.637],  ],\n  'y*' : [ [0.021,-0.009], [0.043,-0.017], [0.064,-0.009], [0.081,-0.009], [0.098,0.000], [0.115,0.009], [0.132,0.026], [0.153,0.026], [0.170,0.026], [0.190,0.011], [0.199,-0.012], [0.202,-0.049], [0.200,-0.092], [0.197,-0.130], [0.189,-0.209], [0.181,-0.288], [0.174,-0.366], [0.166,-0.445], [0.158,-0.523], [0.157,-0.586], [0.162,-0.639], [0.171,-0.662], [0.181,-0.685], [0.190,-0.708], [0.201,-0.729], [0.214,-0.746], [0.231,-0.753], [0.248,-0.753], [0.283,-0.744], [0.316,-0.708], [0.332,-0.674], [0.368,-0.596], [0.372,-0.525], [0.375,-0.454], [0.379,-0.384], [0.382,-0.313], [0.385,-0.242], [0.389,-0.171], [0.392,-0.100], [0.396,-0.030], [0.399,0.017], [0.396,-0.030], [0.392,-0.100], [0.389,-0.171], [0.385,-0.242], [0.382,-0.313], [0.379,-0.384], [0.375,-0.454], [0.372,-0.525], [0.368,-0.596], [0.365,-0.667], [0.361,-0.738], [0.358,-0.808], [0.355,-0.879], [0.351,-0.950], [0.348,-1.021], [0.344,-1.092], [0.341,-1.162], [0.337,-1.233], [0.334,-1.304], [0.331,-1.375], [0.316,-1.422], [0.290,-1.435], [0.257,-1.444], [0.223,-1.452], [0.192,-1.444], [0.168,-1.427], [0.159,-1.404], [0.150,-1.381], [0.141,-1.358], [0.133,-1.327], [0.130,-1.289], [0.133,-1.238], [0.145,-1.199], [0.152,-1.165], [0.163,-1.126], [0.171,-1.092], [0.180,-1.056], [0.188,-1.032], [0.195,-1.009], [0.203,-0.985], [0.210,-0.962], [0.218,-0.938], [0.225,-0.915], [0.246,-0.889], [0.270,-0.863], [0.295,-0.837], [0.319,-0.810], [0.388,-0.748], [0.416,-0.709], [0.444,-0.678], [0.472,-0.660], [0.500,-0.642], [0.526,-0.637],  ],\n  'z*' : [ [0.021,-0.009], [0.043,-0.017], [0.068,-0.026], [0.093,-0.026], [0.119,-0.026], [0.145,-0.026], [0.170,-0.009], [0.187,0.009], [0.203,0.034], [0.215,0.066], [0.232,0.102], [0.245,0.119], [0.265,0.113], [0.282,0.090], [0.298,0.066], [0.306,0.043], [0.315,0.000], [0.312,-0.042], [0.307,-0.096], [0.296,-0.170], [0.284,-0.237], [0.265,-0.304], [0.249,-0.351], [0.228,-0.425], [0.207,-0.490], [0.190,-0.536], [0.182,-0.559], [0.157,-0.628], [0.149,-0.652], [0.157,-0.628], [0.182,-0.559], [0.190,-0.536], [0.207,-0.490], [0.232,-0.490], [0.245,-0.518], [0.257,-0.559], [0.265,-0.582], [0.278,-0.620], [0.290,-0.675], [0.292,-0.698], [0.290,-0.721], [0.290,-0.767], [0.290,-0.814], [0.284,-0.935], [0.271,-1.020], [0.259,-1.094], [0.249,-1.138], [0.240,-1.161], [0.224,-1.231], [0.215,-1.254], [0.204,-1.283], [0.187,-1.346], [0.174,-1.370], [0.158,-1.385], [0.140,-1.370], [0.132,-1.346], [0.109,-1.292], [0.099,-1.254], [0.092,-1.207], [0.099,-1.161], [0.109,-1.118], [0.124,-1.069], [0.132,-1.045], [0.140,-1.022], [0.149,-0.999], [0.157,-0.976], [0.165,-0.953], [0.174,-0.930], [0.182,-0.906], [0.190,-0.883], [0.208,-0.853], [0.225,-0.816], [0.243,-0.782], [0.260,-0.748], [0.278,-0.722], [0.295,-0.697], [0.313,-0.680], [0.330,-0.663], [0.348,-0.654], [0.365,-0.642], [0.383,-0.637], [0.408,-0.629], [0.433,-0.629], [0.459,-0.637],  ],\n  ',' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.179,-0.552], [0.196,-0.467], [0.230,-0.552], [0.238,-0.637], [0.247,-0.722], [0.247,-0.807], [0.230,-0.892], [0.213,-0.977], [0.179,-1.062], [0.128,-1.147], [0.179,-1.062], [0.213,-0.977], [0.230,-0.892], [0.247,-0.807], [0.247,-0.722], [0.238,-0.637], [0.230,-0.552], [0.196,-0.467], [0.230,-0.552], [0.238,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637],  ],\n  '?' : [ [0.043,-0.637], [0.085,-0.637], [0.136,-0.637], [0.170,-0.637], [0.213,-0.637], [0.213,-0.637], [0.213,-0.552], [0.213,-0.467], [0.213,-0.382], [0.213,-0.297], [0.213,-0.212], [0.213,-0.127], [0.213,-0.042], [0.213,0.085], [0.264,0.111], [0.293,0.128], [0.320,0.153], [0.348,0.229], [0.367,0.298], [0.375,0.401], [0.374,0.535], [0.370,0.665], [0.363,0.749], [0.356,0.808], [0.336,0.889], [0.321,0.926], [0.293,0.935], [0.269,0.943], [0.242,0.935], [0.206,0.893], [0.170,0.850], [0.106,0.765], [0.170,0.850], [0.206,0.893], [0.242,0.935], [0.269,0.943], [0.293,0.935], [0.321,0.926], [0.336,0.889], [0.356,0.808], [0.363,0.749], [0.370,0.665], [0.374,0.535], [0.375,0.401], [0.367,0.298], [0.348,0.229], [0.320,0.153], [0.293,0.128], [0.264,0.111], [0.213,0.085], [0.213,-0.042], [0.213,-0.127], [0.213,-0.212], [0.213,-0.297], [0.213,-0.382], [0.213,-0.467], [0.213,-0.552], [0.213,-0.637], [0.306,-0.637], [0.281,-0.510], [0.213,-0.425], [0.145,-0.510], [0.119,-0.637], [0.145,-0.765], [0.213,-0.850], [0.281,-0.765], [0.306,-0.637], [0.213,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637], [0.552,-0.637],  ],\n  '&' : [ [0.043,-0.637], [0.085,-0.637], [0.119,-0.637], [0.172,-0.629], [0.213,-0.625], [0.251,-0.625], [0.315,-0.612], [0.365,-0.599], [0.408,-0.535], [0.451,-0.425], [0.485,-0.357], [0.510,-0.291], [0.552,-0.170], [0.603,-0.042], [0.552,-0.170], [0.510,-0.291], [0.485,-0.357], [0.451,-0.425], [0.408,-0.535], [0.365,-0.599], [0.315,-0.612], [0.251,-0.625], [0.213,-0.625], [0.172,-0.629], [0.149,-0.569], [0.136,-0.527], [0.128,-0.450], [0.123,-0.348], [0.128,-0.178], [0.153,-0.042], [0.204,0.085], [0.247,0.153], [0.272,0.196], [0.332,0.238], [0.378,0.303], [0.400,0.383], [0.421,0.484], [0.438,0.578], [0.443,0.669], [0.444,0.763], [0.435,0.839], [0.418,0.898], [0.395,0.926], [0.353,0.935], [0.319,0.935], [0.285,0.926], [0.250,0.909], [0.232,0.883], [0.220,0.830], [0.214,0.754], [0.211,0.697], [0.212,0.612], [0.216,0.552], [0.229,0.455], [0.251,0.323], [0.289,0.213], [0.323,0.043], [0.357,-0.127], [0.383,-0.297], [0.408,-0.467], [0.433,-0.637], [0.468,-0.680], [0.510,-0.680], [0.548,-0.654], [0.595,-0.637], [0.645,-0.637], [0.693,-0.637], [0.731,-0.637],  ],\n  '$' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.255,-0.892], [0.255,-0.637], [0.255,-0.382], [0.255,-0.127], [0.255,0.128], [0.255,0.383], [0.255,0.638], [0.255,0.977], [0.272,0.977], [0.272,0.638], [0.272,0.383], [0.272,0.128], [0.272,-0.127], [0.272,-0.382], [0.272,-0.637], [0.272,-0.892], [0.272,-0.637], [0.326,-0.637], [0.364,-0.629], [0.395,-0.584], [0.415,-0.515], [0.443,-0.411], [0.456,-0.281], [0.452,-0.185], [0.440,-0.118], [0.415,-0.042], [0.387,0.009], [0.354,0.009], [0.315,0.009], [0.272,0.009], [0.237,0.009], [0.204,0.017], [0.170,0.051], [0.153,0.077], [0.136,0.119], [0.111,0.187], [0.093,0.264], [0.085,0.391], [0.093,0.490], [0.119,0.589], [0.145,0.646], [0.175,0.679], [0.213,0.697], [0.255,0.697], [0.296,0.697], [0.340,0.697], [0.383,0.697], [0.425,0.697], [0.383,0.697], [0.340,0.697], [0.296,0.697], [0.255,0.697], [0.213,0.697], [0.175,0.679], [0.145,0.646], [0.119,0.589], [0.093,0.490], [0.085,0.391], [0.093,0.264], [0.111,0.187], [0.136,0.119], [0.153,0.077], [0.170,0.051], [0.204,0.017], [0.237,0.009], [0.272,0.009], [0.315,0.009], [0.354,0.009], [0.387,0.009], [0.415,-0.042], [0.440,-0.118], [0.452,-0.185], [0.456,-0.281], [0.443,-0.411], [0.415,-0.515], [0.395,-0.584], [0.364,-0.629], [0.326,-0.637], [0.255,-0.637], [0.213,-0.637], [0.170,-0.637], [0.128,-0.637], [0.085,-0.637], [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637], [0.552,-0.637],  ],\n  '!' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.255,-0.382], [0.255,-0.127], [0.255,0.128], [0.255,0.383], [0.255,0.638], [0.255,0.935], [0.255,0.638], [0.255,0.383], [0.255,0.128], [0.255,-0.127], [0.255,-0.382], [0.255,-0.637], [0.349,-0.637], [0.323,-0.510], [0.255,-0.425], [0.187,-0.510], [0.162,-0.637], [0.187,-0.765], [0.255,-0.850], [0.323,-0.765], [0.349,-0.637], [0.255,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637],  ],\n}\n","export let raysol_sanserif = {\n  ' ' : [ [0.000,-0.637], [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637],  ],\n  '0' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.272,-0.542], [0.315,-0.446], [0.340,-0.351], [0.361,-0.255], [0.383,-0.159], [0.400,-0.064], [0.417,0.032], [0.420,0.140], [0.417,0.266], [0.400,0.361], [0.383,0.457], [0.361,0.552], [0.340,0.648], [0.315,0.744], [0.272,0.839], [0.213,0.935], [0.153,0.839], [0.111,0.744], [0.085,0.648], [0.064,0.552], [0.043,0.457], [0.026,0.361], [0.009,0.266], [0.005,0.140], [0.009,0.032], [0.026,-0.064], [0.043,-0.159], [0.064,-0.255], [0.085,-0.351], [0.111,-0.446], [0.153,-0.542], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637],  ],\n  '1' : [ [0.043,-0.637], [0.043,-0.480], [0.043,-0.323], [0.043,-0.166], [0.043,-0.009], [0.043,0.149], [0.043,0.306], [0.043,0.463], [0.043,0.621], [0.043,0.778], [0.043,0.935], [0.043,0.778], [0.043,0.621], [0.043,0.463], [0.043,0.306], [0.043,0.149], [0.043,-0.009], [0.043,-0.166], [0.043,-0.323], [0.043,-0.480], [0.043,-0.637], [0.085,-0.637],  ],\n  '2' : [ [0.043,-0.637], [0.085,-0.637], [0.043,-0.637], [0.088,-0.450], [0.134,-0.264], [0.180,-0.076], [0.226,0.111], [0.272,0.298], [0.306,0.425], [0.327,0.552], [0.332,0.680], [0.319,0.765], [0.293,0.850], [0.264,0.901], [0.225,0.931], [0.191,0.935], [0.157,0.931], [0.119,0.901], [0.089,0.850], [0.064,0.765], [0.043,0.680], [0.064,0.765], [0.089,0.850], [0.119,0.901], [0.157,0.931], [0.191,0.935], [0.225,0.931], [0.264,0.901], [0.293,0.850], [0.319,0.765], [0.332,0.680], [0.327,0.552], [0.306,0.425], [0.272,0.298], [0.226,0.111], [0.180,-0.076], [0.134,-0.264], [0.088,-0.450], [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.383,-0.637], [0.425,-0.425], [0.425,-0.637], [0.468,-0.637],  ],\n  '3' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.170,-0.637], [0.204,-0.633], [0.242,-0.603], [0.272,-0.552], [0.298,-0.467], [0.310,-0.382], [0.306,-0.255], [0.285,-0.127], [0.238,0.000], [0.170,0.213], [0.128,0.213], [0.170,0.213], [0.251,0.298], [0.285,0.425], [0.306,0.552], [0.310,0.680], [0.298,0.765], [0.272,0.850], [0.242,0.901], [0.204,0.931], [0.170,0.935], [0.136,0.931], [0.098,0.901], [0.068,0.850], [0.043,0.765], [0.021,0.680], [0.043,0.765], [0.068,0.850], [0.098,0.901], [0.136,0.931], [0.170,0.935], [0.204,0.931], [0.242,0.901], [0.272,0.850], [0.298,0.765], [0.310,0.680], [0.306,0.552], [0.285,0.425], [0.251,0.298], [0.170,0.213], [0.128,0.213], [0.170,0.213], [0.238,0.000], [0.285,-0.127], [0.306,-0.255], [0.310,-0.382], [0.298,-0.467], [0.272,-0.552], [0.242,-0.603], [0.204,-0.633], [0.170,-0.637], [0.136,-0.633], [0.098,-0.603], [0.068,-0.552], [0.043,-0.467], [0.021,-0.382], [0.000,-0.289], [0.021,-0.382], [0.043,-0.467], [0.068,-0.552], [0.098,-0.603], [0.136,-0.633], [0.170,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637],  ],\n  '4' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.298,-0.467], [0.298,-0.297], [0.298,-0.127], [0.298,0.043], [0.298,0.149], [0.255,0.149], [0.213,0.149], [0.170,0.149], [0.128,0.149], [0.085,0.149], [0.034,0.149], [0.043,0.213], [0.043,0.383], [0.043,0.552], [0.043,0.723], [0.043,0.893], [0.043,0.935], [0.043,0.893], [0.043,0.723], [0.043,0.552], [0.043,0.383], [0.043,0.213], [0.043,0.149], [0.085,0.149], [0.128,0.149], [0.170,0.149], [0.213,0.149], [0.255,0.149], [0.298,0.149], [0.340,0.149], [0.404,0.149], [0.468,0.149], [0.404,0.149], [0.340,0.149], [0.298,0.149], [0.298,0.213], [0.298,0.383], [0.298,0.552], [0.298,0.723], [0.298,0.893], [0.298,0.935], [0.298,0.893], [0.298,0.723], [0.298,0.552], [0.298,0.383], [0.298,0.213], [0.298,0.149], [0.298,0.043], [0.298,-0.127], [0.298,-0.297], [0.298,-0.467], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637],  ],\n  '5' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.213,-0.595], [0.247,-0.591], [0.285,-0.561], [0.315,-0.510], [0.340,-0.425], [0.353,-0.340], [0.357,-0.212], [0.349,-0.042], [0.327,0.085], [0.281,0.213], [0.213,0.323], [0.136,0.315], [0.068,0.289], [0.076,0.451], [0.085,0.612], [0.093,0.774], [0.102,0.935], [0.145,0.935], [0.187,0.935], [0.230,0.935], [0.272,0.935], [0.340,0.935], [0.400,0.935], [0.340,0.935], [0.272,0.935], [0.230,0.935], [0.187,0.935], [0.145,0.935], [0.102,0.935], [0.093,0.774], [0.085,0.612], [0.076,0.451], [0.068,0.289], [0.136,0.315], [0.213,0.323], [0.281,0.213], [0.327,0.085], [0.349,-0.042], [0.357,-0.212], [0.353,-0.340], [0.340,-0.425], [0.315,-0.510], [0.285,-0.561], [0.247,-0.591], [0.213,-0.595], [0.179,-0.591], [0.140,-0.561], [0.111,-0.510], [0.085,-0.467], [0.064,-0.399], [0.038,-0.272], [0.064,-0.399], [0.085,-0.467], [0.111,-0.510], [0.140,-0.561], [0.179,-0.591], [0.213,-0.595], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637],  ],\n  '6' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.179,-0.595], [0.213,-0.591], [0.251,-0.561], [0.281,-0.510], [0.306,-0.425], [0.319,-0.340], [0.315,-0.212], [0.293,-0.085], [0.255,0.043], [0.221,0.111], [0.179,0.128], [0.136,0.111], [0.221,0.111], [0.179,0.128], [0.136,0.111], [0.102,0.043], [0.064,-0.085], [0.043,-0.212], [0.056,-0.098], [0.070,0.017], [0.083,0.132], [0.097,0.246], [0.111,0.361], [0.124,0.476], [0.138,0.591], [0.151,0.706], [0.165,0.820], [0.179,0.935], [0.165,0.820], [0.151,0.706], [0.138,0.591], [0.124,0.476], [0.111,0.361], [0.097,0.246], [0.083,0.132], [0.070,0.017], [0.056,-0.098], [0.043,-0.212], [0.038,-0.340], [0.051,-0.425], [0.076,-0.510], [0.106,-0.561], [0.145,-0.591], [0.179,-0.595], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637],  ],\n  '7' : [ [0.043,-0.637], [0.085,-0.637], [0.111,-0.480], [0.136,-0.323], [0.162,-0.166], [0.187,-0.009], [0.213,0.149], [0.238,0.306], [0.264,0.463], [0.289,0.621], [0.315,0.778], [0.340,0.935], [0.303,0.935], [0.266,0.935], [0.228,0.935], [0.191,0.935], [0.154,0.935], [0.117,0.935], [0.080,0.935], [0.021,0.935], [0.080,0.935], [0.117,0.935], [0.154,0.935], [0.191,0.935], [0.228,0.935], [0.266,0.935], [0.303,0.935], [0.340,0.935], [0.315,0.778], [0.289,0.621], [0.264,0.463], [0.238,0.306], [0.213,0.149], [0.187,-0.009], [0.162,-0.166], [0.136,-0.323], [0.111,-0.480], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637],  ],\n  '8' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.170,-0.595], [0.204,-0.591], [0.242,-0.561], [0.272,-0.510], [0.298,-0.425], [0.310,-0.340], [0.306,-0.212], [0.285,-0.085], [0.247,0.043], [0.213,0.170], [0.170,0.170], [0.128,0.170], [0.089,0.298], [0.055,0.425], [0.034,0.552], [0.030,0.680], [0.043,0.765], [0.068,0.850], [0.098,0.901], [0.136,0.931], [0.170,0.935], [0.204,0.931], [0.242,0.901], [0.272,0.850], [0.298,0.765], [0.310,0.680], [0.306,0.552], [0.285,0.425], [0.251,0.298], [0.213,0.170], [0.170,0.170], [0.128,0.170], [0.093,0.043], [0.055,-0.085], [0.034,-0.212], [0.030,-0.340], [0.043,-0.425], [0.068,-0.510], [0.098,-0.561], [0.136,-0.591], [0.170,-0.595], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637],  ],\n  '9' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.323,-0.637], [0.323,-0.467], [0.323,-0.297], [0.323,-0.127], [0.323,0.043], [0.323,0.213], [0.323,0.383], [0.323,0.552], [0.298,0.425], [0.264,0.298], [0.183,0.213], [0.102,0.298], [0.068,0.425], [0.047,0.552], [0.043,0.680], [0.055,0.765], [0.081,0.850], [0.111,0.901], [0.149,0.931], [0.183,0.935], [0.217,0.931], [0.255,0.901], [0.285,0.850], [0.310,0.765], [0.323,0.680], [0.323,0.552], [0.323,0.383], [0.323,0.213], [0.323,0.043], [0.323,-0.127], [0.323,-0.297], [0.323,-0.467], [0.323,-0.637], [0.340,-0.637], [0.383,-0.637],  ],\n  'A' : [ [0.043,-0.637], [0.064,-0.480], [0.085,-0.323], [0.106,-0.166], [0.128,-0.009], [0.149,0.149], [0.170,0.306], [0.191,0.463], [0.213,0.621], [0.234,0.778], [0.255,0.935], [0.276,0.778], [0.298,0.621], [0.319,0.463], [0.340,0.306], [0.361,0.149], [0.383,-0.009], [0.340,-0.009], [0.298,-0.009], [0.255,-0.009], [0.213,-0.009], [0.170,-0.009], [0.128,-0.009], [0.170,-0.009], [0.213,-0.009], [0.255,-0.009], [0.298,-0.009], [0.340,-0.009], [0.383,-0.009], [0.404,-0.166], [0.425,-0.323], [0.446,-0.480], [0.468,-0.637],  ],\n  'B' : [ [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.043,0.213], [0.043,0.298], [0.043,0.383], [0.043,0.468], [0.043,0.552], [0.043,0.638], [0.043,0.723], [0.043,0.808], [0.043,0.893], [0.043,0.935], [0.076,0.935], [0.111,0.935], [0.145,0.935], [0.179,0.935], [0.213,0.935], [0.230,0.926], [0.255,0.901], [0.281,0.850], [0.298,0.816], [0.315,0.765], [0.332,0.680], [0.349,0.595], [0.349,0.552], [0.332,0.468], [0.315,0.383], [0.298,0.332], [0.281,0.298], [0.255,0.246], [0.230,0.221], [0.213,0.213], [0.179,0.213], [0.145,0.213], [0.111,0.213], [0.076,0.213], [0.043,0.213], [0.076,0.213], [0.111,0.213], [0.145,0.213], [0.179,0.213], [0.213,0.213], [0.230,0.204], [0.255,0.179], [0.281,0.128], [0.298,0.094], [0.315,0.043], [0.332,-0.042], [0.349,-0.127], [0.357,-0.212], [0.349,-0.297], [0.332,-0.382], [0.315,-0.467], [0.298,-0.518], [0.281,-0.552], [0.255,-0.603], [0.230,-0.629], [0.213,-0.637], [0.179,-0.637], [0.145,-0.637], [0.111,-0.637], [0.076,-0.637], [0.043,-0.637], [0.076,-0.637], [0.111,-0.637], [0.145,-0.637], [0.179,-0.637], [0.213,-0.637], [0.281,-0.637], [0.323,-0.637], [0.383,-0.637],  ],\n  'C' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.255,-0.595], [0.221,-0.591], [0.183,-0.561], [0.153,-0.510], [0.128,-0.425], [0.106,-0.340], [0.085,-0.246], [0.068,-0.127], [0.051,0.017], [0.043,0.170], [0.051,0.323], [0.068,0.468], [0.085,0.587], [0.106,0.680], [0.128,0.765], [0.153,0.850], [0.183,0.901], [0.221,0.931], [0.255,0.935], [0.289,0.931], [0.327,0.901], [0.357,0.850], [0.383,0.765], [0.404,0.680], [0.383,0.765], [0.357,0.850], [0.327,0.901], [0.289,0.931], [0.255,0.935], [0.221,0.931], [0.183,0.901], [0.153,0.850], [0.128,0.765], [0.106,0.680], [0.085,0.587], [0.068,0.468], [0.051,0.323], [0.043,0.170], [0.051,0.017], [0.068,-0.127], [0.085,-0.246], [0.106,-0.340], [0.128,-0.425], [0.153,-0.510], [0.183,-0.561], [0.221,-0.591], [0.255,-0.595], [0.289,-0.591], [0.327,-0.561], [0.357,-0.510], [0.383,-0.425], [0.404,-0.340], [0.383,-0.425], [0.357,-0.510], [0.327,-0.561], [0.289,-0.591], [0.255,-0.595], [0.255,-0.637], [0.213,-0.637], [0.187,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637],  ],\n  'D' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.204,-0.591], [0.242,-0.561], [0.272,-0.510], [0.298,-0.425], [0.319,-0.340], [0.340,-0.246], [0.357,-0.127], [0.374,0.017], [0.383,0.170], [0.374,0.323], [0.357,0.468], [0.340,0.587], [0.319,0.680], [0.298,0.765], [0.272,0.850], [0.242,0.901], [0.204,0.931], [0.170,0.935], [0.136,0.935], [0.098,0.935], [0.068,0.935], [0.043,0.893], [0.043,0.808], [0.043,0.723], [0.043,0.638], [0.043,0.552], [0.043,0.468], [0.043,0.383], [0.043,0.298], [0.043,0.213], [0.043,0.128], [0.043,0.043], [0.043,-0.042], [0.043,-0.127], [0.043,-0.212], [0.043,-0.297], [0.043,-0.382], [0.043,-0.467], [0.043,-0.552], [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637],  ],\n  'E' : [ [0.043,-0.637], [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.043,0.213], [0.076,0.213], [0.043,0.213], [0.076,0.213], [0.111,0.213], [0.145,0.213], [0.179,0.213], [0.213,0.213], [0.247,0.213], [0.281,0.213], [0.315,0.213], [0.281,0.213], [0.247,0.213], [0.213,0.213], [0.179,0.213], [0.145,0.213], [0.111,0.213], [0.043,0.213], [0.043,0.298], [0.043,0.383], [0.043,0.468], [0.043,0.552], [0.043,0.638], [0.043,0.723], [0.043,0.808], [0.043,0.893], [0.043,0.935], [0.076,0.935], [0.111,0.935], [0.145,0.935], [0.179,0.935], [0.213,0.935], [0.247,0.935], [0.281,0.935], [0.315,0.935], [0.315,0.850], [0.315,0.680], [0.315,0.850], [0.281,0.935], [0.247,0.935], [0.213,0.935], [0.179,0.935], [0.145,0.935], [0.111,0.935], [0.076,0.935], [0.043,0.935], [0.043,0.893], [0.043,0.808], [0.043,0.723], [0.043,0.638], [0.043,0.552], [0.043,0.468], [0.043,0.383], [0.043,0.298], [0.043,0.213], [0.043,0.128], [0.043,0.043], [0.043,-0.042], [0.043,-0.127], [0.043,-0.212], [0.043,-0.297], [0.043,-0.382], [0.043,-0.467], [0.043,-0.552], [0.043,-0.637], [0.076,-0.637], [0.111,-0.637], [0.145,-0.637], [0.179,-0.637], [0.213,-0.637], [0.247,-0.637], [0.281,-0.637], [0.315,-0.552], [0.315,-0.382], [0.315,-0.552], [0.315,-0.637], [0.357,-0.637],  ],\n  'F' : [ [0.043,-0.637], [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.043,0.213], [0.076,0.213], [0.043,0.213], [0.076,0.213], [0.111,0.213], [0.145,0.213], [0.179,0.213], [0.213,0.213], [0.247,0.213], [0.213,0.213], [0.179,0.213], [0.145,0.213], [0.111,0.213], [0.043,0.213], [0.043,0.935], [0.076,0.935], [0.111,0.935], [0.145,0.935], [0.179,0.935], [0.213,0.935], [0.247,0.935], [0.281,0.935], [0.315,0.935], [0.281,0.935], [0.247,0.935], [0.213,0.935], [0.179,0.935], [0.145,0.935], [0.111,0.935], [0.076,0.935], [0.043,0.935], [0.043,0.893], [0.043,0.808], [0.043,0.723], [0.043,0.638], [0.043,0.552], [0.043,0.468], [0.043,0.383], [0.043,0.298], [0.043,0.213], [0.043,0.128], [0.043,0.043], [0.043,-0.042], [0.043,-0.127], [0.043,-0.212], [0.043,-0.297], [0.043,-0.382], [0.043,-0.467], [0.043,-0.552], [0.043,-0.637], [0.076,-0.637], [0.111,-0.637], [0.145,-0.637], [0.179,-0.637], [0.213,-0.637], [0.247,-0.637], [0.281,-0.637], [0.315,-0.637],  ],\n  'G' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.213,-0.595], [0.247,-0.591], [0.285,-0.561], [0.315,-0.510], [0.340,-0.425], [0.361,-0.340], [0.383,-0.246], [0.400,-0.127], [0.417,0.017], [0.425,0.170], [0.383,0.170], [0.340,0.170], [0.298,0.170], [0.255,0.170], [0.213,0.170], [0.255,0.170], [0.298,0.170], [0.340,0.170], [0.383,0.170], [0.425,0.170], [0.417,0.017], [0.400,-0.127], [0.383,-0.246], [0.361,-0.340], [0.340,-0.425], [0.315,-0.510], [0.285,-0.561], [0.247,-0.591], [0.213,-0.595], [0.179,-0.591], [0.140,-0.561], [0.111,-0.510], [0.085,-0.425], [0.064,-0.340], [0.043,-0.246], [0.026,-0.127], [0.009,0.017], [0.000,0.170], [0.009,0.323], [0.026,0.468], [0.043,0.587], [0.064,0.680], [0.085,0.765], [0.111,0.850], [0.140,0.901], [0.179,0.931], [0.213,0.935], [0.247,0.931], [0.285,0.901], [0.315,0.850], [0.340,0.765], [0.315,0.850], [0.285,0.901], [0.247,0.931], [0.213,0.935], [0.179,0.931], [0.140,0.901], [0.111,0.850], [0.085,0.765], [0.064,0.680], [0.043,0.587], [0.026,0.468], [0.009,0.323], [0.000,0.170], [0.009,0.017], [0.026,-0.127], [0.043,-0.246], [0.064,-0.340], [0.085,-0.425], [0.111,-0.510], [0.140,-0.561], [0.179,-0.591], [0.213,-0.595], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637],  ],\n  'H' : [ [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.043,0.213], [0.076,0.213], [0.043,0.213], [0.076,0.213], [0.111,0.213], [0.145,0.213], [0.179,0.213], [0.213,0.213], [0.247,0.213], [0.281,0.213], [0.315,0.213], [0.349,0.213], [0.383,0.213], [0.383,0.298], [0.383,0.383], [0.383,0.468], [0.383,0.552], [0.383,0.638], [0.383,0.723], [0.383,0.808], [0.383,0.893], [0.383,0.935], [0.383,0.893], [0.383,0.808], [0.383,0.723], [0.383,0.638], [0.383,0.552], [0.383,0.468], [0.383,0.383], [0.383,0.298], [0.383,0.213], [0.349,0.213], [0.315,0.213], [0.281,0.213], [0.247,0.213], [0.213,0.213], [0.179,0.213], [0.145,0.213], [0.111,0.213], [0.076,0.213], [0.043,0.213], [0.076,0.213], [0.043,0.213], [0.043,0.298], [0.043,0.383], [0.043,0.468], [0.043,0.552], [0.043,0.638], [0.043,0.723], [0.043,0.808], [0.043,0.893], [0.043,0.935], [0.043,0.893], [0.043,0.808], [0.043,0.723], [0.043,0.638], [0.043,0.552], [0.043,0.468], [0.043,0.383], [0.043,0.298], [0.043,0.213], [0.043,0.128], [0.043,0.213], [0.076,0.213], [0.043,0.213], [0.076,0.213], [0.111,0.213], [0.145,0.213], [0.179,0.213], [0.213,0.213], [0.247,0.213], [0.281,0.213], [0.315,0.213], [0.349,0.213], [0.383,0.213], [0.383,0.128], [0.383,0.043], [0.383,-0.042], [0.383,-0.127], [0.383,-0.212], [0.383,-0.297], [0.383,-0.382], [0.383,-0.467], [0.383,-0.552], [0.383,-0.637], [0.425,-0.637],  ],\n  'I' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.170,-0.552], [0.170,-0.467], [0.170,-0.382], [0.170,-0.297], [0.170,-0.212], [0.170,-0.127], [0.170,-0.042], [0.170,0.043], [0.170,0.128], [0.170,0.213], [0.170,0.298], [0.170,0.383], [0.170,0.468], [0.170,0.552], [0.170,0.638], [0.170,0.723], [0.170,0.808], [0.170,0.893], [0.170,0.935], [0.128,0.935], [0.085,0.935], [0.043,0.935], [0.085,0.935], [0.128,0.935], [0.170,0.935], [0.213,0.935], [0.255,0.935], [0.298,0.935], [0.255,0.935], [0.213,0.935], [0.170,0.893], [0.170,0.808], [0.170,0.723], [0.170,0.638], [0.170,0.552], [0.170,0.468], [0.170,0.383], [0.170,0.298], [0.170,0.213], [0.170,0.128], [0.170,0.043], [0.170,-0.042], [0.170,-0.127], [0.170,-0.212], [0.170,-0.297], [0.170,-0.382], [0.170,-0.467], [0.170,-0.552], [0.170,-0.637], [0.128,-0.552], [0.085,-0.552], [0.043,-0.552], [0.085,-0.552], [0.128,-0.552], [0.170,-0.552], [0.213,-0.552], [0.255,-0.552], [0.298,-0.552], [0.255,-0.552], [0.213,-0.552], [0.170,-0.552], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637],  ],\n  'J' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.196,-0.637], [0.213,-0.629], [0.238,-0.603], [0.264,-0.552], [0.281,-0.518], [0.298,-0.467], [0.315,-0.382], [0.332,-0.297], [0.340,-0.212], [0.340,-0.127], [0.340,-0.042], [0.340,0.043], [0.340,0.128], [0.340,0.213], [0.340,0.298], [0.340,0.383], [0.340,0.468], [0.340,0.552], [0.340,0.638], [0.340,0.723], [0.340,0.808], [0.340,0.893], [0.340,0.935], [0.340,0.893], [0.340,0.808], [0.340,0.723], [0.340,0.638], [0.340,0.552], [0.340,0.468], [0.340,0.383], [0.340,0.298], [0.340,0.213], [0.340,0.128], [0.340,0.043], [0.340,-0.042], [0.340,-0.127], [0.340,-0.212], [0.332,-0.297], [0.315,-0.382], [0.298,-0.467], [0.281,-0.518], [0.264,-0.552], [0.238,-0.603], [0.213,-0.629], [0.196,-0.637], [0.170,-0.637], [0.145,-0.637], [0.128,-0.629], [0.102,-0.603], [0.076,-0.552], [0.060,-0.518], [0.043,-0.467], [0.026,-0.382], [0.009,-0.297], [0.000,-0.212], [0.009,-0.297], [0.026,-0.382], [0.043,-0.467], [0.060,-0.518], [0.076,-0.552], [0.102,-0.603], [0.128,-0.629], [0.145,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637],  ],\n  'K' : [ [0.043,-0.637], [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.043,0.213], [0.043,0.298], [0.043,0.383], [0.043,0.468], [0.043,0.552], [0.043,0.638], [0.043,0.723], [0.043,0.808], [0.043,0.893], [0.043,0.935], [0.043,0.893], [0.043,0.808], [0.043,0.723], [0.043,0.638], [0.043,0.552], [0.043,0.468], [0.043,0.383], [0.043,0.298], [0.043,0.213], [0.112,0.285], [0.139,0.357], [0.167,0.429], [0.194,0.502], [0.221,0.574], [0.248,0.646], [0.275,0.718], [0.303,0.791], [0.330,0.863], [0.357,0.935], [0.330,0.863], [0.303,0.791], [0.275,0.718], [0.248,0.646], [0.221,0.574], [0.194,0.502], [0.167,0.429], [0.139,0.357], [0.112,0.285], [0.085,0.213], [0.112,0.128], [0.139,0.043], [0.167,-0.042], [0.194,-0.127], [0.221,-0.212], [0.248,-0.297], [0.275,-0.382], [0.303,-0.467], [0.330,-0.552], [0.357,-0.637], [0.400,-0.637],  ],\n  'L' : [ [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.043,0.213], [0.043,0.298], [0.043,0.383], [0.043,0.468], [0.043,0.552], [0.043,0.638], [0.043,0.723], [0.043,0.808], [0.043,0.893], [0.043,0.935], [0.043,0.893], [0.043,0.808], [0.043,0.723], [0.043,0.638], [0.043,0.552], [0.043,0.468], [0.043,0.383], [0.043,0.298], [0.043,0.213], [0.043,0.128], [0.043,0.043], [0.043,-0.042], [0.043,-0.127], [0.043,-0.212], [0.043,-0.297], [0.043,-0.382], [0.043,-0.467], [0.043,-0.552], [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.383,-0.425], [0.383,-0.297], [0.383,-0.425], [0.383,-0.552], [0.383,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637],  ],\n  'M' : [ [0.043,-0.637], [0.043,-0.637], [0.060,-0.480], [0.076,-0.323], [0.093,-0.166], [0.111,-0.009], [0.128,0.149], [0.145,0.306], [0.162,0.463], [0.179,0.621], [0.196,0.778], [0.213,0.935], [0.230,0.778], [0.247,0.621], [0.264,0.463], [0.281,0.306], [0.298,0.149], [0.315,-0.009], [0.332,-0.166], [0.349,-0.323], [0.365,-0.480], [0.383,-0.637], [0.400,-0.480], [0.417,-0.323], [0.433,-0.166], [0.451,-0.009], [0.468,0.149], [0.485,0.306], [0.501,0.463], [0.518,0.621], [0.535,0.778], [0.552,0.935], [0.570,0.778], [0.587,0.621], [0.603,0.463], [0.620,0.306], [0.637,0.149], [0.654,-0.009], [0.671,-0.166], [0.689,-0.323], [0.706,-0.480], [0.723,-0.637], [0.765,-0.637],  ],\n  'N' : [ [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.043,0.213], [0.043,0.298], [0.043,0.383], [0.043,0.468], [0.043,0.552], [0.043,0.638], [0.043,0.723], [0.043,0.808], [0.043,0.893], [0.043,0.935], [0.085,0.778], [0.128,0.621], [0.170,0.463], [0.213,0.306], [0.255,0.149], [0.298,-0.009], [0.340,-0.166], [0.383,-0.323], [0.425,-0.480], [0.468,-0.637], [0.468,-0.552], [0.468,-0.467], [0.468,-0.382], [0.468,-0.297], [0.468,-0.212], [0.468,-0.127], [0.468,-0.042], [0.468,0.043], [0.468,0.128], [0.468,0.213], [0.468,0.298], [0.468,0.383], [0.468,0.468], [0.468,0.552], [0.468,0.638], [0.468,0.723], [0.468,0.808], [0.468,0.893], [0.468,0.935], [0.468,0.893], [0.468,0.808], [0.468,0.723], [0.468,0.638], [0.468,0.552], [0.468,0.468], [0.468,0.383], [0.468,0.298], [0.468,0.213], [0.468,0.128], [0.468,0.043], [0.468,-0.042], [0.468,-0.127], [0.468,-0.212], [0.468,-0.297], [0.468,-0.382], [0.468,-0.467], [0.468,-0.552], [0.468,-0.637], [0.510,-0.637],  ],\n  'O' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.255,-0.595], [0.289,-0.591], [0.327,-0.561], [0.357,-0.510], [0.383,-0.425], [0.404,-0.340], [0.425,-0.246], [0.442,-0.127], [0.459,0.017], [0.468,0.170], [0.459,0.323], [0.442,0.468], [0.425,0.587], [0.404,0.680], [0.383,0.765], [0.357,0.850], [0.327,0.901], [0.289,0.931], [0.255,0.935], [0.221,0.931], [0.183,0.901], [0.153,0.850], [0.128,0.765], [0.106,0.680], [0.085,0.587], [0.068,0.468], [0.051,0.323], [0.043,0.170], [0.051,0.017], [0.068,-0.127], [0.085,-0.246], [0.106,-0.340], [0.128,-0.425], [0.153,-0.510], [0.183,-0.561], [0.221,-0.591], [0.255,-0.595], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637],  ],\n  'P' : [ [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.043,0.213], [0.076,0.213], [0.111,0.213], [0.145,0.213], [0.179,0.213], [0.213,0.213], [0.230,0.221], [0.255,0.246], [0.281,0.298], [0.298,0.332], [0.315,0.383], [0.332,0.468], [0.349,0.552], [0.349,0.595], [0.332,0.680], [0.315,0.765], [0.298,0.816], [0.281,0.850], [0.255,0.901], [0.230,0.926], [0.213,0.935], [0.179,0.935], [0.145,0.935], [0.111,0.935], [0.076,0.935], [0.043,0.935], [0.043,0.893], [0.043,0.808], [0.043,0.723], [0.043,0.638], [0.043,0.552], [0.043,0.468], [0.043,0.383], [0.043,0.298], [0.043,0.213], [0.043,0.128], [0.043,0.043], [0.043,-0.042], [0.043,-0.127], [0.043,-0.212], [0.043,-0.297], [0.043,-0.382], [0.043,-0.467], [0.043,-0.552], [0.043,-0.637], [0.076,-0.637], [0.111,-0.637], [0.145,-0.637], [0.179,-0.637], [0.213,-0.637], [0.247,-0.637], [0.281,-0.637], [0.315,-0.637], [0.349,-0.637], [0.383,-0.637],  ],\n  'Q' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.255,-0.595], [0.289,-0.591], [0.327,-0.561], [0.357,-0.510], [0.383,-0.425], [0.404,-0.340], [0.425,-0.246], [0.442,-0.127], [0.459,0.017], [0.468,0.170], [0.459,0.323], [0.442,0.468], [0.425,0.587], [0.404,0.680], [0.383,0.765], [0.357,0.850], [0.327,0.901], [0.289,0.931], [0.255,0.935], [0.221,0.931], [0.183,0.901], [0.153,0.850], [0.128,0.765], [0.106,0.680], [0.085,0.587], [0.068,0.468], [0.051,0.323], [0.043,0.170], [0.051,0.017], [0.068,-0.127], [0.085,-0.246], [0.106,-0.340], [0.128,-0.425], [0.153,-0.510], [0.183,-0.561], [0.221,-0.591], [0.255,-0.595], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.400,-0.705], [0.417,-0.773], [0.433,-0.841], [0.383,-0.637], [0.383,-0.637], [0.433,-0.841], [0.417,-0.773], [0.400,-0.705], [0.383,-0.637], [0.365,-0.569], [0.349,-0.501], [0.332,-0.433], [0.315,-0.365], [0.298,-0.297], [0.315,-0.365], [0.332,-0.433], [0.349,-0.501], [0.365,-0.569], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637],  ],\n  'R' : [ [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.043,0.213], [0.043,0.298], [0.043,0.383], [0.043,0.468], [0.043,0.552], [0.043,0.638], [0.043,0.723], [0.043,0.808], [0.043,0.893], [0.043,0.935], [0.076,0.935], [0.111,0.935], [0.145,0.935], [0.179,0.935], [0.213,0.935], [0.230,0.926], [0.255,0.901], [0.281,0.850], [0.298,0.816], [0.315,0.765], [0.332,0.680], [0.349,0.595], [0.349,0.552], [0.332,0.468], [0.315,0.383], [0.298,0.332], [0.281,0.298], [0.255,0.246], [0.230,0.221], [0.213,0.213], [0.179,0.213], [0.145,0.213], [0.111,0.213], [0.076,0.213], [0.043,0.213], [0.076,0.213], [0.111,0.213], [0.145,0.213], [0.179,0.213], [0.196,0.128], [0.213,0.043], [0.230,-0.042], [0.247,-0.127], [0.264,-0.212], [0.281,-0.297], [0.298,-0.382], [0.315,-0.467], [0.332,-0.552], [0.349,-0.637], [0.383,-0.637],  ],\n  'S' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.213,-0.595], [0.247,-0.591], [0.285,-0.561], [0.315,-0.510], [0.340,-0.425], [0.353,-0.340], [0.349,-0.212], [0.327,-0.085], [0.281,0.043], [0.213,0.170], [0.145,0.298], [0.098,0.425], [0.076,0.552], [0.072,0.680], [0.085,0.765], [0.111,0.850], [0.140,0.901], [0.179,0.931], [0.213,0.935], [0.247,0.931], [0.285,0.901], [0.315,0.850], [0.340,0.765], [0.361,0.680], [0.340,0.765], [0.315,0.850], [0.285,0.901], [0.247,0.931], [0.213,0.935], [0.179,0.931], [0.140,0.901], [0.111,0.850], [0.085,0.765], [0.072,0.680], [0.076,0.552], [0.098,0.425], [0.145,0.298], [0.213,0.170], [0.281,0.043], [0.327,-0.085], [0.349,-0.212], [0.353,-0.340], [0.340,-0.425], [0.315,-0.510], [0.285,-0.561], [0.247,-0.591], [0.213,-0.595], [0.179,-0.591], [0.140,-0.561], [0.111,-0.510], [0.085,-0.425], [0.064,-0.340], [0.043,-0.246], [0.064,-0.340], [0.085,-0.425], [0.111,-0.510], [0.140,-0.561], [0.179,-0.591], [0.213,-0.595], [0.213,-0.637], [0.213,-0.595], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637],  ],\n  'T' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.298,-0.552], [0.298,-0.467], [0.298,-0.382], [0.298,-0.297], [0.298,-0.212], [0.298,-0.127], [0.298,-0.042], [0.298,0.043], [0.298,0.128], [0.298,0.213], [0.298,0.298], [0.298,0.383], [0.298,0.468], [0.298,0.552], [0.298,0.638], [0.298,0.723], [0.298,0.808], [0.298,0.893], [0.298,0.935], [0.255,0.935], [0.213,0.935], [0.170,0.935], [0.128,0.935], [0.085,0.935], [0.043,0.935], [0.085,0.935], [0.128,0.935], [0.170,0.935], [0.213,0.935], [0.255,0.935], [0.298,0.935], [0.340,0.935], [0.383,0.935], [0.425,0.935], [0.468,0.935], [0.510,0.935], [0.552,0.935], [0.510,0.935], [0.468,0.935], [0.425,0.935], [0.383,0.935], [0.340,0.935], [0.298,0.893], [0.298,0.808], [0.298,0.723], [0.298,0.638], [0.298,0.552], [0.298,0.468], [0.298,0.383], [0.298,0.298], [0.298,0.213], [0.298,0.128], [0.298,0.043], [0.298,-0.042], [0.298,-0.127], [0.298,-0.212], [0.298,-0.297], [0.298,-0.382], [0.298,-0.467], [0.298,-0.552], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637], [0.552,-0.637],  ],\n  'U' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.255,-0.595], [0.289,-0.591], [0.327,-0.561], [0.357,-0.510], [0.383,-0.425], [0.404,-0.340], [0.425,-0.246], [0.442,-0.127], [0.459,0.017], [0.468,0.170], [0.468,0.255], [0.468,0.340], [0.468,0.425], [0.468,0.510], [0.468,0.595], [0.468,0.680], [0.468,0.765], [0.468,0.850], [0.468,0.935], [0.468,0.850], [0.468,0.765], [0.468,0.680], [0.468,0.595], [0.468,0.510], [0.468,0.425], [0.468,0.340], [0.468,0.255], [0.468,0.170], [0.459,0.017], [0.442,-0.127], [0.425,-0.246], [0.404,-0.340], [0.383,-0.425], [0.357,-0.510], [0.327,-0.561], [0.289,-0.591], [0.255,-0.595], [0.221,-0.591], [0.183,-0.561], [0.153,-0.510], [0.128,-0.425], [0.106,-0.340], [0.085,-0.246], [0.068,-0.127], [0.051,0.017], [0.043,0.170], [0.043,0.255], [0.043,0.340], [0.043,0.425], [0.043,0.510], [0.043,0.595], [0.043,0.680], [0.043,0.765], [0.043,0.850], [0.043,0.935], [0.043,0.850], [0.043,0.765], [0.043,0.680], [0.043,0.595], [0.043,0.510], [0.043,0.425], [0.043,0.340], [0.043,0.255], [0.043,0.170], [0.051,0.017], [0.068,-0.127], [0.085,-0.246], [0.106,-0.340], [0.128,-0.425], [0.153,-0.510], [0.183,-0.561], [0.221,-0.591], [0.255,-0.595], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637],  ],\n  'V' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.323,-0.480], [0.349,-0.323], [0.374,-0.166], [0.400,-0.009], [0.425,0.149], [0.451,0.306], [0.476,0.463], [0.501,0.621], [0.527,0.778], [0.552,0.935], [0.527,0.778], [0.501,0.621], [0.476,0.463], [0.451,0.306], [0.425,0.149], [0.400,-0.009], [0.374,-0.166], [0.349,-0.323], [0.323,-0.480], [0.298,-0.637], [0.272,-0.480], [0.247,-0.323], [0.221,-0.166], [0.196,-0.009], [0.170,0.149], [0.145,0.306], [0.119,0.463], [0.093,0.621], [0.068,0.778], [0.043,0.935], [0.068,0.778], [0.093,0.621], [0.119,0.463], [0.145,0.306], [0.170,0.149], [0.196,-0.009], [0.221,-0.166], [0.247,-0.323], [0.272,-0.480], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637], [0.552,-0.637], [0.595,-0.637],  ],\n  'W' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.213,-0.637], [0.196,-0.480], [0.179,-0.323], [0.162,-0.166], [0.145,-0.009], [0.128,0.149], [0.111,0.306], [0.093,0.463], [0.076,0.621], [0.060,0.778], [0.043,0.935], [0.060,0.778], [0.076,0.621], [0.093,0.463], [0.111,0.306], [0.128,0.149], [0.145,-0.009], [0.162,-0.166], [0.179,-0.323], [0.196,-0.480], [0.213,-0.637], [0.230,-0.480], [0.247,-0.323], [0.264,-0.166], [0.281,-0.009], [0.298,0.149], [0.315,0.306], [0.332,0.463], [0.349,0.621], [0.365,0.778], [0.383,0.935], [0.400,0.778], [0.417,0.621], [0.433,0.463], [0.451,0.306], [0.468,0.149], [0.485,-0.009], [0.501,-0.166], [0.518,-0.323], [0.535,-0.480], [0.552,-0.637], [0.570,-0.480], [0.587,-0.323], [0.603,-0.166], [0.620,-0.009], [0.637,0.149], [0.654,0.306], [0.671,0.463], [0.689,0.621], [0.706,0.778], [0.723,0.935], [0.706,0.778], [0.689,0.621], [0.671,0.463], [0.654,0.306], [0.637,0.149], [0.620,-0.009], [0.603,-0.166], [0.587,-0.323], [0.570,-0.480], [0.552,-0.637], [0.595,-0.637], [0.637,-0.637], [0.680,-0.637], [0.723,-0.637], [0.765,-0.637],  ],\n  'X' : [ [0.043,-0.637], [0.093,-0.480], [0.145,-0.323], [0.196,-0.166], [0.247,-0.009], [0.298,0.149], [0.349,0.306], [0.400,0.463], [0.451,0.621], [0.501,0.778], [0.552,0.935], [0.501,0.778], [0.451,0.621], [0.400,0.463], [0.349,0.306], [0.298,0.149], [0.247,0.306], [0.196,0.463], [0.145,0.621], [0.093,0.778], [0.043,0.935], [0.093,0.778], [0.145,0.621], [0.196,0.463], [0.247,0.306], [0.298,0.149], [0.349,-0.009], [0.400,-0.166], [0.451,-0.323], [0.501,-0.480], [0.552,-0.637], [0.595,-0.637],  ],\n  'Y' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.298,-0.552], [0.298,-0.467], [0.298,-0.382], [0.298,-0.297], [0.298,-0.212], [0.298,-0.127], [0.298,-0.042], [0.298,0.043], [0.298,0.128], [0.298,0.149], [0.349,0.306], [0.400,0.463], [0.451,0.621], [0.501,0.778], [0.552,0.935], [0.501,0.778], [0.451,0.621], [0.400,0.463], [0.349,0.306], [0.298,0.149], [0.247,0.306], [0.196,0.463], [0.145,0.621], [0.093,0.778], [0.043,0.935], [0.093,0.778], [0.145,0.621], [0.196,0.463], [0.247,0.306], [0.298,0.149], [0.298,0.128], [0.298,0.043], [0.298,-0.042], [0.298,-0.127], [0.298,-0.212], [0.298,-0.297], [0.298,-0.382], [0.298,-0.467], [0.298,-0.552], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637], [0.552,-0.637], [0.595,-0.637],  ],\n  'Z' : [ [0.043,-0.637], [0.093,-0.480], [0.145,-0.323], [0.196,-0.166], [0.247,-0.009], [0.298,0.149], [0.349,0.306], [0.400,0.463], [0.451,0.621], [0.501,0.778], [0.552,0.935], [0.468,0.935], [0.383,0.935], [0.298,0.935], [0.213,0.935], [0.128,0.935], [0.043,0.935], [0.128,0.935], [0.213,0.935], [0.298,0.935], [0.383,0.935], [0.468,0.935], [0.552,0.935], [0.501,0.778], [0.451,0.621], [0.400,0.463], [0.349,0.306], [0.298,0.149], [0.247,-0.009], [0.196,-0.166], [0.145,-0.323], [0.093,-0.480], [0.043,-0.620], [0.128,-0.620], [0.213,-0.620], [0.298,-0.620], [0.383,-0.620], [0.468,-0.620], [0.552,-0.620], [0.552,-0.637], [0.595,-0.637],  ],\n  'a' : [ [0.034,-0.637], [0.076,-0.637], [0.119,-0.637], [0.187,-0.637], [0.221,-0.637], [0.255,-0.637], [0.289,-0.637], [0.323,-0.637], [0.323,-0.552], [0.323,-0.467], [0.323,-0.382], [0.323,-0.297], [0.323,-0.212], [0.323,-0.127], [0.323,-0.042], [0.323,0.043], [0.323,0.128], [0.323,0.213], [0.289,0.213], [0.255,0.213], [0.221,0.213], [0.187,0.213], [0.170,0.204], [0.145,0.179], [0.119,0.128], [0.102,0.094], [0.085,0.043], [0.068,-0.042], [0.051,-0.127], [0.043,-0.212], [0.051,-0.297], [0.068,-0.382], [0.085,-0.467], [0.102,-0.518], [0.119,-0.552], [0.145,-0.603], [0.170,-0.629], [0.187,-0.637], [0.221,-0.637], [0.255,-0.637], [0.289,-0.637], [0.365,-0.637],  ],\n  'b' : [ [0.043,-0.637], [0.076,-0.637], [0.111,-0.637], [0.145,-0.637], [0.179,-0.637], [0.213,-0.637], [0.230,-0.629], [0.255,-0.603], [0.281,-0.552], [0.298,-0.518], [0.315,-0.467], [0.332,-0.382], [0.349,-0.297], [0.357,-0.212], [0.349,-0.127], [0.332,-0.042], [0.315,0.043], [0.298,0.094], [0.281,0.128], [0.255,0.179], [0.230,0.204], [0.213,0.213], [0.179,0.213], [0.145,0.213], [0.111,0.213], [0.076,0.213], [0.043,0.213], [0.043,0.298], [0.043,0.383], [0.043,0.468], [0.043,0.552], [0.043,0.638], [0.043,0.723], [0.043,0.808], [0.043,0.893], [0.043,0.935], [0.043,0.893], [0.043,0.808], [0.043,0.723], [0.043,0.638], [0.043,0.552], [0.043,0.468], [0.043,0.383], [0.043,0.298], [0.043,0.213], [0.043,0.128], [0.043,0.043], [0.043,-0.042], [0.043,-0.127], [0.043,-0.212], [0.043,-0.297], [0.043,-0.382], [0.043,-0.467], [0.043,-0.552], [0.043,-0.637], [0.009,-0.637], [0.043,-0.637], [0.076,-0.637], [0.111,-0.637], [0.145,-0.637], [0.179,-0.637], [0.213,-0.637], [0.281,-0.637], [0.323,-0.637], [0.383,-0.637],  ],\n  'c' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.187,-0.637], [0.170,-0.629], [0.145,-0.603], [0.119,-0.552], [0.102,-0.518], [0.085,-0.467], [0.068,-0.382], [0.051,-0.297], [0.043,-0.212], [0.051,-0.127], [0.068,-0.042], [0.085,0.043], [0.102,0.094], [0.119,0.128], [0.145,0.179], [0.170,0.204], [0.187,0.213], [0.221,0.213], [0.255,0.213], [0.289,0.213], [0.323,0.213], [0.289,0.213], [0.255,0.213], [0.221,0.213], [0.187,0.213], [0.170,0.204], [0.145,0.179], [0.119,0.128], [0.102,0.094], [0.085,0.043], [0.068,-0.042], [0.051,-0.127], [0.043,-0.212], [0.051,-0.297], [0.068,-0.382], [0.085,-0.467], [0.102,-0.518], [0.119,-0.552], [0.145,-0.603], [0.170,-0.629], [0.187,-0.637], [0.221,-0.637], [0.255,-0.637], [0.289,-0.637], [0.323,-0.637],  ],\n  'd' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.187,-0.637], [0.221,-0.637], [0.255,-0.637], [0.289,-0.637], [0.323,-0.637], [0.357,-0.637], [0.357,-0.552], [0.357,-0.467], [0.357,-0.382], [0.357,-0.297], [0.357,-0.212], [0.357,-0.127], [0.357,-0.042], [0.357,0.043], [0.357,0.128], [0.357,0.213], [0.357,0.298], [0.357,0.383], [0.357,0.468], [0.357,0.552], [0.357,0.638], [0.357,0.723], [0.357,0.808], [0.357,0.893], [0.357,0.935], [0.357,0.893], [0.357,0.808], [0.357,0.723], [0.357,0.638], [0.357,0.552], [0.357,0.468], [0.357,0.383], [0.357,0.298], [0.357,0.213], [0.323,0.213], [0.289,0.213], [0.255,0.213], [0.221,0.213], [0.187,0.213], [0.170,0.204], [0.145,0.179], [0.119,0.128], [0.102,0.094], [0.085,0.043], [0.068,-0.042], [0.051,-0.127], [0.043,-0.212], [0.051,-0.297], [0.068,-0.382], [0.085,-0.467], [0.102,-0.518], [0.119,-0.552], [0.145,-0.603], [0.170,-0.629], [0.187,-0.637], [0.221,-0.637], [0.255,-0.637], [0.289,-0.637], [0.323,-0.637], [0.357,-0.637], [0.400,-0.637],  ],\n  'e' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.187,-0.637], [0.170,-0.629], [0.145,-0.603], [0.119,-0.552], [0.102,-0.518], [0.085,-0.467], [0.064,-0.382], [0.051,-0.297], [0.047,-0.212], [0.089,-0.212], [0.128,-0.212], [0.166,-0.212], [0.204,-0.212], [0.238,-0.212], [0.259,-0.212], [0.298,-0.212], [0.336,-0.212], [0.374,-0.212], [0.361,-0.127], [0.353,-0.042], [0.332,0.043], [0.315,0.094], [0.298,0.128], [0.272,0.179], [0.247,0.204], [0.221,0.213], [0.187,0.213], [0.170,0.204], [0.145,0.179], [0.119,0.128], [0.102,0.094], [0.085,0.043], [0.064,-0.042], [0.051,-0.127], [0.051,-0.297], [0.064,-0.382], [0.085,-0.467], [0.102,-0.518], [0.119,-0.552], [0.145,-0.603], [0.170,-0.629], [0.221,-0.637], [0.255,-0.637], [0.289,-0.637], [0.323,-0.637], [0.357,-0.637], [0.408,-0.637],  ],\n  'f' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.213,-0.552], [0.213,-0.467], [0.213,-0.382], [0.213,-0.297], [0.213,-0.212], [0.213,-0.127], [0.213,-0.042], [0.213,0.043], [0.213,0.128], [0.213,0.213], [0.255,0.213], [0.298,0.213], [0.340,0.213], [0.404,0.213], [0.340,0.213], [0.298,0.213], [0.255,0.213], [0.213,0.213], [0.170,0.213], [0.128,0.213], [0.085,0.213], [0.021,0.213], [0.085,0.213], [0.128,0.213], [0.170,0.213], [0.213,0.213], [0.213,0.298], [0.213,0.383], [0.213,0.468], [0.221,0.595], [0.234,0.680], [0.255,0.765], [0.272,0.816], [0.289,0.850], [0.315,0.901], [0.340,0.926], [0.357,0.935], [0.391,0.935], [0.425,0.935], [0.391,0.935], [0.357,0.935], [0.340,0.926], [0.315,0.901], [0.289,0.850], [0.272,0.816], [0.255,0.765], [0.234,0.680], [0.221,0.595], [0.213,0.468], [0.213,0.383], [0.213,0.298], [0.213,0.213], [0.213,0.128], [0.213,0.043], [0.213,-0.042], [0.213,-0.127], [0.213,-0.212], [0.213,-0.297], [0.213,-0.382], [0.213,-0.467], [0.213,-0.552], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637],  ],\n  'g' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.221,-0.637], [0.255,-0.637], [0.289,-0.637], [0.323,-0.637], [0.323,-0.722], [0.323,-0.807], [0.323,-0.892], [0.323,-0.977], [0.315,-1.105], [0.302,-1.190], [0.281,-1.275], [0.264,-1.326], [0.247,-1.360], [0.221,-1.411], [0.196,-1.436], [0.179,-1.445], [0.145,-1.445], [0.111,-1.445], [0.076,-1.445], [0.111,-1.445], [0.145,-1.445], [0.179,-1.445], [0.196,-1.436], [0.221,-1.411], [0.247,-1.360], [0.264,-1.326], [0.281,-1.275], [0.302,-1.190], [0.315,-1.105], [0.323,-0.977], [0.323,-0.892], [0.323,-0.807], [0.323,-0.722], [0.323,-0.637], [0.323,-0.552], [0.323,-0.467], [0.323,-0.382], [0.323,-0.297], [0.323,-0.212], [0.323,-0.127], [0.323,-0.042], [0.323,0.043], [0.323,0.128], [0.323,0.213], [0.289,0.213], [0.255,0.213], [0.221,0.213], [0.187,0.213], [0.170,0.204], [0.145,0.179], [0.119,0.128], [0.102,0.094], [0.085,0.043], [0.068,-0.042], [0.051,-0.127], [0.043,-0.212], [0.051,-0.297], [0.068,-0.382], [0.085,-0.467], [0.102,-0.518], [0.119,-0.552], [0.145,-0.603], [0.170,-0.629], [0.187,-0.637], [0.221,-0.637], [0.255,-0.637], [0.289,-0.637], [0.357,-0.637],  ],\n  'h' : [ [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.043,0.213], [0.043,0.298], [0.043,0.383], [0.043,0.468], [0.043,0.552], [0.043,0.638], [0.043,0.723], [0.043,0.808], [0.043,0.893], [0.043,0.893], [0.043,0.935], [0.043,0.808], [0.043,0.723], [0.043,0.638], [0.043,0.552], [0.043,0.468], [0.043,0.383], [0.043,0.298], [0.043,0.213], [0.043,0.043], [0.051,0.085], [0.076,0.119], [0.119,0.170], [0.162,0.213], [0.213,0.213], [0.255,0.170], [0.298,0.119], [0.323,0.085], [0.332,0.043], [0.332,-0.042], [0.332,-0.127], [0.332,-0.212], [0.332,-0.297], [0.332,-0.382], [0.332,-0.467], [0.332,-0.552], [0.332,-0.637], [0.374,-0.637],  ],\n  'i' : [ [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.043,0.213], [0.043,0.128], [0.043,0.043], [0.043,-0.042], [0.043,-0.127], [0.043,-0.212], [0.043,-0.297], [0.043,-0.382], [0.043,-0.467], [0.043,-0.552], [0.043,-0.637], [0.085,-0.637],  ],\n  'j' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.247,-0.637], [0.247,-0.552], [0.247,-0.467], [0.247,-0.382], [0.247,-0.297], [0.247,-0.212], [0.247,-0.127], [0.247,-0.042], [0.247,0.043], [0.247,0.128], [0.247,0.213], [0.247,0.128], [0.247,0.043], [0.247,-0.042], [0.247,-0.127], [0.247,-0.212], [0.247,-0.297], [0.247,-0.382], [0.247,-0.467], [0.247,-0.552], [0.247,-0.637], [0.247,-0.722], [0.247,-0.807], [0.247,-0.892], [0.247,-0.977], [0.238,-1.105], [0.225,-1.190], [0.204,-1.275], [0.187,-1.326], [0.170,-1.360], [0.145,-1.411], [0.119,-1.436], [0.102,-1.445], [0.068,-1.445], [0.034,-1.445], [0.000,-1.445], [0.034,-1.445], [0.068,-1.445], [0.102,-1.445], [0.119,-1.436], [0.145,-1.411], [0.170,-1.360], [0.187,-1.326], [0.204,-1.275], [0.225,-1.190], [0.238,-1.105], [0.247,-0.977], [0.247,-0.892], [0.247,-0.807], [0.247,-0.722], [0.247,-0.637], [0.221,-0.637], [0.247,-0.637], [0.289,-0.637],  ],\n  'k' : [ [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.043,0.213], [0.043,0.298], [0.043,0.383], [0.043,0.468], [0.043,0.552], [0.043,0.638], [0.043,0.723], [0.043,0.808], [0.043,0.893], [0.043,0.893], [0.043,0.935], [0.043,0.808], [0.043,0.723], [0.043,0.638], [0.043,0.552], [0.043,0.468], [0.043,0.383], [0.043,0.298], [0.043,0.213], [0.043,0.128], [0.043,0.043], [0.043,-0.042], [0.043,-0.127], [0.043,-0.212], [0.092,-0.146], [0.142,-0.079], [0.191,-0.013], [0.241,0.054], [0.290,0.120], [0.340,0.187], [0.290,0.120], [0.241,0.054], [0.191,-0.013], [0.142,-0.079], [0.092,-0.146], [0.043,-0.212], [0.092,-0.283], [0.142,-0.354], [0.191,-0.425], [0.241,-0.496], [0.290,-0.567], [0.340,-0.637], [0.383,-0.637],  ],\n  'l' : [ [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.043,0.213], [0.043,0.298], [0.043,0.383], [0.043,0.468], [0.043,0.552], [0.043,0.638], [0.043,0.723], [0.043,0.808], [0.043,0.893], [0.043,0.893], [0.043,0.935], [0.043,0.808], [0.043,0.723], [0.043,0.638], [0.043,0.552], [0.043,0.468], [0.043,0.383], [0.043,0.298], [0.043,0.213], [0.043,0.128], [0.043,0.043], [0.043,-0.042], [0.043,-0.127], [0.043,-0.212], [0.043,-0.297], [0.043,-0.382], [0.043,-0.467], [0.043,-0.552], [0.043,-0.637], [0.085,-0.637],  ],\n  'm' : [ [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.076,0.153], [0.128,0.179], [0.162,0.196], [0.196,0.196], [0.230,0.179], [0.281,0.153], [0.306,0.128], [0.315,0.043], [0.315,-0.042], [0.315,-0.127], [0.315,-0.212], [0.315,-0.297], [0.315,-0.382], [0.315,-0.467], [0.315,-0.552], [0.315,-0.659], [0.315,-0.552], [0.315,-0.467], [0.315,-0.382], [0.315,-0.297], [0.315,-0.212], [0.315,-0.127], [0.315,-0.042], [0.315,0.043], [0.323,0.128], [0.349,0.153], [0.400,0.179], [0.433,0.196], [0.468,0.196], [0.501,0.179], [0.552,0.153], [0.578,0.128], [0.587,0.043], [0.587,-0.042], [0.587,-0.127], [0.587,-0.212], [0.587,-0.297], [0.587,-0.382], [0.587,-0.467], [0.587,-0.552], [0.587,-0.637], [0.629,-0.637],  ],\n  'n' : [ [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.076,0.153], [0.128,0.179], [0.162,0.196], [0.196,0.196], [0.230,0.179], [0.281,0.153], [0.306,0.128], [0.315,0.043], [0.315,-0.042], [0.315,-0.127], [0.315,-0.212], [0.315,-0.297], [0.315,-0.382], [0.315,-0.467], [0.315,-0.552], [0.315,-0.637], [0.357,-0.637],  ],\n  'o' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.323,-0.637], [0.340,-0.629], [0.365,-0.603], [0.391,-0.552], [0.408,-0.518], [0.425,-0.467], [0.442,-0.382], [0.459,-0.297], [0.468,-0.212], [0.459,-0.127], [0.442,-0.042], [0.425,0.043], [0.408,0.094], [0.391,0.128], [0.365,0.179], [0.340,0.204], [0.323,0.213], [0.289,0.213], [0.255,0.213], [0.221,0.213], [0.187,0.213], [0.170,0.204], [0.145,0.179], [0.119,0.128], [0.102,0.094], [0.085,0.043], [0.068,-0.042], [0.051,-0.127], [0.043,-0.212], [0.051,-0.297], [0.068,-0.382], [0.085,-0.467], [0.102,-0.518], [0.119,-0.552], [0.145,-0.603], [0.170,-0.629], [0.187,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637],  ],\n  'p' : [ [0.043,-0.637], [0.043,-0.722], [0.043,-0.807], [0.043,-0.892], [0.043,-0.977], [0.043,-1.062], [0.043,-1.147], [0.043,-1.232], [0.043,-1.317], [0.043,-1.402], [0.043,-1.062], [0.043,-1.402], [0.043,-1.317], [0.043,-1.232], [0.043,-1.147], [0.043,-1.062], [0.043,-0.977], [0.043,-0.892], [0.043,-0.807], [0.043,-0.722], [0.076,-0.637], [0.111,-0.637], [0.145,-0.637], [0.179,-0.637], [0.196,-0.629], [0.221,-0.603], [0.247,-0.552], [0.264,-0.518], [0.281,-0.467], [0.298,-0.382], [0.315,-0.297], [0.323,-0.212], [0.315,-0.127], [0.298,-0.042], [0.281,0.043], [0.264,0.094], [0.247,0.128], [0.221,0.179], [0.196,0.204], [0.179,0.213], [0.145,0.213], [0.111,0.213], [0.076,0.213], [0.043,0.213], [0.043,0.128], [0.043,0.043], [0.043,-0.042], [0.043,-0.127], [0.043,-0.212], [0.043,-0.297], [0.043,-0.382], [0.043,-0.467], [0.043,-0.552], [0.043,-0.637], [0.076,-0.637], [0.111,-0.637], [0.145,-0.637], [0.179,-0.637], [0.247,-0.637], [0.289,-0.637], [0.332,-0.637], [0.365,-0.637],  ],\n  'q' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.187,-0.637], [0.221,-0.637], [0.255,-0.637], [0.289,-0.637], [0.323,-0.637], [0.323,-0.722], [0.323,-0.807], [0.323,-0.892], [0.323,-0.977], [0.332,-1.105], [0.344,-1.190], [0.365,-1.275], [0.383,-1.326], [0.400,-1.360], [0.425,-1.411], [0.451,-1.436], [0.468,-1.445], [0.501,-1.445], [0.535,-1.445], [0.570,-1.445], [0.535,-1.445], [0.501,-1.445], [0.468,-1.445], [0.451,-1.436], [0.425,-1.411], [0.400,-1.360], [0.383,-1.326], [0.365,-1.275], [0.344,-1.190], [0.332,-1.105], [0.323,-0.977], [0.323,-0.892], [0.323,-0.807], [0.323,-0.722], [0.323,-0.637], [0.323,-0.552], [0.323,-0.467], [0.323,-0.382], [0.323,-0.297], [0.323,-0.212], [0.323,-0.127], [0.323,-0.042], [0.323,0.043], [0.323,0.128], [0.323,0.213], [0.289,0.213], [0.255,0.213], [0.221,0.213], [0.187,0.213], [0.170,0.204], [0.145,0.179], [0.119,0.128], [0.102,0.094], [0.085,0.043], [0.068,-0.042], [0.051,-0.127], [0.043,-0.212], [0.051,-0.297], [0.068,-0.382], [0.085,-0.467], [0.102,-0.518], [0.119,-0.552], [0.145,-0.603], [0.170,-0.629], [0.187,-0.637], [0.221,-0.637], [0.255,-0.637], [0.289,-0.637], [0.357,-0.637], [0.408,-0.637], [0.459,-0.637], [0.510,-0.637], [0.552,-0.637], [0.612,-0.637],  ],\n  'r' : [ [0.043,-0.637], [0.043,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.043,0.213], [0.043,0.128], [0.043,0.298], [0.043,0.340], [0.043,0.298], [0.043,0.128], [0.076,0.153], [0.128,0.179], [0.162,0.204], [0.196,0.213], [0.230,0.204], [0.264,0.179], [0.298,0.128], [0.264,0.179], [0.230,0.204], [0.196,0.213], [0.162,0.204], [0.128,0.179], [0.076,0.153], [0.043,0.128], [0.043,0.043], [0.043,-0.042], [0.043,-0.127], [0.043,-0.212], [0.043,-0.297], [0.043,-0.382], [0.043,-0.467], [0.043,-0.552], [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637],  ],\n  's' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.281,-0.637], [0.298,-0.629], [0.323,-0.603], [0.349,-0.552], [0.365,-0.518], [0.383,-0.467], [0.378,-0.416], [0.365,-0.382], [0.332,-0.340], [0.298,-0.297], [0.255,-0.255], [0.213,-0.212], [0.170,-0.170], [0.128,-0.127], [0.093,-0.085], [0.060,-0.042], [0.051,0.034], [0.060,0.094], [0.076,0.128], [0.102,0.179], [0.128,0.204], [0.145,0.213], [0.179,0.213], [0.213,0.213], [0.247,0.213], [0.281,0.213], [0.298,0.204], [0.323,0.179], [0.349,0.128], [0.365,0.094], [0.349,0.128], [0.323,0.179], [0.298,0.204], [0.281,0.213], [0.247,0.213], [0.213,0.213], [0.179,0.213], [0.145,0.213], [0.128,0.204], [0.102,0.179], [0.076,0.128], [0.060,0.094], [0.051,0.034], [0.060,-0.042], [0.093,-0.085], [0.128,-0.127], [0.170,-0.170], [0.213,-0.212], [0.255,-0.255], [0.298,-0.297], [0.332,-0.340], [0.365,-0.382], [0.378,-0.416], [0.383,-0.467], [0.365,-0.518], [0.349,-0.552], [0.323,-0.603], [0.298,-0.629], [0.281,-0.637], [0.255,-0.637], [0.213,-0.637], [0.170,-0.637], [0.145,-0.637], [0.128,-0.629], [0.102,-0.603], [0.076,-0.552], [0.060,-0.518], [0.030,-0.467], [0.060,-0.518], [0.076,-0.552], [0.102,-0.603], [0.128,-0.629], [0.145,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637],  ],\n  't' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.187,-0.637], [0.187,-0.552], [0.187,-0.467], [0.187,-0.382], [0.187,-0.297], [0.187,-0.212], [0.187,-0.127], [0.187,-0.042], [0.187,0.043], [0.187,0.128], [0.187,0.213], [0.187,0.298], [0.187,0.383], [0.187,0.468], [0.187,0.510], [0.187,0.595], [0.153,0.595], [0.119,0.595], [0.085,0.595], [0.021,0.595], [0.085,0.595], [0.119,0.595], [0.153,0.595], [0.187,0.595], [0.221,0.595], [0.255,0.595], [0.289,0.595], [0.353,0.595], [0.289,0.595], [0.255,0.595], [0.221,0.595], [0.187,0.595], [0.187,0.680], [0.187,0.765], [0.187,0.850], [0.187,0.935], [0.187,0.850], [0.187,0.765], [0.187,0.680], [0.187,0.595], [0.187,0.510], [0.187,0.468], [0.187,0.383], [0.187,0.298], [0.187,0.213], [0.187,0.128], [0.187,0.043], [0.187,-0.042], [0.187,-0.127], [0.187,-0.212], [0.187,-0.297], [0.187,-0.382], [0.187,-0.467], [0.187,-0.552], [0.187,-0.637], [0.230,-0.637], [0.272,-0.637], [0.332,-0.637], [0.383,-0.637],  ],\n  'u' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.162,-0.620], [0.128,-0.603], [0.076,-0.578], [0.051,-0.552], [0.043,-0.467], [0.043,-0.382], [0.043,-0.297], [0.043,-0.212], [0.043,-0.127], [0.043,-0.042], [0.043,0.043], [0.043,0.128], [0.043,0.213], [0.043,0.128], [0.043,0.043], [0.043,-0.042], [0.043,-0.127], [0.043,-0.212], [0.043,-0.297], [0.043,-0.382], [0.043,-0.467], [0.051,-0.552], [0.076,-0.578], [0.128,-0.603], [0.162,-0.620], [0.196,-0.637], [0.230,-0.620], [0.264,-0.603], [0.315,-0.578], [0.340,-0.552], [0.349,-0.552], [0.349,-0.467], [0.349,-0.382], [0.349,-0.297], [0.349,-0.212], [0.349,-0.127], [0.349,-0.042], [0.349,0.043], [0.349,0.128], [0.349,0.213], [0.349,0.128], [0.349,0.043], [0.349,-0.042], [0.349,-0.127], [0.349,-0.212], [0.349,-0.297], [0.349,-0.382], [0.349,-0.467], [0.349,-0.552], [0.349,-0.637], [0.391,-0.637],  ],\n  'v' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.234,-0.637], [0.215,-0.552], [0.196,-0.467], [0.176,-0.382], [0.157,-0.297], [0.138,-0.212], [0.119,-0.127], [0.100,-0.042], [0.081,0.043], [0.062,0.128], [0.043,0.213], [0.062,0.128], [0.081,0.043], [0.100,-0.042], [0.119,-0.127], [0.138,-0.212], [0.157,-0.297], [0.176,-0.382], [0.196,-0.467], [0.215,-0.552], [0.234,-0.637], [0.253,-0.552], [0.272,-0.467], [0.291,-0.382], [0.310,-0.297], [0.329,-0.212], [0.349,-0.127], [0.368,-0.042], [0.387,0.043], [0.406,0.128], [0.425,0.213], [0.406,0.128], [0.387,0.043], [0.368,-0.042], [0.349,-0.127], [0.329,-0.212], [0.310,-0.297], [0.291,-0.382], [0.272,-0.467], [0.253,-0.552], [0.234,-0.637], [0.276,-0.637], [0.332,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637],  ],\n  'w' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.157,-0.552], [0.145,-0.467], [0.132,-0.382], [0.119,-0.297], [0.106,-0.212], [0.093,-0.127], [0.081,-0.042], [0.068,0.043], [0.055,0.128], [0.043,0.213], [0.055,0.128], [0.068,0.043], [0.081,-0.042], [0.093,-0.127], [0.106,-0.212], [0.119,-0.297], [0.132,-0.382], [0.145,-0.467], [0.157,-0.552], [0.170,-0.637], [0.183,-0.552], [0.196,-0.467], [0.208,-0.382], [0.221,-0.297], [0.234,-0.212], [0.247,-0.127], [0.259,-0.042], [0.272,0.043], [0.285,0.128], [0.298,0.213], [0.310,0.128], [0.323,0.043], [0.336,-0.042], [0.349,-0.127], [0.361,-0.212], [0.374,-0.297], [0.387,-0.382], [0.400,-0.467], [0.412,-0.552], [0.425,-0.637], [0.438,-0.552], [0.451,-0.467], [0.463,-0.382], [0.476,-0.297], [0.489,-0.212], [0.501,-0.127], [0.514,-0.042], [0.527,0.043], [0.540,0.128], [0.552,0.213], [0.540,0.128], [0.527,0.043], [0.514,-0.042], [0.501,-0.127], [0.489,-0.212], [0.476,-0.297], [0.463,-0.382], [0.451,-0.467], [0.438,-0.552], [0.425,-0.637], [0.468,-0.637], [0.510,-0.637], [0.552,-0.637], [0.595,-0.637],  ],\n  'x' : [ [0.038,-0.552], [0.076,-0.467], [0.115,-0.382], [0.153,-0.297], [0.191,-0.212], [0.230,-0.127], [0.268,-0.042], [0.306,0.043], [0.344,0.128], [0.383,0.213], [0.344,0.128], [0.306,0.043], [0.268,-0.042], [0.230,-0.127], [0.191,-0.212], [0.153,-0.127], [0.115,-0.042], [0.076,0.043], [0.038,0.128], [0.000,0.213], [0.038,0.128], [0.076,0.043], [0.115,-0.042], [0.153,-0.127], [0.191,-0.212], [0.230,-0.297], [0.268,-0.382], [0.306,-0.467], [0.344,-0.552], [0.383,-0.637],  ],\n  'y' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.234,-0.637], [0.215,-0.552], [0.196,-0.467], [0.176,-0.382], [0.157,-0.297], [0.138,-0.212], [0.119,-0.127], [0.100,-0.042], [0.081,0.043], [0.062,0.128], [0.043,0.213], [0.062,0.128], [0.081,0.043], [0.100,-0.042], [0.119,-0.127], [0.138,-0.212], [0.157,-0.297], [0.176,-0.382], [0.196,-0.467], [0.215,-0.552], [0.234,-0.637], [0.253,-0.552], [0.272,-0.467], [0.291,-0.382], [0.310,-0.297], [0.329,-0.212], [0.349,-0.127], [0.368,-0.042], [0.387,0.043], [0.406,0.128], [0.425,0.213], [0.406,0.128], [0.387,0.043], [0.368,-0.042], [0.349,-0.127], [0.329,-0.212], [0.310,-0.297], [0.291,-0.382], [0.272,-0.467], [0.253,-0.552], [0.234,-0.637], [0.215,-0.722], [0.196,-0.807], [0.176,-0.892], [0.157,-0.977], [0.138,-1.062], [0.119,-1.147], [0.100,-1.232], [0.119,-1.147], [0.138,-1.062], [0.157,-0.977], [0.176,-0.892], [0.196,-0.807], [0.215,-0.722], [0.234,-0.637], [0.276,-0.637], [0.319,-0.637], [0.361,-0.637], [0.404,-0.637], [0.468,-0.637],  ],\n  'z' : [ [0.043,-0.637], [0.081,-0.552], [0.119,-0.467], [0.157,-0.382], [0.196,-0.297], [0.234,-0.212], [0.272,-0.127], [0.310,-0.042], [0.349,0.043], [0.387,0.128], [0.425,0.213], [0.383,0.213], [0.340,0.213], [0.298,0.213], [0.255,0.213], [0.213,0.213], [0.170,0.213], [0.128,0.213], [0.085,0.213], [0.043,0.213], [0.085,0.213], [0.128,0.213], [0.170,0.213], [0.213,0.213], [0.255,0.213], [0.298,0.213], [0.340,0.213], [0.383,0.213], [0.425,0.213], [0.387,0.128], [0.349,0.043], [0.310,-0.042], [0.272,-0.127], [0.234,-0.212], [0.196,-0.297], [0.157,-0.382], [0.119,-0.467], [0.081,-0.552], [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637], [0.383,-0.637], [0.425,-0.637], [0.468,-0.637],  ],\n  'a*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'b*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'c*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'd*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'e*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'f*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'g*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'h*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'i*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'j*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'k*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'l*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'm*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'n*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'o*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'p*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'q*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'r*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  's*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  't*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'u*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'v*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'w*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'x*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'y*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  'z*' : [ [0.043,-0.637], [0.085,-0.637],  ],\n  ',' : [ [0.043,-0.637], [0.085,-0.637], [0.093,-0.552], [0.111,-0.467], [0.145,-0.552], [0.153,-0.637], [0.162,-0.722], [0.162,-0.807], [0.145,-0.892], [0.128,-0.977], [0.093,-1.062], [0.043,-1.147], [0.093,-1.062], [0.128,-0.977], [0.145,-0.892], [0.162,-0.807], [0.162,-0.722], [0.153,-0.637], [0.145,-0.552], [0.111,-0.467], [0.145,-0.552], [0.153,-0.637], [0.213,-0.637],  ],\n  '?' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.170,-0.637], [0.213,-0.637], [0.213,-0.552], [0.213,-0.467], [0.213,-0.382], [0.213,-0.297], [0.213,-0.212], [0.213,-0.127], [0.213,-0.042], [0.213,0.043], [0.213,0.068], [0.226,0.111], [0.238,0.153], [0.255,0.221], [0.272,0.298], [0.289,0.357], [0.306,0.425], [0.315,0.468], [0.323,0.510], [0.327,0.552], [0.330,0.621], [0.332,0.680], [0.327,0.723], [0.319,0.765], [0.310,0.808], [0.293,0.850], [0.281,0.884], [0.264,0.901], [0.242,0.922], [0.225,0.931], [0.208,0.935], [0.191,0.935], [0.170,0.932], [0.157,0.931], [0.136,0.918], [0.119,0.901], [0.102,0.880], [0.089,0.850], [0.075,0.808], [0.064,0.765], [0.051,0.723], [0.043,0.680], [0.051,0.723], [0.064,0.765], [0.075,0.808], [0.089,0.850], [0.102,0.880], [0.119,0.901], [0.136,0.918], [0.157,0.931], [0.170,0.932], [0.191,0.935], [0.208,0.935], [0.225,0.931], [0.242,0.922], [0.264,0.901], [0.281,0.884], [0.293,0.850], [0.310,0.808], [0.319,0.765], [0.327,0.723], [0.332,0.680], [0.330,0.621], [0.327,0.552], [0.323,0.510], [0.315,0.468], [0.306,0.425], [0.289,0.357], [0.272,0.298], [0.255,0.221], [0.238,0.153], [0.226,0.111], [0.213,0.068], [0.213,0.043], [0.213,0.000], [0.213,-0.042], [0.213,-0.085], [0.213,-0.127], [0.213,-0.170], [0.213,-0.212], [0.213,-0.255], [0.213,-0.297], [0.213,-0.340], [0.213,-0.382], [0.213,-0.425], [0.213,-0.467], [0.213,-0.510], [0.213,-0.552], [0.213,-0.595], [0.213,-0.637], [0.170,-0.637], [0.213,-0.637], [0.306,-0.637], [0.281,-0.510], [0.213,-0.425], [0.145,-0.510], [0.119,-0.637], [0.145,-0.765], [0.213,-0.850], [0.281,-0.765], [0.306,-0.637], [0.213,-0.637], [0.255,-0.637], [0.298,-0.637], [0.340,-0.637],  ],\n  '&' : [ [0.043,-0.637], [0.087,-0.629], [0.128,-0.625], [0.166,-0.625], [0.230,-0.612], [0.281,-0.599], [0.323,-0.535], [0.365,-0.425], [0.400,-0.357], [0.425,-0.291], [0.468,-0.170], [0.518,-0.042], [0.468,-0.170], [0.425,-0.291], [0.400,-0.357], [0.365,-0.425], [0.323,-0.535], [0.281,-0.599], [0.230,-0.612], [0.166,-0.625], [0.128,-0.625], [0.087,-0.629], [0.064,-0.569], [0.051,-0.527], [0.043,-0.450], [0.038,-0.348], [0.043,-0.178], [0.068,-0.042], [0.119,0.085], [0.162,0.153], [0.187,0.196], [0.247,0.238], [0.293,0.303], [0.315,0.383], [0.336,0.484], [0.353,0.578], [0.358,0.669], [0.359,0.763], [0.350,0.839], [0.333,0.898], [0.310,0.926], [0.268,0.935], [0.234,0.935], [0.200,0.926], [0.165,0.909], [0.147,0.883], [0.135,0.830], [0.129,0.754], [0.126,0.697], [0.127,0.612], [0.131,0.552], [0.144,0.455], [0.166,0.323], [0.204,0.213], [0.238,0.043], [0.272,-0.127], [0.298,-0.297], [0.323,-0.467], [0.349,-0.637], [0.383,-0.680], [0.425,-0.680], [0.463,-0.654], [0.510,-0.637], [0.560,-0.637],  ],\n  '$' : [ [0.051,-0.637], [0.111,-0.637], [0.153,-0.637], [0.196,-0.637], [0.238,-0.637], [0.238,-0.637], [0.238,-0.977], [0.238,-0.637], [0.238,-0.382], [0.238,-0.127], [0.238,0.128], [0.238,0.383], [0.238,0.638], [0.238,0.977], [0.255,0.977], [0.255,0.638], [0.255,0.383], [0.255,0.128], [0.255,-0.127], [0.255,-0.382], [0.255,-0.637], [0.255,-0.977], [0.255,-0.637], [0.238,-0.637], [0.238,-0.722], [0.298,-0.761], [0.336,-0.731], [0.365,-0.680], [0.391,-0.595], [0.404,-0.510], [0.400,-0.382], [0.378,-0.255], [0.332,-0.127], [0.238,0.000], [0.145,0.128], [0.098,0.255], [0.076,0.383], [0.072,0.510], [0.085,0.595], [0.111,0.680], [0.140,0.731], [0.179,0.761], [0.238,0.765], [0.298,0.761], [0.336,0.731], [0.365,0.680], [0.391,0.595], [0.412,0.510], [0.391,0.595], [0.365,0.680], [0.336,0.731], [0.298,0.761], [0.238,0.765], [0.179,0.761], [0.140,0.731], [0.111,0.680], [0.085,0.595], [0.072,0.510], [0.076,0.383], [0.098,0.255], [0.145,0.128], [0.238,0.000], [0.332,-0.127], [0.378,-0.255], [0.400,-0.382], [0.404,-0.510], [0.391,-0.595], [0.365,-0.680], [0.336,-0.731], [0.298,-0.761], [0.238,-0.765], [0.179,-0.761], [0.140,-0.731], [0.111,-0.680], [0.085,-0.595], [0.064,-0.510], [0.043,-0.416], [0.064,-0.510], [0.085,-0.595], [0.111,-0.680], [0.140,-0.731], [0.179,-0.761], [0.238,-0.765], [0.238,-0.637], [0.281,-0.637], [0.323,-0.637], [0.365,-0.637], [0.408,-0.637], [0.451,-0.637],  ],\n  '!' : [ [0.043,-0.637], [0.085,-0.637], [0.128,-0.637], [0.128,-0.382], [0.128,-0.127], [0.128,0.128], [0.128,0.383], [0.128,0.638], [0.128,0.935], [0.128,0.638], [0.128,0.383], [0.128,0.128], [0.128,-0.127], [0.128,-0.382], [0.128,-0.637], [0.221,-0.637], [0.196,-0.510], [0.128,-0.425], [0.060,-0.510], [0.034,-0.637], [0.060,-0.765], [0.128,-0.850], [0.196,-0.765], [0.221,-0.637], [0.128,-0.637], [0.213,-0.637], [0.255,-0.637],  ],\n}\n","import { Vertex } from '../../common/Geometry'\nimport { raysol_cursive } from './raysol_cursive'\nimport { raysol_sanserif } from './raysol_sanserif'\n\nconst fontSpacing = 1.5\n\n// Format for vertices: [x,y,b] where in a 0:7(8) by -1:7 grid defining x,y and b defines the line or curve.\n// Bulge directions could be represented by a 0:4 list starting at none, then NE and going clockwise.\n// 4  1\n// 3  2\nlet billsey = {\n  ' ': [ [8,-1,0] ],\n  'A': [ [0,0,0], [3.5,7,0], [7,0,0], [5,3.5,0], [2,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'B': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [0,3.5,0], [3.5,3.5,0], [7,1.75,1], [3.5,0,2], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'C': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,3.5,4], [3.5,0,3], [7,1.75,2], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'D': [ [0,0,0], [0,7,0], [3.5,7,0], [7,3.5,1], [3.5,0,2], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'E': [ [0,0,0], [0,7,0], [7,7,0], [0,7,0], [0,3.5,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [7,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'F': [ [0,0,0], [0,7,0], [7,7,0], [0,7,0], [0,3.5,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'G': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,3.5,4], [3.5,0,3], [7,1.75,2], [5.25,1.75,0], [7,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'H': [ [0,0,0], [0,7,0], [0,3.5,0], [7,3.5,0], [7,7,0], [7,0,0], [7,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'I': [ [3.5,-1,0], [3.5,7,0], [0,7,0], [7,7,0], [3.5,7,0], [3.5,0,0], [0,0,0], [7,0,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'J': [ [3.5,-1,0], [3.5,0,0], [0,1.75,3], [3.5,0,3], [7,1.75,2], [7,7,0], [7,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'K': [ [0,0,0], [0,7,0], [0,1.75,0], [3.5,3.5,0], [7,7,0], [3.5,3.5,0], [7,0,0], [3.5,3.5,0], [0,1.75,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'L': [ [0,0,0], [0,7,0], [0,0,0], [7,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'M': [ [0,0,0], [0,7,0], [3.5,0,0], [7,7,0], [7,0,0], [7,7,0], [3.5,0,0], [0,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'N': [ [0,0,0], [0,7,0], [7,0,0], [7,7,0], [7,0,0], [0,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'O': [ [3.5,-1,0], [3.5, 0, 0], [0, 3.5, 3], [3.5, 7, 4], [7.0, 3.5, 1], [3.5, 0, 2], [3.5, -1, 0], [8, -1, 0] ],\n  'P': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'Q': [ [3.5,-1,0], [3.5, 0, 0], [0, 3.5, 3], [3.5, 7, 4], [7.0, 3.5, 1], [3.5, 0, 2], [4.325,0.5,4], [6.075,0,0], [7,0.5,2], [6.075,0,2], [4.325,0.5,0], [3.5,0,4], [3.5, -1, 0], [8, -1, 0] ],\n  'R': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [7,0,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'S': [ [3.5,-1,0], [3.5,0,0], [0,1.75,3], [3.5,0,3], [7,1.75,2], [3.5,3.5,1], [0,5.25,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,5.25,4], [3.5,3.5,3], [7,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'T': [ [3.5,-1,0], [3.5,7,0], [0,7,0], [7,7,0], [3.5,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'U': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [0,7,0], [0,3.5,0], [3.5,0,3], [7,3.5,2], [7,7,0], [7,3.5,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'V': [ [3.5,-1,0], [3.5,0,0], [0,7,0], [3.5,0,0], [7,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'W': [ [1.75,-1,0], [1.75,0,0], [0,7,0], [1.75,0,0], [3.5,7,0], [5.25,0,0], [7,7,0], [5.25,0,0], [3.5,7,0], [1.75,0,0], [1.75,-1,0], [8,-1,0] ],\n  'X': [ [0,0,0], [7,7,0], [3.5,3.5,0], [0,7,0], [7,0,0], [3.5,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'Y': [ [3.5,-1,0], [3.5,3.5,0], [0,7,0], [3.5,3.5,0], [7,7,0], [3.5,3.5,0], [3.5,-1,0], [8,-1,0] ],\n  'Z': [ [0,0,0], [7,0,0], [0,0,0], [7,7,0], [0,7,0], [7,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  '0': [ [3.5,-1,0], [3.5,0,0], [6,3.5,2], [3.5,7,1], [1,3.5,4], [3.5,0,3], [3.5,-1,0], [8,-1,0] ],\n  '1': [ [0,-1,0], [0,0,0], [0,0,0], [7,0,0], [3.5,0,0], [3.5,7,0], [1.5,6,2], [3.5,7,2], [3.5,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  '2': [ [1,-1,0], [1,0,0], [6,5.25,0], [3.5,7,1], [1,5.25,4], [3.5,7,4], [6,5.25,1], [1,0,0], [6,0,0], [1,0,0], [1,-1,0], [8,-1,0] ],\n  '3': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [3.5,0,3], [6,1.75,2], [3.5,3.5,1], [6,5.25,2], [3.5,7,1], [1,5.25,4], [3.5,7,4], [6,5.25,1], [3.5,3.5,2], [6,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '4': [ [3.5,-1,0], [3.5,0,0], [3.5,7,0], [1,3.5,0], [6,3.5,0], [3.5,3.5,0], [3.5,-1,0], [8,-1,0] ],\n  '5': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [3.5,0,3], [6,1.75,2], [3.5,3.5,1],[1,3.5,0], [1,7,0], [6,7,0], [1,7,0], [1,3.5,0], [3.5,3.5,0], [6,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '6': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [5.25,7,4], [1,1.75,4], [3.5,0,3],[6,1.75,2], [3.5,3.5,1], [1,1.75,4], [3.5,0,3], [3.5,-1,0], [8,-1,0] ],\n  '7': [ [3.5,-1,0], [3.5,0,0], [6,7,0], [1,7,0], [6,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  '8': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [6,5.25,0], [3.5,7,1], [1,5.25,4], [6,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '9': [ [3.5,-1,0], [3.5,0,0], [6,5.25,2], [3.5,7,1], [1,5.25,4], [3.5,3.5,3], [6,5.25,2], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '$': [ [3.5,-1,0], [3.5,0.5,0], [0,2.00,3], [3.5,0.5,3], [7,2.00,2], [3.5,3.5,1], [0,5.00,3], [3.5,6.5,4], [7,5.00,1], [3.5,6.5,1], [3.5, 7, 0], [3.5, 0, 0], [3.5,-1,0], [8,-1,0] ],\n  '.': [ [3.5,-1,0], [3.5,0.5,0], [3,1,3], [3.5,1.5,4], [4,1,1], [3.5,0.5,2], [3.5,-1,0], [8,-1,0] ],\n}\n\n// This is a clever way to create a range from 0..32, and then compute an x,y for each of those\n// points on the unit circle from zero to pi/2.\nconst curve = [...Array(32).keys()].map((index) => {\n  let angle = (index+1) * Math.PI/2.0/32.0\n  return Vertex(Math.cos(angle), Math.sin(angle))\n})\n\nconst billseyConverter = (vertices) => {\n  let newVertices = []\n  let prevPoint = Vertex(0,0)\n  vertices.forEach( (vertex) => {\n    switch (vertex[2]) {\n    case 0:\n    default:\n      newVertices.push(Vertex(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 1: // NE\n      if (vertex[1] < prevPoint[1]) { // clockwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      } else { // ccwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      }\n      newVertices.push(Vertex(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 2: // SE\n      if (vertex[1] < prevPoint[1]) { // clockwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      } else { // ccwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      }\n      newVertices.push(Vertex(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 3: // SW\n      if (vertex[1] > prevPoint[1]) { // clockwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      } else { // ccwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      }\n      newVertices.push(Vertex(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 4: // NW\n      if (vertex[1] > prevPoint[1]) { // clockwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      } else { // ccwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => Vertex(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      }\n      newVertices.push(Vertex(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    }\n    prevPoint = vertex\n  })\n\n  const scale = 0.6;\n  const offset_y = -0.5\n  const scaledVertices = newVertices.map( vertex => {\n    return Vertex(scale * vertex.x, scale * vertex.y + offset_y)\n  })\n  return {\n    maxX: fontSpacing,\n    vertices: scaledVertices,\n  }\n}\n\nconst raysolConverter = (vertices) => {\n  let newVertices = []\n  vertices.forEach( (vertex) => {\n    newVertices.push(Vertex(vertex[0], vertex[1]))\n  })\n\n  return {\n    maxX: fontSpacing,\n    vertices: newVertices,\n  }\n}\n\nexport const MonospaceFont = (ch) => {\n  let upper = ch.toUpperCase()\n  if (billsey.hasOwnProperty(upper)) {\n    return billseyConverter(billsey[upper])\n  } else {\n    return billseyConverter(billsey[' '])\n  }\n}\n\nexport const CursiveFont = (ch) => {\n  if (raysol_cursive.hasOwnProperty(ch)) {\n    return raysolConverter(raysol_cursive[ch])\n  } else {\n    return raysolConverter(raysol_cursive[' '])\n  }\n}\n\nexport const SansSerifFont = (ch) => {\n  if (raysol_cursive.hasOwnProperty(ch)) {\n    return raysolConverter(raysol_sanserif[ch])\n  } else {\n    return raysolConverter(raysol_sanserif[' '])\n  }\n}\n","import { CursiveFont, SansSerifFont, MonospaceFont } from './Fonts'\nimport { Vertex } from '../../common/Geometry'\nimport Shape, { shapeOptions } from '../Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    inputText: {\n      title: 'Text',\n      type: 'textarea',\n    },\n    inputFont: {\n      title: 'Font',\n      type: 'dropdown',\n      choices: ['Cursive', 'Sans Serif', 'Monospace'],\n    },\n  }\n}\n\nexport default class InputText extends Shape {\n  constructor() {\n    super('Text')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'inputText',\n        inputText: 'Sandify',\n        inputFont: 'Cursive',\n        repeatEnabled: false,\n        startingSize: 50\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let prevLetter = ''\n    let x = 0.0\n    for (let chi = 0; chi < state.shape.inputText.length; chi++) {\n      var letter = state.shape.inputText[chi]\n      if (prevLetter === 'b' || prevLetter === 'v' || prevLetter === 'o' || prevLetter === 'w') {\n        prevLetter = letter\n        if (letter.search('/[a-z]/') === -1 && state.shape.inputFont === 'Cursive')\n        {\n          letter = letter + '*'\n        }\n      }\n      else {\n        prevLetter = letter\n      }\n\n      var shape = undefined\n      if (state.shape.inputFont === 'Cursive') {\n        shape = CursiveFont(letter)\n      } else if (state.shape.inputFont === 'Sans Serif') {\n        shape = SansSerifFont(letter)\n      } else if (state.shape.inputFont === 'Monospace') {\n        shape = MonospaceFont(letter)\n      } else {\n        // Internal error, but I'm going to just recover\n        shape = CursiveFont(letter)\n      }\n\n      for (let vi = 0; vi < shape.vertices.length; vi++) {\n        points.push(Vertex(shape.vertices[vi].x + x, shape.vertices[vi].y))\n      }\n      x += shape.vertices[shape.vertices.length-1].x\n    }\n    let widthOffset = x / 2.0\n    return points.map( (point) => {\n      return Vertex(point.x - widthOffset, point.y)\n    })\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { degToRad } from '../common/Geometry'\nimport Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    wiperAngleDeg: {\n      title: 'Wiper angle',\n    },\n    wiperSize: {\n      title: 'Wiper size',\n      min: 1\n    },\n  }\n}\n\nconst outOfBounds = (point, width, height) => {\n  if (point.x < -width/2.0) {\n    return true\n  }\n  if (point.y < -height/2.0) {\n    return true\n  }\n  if (point.x > width/2.0) {\n    return true\n  }\n  if (point.y > height/2.0) {\n    return true\n  }\n  return false\n}\n\n// Intersect the line with the boundary, and return the point exactly on the boundary.\n// This will keep the shape. i.e. It will follow the line segment, and return the point on that line\n// segment.\nfunction boundPoint(good, bad, size_x, size_y) {\n  var dx = good.x - bad.x\n  var dy = good.y - bad.y\n\n  var fixed = Victor(bad.x, bad.y)\n  var distance = 0\n  if (bad.x < -size_x || bad.x > size_x) {\n    if (bad.x < -size_x) {\n      // we are leaving the left\n      fixed.x = -size_x\n    } else {\n      // we are leaving the right\n      fixed.x = size_x\n    }\n    distance = (fixed.x - good.x) / dx\n    fixed.y = good.y + distance * dy\n    // We fixed x, but y might have the same problem, so we'll rerun this, with different points.\n    return boundPoint(good, fixed, size_x, size_y)\n  }\n  if (bad.y < -size_y || bad.y > size_y) {\n    if (bad.y < -size_y) {\n      // we are leaving the bottom\n      fixed.y = -size_y\n    } else {\n      // we are leaving the top\n      fixed.y = size_y\n    }\n    distance = (fixed.y - good.y) / dy\n    fixed.x = good.x + distance * dx\n  }\n  return fixed\n}\n\nfunction nearEnough(end, point) {\n  if (point.clone().subtract(end).length() < 0.01) {\n    return true\n  }\n  return false\n}\n\nexport default class Wiper extends Shape {\n  constructor() {\n    super('Wiper')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'wiper',\n        wiperAngleDeg: 15,\n        wiperSize: 12,\n        startingSize: 1,\n        repeatEnabled: false,\n        selectGroup: 'Erasers',\n        canTransform: false\n      }\n    }\n  }\n\n  getVertices(state) {\n    var outputVertices = []\n\n    // Get the angle between 0,180\n    let angle = (180.0 - (state.shape.wiperAngleDeg % 360)) % 180.0\n    if (angle < 0.0) {\n      angle += 180.0\n    }\n    angle = degToRad(angle)\n\n    // Start with the defaults for 0,45\n    let height = 1\n    let width = 1\n    let machine = state.machine\n    if (machine.rectangular) {\n      height = machine.maxY - machine.minY\n      width = machine.maxX - machine.minX\n    } else {\n      height = machine.maxRadius * 2.0\n      width = height\n    }\n\n    let startLocation = Victor(-width/2.0, height/2.0)\n    let cosa = Math.cos(angle)\n    let sina = Math.sin(angle)\n\n    // These can be zero, but infinity isn't great for out math, so let's just clip it.\n    if (Math.abs(cosa) < 1.0e-10) {\n      cosa = 1.0e-10\n    }\n    if (Math.abs(sina) < 1.0e-10) {\n      sina = 1.0e-10\n    }\n    let orig_delta_w = Victor(state.shape.wiperSize / cosa, 0.0)\n    let orig_delta_h = Victor(0.0, -state.shape.wiperSize / sina)\n\n    if (angle > Math.PI/4.0 && angle < 0.75 * Math.PI) {\n      // flip the logic of x,y\n      let temp = orig_delta_w.clone()\n      orig_delta_w = orig_delta_h.clone()\n      orig_delta_h = temp\n    }\n    if (angle > Math.PI/2.0) {\n      startLocation = Victor(-width/2.0, -height/2.0)\n      orig_delta_w = orig_delta_w.clone().multiply(Victor(-1.0, -1.0))\n      orig_delta_h = orig_delta_h.clone().multiply(Victor(-1.0, -1.0))\n    }\n    let delta_w = orig_delta_w\n    let delta_h = orig_delta_h\n    let endLocation = startLocation.clone().multiply(Victor(-1.0, -1.0))\n    outputVertices.push(startLocation)\n    let nextWidthPoint = startLocation\n    let nextHeightPoint = startLocation\n\n    let emergency_break = 0\n    while (emergency_break < 1000) {\n      emergency_break += 1\n\n      // \"right\"\n      nextWidthPoint = nextWidthPoint.clone().add(delta_w)\n      if (outOfBounds(nextWidthPoint, width, height)) {\n        let corner = boundPoint(nextWidthPoint.clone().subtract(delta_w), nextWidthPoint, width/2.0, height/2.0)\n        outputVertices.push(corner)\n        if (nearEnough(endLocation, corner)) {\n          break\n        }\n        nextWidthPoint = boundPoint(nextHeightPoint, nextWidthPoint, width/2.0, height/2.0)\n        delta_w = orig_delta_h\n      }\n      outputVertices.push(nextWidthPoint)\n      if (nearEnough(endLocation, nextWidthPoint)) {\n        break\n      }\n\n      // \"down-left\"\n      nextHeightPoint = nextHeightPoint.clone().add(delta_h)\n      if (outOfBounds(nextHeightPoint, width, height)) {\n        nextHeightPoint = boundPoint(nextWidthPoint, nextHeightPoint, width/2.0, height/2.0)\n        delta_h = orig_delta_w\n      }\n      outputVertices.push(nextHeightPoint)\n      if (nearEnough(endLocation, nextHeightPoint)) {\n        break\n      }\n\n      // \"down\"\n      nextHeightPoint = nextHeightPoint.clone().add(delta_h)\n      outputVertices.push(nextHeightPoint)\n      if (nearEnough(endLocation, nextHeightPoint)) {\n        break\n      }\n      if (outOfBounds(nextHeightPoint, width, height)) {\n        let corner = boundPoint(nextHeightPoint.clone().subtract(delta_h), nextHeightPoint, width/2.0, height/2.0)\n        outputVertices.push(corner)\n        if (nearEnough(endLocation, corner)) {\n          break\n        }\n        nextHeightPoint = boundPoint(nextWidthPoint, nextHeightPoint, width/2.0, height/2.0)\n        delta_h = orig_delta_w\n      }\n      outputVertices.push(nextHeightPoint)\n      if (nearEnough(endLocation, nextHeightPoint)) {\n        break\n      }\n\n      // \"up-right\"\n      nextWidthPoint = nextWidthPoint.clone().add(delta_w)\n      outputVertices.push(nextWidthPoint)\n      if (nearEnough(endLocation, nextWidthPoint)) {\n        break\n      }\n      if (outOfBounds(nextWidthPoint, width, height)) {\n        nextWidthPoint = boundPoint(nextHeightPoint, nextWidthPoint, width/2.0, height/2.0)\n        delta_w = orig_delta_h\n      }\n    }\n    return outputVertices\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import { Vertex } from '../../common/Geometry'\n\nlet Vicious1Vertices = () => {\n  return [\n    Vertex(-0.745613252629, 0.342139688058),\n    Vertex(-0.722681883112, 0.350763810109),\n    Vertex(-0.700286039815, 0.359363989838),\n    Vertex(-0.683380317501, 0.365945196632),\n    Vertex(-0.666520036737, 0.372640251609),\n    Vertex(-0.649705686141, 0.379449643388),\n    Vertex(-0.632937754332, 0.386372394731),\n    Vertex(-0.61621672993, 0.393408994259),\n    Vertex(-0.59954407879, 0.400558464732),\n    Vertex(-0.582920289531, 0.40782080615),\n    Vertex(-0.566345850773, 0.415195529896),\n    Vertex(-0.549821739752, 0.42268214735),\n    Vertex(-0.533348933706, 0.430280658513),\n    Vertex(-0.516927921255, 0.437990574764),\n    Vertex(-0.500559191017, 0.445811896105),\n    Vertex(-0.484244208848, 0.453743645298),\n    Vertex(-0.467982974749, 0.461785822342),\n    Vertex(-0.451776954575, 0.46993793862),\n    Vertex(-0.435626636946, 0.478199505511),\n    Vertex(-0.417042020391, 0.487809171708),\n    Vertex(-0.398529230801, 0.497557117029),\n    Vertex(-0.380089734033, 0.507441875618),\n    Vertex(-0.361724018706, 0.517463936093),\n    Vertex(-0.343433550675, 0.527621343979),\n    Vertex(-0.325218818561, 0.537915076515),\n    Vertex(-0.307080799601, 0.548343667842),\n    Vertex(-0.289020959651, 0.558906629343),\n    Vertex(-0.271040275948, 0.569603472399),\n    Vertex(-0.253139237112, 0.580433708391),\n    Vertex(-0.235319797618, 0.591396360082),\n    Vertex(-0.217581468846, 0.60249142747),\n    Vertex(-0.199926693892, 0.61371793332),\n    Vertex(-0.182355472755, 0.625075389011),\n    Vertex(-0.164869271291, 0.636562817306),\n    Vertex(-0.147469066739, 0.648180218206),\n    Vertex(-0.130155347716, 0.659926125854),\n    Vertex(-0.112929580079, 0.671800540249),\n    Vertex(-0.0957922524482, 0.683802484155),\n    Vertex(-0.0787448306786, 0.695931957571),\n    Vertex(-0.0617878033894, 0.708187006022),\n    Vertex(-0.0449226364371, 0.720568118127),\n    Vertex(-0.0281493298216, 0.733074316648),\n    Vertex(-0.0114698380183, 0.745704624347),\n    Vertex(0.00511535035415, 0.758458552606),\n    Vertex(0.021605258058, 0.771335124187),\n    Vertex(0.0379993964745, 0.78433433909),\n    Vertex(0.0542962997473, 0.79745424284),\n    Vertex(0.0689143087782, 0.809362371934),\n    Vertex(0.0834609794625, 0.821357963795),\n    Vertex(0.0979358231812, 0.833440041186),\n    Vertex(0.112337862697, 0.845608604107),\n    Vertex(0.12666660939, 0.857863652558),\n    Vertex(0.140921574643, 0.870203720682),\n    Vertex(0.155102758455, 0.882629297099),\n    Vertex(0.169209183589, 0.895138915952),\n    Vertex(0.181539967956, 0.906207597924),\n    Vertex(0.193955771996, 0.91718051061),\n    Vertex(0.206455618473, 0.928057165389),\n    Vertex(0.219038530147, 0.938837562262),\n    Vertex(0.22146207946, 0.940840899396),\n    Vertex(0.223916411758, 0.942806124262),\n    Vertex(0.226401527041, 0.944732748242),\n    Vertex(0.228916936691, 0.946620282717),\n    Vertex(0.230887047745, 0.948104706671),\n    Vertex(0.232926054052, 0.949493361338),\n    Vertex(0.235029069424, 0.950783803623),\n    Vertex(0.237191207672, 0.951972124576),\n    Vertex(0.239407582608, 0.953055881104),\n    Vertex(0.241672819425, 0.954032630111),\n    Vertex(0.243982520555, 0.954900417123),\n    Vertex(0.246330822571, 0.955656799046),\n    Vertex(0.248847209458, 0.956426373676),\n    Vertex(0.251395845187, 0.957082100124),\n    Vertex(0.253971354951, 0.957622512531),\n    Vertex(0.256568363942, 0.958047610898),\n    Vertex(0.259181985973, 0.958355440751),\n    Vertex(0.261806846237, 0.958546002088),\n    Vertex(0.264437081308, 0.958618806291),\n    Vertex(0.267068293617, 0.958573364741),\n    Vertex(0.269695108356, 0.958410166058),\n    Vertex(0.2723116621, 0.95812921024),\n    Vertex(0.274913068661, 0.957731474526),\n    Vertex(0.277493953231, 0.957217447535),\n    Vertex(0.280048941005, 0.956588595122),\n    Vertex(0.282573634412, 0.955845405908),\n    Vertex(0.285062170027, 0.954989834366),\n    Vertex(0.287510150281, 0.954023834973),\n    Vertex(0.289695253613, 0.953107674698),\n    Vertex(0.291880845564, 0.952108937844),\n    Vertex(0.301388879047, 0.947138218659),\n    Vertex(0.310845118937, 0.942069775711),\n    Vertex(0.320249076614, 0.936904097619),\n    Vertex(0.329599286221, 0.931642650239),\n    Vertex(0.363485000908, 0.912453612212),\n    Vertex(0.397329182996, 0.8931922586),\n    Vertex(0.431132321104, 0.873858589404),\n    Vertex(0.464893926612, 0.854453093243),\n    Vertex(0.498613999522, 0.834975281497),\n    Vertex(0.532292539832, 0.815425642786),\n    Vertex(0.565929058925, 0.795804177109),\n    Vertex(0.599524045418, 0.776110884466),\n    Vertex(0.614195802519, 0.767461354237),\n    Vertex(0.628780096852, 0.758665238364),\n    Vertex(0.643274973942, 0.749722536847),\n    Vertex(0.657679456551, 0.740634715542),\n    Vertex(0.663100193664, 0.737124966608),\n    Vertex(0.668459853424, 0.733522380099),\n    Vertex(0.673756481358, 0.729827933253),\n    Vertex(0.678988611609, 0.72604211469),\n    Vertex(0.681833350338, 0.72394251965),\n    Vertex(0.684601864533, 0.721743246372),\n    Vertex(0.687290245243, 0.719446737951),\n    Vertex(0.689896049373, 0.717056903336),\n    Vertex(0.692415367973, 0.714576674241),\n    Vertex(0.694845269331, 0.71200800514),\n    Vertex(0.697182821733, 0.709355293604),\n    Vertex(0.699425093466, 0.706621471345),\n    Vertex(0.70031242523, 0.705263599663),\n    Vertex(0.70110301047, 0.703846605105),\n    Vertex(0.701792940234, 0.702378794191),\n    Vertex(0.702378794191, 0.700866030346),\n    Vertex(0.702858129247, 0.699316131471),\n    Vertex(0.703228502307, 0.697736426848),\n    Vertex(0.703487470278, 0.696135222997),\n    Vertex(0.703634544541, 0.694519360583),\n    Vertex(0.703808492838, 0.692484263226),\n    Vertex(0.704005894839, 0.688243540547),\n    Vertex(0.704113390977, 0.683999886156),\n    Vertex(0.704130981255, 0.679754765908),\n    Vertex(0.704059154289, 0.675510622897),\n    Vertex(0.703896932843, 0.671268434362),\n    Vertex(0.703645294154, 0.667031132015),\n    Vertex(0.703303749604, 0.662799693094),\n    Vertex(0.702872787811, 0.658576560692),\n    Vertex(0.701225165173, 0.648144060414),\n    Vertex(0.699422161753, 0.637737456933),\n    Vertex(0.697463288931, 0.627358704724),\n    Vertex(0.695350012565, 0.617010735501),\n    Vertex(0.693864122754, 0.60962184181),\n    Vertex(0.691242194203, 0.596705692105),\n    Vertex(0.688638833167, 0.58378514483),\n    Vertex(0.686055016884, 0.570860688605),\n    Vertex(0.683489768115, 0.557932812049),\n    Vertex(0.679173798139, 0.53578860744),\n    Vertex(0.675031287842, 0.513610688133),\n    Vertex(0.671063214461, 0.491401008603),\n    Vertex(0.667269089377, 0.469161523326),\n    Vertex(0.663649889828, 0.446892232301),\n    Vertex(0.660205127196, 0.424595578622),\n    Vertex(0.65693480148, 0.402273028147),\n    Vertex(0.653839889918, 0.379925069493),\n    Vertex(0.65092039251, 0.357553168517),\n    Vertex(0.648176309256, 0.335159768314),\n    Vertex(0.645608128774, 0.312745357501),\n    Vertex(0.643215362447, 0.290311401936),\n    Vertex(0.641387928086, 0.272862824121),\n    Vertex(0.640313455316, 0.262524627274),\n    Vertex(0.639318138793, 0.252178123907),\n    Vertex(0.638402467138, 0.241824779876),\n    Vertex(0.637566440349, 0.231464595183),\n    Vertex(0.636809569807, 0.221098058444),\n    Vertex(0.636132344132, 0.210726146899),\n    Vertex(0.635534763324, 0.200349349165),\n    Vertex(0.635016338763, 0.189968153863),\n    Vertex(0.634136336281, 0.166283334136),\n    Vertex(0.633371647838, 0.14259411684),\n    Vertex(0.632722273436, 0.118901479213),\n    Vertex(0.632187724454, 0.0952059098725),\n    Vertex(0.631768489513, 0.0715078974381),\n    Vertex(0.631464568611, 0.0478084191472),\n    Vertex(0.63127547313, 0.0241079636186),\n    Vertex(0.631201691689, 0.000406530852484),\n    Vertex(0.631270098323, -0.0222394852774),\n    Vertex(0.631441114908, -0.0448845241697),\n    Vertex(0.631715230062, -0.0675285858243),\n    Vertex(0.632092443786, -0.0901711816225),\n    Vertex(0.63257226746, -0.112811822945),\n    Vertex(0.633154701085, -0.135450021174),\n    Vertex(0.63384023328, -0.158085776309),\n    Vertex(0.634628864044, -0.180717622493),\n    Vertex(0.635306089719, -0.195449968327),\n    Vertex(0.636126969325, -0.210174984878),\n    Vertex(0.637091014243, -0.22489120629),\n    Vertex(0.638198713093, -0.239597655326),\n    Vertex(0.639449577254, -0.254292377511),\n    Vertex(0.640843606728, -0.268974395606),\n    Vertex(0.642380801514, -0.283642243756),\n    Vertex(0.644060672993, -0.298293967485),\n    Vertex(0.64612020129, -0.31581290641),\n    Vertex(0.6482320118, -0.333325493289),\n    Vertex(0.65039757038, -0.350831239505),\n    Vertex(0.652615411173, -0.368331122296),\n    Vertex(0.654741880247, -0.384873800832),\n    Vertex(0.656970959272, -0.401402798041),\n    Vertex(0.659303625486, -0.417918113923),\n    Vertex(0.661739390269, -0.434418282622),\n    Vertex(0.664278253622, -0.450902815519),\n    Vertex(0.666919726926, -0.467371223995),\n    Vertex(0.66966381018, -0.483822530812),\n    Vertex(0.672510992004, -0.500256735972),\n    Vertex(0.675460295159, -0.516672862235),\n    Vertex(0.678512696885, -0.533069932364),\n    Vertex(0.681666731323, -0.54944794636),\n    Vertex(0.684923375712, -0.565805926984),\n    Vertex(0.688253801542, -0.582478578124),\n    Vertex(0.691624294115, -0.599143411363),\n    Vertex(0.695033876193, -0.615799938082),\n    Vertex(0.698483036394, -0.632448158282),\n    Vertex(0.700362264349, -0.641257466863),\n    Vertex(0.702110053844, -0.650093649478),\n    Vertex(0.703725916259, -0.658955240272),\n    Vertex(0.705209362975, -0.667839796151),\n    Vertex(0.705560191283, -0.670609776202),\n    Vertex(0.705811829972, -0.673129583421),\n    Vertex(0.705988709982, -0.675296119238),\n    Vertex(0.706054184903, -0.677469495719),\n    Vertex(0.706007766116, -0.679642872199),\n    Vertex(0.70584945362, -0.681811362492),\n    Vertex(0.705579736035, -0.683968614552),\n    Vertex(0.705199590599, -0.686109253572),\n    Vertex(0.704709505929, -0.688227904745),\n    Vertex(0.704111436502, -0.690317727409),\n    Vertex(0.702891355326, -0.694066410943),\n    Vertex(0.701505632372, -0.697756460219),\n    Vertex(0.699955733497, -0.701380545956),\n    Vertex(0.698245567651, -0.704932316108),\n    Vertex(0.696378555166, -0.708403464156),\n    Vertex(0.694358116374, -0.711788126674),\n    Vertex(0.692188648844, -0.715079462999),\n    Vertex(0.689874061527, -0.718270143849),\n    Vertex(0.688711148751, -0.719521985248),\n    Vertex(0.687505237521, -0.720732294048),\n    Vertex(0.686256816453, -0.721899115774),\n    Vertex(0.684968817262, -0.723021473187),\n    Vertex(0.683641728566, -0.724097900432),\n    Vertex(0.68227750484, -0.725126443034),\n    Vertex(0.68087761194, -0.726106612373),\n    Vertex(0.679444492961, -0.727036942593),\n    Vertex(0.669607619016, -0.733287843069),\n    Vertex(0.659707713245, -0.739438576688),\n    Vertex(0.649746730121, -0.745489632069),\n    Vertex(0.639724669646, -0.751439054737),\n    Vertex(0.626066307964, -0.75960143201),\n    Vertex(0.588245257356, -0.781929357292),\n    Vertex(0.550379253818, -0.804180569421),\n    Vertex(0.512467808729, -0.826354091159),\n    Vertex(0.474510922092, -0.848449922505),\n    Vertex(0.436509082523, -0.87046806346),\n    Vertex(0.398462290023, -0.892408514024),\n    Vertex(0.360370544593, -0.914271274197),\n    Vertex(0.322234334851, -0.936056343978),\n    Vertex(0.311636192795, -0.942000391839),\n    Vertex(0.303639945919, -0.946411153865),\n    Vertex(0.301535464691, -0.947610713051),\n    Vertex(0.299393848434, -0.94874333146),\n    Vertex(0.29721754024, -0.949807054616),\n    Vertex(0.295008494586, -0.9508013939),\n    Vertex(0.292769154566, -0.951725372076),\n    Vertex(0.290501474654, -0.952577523286),\n    Vertex(0.288207897946, -0.95335784753),\n    Vertex(0.285890867534, -0.954064878953),\n    Vertex(0.282197886545, -0.955003515693),\n    Vertex(0.278465327432, -0.955768692754),\n    Vertex(0.274700519477, -0.956358455661),\n    Vertex(0.270912257819, -0.956772315796),\n    Vertex(0.267109337597, -0.957008318683),\n    Vertex(0.263299088092, -0.957066464322),\n    Vertex(0.259490304444, -0.956946752712),\n    Vertex(0.255691781792, -0.956649183855),\n    Vertex(0.251910849416, -0.956174246369),\n    Vertex(0.248156302456, -0.95552340611),\n    Vertex(0.244436447432, -0.954697640316),\n    Vertex(0.240758613626, -0.953699392081),\n    Vertex(0.240319833932, -0.953534238922),\n    Vertex(0.238502171947, -0.952568728147),\n    Vertex(0.236709918141, -0.951555821348),\n    Vertex(0.234945026988, -0.950496007142),\n    Vertex(0.233208964345, -0.949390262768),\n    Vertex(0.23150270745, -0.948239076844),\n    Vertex(0.22982723354, -0.94704293799),\n    Vertex(0.228184008471, -0.945803312061),\n    Vertex(0.226574009482, -0.944520687677),\n    Vertex(0.224074235635, -0.942570121375),\n    Vertex(0.212583875626, -0.933021043911),\n    Vertex(0.201218113415, -0.923323914947),\n    Vertex(0.189977926239, -0.913481666195),\n    Vertex(0.178866245811, -0.903494297655),\n    Vertex(0.161323853183, -0.887790577622),\n    Vertex(0.143655885521, -0.872228557044),\n    Vertex(0.125862831443, -0.856809213159),\n    Vertex(0.107946156805, -0.841533523206),\n    Vertex(0.0899073274635, -0.82640295304),\n    Vertex(0.0717468320377, -0.811418479899),\n    Vertex(0.0534666250026, -0.796580103784),\n    Vertex(0.0350671949772, -0.781890267787),\n    Vertex(0.0165500078179, -0.767348483291),\n    Vertex(-0.00208395923779, -0.752956704771),\n    Vertex(-0.0208327517145, -0.738715420845),\n    Vertex(-0.0396958809936, -0.724625608751),\n    Vertex(-0.0586718812184, -0.710688245726),\n    Vertex(-0.0777597751514, -0.69690382039),\n    Vertex(-0.0969580969362, -0.683274287218),\n    Vertex(-0.116265380716, -0.66979964621),\n    Vertex(-0.135680649254, -0.656480874603),\n    Vertex(-0.155202436693, -0.643318949635),\n    Vertex(-0.174829765796, -0.630314359925),\n    Vertex(-0.194561170706, -0.617469059948),\n    Vertex(-0.214395674185, -0.604782561085),\n    Vertex(-0.234331321759, -0.592256329193),\n    Vertex(-0.254367624808, -0.579891341509),\n    Vertex(-0.274502628858, -0.567688086652),\n    Vertex(-0.29394086248, -0.556123456584),\n    Vertex(-0.313469979201, -0.54471371868),\n    Vertex(-0.333088513165, -0.533458384321),\n    Vertex(-0.352795975753, -0.522359407981),\n    Vertex(-0.372590901108, -0.511416789662),\n    Vertex(-0.392471334756, -0.500631017982),\n    Vertex(-0.412437276696, -0.490003070179),\n    Vertex(-0.432486283835, -0.47953392349),\n    Vertex(-0.452617867553, -0.469224066534),\n    Vertex(-0.472830073375, -0.459073499311),\n    Vertex(-0.493122412682, -0.449083687678),\n    Vertex(-0.513493419618, -0.439255120252),\n    Vertex(-0.533941628327, -0.429588285654),\n    Vertex(-0.554465572951, -0.420083183884),\n    Vertex(-0.575064276254, -0.410741769415),\n    Vertex(-0.595736272379, -0.401563065011),\n    Vertex(-0.61648009547, -0.392549025148),\n    Vertex(-0.637294768288, -0.383699161205),\n    Vertex(-0.658179313597, -0.37501493904),\n    Vertex(-0.679131776921, -0.366496358653),\n    Vertex(-0.698898362385, -0.3585812225),\n    Vertex(-0.718729934152, -0.350830262268),\n    Vertex(-0.738624537745, -0.34324250072),\n    Vertex(-0.758581195928, -0.33581989233),\n    Vertex(-0.778598442844, -0.32856194848),\n    Vertex(-0.798674812635, -0.32146915779),\n    Vertex(-0.818809328066, -0.314542497496),\n    Vertex(-0.83900003466, -0.307782456217),\n    Vertex(-0.849647527216, -0.304229708827),\n    Vertex(-0.859482935305, -0.301024369413),\n    Vertex(-0.86930319621, -0.297772122593),\n    Vertex(-0.879107821313, -0.294472968367),\n    Vertex(-0.888896810615, -0.291126906735),\n    Vertex(-0.898669186876, -0.287733937697),\n    Vertex(-0.908425927336, -0.284294061253),\n    Vertex(-0.918165566137, -0.28080825464),\n    Vertex(-0.927888591898, -0.277275540622),\n    Vertex(-0.931015263683, -0.276110673371),\n    Vertex(-0.934077437785, -0.27478553915),\n    Vertex(-0.937066807683, -0.273304046909),\n    Vertex(-0.939975066859, -0.271669128361),\n    Vertex(-0.942794886029, -0.269885669693),\n    Vertex(-0.945518447293, -0.267958557094),\n    Vertex(-0.948138909988, -0.265892676752),\n    Vertex(-0.950648456212, -0.263693892093),\n    Vertex(-0.953040245302, -0.261368066543),\n    Vertex(-0.955308902451, -0.258921063527),\n    Vertex(-0.957447586996, -0.256360212328),\n    Vertex(-0.959450435511, -0.25369186499),\n    Vertex(-0.961260768213, -0.251131991028),\n    Vertex(-0.962993410524, -0.248518368997),\n    Vertex(-0.96464591935, -0.245853930609),\n    Vertex(-0.966217317453, -0.24314063034),\n    Vertex(-0.972878657732, -0.231316055063),\n    Vertex(-0.972926053757, -0.0130031238537),\n    Vertex(-0.972925565138, 0.00628803550555),\n    Vertex(-0.97291628138, 0.0249869888634),\n    Vertex(-0.972898202484, 0.0430570898088),\n    Vertex(-0.972858135742, 0.0776097691758),\n    Vertex(-0.972741844464, 0.112162448543),\n    Vertex(-0.972548351414, 0.146714639291),\n    Vertex(-0.972277656592, 0.181266341421),\n    Vertex(-0.972203875151, 0.189501034277),\n    Vertex(-0.972085629398, 0.197735727134),\n    Vertex(-0.971922919333, 0.205968954135),\n    Vertex(-0.971715256338, 0.214201692516),\n    Vertex(-0.971568670694, 0.217132916776),\n    Vertex(-0.971310679961, 0.220056811754),\n    Vertex(-0.970942749994, 0.222968491261),\n    Vertex(-0.970464880795, 0.225864534966),\n    Vertex(-0.969878049601, 0.228740056681),\n    Vertex(-0.96918274503, 0.231591636074),\n    Vertex(-0.968380432939, 0.234414875576),\n    Vertex(-0.967472090565, 0.237205866236),\n    Vertex(-0.966500716365, 0.23992551855),\n    Vertex(-0.965406210223, 0.242597774839),\n    Vertex(-0.964191015235, 0.245217260296),\n    Vertex(-0.962857085875, 0.247778600114),\n    Vertex(-0.961408331095, 0.250276908105),\n    Vertex(-0.959846705368, 0.252705832225),\n    Vertex(-0.958176117646, 0.255061463523),\n    Vertex(-0.956399499642, 0.257337938573),\n    Vertex(-0.954520760305, 0.259531348425),\n    Vertex(-0.952544297207, 0.261636318272),\n    Vertex(-0.950473530677, 0.263649427781),\n    Vertex(-0.948313346904, 0.265565790766),\n    Vertex(-0.946067654839, 0.267381009657),\n    Vertex(-0.94374134067, 0.269092641359),\n    Vertex(-0.941339779204, 0.270695799685),\n    Vertex(-0.93886736801, 0.27218804154),\n    Vertex(-0.936329481894, 0.273565946593),\n    Vertex(-0.933731007046, 0.274826094512),\n    Vertex(-0.93107829551, 0.27596701944),\n    Vertex(-0.928375744855, 0.276985301047),\n    Vertex(-0.913861323012, 0.282438287001),\n    Vertex(-0.899294130338, 0.287750550737),\n    Vertex(-0.884676121307, 0.292920137779),\n    Vertex(-0.870008761776, 0.297948025366),\n    Vertex(-0.854391527272, 0.303278856616),\n    Vertex(-0.838793348902, 0.308665390412),\n    Vertex(-0.823214226666, 0.314107138133),\n    Vertex(-0.807654649182, 0.319603611161),\n    Vertex(-0.792114127832, 0.325155298116),\n    Vertex(-0.776593639853, 0.330761710377),\n    Vertex(-0.761093185246, 0.336423336564),\n    Vertex(-0.745613252629, 0.342139688058),\n  ];\n}\n\nexport default Vicious1Vertices;\n","export default class Orbit {\n  constructor(x, y, r, level, settings, parent) {\n    this.x = x\n    this.y = y\n    this.r = r\n    this.child = null\n    this.angle = Math.PI/2\n    this.level = level\n    this.settings = settings\n\n    let sign = this.settings.alternateRotation ? -1 : 1\n    this.speed = Math.pow(settings.velocity * sign, this.level - 1) * Math.PI / 180 / settings.resolution\n    this.parent = parent\n  }\n\n  addChild() {\n    let newr = this.r / this.settings.relativeSize\n    let newx = this.x + this.r + newr\n    let newy = this.y\n    this.child = new Orbit(newx, newy, newr, this.level + 1, this.settings, this)\n    return this.child\n  }\n\n  update() {\n    if (this.parent) {\n      this.angle += this.speed\n\n      let rsum = this.r + this.parent.r\n      this.x = this.parent.x + rsum * Math.cos(this.angle)\n      this.y = this.parent.y + rsum * Math.sin(this.angle)\n    }\n  }\n}\n","import { Vertex } from '../../common/Geometry'\nimport Shape, { shapeOptions } from '../Shape'\nimport Orbit from './Orbit'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    fractalSpirographVelocity: {\n      title: 'Velocity',\n      min: 2\n    },\n    fractalSpirographResolution: {\n      title: 'Resolution',\n      min: 1\n    },\n    fractalSpirographNumCircles: {\n      title: 'Number of circles',\n      min: 1,\n      max: 6\n    },\n    fractalSpirographRelativeSize: {\n      title: 'Relative size (parent to child circle)',\n      min: 2,\n      max: 6\n    },\n    fractalSpirographAlternateRotation: {\n      title: 'Alternate direction of rotation',\n      type: 'checkbox'\n    },\n  }\n}\n\n// Inspired/adapted from https://thecodingtrain.com/CodingChallenges/061-fractal-spirograph\nexport default class FractalSpirograph extends Shape {\n  constructor() {\n    super('Fractal Spirograph')\n    this.link = 'https://benice-equation.blogspot.com/2012/01/fractal-spirograph.html'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'fractal_spirograph',\n        repeatEnabled: false,\n        startingSize: 54,\n        fractalSpirographVelocity: 8,\n        fractalSpirographResolution: 2,\n        fractalSpirographNumCircles: 5,\n        fractalSpirographRelativeSize: 3,\n        fractalSpirographAlternateRotation: true\n      }\n    }\n  }\n\n  getVertices(state) {\n    let resolution = parseInt(state.shape.fractalSpirographResolution)\n    let settings = {\n      resolution: resolution,\n      velocity: parseInt(state.shape.fractalSpirographVelocity),\n      numCircles: parseInt(state.shape.fractalSpirographNumCircles),\n      relativeSize: parseInt(state.shape.fractalSpirographRelativeSize),\n      alternateRotation: state.shape.fractalSpirographAlternateRotation\n    }\n\n    let sun = new Orbit(0, 0, 1, 0, settings)\n    let next = sun\n    let end\n    let points = []\n\n    for (var i=0; i<settings.numCircles; i++) {\n      next = next.addChild()\n    }\n    end = next\n\n    for (let i=0; i<resolution; i++) {\n      for (let j=0; j<361; j++) {\n        let next = sun\n\n        while (next != null) {\n          next.update()\n          next = next.child\n        }\n\n        points.push(Vertex(end.x, end.y))\n      }\n    }\n\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export class PriorityQueue {\n  constructor() {\n    this.collection = []\n  }\n\n  enqueue(element) {\n    if (this.isEmpty()) {\n      this.collection.push(element)\n    } else {\n      let added = false\n      for (let i = 1; i <= this.collection.length; i++) {\n        if (element[1] < this.collection[i-1][1]){\n          this.collection.splice(i-1, 0, element)\n          added = true\n          break\n        }\n      }\n\n      if (!added) {\n        this.collection.push(element)\n      }\n    }\n  }\n\n  dequeue() {\n    let value = this.collection.shift()\n    return value\n  }\n\n  isEmpty() {\n    return (this.collection.length === 0)\n  }\n}\n","import { PriorityQueue } from './PriorityQueue.js'\n\nexport const mix = (u, v, s) => {\n  var result = []\n  for (var i = 0; i < u.length; ++i ) {\n    result.push((1.0 - s) * u[i] + s * v[i])\n  }\n\n  return result\n}\n\nexport const vec2 = (...args) => {\n  switch (args.length) {\n    case 0: args.push(0.0); break\n    default: args.push(0.0)\n  }\n\n  return args.splice(0, 2)\n}\n\nexport class Graph {\n  constructor() {\n    this.nodes = []\n    this.adjacencyList = {}\n    this.edges = []\n  }\n\n  addNode(node) {\n    this.nodes.push(node)\n    this.adjacencyList[node] = []\n  }\n\n  addEdge(node1, node2, weight=1) {\n    this.adjacencyList[node1].push({node:node2, weight: weight})\n    this.adjacencyList[node2].push({node:node1, weight: weight})\n    this.edges.push([node1.toString(), node2.toString()].sort().toString())\n  }\n\n  dijkstraShortestPath(startNode, endNode) {\n    let times = {}\n    let backtrace = {}\n    let pq = new PriorityQueue()\n\n    times[startNode] = 0\n\n    this.nodes.forEach(node => {\n      if (node !== startNode) {\n        times[node] = Infinity\n      }\n    })\n\n    pq.enqueue([startNode, 0])\n\n    while (!pq.isEmpty()) {\n      let shortestStep = pq.dequeue()\n      let currentNode = shortestStep[0]\n      this.adjacencyList[currentNode].forEach(neighbor => {\n        let time = times[currentNode] + neighbor.weight\n\n        if (time < times[neighbor.node]) {\n          times[neighbor.node] = time\n          backtrace[neighbor.node] = currentNode\n          pq.enqueue([neighbor.node, time])\n        }\n      })\n    }\n\n    let path = [endNode]\n    let lastStep = endNode\n    while(lastStep !== startNode) {\n      path.unshift(backtrace[lastStep])\n      lastStep = backtrace[lastStep]\n    }\n\n    return path\n  }\n}\n","export const difference = function(c1, c2) {\n  return c1.filter(x => !c2.includes(x)).concat(c2.filter(x => !c1.includes(x)))\n}\n","import Victor from 'victor'\nimport { Graph, vec2, mix } from '../../common/Graph'\nimport eulerianTrail from '../../common/eulerianTrail'\nimport { difference } from '../../common/util'\nimport Shape, { shapeOptions } from '../Shape'\n\nconst vec_triangle = [\n  vec2(-0.85, -0.4907477295),\n  vec2( 0.85, -0.4907477295),\n  vec2( 0.0,  0.9814954573),\n]\n\nconst vec_square = [\n  vec2(-0.7, -0.7),\n  vec2( 0.7,  0.7),\n  vec2(-0.7,  0.7),\n\n  vec2(-0.7, -0.7),\n  vec2( 0.7,  0.7),\n  vec2( 0.7, -0.7)\n]\n\nvar vec_pentagon = [\n  vec2(0.0, 0.0),\n  vec2(0.0, -1.000000),\n  vec2(-0.951057, -0.309017),\n\n  vec2(0.0, 0.0),\n  vec2(-0.951057, -0.309017),\n  vec2(-0.587785, 0.809017),\n\n  vec2(0.0, 0.0),\n  vec2(-0.587785, 0.809017),\n  vec2(0.587785, 0.809017),\n\n  vec2(0.0, 0.0),\n  vec2(0.587785, 0.809017),\n  vec2(0.951057, -0.309017),\n\n  vec2(0.0, 0.0),\n  vec2(0.951057, -0.309017),\n  vec2(0.0, -1.000000),\n]\n\nvar vec_hexagon = [\n  vec2(0.0, 0.0),\n  vec2(0.0, -1.000000),\n  vec2(-0.866025, -0.500000),\n\n  vec2(0.0, 0.0),\n  vec2(-0.866025, -0.500000),\n  vec2(-0.866025, 0.500000),\n\n  vec2(0.0, 0.0),\n  vec2(-0.866025, 0.500000),\n  vec2(0.0, 1.000000),\n\n  vec2(0.0, 0.0),\n  vec2(0.0, 1.000000),\n  vec2(0.866025, 0.500000),\n\n  vec2(0.0, 0.0),\n  vec2(0.866025, 0.500000),\n  vec2(0.866025, -0.500000),\n\n  vec2(0.0, 0.0),\n  vec2(0.866025, -0.500000),\n  vec2(0.0, -1.000000),\n]\n\nfunction getEdges(edges, a, b, c, count, settings) {\n  let da, db, dc\n\n  if (count === 0) {\n    if (settings.rotate > 0) {\n      da = Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2)) * (settings.rotate * Math.PI / 180.0)\n      db = Math.sqrt(Math.pow(b[0], 2) + Math.pow(b[1], 2)) * (settings.rotate * Math.PI / 180.0)\n      dc = Math.sqrt(Math.pow(c[0], 2) + Math.pow(c[1], 2)) * (settings.rotate * Math.PI / 180.0)\n    } else {\n      da = (settings.rotate * Math.PI / 180.0)\n      db = (settings.rotate * Math.PI / 180.0)\n      dc = (settings.rotate * Math.PI / 180.0)\n    }\n\n    let ap = vec2(\n      (a[0] * Math.cos(da)) - (a[1] * Math.sin(da)),\n      (a[0] * Math.sin(da)) + (a[1] * Math.cos(da)))\n    let bp = vec2(\n      (b[0] * Math.cos(db)) - (b[1] * Math.sin(db)),\n      (b[0] * Math.sin(db)) + (b[1] * Math.cos(db)))\n    let cp = vec2(\n      (c[0] * Math.cos(dc)) - (c[1] * Math.sin(dc)),\n      (c[0] * Math.sin(dc)) + (c[1] * Math.cos(dc)))\n\n    edges.push([ap, bp], [ap, cp], [bp, cp])\n    return\n  }\n\n  let ab = mix(a, b, 0.5)\n  let ac = mix(a, c, 0.5)\n  let bc = mix(b, c, 0.5)\n\n  getEdges(edges, ab, ac, bc, count - 1, settings)\n  getEdges(edges, c, ac, bc, count - 1, settings)\n  getEdges(edges, b, bc, ab, count - 1, settings)\n  getEdges(edges, a, ab, ac, count - 1, settings)\n}\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    tessellationTwistNumSides: {\n      title: \"Number of sides\",\n      min: 3,\n      max: 6\n    },\n    tessellationTwistIterations: {\n      title: \"Iterations\",\n      min: 0,\n      max: 4\n    },\n    tessellationTwistRotate: {\n      title: \"Rotate and twist\",\n      step: 5,\n      min: 0\n    }\n  }\n}\n\n// Adapted from https://codepen.io/rafaelpascoalrodrigues/pen/KpBJve.\nexport default class TessellationTwist extends Shape {\n  constructor() {\n    super('Tessellation Twist')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'tessellation_twist',\n        startingSize: 110,\n        repeatEnabled: false,\n        tessellationTwistNumSides: 5,\n        tessellationTwistIterations: 2,\n        tessellationTwistRotate: 0\n      }\n    }\n  }\n\n  getVertices(state) {\n    let vertices\n    let edges = []\n    const tessellation = parseInt(state.shape.tessellationTwistIterations)\n    const sides = parseInt(state.shape.tessellationTwistNumSides)\n\n    switch (sides) {\n      default:\n      case 3:\n        vertices = vec_triangle.slice(0)\n        break\n      case 4:\n        vertices = vec_square.slice(0)\n        break\n      case 5:\n        vertices = vec_pentagon.slice(0)\n        break\n      case 6:\n        vertices = vec_hexagon.slice(0)\n        break\n    }\n\n    // build our tessellations\n    for (var i = 0; i < vertices.length; i += 3) {\n      getEdges(edges, vertices[i + 0], vertices[i + 1], vertices[i + 2],\n        tessellation, { rotate: parseInt(state.shape.tessellationTwistRotate) })\n    }\n\n    // build edge and adjacency maps; this serves to ensure unique\n    // vertices and edges, and give us a string-based key to access and run\n    // algorithms on them.\n    let vertexMap = new Map()\n    let edgeMap = new Map()\n\n    edges.forEach((edge) => {\n      let v1 = edge[0]\n      let v2 = edge[1]\n      let value = [v1.toString(), v2.toString()]\n\n      vertexMap.set(v1.toString(), v1)\n      vertexMap.set(v2.toString(), v2)\n      edgeMap.set(value.sort().toString(), value)\n    })\n\n    // build a graph\n    let graph = new Graph()\n    vertexMap.forEach((vertex, key) => graph.addNode(key))\n    edgeMap.forEach((edge, key) => graph.addEdge(edge[0], edge[1]))\n\n    // find the eulerian trail that efficiently visits all of the vertices\n    let edges2 = Array.from(edgeMap.values())\n    let trail = eulerianTrail({edges: edges2})\n    let prevKey\n    let walkedVertices = []\n    var walkedEdges = []\n\n    // if there are nodes with an odd number of edges (as in pentagon and hexagon)\n    // there is not a eulerian trail that visits all of the nodes. So we need to identify\n    // the missing nodes and create edges for them. There is a complex algorithm\n    // (chinese postman) that can be used to do this for the general case, but\n    // it's computationally expensive and overkill for our situation.\n    for (i = 0; i < trail.length-1; i++) {\n      let edge = [trail[i], trail[i+1]].sort().toString()\n      walkedEdges.push(edge)\n    }\n    walkedEdges = Array.from(new Set(walkedEdges))\n    let missingEdges = difference(walkedEdges, graph.edges).reduce((hash, d) => {\n      d = d.split(',')\n      hash[d[0] + ',' + d[1]] = d[2] + ',' + d[3]\n      return hash\n    }, {})\n\n    trail.forEach((key, index) => {\n      let vertex = vertexMap.get(key)\n\n      if (prevKey) {\n        let edgeKey = [key, prevKey].sort().toString()\n\n        if (!edgeMap.get(edgeKey)) {\n          // non-eulerian move, so we'll walk the shortest valid path between them\n          let path = graph.dijkstraShortestPath(prevKey, key)\n          path.shift()\n          path.forEach((walkedKey) => {\n            let walkedVertex = vertexMap.get(walkedKey)\n            walkedVertices.push(Victor(walkedVertex[0], walkedVertex[1]))\n          })\n          walkedVertices.push(Victor(vertex[0], vertex[1]))\n        } else {\n          walkedVertices.push(Victor(vertex[0], vertex[1]))\n        }\n      } else {\n        walkedVertices.push(Victor(vertex[0], vertex[1]))\n      }\n\n      // add any missing edges\n      if (missingEdges[key]) {\n        let missingVertex = vertexMap.get(missingEdges[key])\n        let edgeKey = [key, missingEdges[key]].sort().toString()\n\n        if (edgeMap.get(edgeKey)) {\n          // only add valid edges\n          walkedVertices.push(Victor(missingVertex[0], missingVertex[1]))\n          walkedVertices.push(Victor(vertex[0], vertex[1]))\n        }\n        delete missingEdges[key]\n      }\n\n      prevKey = key\n    })\n\n    return walkedVertices\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Polygon from '../shapes/Polygon'\nimport Circle from '../shapes/Circle'\nimport Star from '../shapes/Star'\nimport Heart from '../shapes/Heart'\nimport Reuleaux from '../shapes/Reuleaux'\nimport Epicycloid from '../shapes/Epicycloid'\nimport Hypocycloid from '../shapes/Hypocycloid'\nimport Rose from '../shapes/Rose'\nimport InputText from '../shapes/input_text/InputText'\nimport Wiper from '../shapes/Wiper'\nimport V1Engineering from '../shapes/v1_engineering/V1Engineering'\nimport FractalSpirograph from '../shapes/fractal_spirograph/FractalSpirograph'\nimport TessellationTwist from '../shapes/tessellation_twist/TessellationTwist'\n\n/*----------------------------------------------\nSupported input shapes\n-----------------------------------------------*/\nexport const registeredShapes = {\n  polygon: new Polygon(),\n  star: new Star(),\n  circle: new Circle(),\n  heart: new Heart(),\n  reuleaux: new Reuleaux(),\n  epicycloid: new Epicycloid(),\n  hypocycloid: new Hypocycloid(),\n  rose: new Rose(),\n  v1Engineering: new V1Engineering(),\n  inputText: new InputText(),\n  fractal_spirograph: new FractalSpirograph(),\n  tessellation_twist: new TessellationTwist(),\n  wiper: new Wiper()\n}\n","import { Vertex } from '../common/Geometry'\nimport Shape from './Shape'\n\nexport default class Heart extends Shape {\n  constructor() {\n    super('Heart')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'heart',\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<128; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      let scale = 0.9\n      // heart equation from: http://mathworld.wolfram.com/HeartCurve.html\n      points.push(Vertex(scale * 1.0 * Math.pow(Math.sin(angle), 3),\n                         scale * (13.0/16.0 * Math.cos(angle) +\n                                    -5.0/16.0 * Math.cos(2.0 * angle) +\n                                    -2.0/16.0 * Math.cos(3.0 * angle) +\n                                    -1.0/16.0 * Math.cos(4.0 * angle))))\n    }\n    return points\n  }\n}\n","import Vicious1Vertices from './Vicious1Vertices'\nimport Shape from '../Shape'\n\nexport default class V1Engineering extends Shape {\n  constructor() {\n    super('V1Engineering')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'v1Engineering',\n      }\n    }\n  }\n\n  getVertices(state) {\n    return Vicious1Vertices()\n  }\n}\n","// adapted from https://github.com/mauriciopoppe/eulerian-trail/blob/master/lib/eulerian-trail.js\n// commented out thrown exceptions to return non-optimal eulerian paths\nexport default function(options) {\n  var g = []\n  var i\n  var edgePointer = []\n  var edgeUsed = []\n  var trail = []\n\n  var id = {}\n  var idReverse = []\n  var idCount = 0\n\n  function getId(x) {\n    if (!id.hasOwnProperty(x)) {\n      edgePointer[idCount] = 0\n      idReverse[idCount] = x\n      id[x] = idCount++\n    }\n    return id[x]\n  }\n\n  function dfs(v) {\n    for (; edgePointer[v] < g[v].length; edgePointer[v] += 1) {\n      var edge = g[v][edgePointer[v]]\n      var to = edge[0]\n      var id = edge[1]\n      if (!edgeUsed[id]) {\n        edgeUsed[id] = true\n        dfs(to)\n      }\n    }\n    trail.push(v)\n  }\n\n  function pushEdge(u, v, id) {\n    g[u] = g[u] || []\n    g[v] = g[v] || []\n    g[u].push([v, id])\n  }\n\n  var deg = []\n  var inDeg = [], outDeg = []\n\n  for (i = 0; i < options.edges.length; i += 1) {\n    var edge = options.edges[i]\n    var u = getId(edge[0])\n    var v = getId(edge[1])\n\n    pushEdge(u, v, i)\n    if (!options.directed) {\n      pushEdge(v, u, i)\n    }\n\n    if (options.directed) {\n      outDeg[u] = outDeg[u] || 0\n      inDeg[u] = inDeg[u] || 0\n      outDeg[v] = outDeg[v] || 0\n      inDeg[v] = inDeg[v] || 0\n      outDeg[u] += 1\n      inDeg[v] += 1\n    } else {\n      deg[u] = deg[u] || 0\n      deg[v] = deg[v] || 0\n      deg[u] += 1\n      deg[v] += 1\n    }\n  }\n\n  function checkDirected() {\n    var oddVertex = 0\n    var start = 0\n\n    for (i = 0; i < idCount; i += 1) {\n      if (outDeg[i] - inDeg[i] !== 0) {\n        if (outDeg[i] > inDeg[i]) {\n          start = i\n        }\n        oddVertex += 1\n      }\n    }\n    return {odd: oddVertex, start: start}\n  }\n\n  function checkUndirected() {\n    var oddVertex = 0\n    var start = 0\n\n    for (i = 0; i < idCount; i += 1) {\n      if (deg[i] % 2 !== 0) {\n        start = i\n        oddVertex += 1\n      }\n    }\n    return {odd: oddVertex, start: start}\n  }\n\n  var check = options.directed ? checkDirected() : checkUndirected()\n  if (check.odd % 2 !== 0 || check.odd > 2) {\n//    throw Error('the graph does not have an eulerian trail')\n  }\n  dfs(check.start)\n\n  if (trail.length !== options.edges.length + 1) {\n//    throw Error('the graph does not have an eulerian trail')\n  }\n\n  trail.reverse()\n\n  // id to input\n  return trail.map(function (id) {\n    return idReverse[id]\n  })\n}\n","import { createSelector } from 'reselect'\nimport { registeredShapes } from '../../common/registeredShapes'\n\nconst getShapes = state => state.shapes\nconst getTransforms = state => state.transforms\nconst getCurrentShapeId = state => state.shapes.currentId\n\nexport const getShapesSelector = createSelector(\n  [ getShapes ],\n  shapes => shapes.allIds.map(id => shapes.byId[id])\n)\nexport const getCurrentShapeSelector = createSelector(\n  [ getCurrentShapeId, getShapes ],\n  (id, shapes) => shapes.byId[id]\n)\n\nexport const getCurrentTransformSelector = createSelector(\n  [ getCurrentShapeId, getTransforms ],\n  (id, transforms) => transforms.byId[id]\n)\n\nexport const getShape = (shape) => {\n  return registeredShapes[shape.type]\n}\n\nexport const getShapeById = (id) => {\n  return registeredShapes[id]\n}\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  updateTransform,\n  toggleGrow\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../shapes/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.growEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onGrow: () => {\n      dispatch(toggleGrow({id: id}))\n    },\n  }\n}\n\nclass ScaleTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={`${activeClassName} overflow-auto`}>\n          <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onGrow}>\n            <h3>Scale</h3>\n            Grows or shrinks the shape\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={0}>\n            <Card.Body>\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"growValue\"\n                optionKey=\"growValue\"\n                index={0}\n                model={this.props.transform} />\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ScaleTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  toggleSpin,\n  updateTransform,\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../shapes/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.spinEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onSpin: () => {\n      dispatch(toggleSpin({id: id}))\n    },\n  }\n}\n\nclass RotationTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={`${activeClassName} overflow-auto`}>\n          <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onSpin}>\n            <h3>Spin</h3>\n            Spins the shape\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={0}>\n            <Card.Body>\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"spinValue\"\n                optionKey=\"spinValue\"\n                index={0}\n                model={this.props.transform} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"spinSwitchbacks\"\n                optionKey=\"spinSwitchbacks\"\n                index={0}\n                model={this.props.transform} />\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RotationTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  toggleTrack,\n  toggleTrackGrow,\n  updateTransform\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../shapes/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.trackEnabled,\n    activeGrow: transform.trackGrowEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onTrack: () => {\n      dispatch(toggleTrack({id: id}))\n    },\n    onTrackGrow: () => {\n      dispatch(toggleTrackGrow({id: id}))\n    },\n  }\n}\n\nclass TrackTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n    const activeGrowClassName = this.props.activeGrow ? 'active' : ''\n    const activeGrowKey = this.props.activeGrow ? 0 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={activeClassName}>\n          <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onTrack}>\n            <h3>Track</h3>\n            Moves the shape along a track (shown in green)\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={0}>\n            <Card.Body>\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackValue\"\n                optionKey=\"trackValue\"\n                index={0}\n                model={this.props.transform} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackLength\"\n                optionKey=\"trackLength\"\n                index={0}\n                step={0.05}\n                model={this.props.transform} />\n\n              <Accordion defaultActiveKey={activeGrowKey} className=\"mt-3\">\n                <Card className={activeGrowClassName}>\n                  <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onTrackGrow}>\n                    <h3>Scale track</h3>\n                    Grows or shrinks the track\n                  </Accordion.Toggle>\n\n                  <Accordion.Collapse eventKey={0}>\n                    <Card.Body>\n                      <InputOption\n                        onChange={this.props.onChange}\n                        options={this.props.options}\n                        key=\"trackGrow\"\n                        optionKey=\"trackGrow\"\n                        index={0}\n                        model={this.props.transform} />\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              </Accordion>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TrackTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  updateTransform,\n  toggleRepeat\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../shapes/Transform'\nimport ScaleTransform from './ScaleTransform'\nimport RotationTransform from './RotationTransform'\nimport TrackTransform from './TrackTransform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.repeatEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onRepeat: () => {\n      dispatch(toggleRepeat({id: id}))\n    },\n  }\n}\n\nclass Transforms extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n\n    return (\n      <div className=\"transforms\">\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"offsetX\"\n          optionKey=\"offsetX\"\n          index={0}\n          model={this.props.transform} />\n\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"offsetY\"\n          optionKey=\"offsetY\"\n          index={0}\n          model={this.props.transform} />\n\n        <Accordion className=\"mt-3\" defaultActiveKey={activeKey} activeKey={activeKey}>\n          <Card className={activeClassName}>\n            <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onRepeat}>\n              <h3>Loop and transform</h3>\n              Draws the shape multiple times, transforming it each time.\n            </Accordion.Toggle>\n\n            <Accordion.Collapse eventKey={0}>\n              <Card.Body>\n                <InputOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  key=\"numLoops\"\n                  optionKey=\"numLoops\"\n                  index={0}\n                  model={this.props.transform} />\n\n                  <Accordion className=\"mt-3\">\n                    <ScaleTransform id={this.props.transform.id} />\n                    <RotationTransform id={this.props.transform.id} />\n                    <TrackTransform id={this.props.transform.id} />\n                  </Accordion>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transforms)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Button,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport DropdownOption from '../../components/DropdownOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport Transforms from '../transforms/Transforms'\nimport { updateShape } from './shapesSlice'\nimport { updateTransform } from '../transforms/transformsSlice'\nimport {\n  getShape,\n  getShapeById,\n  getCurrentShapeSelector\n} from './selectors'\nimport Transform from '../../shapes/Transform'\nimport './Shape.css'\n\nconst mapStateToProps = (state, ownProps) => {\n  const shape = getCurrentShapeSelector(state)\n  const metashape = getShape(shape)\n\n  return {\n    shape: shape,\n    options: metashape.getOptions(),\n    link: metashape.link\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n  const metashape = getShapeById(id)\n  const metatransform = new Transform()\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateShape(attrs))\n    },\n    onRestoreDefaults: (event) => {\n      let attrs = metashape.getInitialState()\n      attrs.id = id\n\n      let tAttrs = metatransform.getInitialState()\n      tAttrs.id = id\n      tAttrs.repeatEnabled = attrs.repeatEnabled\n      dispatch(updateShape(attrs))\n      dispatch(updateTransform(tAttrs))\n    }\n  }\n}\n\nclass Shape extends Component {\n  render() {\n    const optionsRender = Object.keys(this.props.options).map((key, index) => {\n      const option = this.props.options[key]\n\n      if (option.type === 'dropdown') {\n        return  <DropdownOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.shape} />\n      } else if (option.type === 'checkbox') {\n        return <CheckboxOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.shape} />\n      } else {\n        return  <InputOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.shape} />\n      }\n    })\n\n    let optionsListRender = undefined\n    if (Object.entries(this.props.options).length > 0) {\n      const linkRender = this.props.link ? <p className=\"mb-3\">See <a target=\"_blank\" rel=\"noopener noreferrer\" href={this.props.link}>{this.props.link}</a> for ideas.</p> : undefined\n\n      optionsListRender =\n        <div className=\"shape-options\">\n          {linkRender}\n          {optionsRender}\n        </div>\n    }\n\n    return (\n      <div className=\"pt-1\">\n        <div className=\"d-flex align-items-center pt-1 pb-3\">\n          <Button variant=\"outline-primary\" size=\"sm\" onClick={this.props.onRestoreDefaults}>Restore defaults</Button>\n        </div>\n        { optionsListRender }\n        { this.props.shape.canTransform && <Transforms id={this.props.shape.id} />}\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Shape)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  Card\n} from 'react-bootstrap'\nimport Select from 'react-select'\n\nimport {\n  setCurrentShape,\n} from '../shapes/shapesSlice'\nimport Shape from './Shape'\nimport {\n  getShapesSelector,\n  getCurrentShapeSelector\n} from './selectors'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    currentShape: getCurrentShapeSelector(state),\n    shapes: getShapesSelector(state)\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    setCurrentShape: (selected) => {\n      dispatch(setCurrentShape(selected.value))\n    },\n  }\n}\n\nconst customStyles = {\n  control: base => ({\n    ...base,\n    height: 55,\n    minHeight: 55\n  })\n}\n\nclass ShapeList extends Component {\n  render() {\n    const groupOptions = []\n    for (const shape of this.props.shapes) {\n      const optionLabel = { value: shape.id, label: shape.name }\n      var found = false\n      for (const group of groupOptions) {\n        if (group.label === shape.selectGroup) {\n          found = true\n          group.options.push(optionLabel)\n        }\n      }\n      if (!found) {\n        const newOptions = [ optionLabel ]\n        groupOptions.push( { label: shape.selectGroup, options: newOptions } )\n      }\n    }\n\n    const selectedOption = {\n      value: this.props.currentShape.id,\n      label: this.props.currentShape.name\n    }\n\n    return (\n      <div>\n        <Card className=\"p-3 border-0\">\n          <Select\n            value={selectedOption}\n            onChange={this.props.setCurrentShape}\n            styles={customStyles}\n            maxMenuHeight={305}\n            options={groupOptions} />\n\n          <Shape key={this.props.currentShape.id} id={this.props.currentShape.id} />\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShapeList)\n","import { createSlice } from \"@reduxjs/toolkit\"\n\nconst fileSlice = createSlice({\n  name: 'theta rho file',\n  initialState: {\n    name: \"\",\n    comments: [],\n    vertices: [],\n    zoom: 100,\n    aspectRatio: false,\n  },\n  reducers: {\n    setFileVertices(state, action) {\n      state.vertices = action.payload\n    },\n    setFileName(state, action) {\n      state.name = action.payload\n    },\n    setFileComments(state, action) {\n      state.comments = action.payload\n    },\n    setFileZoom(state, action) {\n      state.zoom = action.payload\n    },\n    toggleFileAspectRatio(state, action) {\n      state.aspectRatio = !state.aspectRatio\n    },\n  }\n})\n\nexport const {\n  setFileVertices,\n  setFileName,\n  setFileComments,\n  setFileZoom,\n  toggleFileAspectRatio\n} = fileSlice.actions\n\nexport default fileSlice.reducer\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Card,\n    Col,\n    Form,\n    Row,\n} from 'react-bootstrap'\nimport {\n  setFileName,\n  setFileComments,\n  setFileVertices,\n  setFileZoom,\n  toggleFileAspectRatio\n} from './fileSlice'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    name: state.file.name,\n    comments: state.file.comments,\n    vertices: state.file.vertices,\n    zoom: state.file.zoom,\n    aspectRatio: state.file.aspectRatio,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  var convertToXY = (thetaRhos) => {\n    var vertices = []\n    var previous = undefined\n    var max_angle = Math.PI / 64.0\n    for (let ii = 0; ii < thetaRhos.length; ii++) {\n      var next = thetaRhos[ii]\n      if (previous) {\n        if (Math.abs(next[0] - previous[0]) < max_angle) {\n          // These sin, cos elements are inverted. I'm not sure why\n          vertices.push({\n                        x: previous[1] * Math.sin(previous[0]),\n                        y: previous[1] * Math.cos(previous[0]),\n                        f: 1000,\n          })\n        } else {\n          // We need to do some interpolating.\n          let deltaAngle = next[0] - previous[0]\n          let rhoStep = max_angle / Math.abs(deltaAngle) * (next[1] - previous[1])\n          var rho = previous[1]\n          if (deltaAngle > 0.0) {\n            var emergency_break = 0\n            for (let angle = previous[0]; angle < next[0]; angle += max_angle, rho += rhoStep) {\n              vertices.push({\n                            x: rho * Math.sin(angle),\n                            y: rho * Math.cos(angle),\n                            f: 1000,\n              })\n              if (emergency_break++ > 100000) {\n                break\n              }\n            }\n          } else {\n            for (let angle = previous[0]; angle > next[0]; angle -= max_angle, rho += rhoStep) {\n              vertices.push({\n                            x: rho * Math.sin(angle),\n                            y: rho * Math.cos(angle),\n                            f: 1000,\n              })\n              if (emergency_break++ > 100000) {\n                break\n              }\n            }\n          }\n        }\n      }\n      previous = next\n    }\n    return vertices\n  }\n\n  var parseThrFile = (file) => {\n    var rv = {}\n    rv.comments = []\n    rv.vertices = []\n\n    var reader = new FileReader()\n\n    reader.onload = (event) => {\n      var text = reader.result\n      var lines = text.split('\\n')\n      var has_vertex = false\n      for (let ii = 0; ii < lines.length; ii++) {\n        var line = lines[ii].trim()\n        if (line.length === 0) {\n          // blank lines\n          continue\n        }\n        if (line.indexOf(\"#\") === 0 && !has_vertex) {\n          rv.comments.push(lines[ii])\n        }\n\n        if (line.indexOf(\"#\") !== 0) {\n          has_vertex = true\n          // This is a point, let's try to read it.\n          var pointStrings = line.split(/\\s+/)\n          if (pointStrings.length !== 2) {\n            // AAAH\n            console.log(pointStrings)\n            continue\n          }\n          rv.vertices.push([parseFloat(pointStrings[0]), parseFloat(pointStrings[1])])\n        }\n      }\n\n      dispatch(setFileComments(rv.comments))\n      dispatch(setFileVertices(convertToXY(rv.vertices)))\n    }\n\n    reader.readAsText(file)\n  }\n\n  return {\n    setVertices: (event: any) => {\n      var file = event.target.files[0]\n      dispatch(setFileName(file.name))\n      parseThrFile(file)\n    },\n    setZoom: (event) => {\n      dispatch(setFileZoom(parseFloat(event.target.value)))\n    },\n    toggleAspectRatio: (event) => {\n      dispatch(toggleFileAspectRatio())\n    },\n  }\n}\n\nclass ThetaRho extends Component {\n  render() {\n    var aspectRatioActive = this.props.aspectRatio ? 'active' : ''\n    var commentsRender = this.props.comments.map((comment) => {\n      return <span>{comment}<br/></span>\n    })\n\n    return (\n      <div className=\"theta-rho\">\n        <Card className=\"p-3\">\n          <Accordion className=\"mb-4\">\n            <Card>\n              <Card.Header as={Form.Label} htmlFor=\"fileUpload\" style={{ cursor: \"pointer\" }}>\n                <h3>Import</h3>\n                Imports a Sisyphus-style theta rho (.thr) file into Sandify\n                <Form.Control\n                    id=\"fileUpload\"\n                    type=\"file\"\n                    accept=\".thr\"\n                    onChange={this.props.setVertices}\n                    style={{ display: \"none\" }} />\n              </Card.Header>\n            </Card>\n          </Accordion>\n\n          <div className=\"mb-4\">\n            Name: {this.props.name} <br />\n            Comments:\n            <div className=\"ml-3\">\n              { commentsRender }\n            </div>\n            Number of points: {this.props.vertices.length }\n          </div>\n\n          <Accordion>\n            <Card className={`${aspectRatioActive} overflow-auto`}>\n              <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.toggleAspectRatio}>\n                <h3>Keep aspect ratio</h3>\n                Keeps original aspect ratio\n              </Accordion.Toggle>\n            </Card>\n          </Accordion>\n\n          <Row className=\"align-items-center pt-3\">\n            <Col sm={4}>\n              <Form.Label htmlFor=\"thr-zoom\">\n                Zoom\n              </Form.Label>\n            </Col>\n            <Col sm={8}>\n              <Form.Control type=\"number\" value={this.props.zoom} onChange={this.props.setZoom} />\n            </Col>\n          </Row>\n        </Card>\n\n        <div className=\"p-4\">\n          <h3>Where to get .thr files</h3>\n          <ul className=\"list-unstyled\">\n            <li><a href=\"https://reddit.com/u/markyland\">Markyland on Reddit</a></li>\n            <li><a href=\"https://github.com/Dithermaster/sisyphus/\">Dithermaster's github</a></li>\n            <li><a href=\"https://github.com/SlightlyLoony/JSisyphus\">JSisyphus by Slightly Loony</a></li>\n            <li><a href=\"https://reddit.com/r/SisyphusIndustries\">Sisyphus on Reddit</a></li>\n            <li><a href=\"https://sisyphus-industries.com/community/community-tracks\">Sisyphus Community</a></li>\n            <li><a href=\"http://thejuggler.net/sisyphus/\">The Juggler</a></li>\n          </ul>\n\n          <h4 className=\"mt-3\">Note about copyrights</h4>\n          <p>Be careful and respectful. Understand that the original author put their labor, intensity, and ideas into this art. The creators have a right to own it (and they have a copyright, even if it doesn't say so).</p>\n          <p>If you don't have permisson (a license) to use their art, then you shouldn't be. If you do have permission to use their art, then you should be thankful, and I'm sure they would appreciate you sending them a note of thanks. A picture of your table creating their shared art would probably make them smile.</p>\n          <p>Someone posting the .thr file to a forum or subreddit probably wants it to be shared, and drawing it on your home table is probably OK. Just be careful if you want to use them for something significant without explicit permission.</p>\n          <p>I am not a lawyer.</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ThetaRho)\n","import { createSlice } from \"@reduxjs/toolkit\"\n\n// accommodate old and new local storage keys\nconst localMinX = parseFloat(localStorage.getItem('minX') || localStorage.getItem('machine_min_x'))\nconst localMaxX = parseFloat(localStorage.getItem('maxX') || localStorage.getItem('machine_max_x'))\nconst localMinY = parseFloat(localStorage.getItem('minY') || localStorage.getItem('machine_min_y'))\nconst localMaxY = parseFloat(localStorage.getItem('maxY') || localStorage.getItem('machine_max_y'))\nconst localMaxRadius = parseFloat(localStorage.getItem('maxRadius') || localStorage.getItem('machine_radius'))\n\nconst machineSlice = createSlice({\n  name: 'machine',\n  initialState: {\n    rectangular: undefined !== localStorage.getItem('machine_rect_active') ? localStorage.getItem('machine_rect_active') < 2 : true,\n    rectExpanded: false,\n    polarExpanded: false,\n    minX: localMinX || 0,\n    maxX: localMaxX || 500,\n    minY: localMinY || 0,\n    maxY: localMaxY || 500,\n    maxRadius: localMaxRadius || 250,\n    rectOrigin: [],\n    polarStartPoint: 'none',\n    polarEndPoint: 'none',\n    canvasWidth: 600,\n    canvasHeight: 600,\n    sliderValue: 0.0\n  },\n  reducers: {\n    updateMachine(state, action) {\n      Object.assign(state, action.payload)\n      Object.keys(action.payload).forEach(key => {\n        localStorage.setItem(key, action.payload[key])\n      })\n    },\n    toggleMachineRectExpanded(state, action) {\n      state.rectangular = true\n      state.rectExpanded = !state.rectExpanded\n      state.polarExpanded = false\n      localStorage.setItem('machine_rect_active', 1)\n    },\n    toggleMachinePolarExpanded(state, action) {\n      state.rectangular = false\n      state.rectExpanded = false\n      state.polarExpanded = !state.polarExpanded\n      localStorage.setItem('machine_rect_active', 2)\n    },\n    setMachineRectOrigin(state, action) {\n      let newValue = []\n      let value = action.payload\n\n      for (let i = 0; i < value.length ; i++) {\n        if (!state.rectOrigin.includes(value[i])) {\n          newValue.push(value[i])\n          break\n        }\n      }\n      state.rectOrigin = newValue\n    },\n    setMachineSize(state, action) {\n      state.canvasHeight = action.payload\n      state.canvasWidth = action.payload\n    },\n  }\n})\n\nexport const {\n  updateMachine,\n  toggleMachineRectExpanded,\n  toggleMachinePolarExpanded,\n  setMachineRectOrigin,\n  setMachineSize\n} = machineSlice.actions\n\nexport default machineSlice.reducer\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Card,\n    Col,\n    Form,\n    FormControl,\n    Row,\n    ToggleButton,\n    ToggleButtonGroup,\n} from 'react-bootstrap'\nimport {\n  updateMachine,\n  toggleMachineRectExpanded,\n  setMachineRectOrigin } from './machineSlice'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    expanded: state.machine.rectExpanded,\n    active:   state.machine.rectangular,\n    minX:    state.machine.minX,\n    maxX:    state.machine.maxX,\n    minY:    state.machine.minY,\n    maxY:    state.machine.maxY,\n    origin:   state.machine.rectOrigin,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    activeCallback: (event) => {\n      dispatch(toggleMachineRectExpanded())\n    },\n    onMinXChange: (event) => {\n      dispatch(updateMachine({minX: parseFloat(event.target.value)}))\n    },\n    onMaxXChange: (event) => {\n      dispatch(updateMachine({maxX: parseFloat(event.target.value)}))\n    },\n    onMinYChange: (event) => {\n      dispatch(updateMachine({minY: parseFloat(event.target.value)}))\n    },\n    onMaxYChange: (event) => {\n      dispatch(updateMachine({maxY: parseFloat(event.target.value)}))\n    },\n    onOriginChange: (value) => {\n      dispatch(setMachineRectOrigin(value))\n    },\n  }\n}\n\nclass RectSettings extends Component {\n  render() {\n    var activeClassName = this.props.active ? 'active' : ''\n\n    return (\n      <Card className={`${activeClassName} overflow-auto`}>\n        <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.activeCallback}>\n          <h3>Rectangular machine</h3>\n          Rectangular machines like Zen XY\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey={0}>\n          <Card.Body>\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={4}>\n                <Form.Label htmlFor=\"minX\">\n                  Min X (mm)\n                </Form.Label>\n              </Col>\n\n              <Col sm={8}>\n                <FormControl id=\"minX\" type=\"number\" value={this.props.minX} onChange={this.props.onMinXChange} />\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={4}>\n                <Form.Label htmlFor=\"maxX\">\n                  Max X (mm)\n                </Form.Label>\n              </Col>\n\n              <Col sm={8}>\n                <FormControl id=\"maxX\" type=\"number\" value={this.props.maxX} onChange={this.props.onMaxXChange} />\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={4}>\n                <Form.Label htmlFor=\"minY\">\n                  Min Y (mm)\n                </Form.Label>\n              </Col>\n\n              <Col sm={8}>\n                <FormControl id=\"minY\" type=\"number\" value={this.props.minY} onChange={this.props.onMinYChange} />\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={4}>\n                <Form.Label htmlFor=\"maxY\">\n                  Max Y (mm)\n                </Form.Label>\n              </Col>\n\n              <Col sm={8}>\n                <FormControl id=\"maxY\" type=\"number\" value={this.props.maxY} onChange={this.props.onMaxYChange} />\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={4}>\n                <Form.Label htmlFor=\"origin\">\n                  Force origin\n                </Form.Label>\n              </Col>\n\n              <Col sm={8}>\n                <ToggleButtonGroup id=\"origin-bar\" type=\"checkbox\" name=\"origin\" value={this.props.origin} onChange={this.props.onOriginChange}>\n                  <ToggleButton variant=\"light\" value={0} >Lower Left</ToggleButton>\n                  <ToggleButton variant=\"light\" value={1} >Upper Left</ToggleButton>\n                  <ToggleButton variant=\"light\" value={2} >Upper Right</ToggleButton>\n                  <ToggleButton variant=\"light\" value={3} >Lower Right</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RectSettings)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Col,\n    Row,\n    Form,\n    Card,\n    ToggleButton,\n    ToggleButtonGroup\n} from 'react-bootstrap'\nimport {\n  toggleMachinePolarExpanded,\n  updateMachine\n} from './machineSlice'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    expanded:   state.machine.polarExpanded,\n    active:     !state.machine.rectangular,\n    maxRadius: state.machine.maxRadius,\n    startPoint: state.machine.polarStartPoint,\n    endPoint: state.machine.polarEndPoint\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    activeCallback: (event) => {\n      dispatch(toggleMachinePolarExpanded())\n    },\n    onMaxRadiusChange: (event) => {\n      dispatch(updateMachine({maxRadius: parseFloat(event.target.value)}))\n    },\n    onStartPointChange: (value) => {\n      dispatch(updateMachine({polarStartPoint: value}))\n    },\n    onEndPointChange: (value) => {\n      dispatch(updateMachine({polarEndPoint: value}))\n    }\n  }\n}\n\nclass PolarSettings extends Component {\n  render() {\n    var activeClassName = this.props.active ? 'active' : ''\n\n    return (\n      <Card className={`${activeClassName} overflow-auto`}>\n        <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.activeCallback}>\n          <h3>Polar machine</h3>\n          Polar machines like Sisyphus\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey={1}>\n          <Card.Body>\n            <Row className=\"align-items-center pb-1\">\n              <Col sm={4}>\n                <Form.Label htmlFor=\"maxRadius\">\n                  Max radius (mm)\n                </Form.Label>\n              </Col>\n              <Col sm={8}>\n                <Form.Control id=\"maxRadius\" type=\"number\" value={this.props.maxRadius} onChange={this.props.onMaxRadiusChange} />\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={4}>\n                <Form.Label htmlFor=\"forceStart\">\n                  Start point\n                </Form.Label>\n              </Col>\n\n              <Col sm={8}>\n                <ToggleButtonGroup id=\"startPoint\" type=\"radio\" name=\"startPoint\" value={this.props.startPoint} onChange={this.props.onStartPointChange}>\n                  <ToggleButton variant=\"light\" value=\"none\">none</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"center\">center</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"perimeter\">perimeter</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={4}>\n                <Form.Label htmlFor=\"endPoint\">\n                  End point\n                </Form.Label>\n              </Col>\n\n              <Col sm={8}>\n                <ToggleButtonGroup id=\"endPoint\" type=\"radio\" name=\"endPoint\" value={this.props.endPoint} onChange={this.props.onEndPointChange}>\n                  <ToggleButton variant=\"light\" value=\"none\">none</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"center\">center</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"perimeter\">perimeter</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PolarSettings)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion\n} from 'react-bootstrap'\nimport RectSettings from './RectSettings'\nimport PolarSettings from './PolarSettings'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    rectangular: state.machine.rectangular,\n  }\n}\n\nclass MachineSettings extends Component {\n  render() {\n    return (\n      <div className=\"p-3\">\n        <Accordion defaultActiveKey={this.props.rectangular ? 0 : 1}>\n          <RectSettings />\n          <PolarSettings />\n        </Accordion>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, null)(MachineSettings)\n","import React, { Component } from 'react'\n\nclass Footer extends Component {\n  render () {\n    return (\n      <footer className=\"p-4\">\n        <div>\n          <h2>About</h2>\n          <p>Sandify turns your cold, empty-hearted, emotionless sand tables into cold, empty-hearted, emotionless sand table robots with enchanting patterns.</p>\n          <p>\n            Sandify is a labor of love, but if you'd like to support me financially,\n            I do have a <a href=\"https://github.com/sponsors/jeffeb3\">Donation system set up <b>with github matching donations</b></a>. Or just <a href=\"https://www.paypal.me/jeffeb3\">PayPal</a>.\n          </p>\n        </div>\n\n        <div>\n          <h2>Sand Machine</h2>\n          <p>Anything that uses gcode can be used with Sandify. But the machine this was designed for is the ZenXY from V1Engineering.com.</p>\n          <p>\n            <a href=\"https://docs.v1engineering.com/zenxy/\">ZenXY on V1Engineering.com</a>\n            <br />\n            <a href=\"https://www.thingiverse.com/thing:2477901\">ZenXY Thingiverse Page</a>\n          </p>\n          <p>\n            ZenXY was inspired by the awesome Sisyphus kinetic art table by <a href=\"https://sisyphus-industries.com/\">Sisyphus Industries</a>, which is also now supported.\n          </p>\n          <p>\n            Sandify was created by users in the\n            <a href=\"https://forum.v1engineering.com/t/does-this-count-as-a-build/6037\"> V1Engineering.com forum</a>.\n          </p>\n        </div>\n\n        <div>\n          <h2>Github</h2>\n          <p>Sandify is hosted on Github <a href=\"https://github.com/jeffeb3/sandify\">here</a>. Please post any problems, feature requests or comments in our <a href=\"https://github.com/jeffeb3/sandify/issues\">issue tracker</a>.</p>\n          <p>Sandify is a community project. We want and need developers. <a href=\"https://github.com/jeffeb3/sandify/wiki#developer-info\">Help Sandify</a>.</p>\n        </div>\n\n        <div>\n          <h2>License</h2>\n          <p>\n            Sandify is licensed under the MIT license.\n          </p>\n          <p>\n            Patterns that you create and gcode generated with Sandify are not covered\n            under the Sandify license. They are your work and your copyright. Read our <a href=\"https://raw.githubusercontent.com/jeffeb3/sandify/master/LICENSE\">license</a>.\n          </p>\n        </div>\n      </footer>\n    )\n  }\n}\n\nexport default Footer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    sandifyVersion: '0.2.0', // Also change the version in package.json.\n    input: 'shape',\n  },\n  reducers: {\n    chooseInput(state, action) {\n      state.input = action.payload\n    },\n  }\n})\n\nexport const {\n  chooseInput\n} = appSlice.actions\n\nexport default appSlice.reducer\n","import React, { Component } from 'react'\nimport {\n    Tab,\n    Tabs,\n} from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport ShapeList from '../shapes/ShapeList'\nimport ThetaRho from '../theta_rho/ThetaRho'\nimport MachineSettings from '../machine/MachineSettings'\nimport Footer from './Footer'\nimport { chooseInput } from '../app/appSlice'\n\nclass InputTabs extends Component {\n  handleSelect(key) {\n    this.props.dispatch(chooseInput(key))\n  }\n\n  render() {\n    return (\n       <Tabs defaultActiveKey=\"shapes\" onSelect={this.handleSelect.bind(this)} id=\"input-tabs\">\n         <Tab eventKey=\"shapes\" title=\"Shapes\" className=\"full-page-tab\">\n           <ShapeList />\n         </Tab>\n\n         <Tab eventKey=\"machine\" title=\"Machine\" className=\"full-page-tab\">\n           <MachineSettings />\n         </Tab>\n\n         <Tab eventKey=\"code\" title=\"Import\" className=\"full-page-tab\">\n           <ThetaRho />\n         </Tab>\n\n         <Tab eventKey=\"about\" title=\"About\" className=\"full-page-tab\">\n           <Footer />\n         </Tab>\n       </Tabs>\n    )\n  }\n}\n\nexport default connect()(InputTabs)\n","import { Vertex } from './Geometry'\nimport Victor from 'victor'\n\n// Determines which of 8 neighbor areas the point is in:\n//   https://stackoverflow.com/questions/3746274/line-intersection-with-aabb-rectangle\n//\n//           |          |\n//   0b1001  |  0b0001  |  0b0101\n//           |          |\n// ------------------------------ y_max\n//           |          |\n//   0b1000  |  0b0000  |  0b0100\n//           |          |\n// ------------------------------ y_min\n//           |          |\n//   0b1010  |  0b0010  |  0b0110\n//           |          |\n//         x_min      x_max\n//\nfunction pointLocation(point, size_x, size_y) {\n  var location = 0b0\n  if (point.x < -size_x) {\n    location += 0b1000\n  } else if (point.x > size_x) {\n    location += 0b0100\n  }\n\n  if (point.y < -size_y) {\n    location += 0b0001\n  } else if (point.y > size_y) {\n    location += 0b0010\n  }\n\n  return location\n}\n\n// Determine intersection with one of the sides\nfunction intersection(line_start, line_end, side_start, side_end) {\n  var line = line_end.clone().subtract(line_start)\n  var side = side_end.clone().subtract(side_start)\n  var lineCrossSidePerp = line.x * side.y - line.y * side.x\n\n  // if line Cross side === 0, it means the lines are parallel so have infinite intersection points\n  if (lineCrossSidePerp === 0) {\n    return null\n  }\n\n  var diff = side_start.clone().subtract(line_start)\n  var t = (diff.x * side.y - diff.y * side.x) / lineCrossSidePerp\n  if (t < 0 || t >= 1) {\n    return null\n  }\n\n  var u = (diff.x * line.y - diff.y * line.x) / lineCrossSidePerp\n  if (u < 0 || u >= 1) {\n    return null\n  }\n\n  var intersection = line_start.clone().add(line.clone().multiply(Victor(t, t)))\n  return intersection\n}\n\n// This method is the guts of logic for this limits enforcer. It will take a single line (defined by\n// start and end) and if the line goes out of bounds, returns the vertices around the outside edge\n// to follow around without messing up the shape of the vertices.\n//\nfunction clipLine(line_start, line_end, size_x, size_y) {\n  var quadrant_start = pointLocation(line_start, size_x, size_y)\n  var quadrant_end = pointLocation(line_end, size_x, size_y)\n\n  if (quadrant_start === 0b0000 && quadrant_end === 0b0000) {\n    // The line is inside the boundaries\n    return [line_start, line_end]\n  }\n\n  if (quadrant_start === quadrant_end) {\n    // We are in the same box, and we are out of bounds.\n    return [nearestVertex(line_start, size_x, size_y), nearestVertex(line_end, size_x, size_y)]\n  }\n\n  if (quadrant_start & quadrant_end) {\n    // These points are all on one side of the box.\n    return [nearestVertex(line_start, size_x, size_y), nearestVertex(line_end, size_x, size_y)]\n  }\n\n  if (quadrant_start === 0b000) {\n    // We are exiting the box. Return the start, the intersection with the boundary, and the closest\n    // boundary point to the exited point.\n    var line = [line_start]\n    line.push(boundPoint(line_start, line_end, size_x, size_y))\n    line.push(nearestVertex(line_end, size_x, size_y))\n    return line\n  }\n\n  if (quadrant_end === 0b000) {\n    // We are re-entering the box.\n    return [boundPoint(line_end, line_start, size_x, size_y), line_end]\n  }\n\n  // We have reached a terrible place, where both points are oob, but it might intersect with the\n  // work area.\n\n  // First, define the boundaries as lines.\n  const sides = [\n    // left\n    [Victor(-size_x, -size_y), Victor(-size_x, size_y)],\n    // right\n    [Victor(size_x, -size_y), Victor(size_x, size_y)],\n    // bottom\n    [Victor(-size_x, -size_y), Victor(size_x, -size_y)],\n    // top\n    [Victor(-size_x, size_y), Victor(size_x, size_y)],\n  ]\n\n  // Count up the number of boundary lines intersect with our line segment.\n  var intersections = []\n  for (var s=0; s<sides.length; s++) {\n    var int_point = intersection(Victor.fromObject(line_start),\n                                 Victor.fromObject(line_end),\n                                 sides[s][0],\n                                 sides[s][1])\n    if (int_point) {\n      intersections.push(Vertex(int_point.x, int_point.y))\n    }\n  }\n\n  if (intersections.length !== 0) {\n    if (intersections.length !== 2) {\n      // We should never get here. How would we have something other than 2 or 0 intersections with\n      // a box?\n      console.log(intersections)\n      throw Error(\"Software Geometry Error\")\n    }\n\n    // The intersections are tested in some normal order, but the line could be going through them\n    // in any direction. This check will flip the intersections if they are reversed somehow.\n    if (Victor.fromObject(intersections[0]).subtract(Victor.fromObject(line_start)).lengthSq() >\n        Victor.fromObject(intersections[1]).subtract(Victor.fromObject(line_start)).lengthSq()) {\n      var temp = intersections[0]\n      intersections[0] = intersections[1]\n      intersections[1] = temp\n    }\n    return [...intersections, nearestVertex(line_end, size_x, size_y)]\n  }\n\n  // Damn. We got here because we have a start and end that are failing different boundary checks,\n  // and the line segment doesn't intersect the box. We have to crawl around the outside of the\n  // box until we reach the other point.\n  //\n  // Here, I'm going to split this line into two parts, and send each half line segment back\n  // through the clipLine algorithm. Eventually, that should result in only one of the other cases.\n  var midpoint = Victor.fromObject(line_start).add(Victor.fromObject(line_end)).multiply(Victor(0.5, 0.5))\n  // recurse, and find smaller segments until we don't end up in this place again.\n  return [...clipLine(line_start, midpoint, size_x, size_y),\n          ...clipLine(midpoint,   line_end, size_x, size_y)]\n}\n\n// Finds the nearest vertex that is in the bounds. This will change the shape. i.e. this doesn't\n// care about the line segment, only about the point.\nfunction nearestVertex(vertex, size_x, size_y) {\n  return Vertex(Math.min(size_x, Math.max(-size_x, vertex.x)),\n                Math.min(size_y, Math.max(-size_y, vertex.y)))\n}\n\n// Intersect the line with the boundary, and return the point exactly on the boundary.\n// This will keep the shape. i.e. It will follow the line segment, and return the point on that line\n// segment.\nfunction boundPoint(good, bad, size_x, size_y) {\n  var dx = good.x - bad.x\n  var dy = good.y - bad.y\n\n  var fixed = Vertex(bad.x, bad.y)\n  var distance = 0\n  if (bad.x < -size_x || bad.x > size_x) {\n    if (bad.x < -size_x) {\n      // we are leaving the left\n      fixed.x = -size_x\n    } else {\n      // we are leaving the right\n      fixed.x = size_x\n    }\n    distance = (fixed.x - good.x) / dx\n    fixed.y = good.y + distance * dy\n    // We fixed x, but y might have the same problem, so we'll rerun this, with different points.\n    return boundPoint(good, fixed, size_x, size_y)\n  }\n  if (bad.y < -size_y || bad.y > size_y) {\n    if (bad.y < -size_y) {\n      // we are leaving the bottom\n      fixed.y = -size_y\n    } else {\n      // we are leaving the top\n      fixed.y = size_y\n    }\n    distance = (fixed.y - good.y) / dy\n    fixed.x = good.x + distance * dx\n  }\n  return fixed\n}\n\n// Returns points along the circle from the start to the end, tracing a circle of radius size.\nfunction traceCircle(start, end, size) {\n  const startAngle = start.angle()\n  const endAngle = end.angle()\n  let resolution = (Math.PI*2.0) / 128.0 // 128 segments per circle. Enough?\n  let deltaAngle = ((endAngle - startAngle) + 2.0 * Math.PI) % (2.0 * Math.PI)\n  if (deltaAngle > Math.PI) {\n    deltaAngle -= 2.0 * Math.PI\n  }\n  if (deltaAngle < 0.0) {\n    resolution *= -1.0\n  }\n\n  var tracePoints = []\n  for (var step = 0; step < (deltaAngle/resolution) ; step++) {\n    tracePoints.push(Victor(size * Math.cos(resolution * step + startAngle),\n                            size * Math.sin(resolution * step + startAngle)))\n  }\n  return tracePoints\n}\n\nfunction onSegment(start, end, point) {\n  if (start.distance(point) + end.distance(point) - start.distance(end) < 0.001) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction getIntersections(start, end, size) {\n  var direction = end.clone().subtract(start).clone().normalize()\n\n  var t = direction.x * -1.0 * start.x + direction.y * -1.0 * start.y\n  var e = direction.clone().multiply(Victor(t,t)).add(start)\n\n  var distanceToLine = e.magnitude()\n\n  if (distanceToLine >= size)\n  {\n    return {\n      intersection: false,\n      points: [],\n    }\n  }\n\n  var dt = Math.sqrt(size*size - distanceToLine*distanceToLine)\n  var point1 = direction.clone().multiply(Victor(t - dt,t - dt)).add(start)\n  var point2 = direction.clone().multiply(Victor(t + dt,t + dt)).add(start)\n\n  return {\n    intersection: true,\n    points: [\n      {\n        point: point1,\n        on: onSegment(start, end, point1),\n      },\n      {\n        point: point2,\n        on: onSegment(start, end, point2),\n      }\n    ]}\n}\n\n// This method is the guts of logic for this limits enforcer. It will take a single line (defined by\n// start and end) and if the line goes out of bounds, returns the vertices around the outside edge\n// to follow around without messing up the shape of the vertices.\n//\nfunction clipLineCircle(line_start, line_end, size) {\n  // Cases:\n  // 1 - Entire line is inside\n  //     return start, end\n  // 2 - Entire line is outside\n  //     trace from start to end\n  // 3 - only start is inside\n  //     find the intersection\n  //     include start\n  //     include intersection\n  //     trace from intersection to closest to end point\n  // 4 - only end is inside\n  //     do reverse of 3\n  // 4 - Neither end is inside, but there is some line segment inside\n  //     find both intersections\n  //     trace from start to first intersction\n  //     trace from second intersection to end\n\n  // Helper objects\n  const start = Victor.fromObject(line_start)\n  const end = Victor.fromObject(line_end)\n\n  // I'll need these\n  const rad_start = start.magnitude()\n  const rad_end = end.magnitude()\n\n  // Check the easy case\n  if (rad_start <= size && rad_end <= size) {\n    // The whole segment is inside\n    return [line_start, line_end]\n  }\n\n  // Check for the odd case of coincident points\n  if (start.distance(end) < 0.00001) {\n     return [nearestVertexCircle(start, size)]\n  }\n\n  var intersections = getIntersections(start, end, size)\n\n  if ( !intersections.intersection )\n  {\n    // The whole line is outside, just trace.\n    return traceCircle(start, end, size)\n  }\n\n  // if neither point is on the segment, then it should just be a trace\n  if (!intersections.points[0].on && ! intersections.points[1].on) {\n    return traceCircle(start, end, size)\n  }\n\n  // If both points are outside, but there's an intersection\n  if (rad_start > size + 1.0e-9 && rad_end > size + 1.0e-9) {\n    let point = intersections.points[0].point\n    let other_point = intersections.points[1].point\n\n    return [\n      ...traceCircle(start, point, size),\n      point,\n      ...traceCircle(other_point, end, size)\n    ]\n  }\n\n  // If we're here, then one point is still in the circle.\n  if (rad_start <= size) {\n    var point1 = (intersections.points[0].on && Math.abs(intersections.points[0].point - start) > 0.0001) ? intersections.points[0].point : intersections.points[1].point\n    return [\n      start,\n      ...traceCircle(point1, end, size),\n      end\n    ]\n  } else {\n    point1 = intersections.points[0].on ? intersections.points[0].point : intersections.points[1].point\n    return [\n      ...traceCircle(start, point1, size),\n      point1,\n      end\n    ]\n  }\n}\n\n// Finds the nearest vertex that is in the bounds of the circle. This will change the shape. i.e. this doesn't\n// care about the line segment, only about the point.\nfunction nearestVertexCircle(vertex, size) {\n  const point = Victor.fromObject(vertex)\n  if ( point.length() > size) {\n    let scale = size / point.length()\n    return point.multiply(Victor(scale, scale))\n  } else {\n    return point\n  }\n}\n\n// Manipulates the points to make them all in bounds, while doing the least amount of damage to the\n// desired shape.\nexport const enforceRectLimits = function(vertices, size_x, size_y) {\n  var cleanVertices = []\n  var previous = null\n\n  if (size_x < 0) {\n    size_x *= -1.0\n  }\n  if (size_y < 0) {\n    size_y *= -1.0\n  }\n  for (var next=0; next<vertices.length; next++) {\n    var vertex = vertices[next]\n    if (previous) {\n      var line = clipLine(previous, vertex, size_x, size_y)\n      for (var pt=0; pt<line.length; pt++) {\n        if (line[pt] !== previous) {\n          cleanVertices.push(line[pt])\n        }\n      }\n    } else {\n      cleanVertices.push(nearestVertex(vertex, size_x, size_y))\n    }\n    previous = vertex\n  }\n\n  // Just for sanity, and cases that I haven't thought of, clean this list again, including removing\n  // duplicate points\n  previous = null\n  var cleanerVertices = []\n  for (var i=0; i<cleanVertices.length; i++) {\n    if (previous) {\n      let start = Victor.fromObject(cleanVertices[i])\n      let end = Victor.fromObject(previous)\n      if (start.distance(end) > 0.001) {\n        cleanerVertices.push(nearestVertex(cleanVertices[i], size_x, size_y))\n      }\n    } else {\n      cleanerVertices.push(nearestVertex(cleanVertices[i], size_x, size_y))\n    }\n    previous = cleanVertices[i]\n  }\n\n  return cleanerVertices\n}\n\nexport const enforcePolarLimits = function(vertices, size) {\n  var cleanVertices = []\n  var previous = null\n\n  for (var next=0; next<vertices.length; next++) {\n    var vertex = vertices[next]\n    if (previous) {\n      var line = clipLineCircle(previous, vertex, size)\n      for (var pt=0; pt<line.length; pt++) {\n        if (line[pt] !== previous) {\n          cleanVertices.push(line[pt])\n        }\n      }\n    } else {\n      cleanVertices.push(nearestVertexCircle(vertex, size))\n    }\n    previous = vertex\n  }\n\n  // Just for sanity, and cases that I haven't thought of, clean this list again, including removing\n  // duplicate points\n  previous = null\n  var cleanerVertices = []\n  for (var i=0; i<cleanVertices.length; i++) {\n    if (previous) {\n      let start = Victor.fromObject(cleanVertices[i])\n      let end = Victor.fromObject(previous)\n      if (start.distance(end) > 0.001) {\n        cleanerVertices.push(nearestVertexCircle(cleanVertices[i], size))\n      }\n    } else {\n      cleanerVertices.push(nearestVertexCircle(cleanVertices[i], size))\n    }\n    previous = cleanVertices[i]\n  }\n  return cleanerVertices\n}\n","import { Vertex } from './Geometry'\nimport {\n  enforceRectLimits,\n  enforcePolarLimits\n} from './LimitEnforcer'\nimport { getShape } from '../features/shapes/selectors'\nimport Victor from 'victor'\n\n// Transform functions\nfunction rotate(vertex, angleDeg) {\n  var angle = Math.PI / 180.0 * angleDeg\n  return Vertex(\n           vertex.x * Math.cos(angle) - vertex.y * Math.sin(angle),\n           vertex.x * Math.sin(angle) + vertex.y * Math.cos(angle),\n           vertex.f)\n}\n\nfunction scale(vertex, scale_perc) {\n  var scale = scale_perc / 100.0\n  return {\n    x: vertex.x * scale,\n    y: vertex.y * scale,\n    f: vertex.f,\n  }\n}\n\nfunction offset(vertex, offsetX, offsetY) {\n  return {\n    x: vertex.x + offsetX,\n    y: vertex.y + offsetY,\n    f: vertex.f,\n  }\n}\n\nfunction track(vertex, data, loop_index) {\n  let angle = data.trackLength * loop_index / 16 * 2.0 * Math.PI\n  let radius = 1.0\n  if (data.trackGrowEnabled) {\n    radius = 1.0 + loop_index / 10.0 * data.trackGrow / 100.0\n  }\n  return {\n    x: vertex.x + radius * data.trackValue * Math.cos(angle),\n    y: vertex.y + radius * data.trackValue * Math.sin(angle),\n    f: vertex.f, // Why do I still have f in here?\n  }\n}\n\nexport const transform = (data, vertex, fraction_index) => {\n  var transformed_vertex = vertex\n\n  if (data.repeatEnabled && data.growEnabled) {\n    transformed_vertex = scale(transformed_vertex, 100.0 + (data.growValue * fraction_index))\n  }\n\n  transformed_vertex = offset(transformed_vertex, data.offsetX || 0, data.offsetY || 0)\n\n  if (data.repeatEnabled && data.spinEnabled) {\n    const loop_period = data.numLoops / (parseInt(data.spinSwitchbacks) + 1)\n    const stage = fraction_index/loop_period\n    const direction = (stage % 2 < 1 ? 1.0 : -1.0)\n    var spin_amount = direction * (fraction_index % loop_period) * data.spinValue\n\n    // Add in the amount it goes positive to the negatives, so they start at the same place.\n    if (direction < 0.0) {\n      spin_amount += loop_period * data.spinValue\n    }\n    transformed_vertex = rotate(transformed_vertex, spin_amount)\n  }\n\n  if (data.repeatEnabled && data.trackEnabled) {\n    transformed_vertex = track(transformed_vertex, data, fraction_index)\n  }\n\n  return transformed_vertex\n}\n\n// Vertex functions\nfunction addRectEndpoints(machine, vertices) {\n  // OK, let's assign corners indices:\n  //\n  // [1]   [2]\n  //\n  //\n  // [0]   [3]\n  const dx = (machine.maxX - machine.minX) / 2.0\n  const dy = (machine.maxY - machine.minY) / 2.0\n  const corners = [\n    {x: -dx, y: -dy},\n    {x: -dx, y:  dy},\n    {x:  dx, y:  dy},\n    {x:  dx, y: -dy}\n  ]\n\n  let first = vertices[0]\n  let last = vertices[vertices.length-1]\n  let maxRadius = Math.sqrt(Math.pow(2.0*dx,2.0) + Math.pow(2.0*dy, 2.0)) / 2.0\n  let vFirst = Victor.fromObject(first)\n  let vLast = Victor.fromObject(last)\n  let outPoint\n  let newVertices = []\n\n  if (vFirst.magnitude() <= vLast.magnitude()) {\n    // It's going outward\n    let scale = maxRadius / vLast.magnitude()\n    outPoint = vLast.multiply(Victor(scale,scale))\n    newVertices.push({ ...last, x: outPoint.x, y: outPoint.y})\n  } else {\n    let scale = maxRadius / vFirst.magnitude()\n    outPoint = vFirst.multiply(Victor(scale,scale))\n    newVertices.push({ ...first, x: outPoint.x, y: outPoint.y})\n  }\n\n  let nextCorner = 1\n  if (outPoint.x >= dx) {\n    // right\n    nextCorner = 2\n  } else if (outPoint.x <= -dx) {\n    // left\n    nextCorner = 0\n  } else if (outPoint.y >= dy) {\n    // up\n    nextCorner = 1\n  } else if (outPoint.y <= -dy) {\n    // down\n    nextCorner = 3\n  } else {\n    console.log(\"Darn!\")\n    nextCorner = 3\n  }\n  // console.log(\"nextCorner: \" + nextCorner)\n  // newVertices.push({ ...first, x: corners[nextCorner].x, y: corners[nextCorner].y})\n\n  while (nextCorner !== machine.rectOrigin[0]) {\n    newVertices.push({ ...first, x: corners[nextCorner].x, y: corners[nextCorner].y})\n    nextCorner -= 1\n    if (nextCorner < 0) {\n      nextCorner = 3\n    }\n  }\n\n  newVertices.push({ ...first, x: corners[nextCorner].x, y: corners[nextCorner].y})\n\n  if (vFirst.magnitude() <= vLast.magnitude()) {\n    // outward\n    vertices = vertices.concat(newVertices)\n  } else {\n    vertices = newVertices.reverse().concat(vertices)\n  }\n\n  return vertices\n}\n\nfunction addPolarEndpoints(machine, vertices) {\n  const maxRadius = machine.maxRadius\n\n  if (machine.polarStartPoint !== 'none') {\n    if (machine.polarStartPoint === 'center') {\n      vertices.unshift(Vertex(0.0, 0.0))\n    } else {\n      const first = Victor.fromObject(vertices[0])\n      const scale = maxRadius / first.magnitude()\n      const startPoint = first.multiply(Victor(scale, scale))\n      vertices.unshift(Vertex(startPoint.x, startPoint.y))\n    }\n  }\n\n  if (machine.polarEndPoint !== 'none') {\n    if (machine.polarEndPoint === 'center') {\n      vertices.push(Vertex(0.0, 0.0))\n    } else {\n      const last = Victor.fromObject(vertices[vertices.length-1])\n      const scale = maxRadius / last.magnitude()\n      const endPoint = last.multiply(Victor(scale, scale))\n      vertices.push(Vertex(endPoint.x, endPoint.y))\n    }\n  }\n\n  return vertices\n}\n\n// ensure vertices do not exceed machine boundary limits, and endpoints as needed\nexport const polishVertices = (state, vertices) => {\n  const machine = state.machine\n\n  if (vertices.length > 0) {\n    if (machine.rectangular) {\n      if (machine.rectOrigin.length === 1) {\n        vertices = addRectEndpoints(machine, vertices)\n      }\n\n      const sizeX = (machine.maxX - machine.minX)/2.0\n      const sizeY = (machine.maxY - machine.minY)/2.0\n      vertices = enforceRectLimits(vertices, sizeX, sizeY)\n    } else {\n      vertices = addPolarEndpoints(machine, vertices)\n      vertices = enforcePolarLimits(vertices, machine.maxRadius)\n    }\n  }\n\n  if (state.gcode.reverse) {\n    vertices.reverse()\n  }\n\n  return vertices\n}\n\nexport const thetaRho = (state) => {\n  let machine = state.machine\n  var x_scale = (machine.maxX - machine.minX)/2.0 * 0.01 * state.file.zoom\n  var y_scale = (machine.maxY - machine.minY)/2.0 * 0.01 * state.file.zoom\n  if (!machine.rectangular) {\n    x_scale = y_scale = machine.maxRadius\n  }\n  x_scale *= 0.01 * state.file.zoom\n  y_scale *= 0.01 * state.file.zoom\n  if (state.file.aspectRatio) {\n    x_scale = y_scale = Math.min(x_scale,y_scale)\n  }\n\n  const newVertices = state.file.vertices.map( (vertex) => {\n    return {...vertex,\n      x: vertex.x * x_scale,\n      y: vertex.y * y_scale,\n    }\n  })\n  return polishVertices(state, newVertices)\n}\n\nexport const transformShapes = (state) => {\n  const shape = getShape(state.shape)\n  let input = []\n\n  if (shape) {\n    input = shape.getVertices(state).map( (vertex) => {\n      return scale(vertex, 100.0 * state.shape.startingSize)\n    })\n  }\n\n  const numLoops = state.transform.repeatEnabled ? state.transform.numLoops : 1\n  let outputVertices = []\n\n  for (var i=0; i<numLoops; i++) {\n    for (var j=0; j<input.length; j++) {\n      const fraction = j/input.length\n      outputVertices.push(transform(state.transform, input[j], i+fraction))\n    }\n  }\n\n  return polishVertices(state, outputVertices)\n}\n","import { createSelector } from 'reselect'\nimport {\n  transformShapes,\n  thetaRho\n} from '../../common/Computer'\n\nconst getApp = state => state.app\nconst getShapes = state => state.shapes\nconst getTransforms = state => state.transforms\nconst getFile = state => state.file\nconst getGCode = state => state.gcode\nconst getMachine = state => state.machine\n\nexport const getVertices = createSelector(\n  [\n      getApp,\n      getShapes,\n      getTransforms,\n      getFile,\n      getGCode,\n      getMachine,\n  ],\n  (app, shapes, transforms, file, gcode, machine) => {\n    let state = {\n      app: app,\n      shapes: shapes,\n      shape: shapes.byId[shapes.currentId],\n      transforms: transforms,\n      transform: transforms.byId[shapes.currentId],\n      file: file,\n      gcode: gcode,\n      machine: machine\n    }\n\n    if (state.app.input === 'shape') {\n      return transformShapes(state)\n    } else if (state.app.input === 'code') {\n      return thetaRho(state)\n    } else {\n      return transformShapes(state)\n    }\n  }\n)\n\nexport const getVerticesStats = createSelector(\n  [\n      getVertices\n  ],\n  (vertices) => {\n    let distance = 0.0\n    var previous = null\n\n    vertices.forEach( (vertex) => {\n      if (previous) {\n        distance += Math.sqrt(Math.pow(vertex.x - previous.x, 2.0) +\n                              Math.pow(vertex.y - previous.y, 2.0))\n      }\n      previous = vertex\n    })\n\n    return {\n      numPoints: vertices.length,\n      distance: Math.floor(distance)\n    }\n  }\n)\n","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport { connect } from 'react-redux'\nimport { Vertex } from '../../common/Geometry'\nimport { setMachineSize } from './machineSlice'\nimport { transform } from '../../common/Computer'\nimport { getVertices } from './selectors'\nimport { createSelector } from 'reselect'\nimport throttle from 'lodash/throttle'\nimport Color from 'color'\n\nconst getTransforms = state => state.transforms\nconst getShapes = state => state.shapes\n\nconst getTrackVertices = createSelector(\n  [\n    getShapes,\n    getTransforms\n  ],\n  (shapes, transforms) => {\n    let currentTransform = transforms.byId[shapes.currentId]\n\n    var numLoops = currentTransform.numLoops\n    var trackVertices = []\n    for (var i=0; i<numLoops; i++) {\n      if (currentTransform.trackEnabled) {\n        trackVertices.push(transform(currentTransform, {x: 0.0, y: 0.0}, i))\n      }\n    }\n    return trackVertices\n  }\n)\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    use_rect: state.machine.rectangular,\n    minX: state.machine.minX,\n    maxX: state.machine.maxX,\n    minY: state.machine.minY,\n    maxY: state.machine.maxY,\n    maxRadius: state.machine.maxRadius,\n    canvasWidth: state.machine.canvasWidth,\n    canvasHeight: state.machine.canvasHeight,\n    vertices: getVertices(state),\n    sliderValue: state.machine.sliderValue,\n    showTrack: state.app.input === 'shape',\n    trackVertices: getTrackVertices(state),\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onResize: (size) => {\n      dispatch(setMachineSize(size))\n    },\n  }\n}\n\n// Contains the preview window, and any parameters for the machine.\nclass PreviewWindow extends Component {\n  componentDidMount() {\n    const canvas = ReactDOM.findDOMNode(this)\n    const context = canvas.getContext('2d')\n    const bigBox = document.getElementById(\"preview-wrapper\")\n\n    this.throttledResize = throttle(this.resize, 200, {trailing: true}).bind(this)\n\n    window.addEventListener('resize', () => { this.throttledResize(canvas, bigBox) }, false)\n    setTimeout(() => {\n      this.visible = true\n      this.resize(canvas, bigBox)\n    }, 250)\n    this.paint(context)\n  }\n\n  componentDidUpdate() {\n    var canvas = ReactDOM.findDOMNode(this)\n    var context = canvas.getContext('2d')\n    context.clearRect(0, 0, this.props.canvasWidth, this.props.canvasHeight)\n    var bigBox = document.getElementById(\"preview-wrapper\")\n\n    this.resize(canvas, bigBox)\n  }\n\n  // in mm means in units of mm, but 0,0 is the center, not the lower corner or something.\n  mmToPixelsScale() {\n    var machine_x = 1\n    var machine_y = 1\n    if (this.props.use_rect) {\n      machine_x = this.props.maxX - this.props.minX\n      machine_y = this.props.maxY - this.props.minY\n    } else {\n      machine_x = this.props.maxRadius * 2.0\n      machine_y = machine_x\n    }\n\n    var scale_x = this.props.canvasWidth / machine_x\n    var scale_y = this.props.canvasHeight / machine_y\n    // Keep it square.\n    return Math.min(scale_x, scale_y) * 0.95\n  }\n\n  mmToPixels(vertex) {\n    var min_scale = this.mmToPixelsScale()\n\n    var x = vertex.x * min_scale + this.props.canvasWidth/2.0\n    // Y for pixels starts at the top, and goes down.\n    var y = -vertex.y * min_scale + this.props.canvasHeight/2.0\n\n    return Vertex(x, y)\n  }\n\n  moveTo_mm(context, vertex) {\n    var in_mm = this.mmToPixels(vertex)\n    context.moveTo(in_mm.x, in_mm.y)\n  }\n\n  lineTo_mm(context, vertex) {\n    var in_mm = this.mmToPixels(vertex)\n    context.lineTo(in_mm.x, in_mm.y)\n  }\n\n  dot_mm(context, vertex) {\n    var in_mm = this.mmToPixels(vertex)\n    context.arc(in_mm.x, in_mm.y, Math.max(4.0, this.mmToPixelsScale() * 1.5), 0, 2 * Math.PI, true)\n    context.fillStyle = context.strokeStyle\n    context.fill()\n  }\n\n  slice_vertices(vertices, sliderValue) {\n    const slide_size = 10.0\n    if (sliderValue === 0) {\n      return vertices\n    }\n\n    // Let's start by just assuming we want a slide_size sized window, as a percentage of the whole\n    // thing.\n    const begin_fraction = sliderValue / 100.0\n    const end_fraction = (slide_size + sliderValue) / 100.0\n\n    const begin_vertex = Math.round(vertices.length * begin_fraction)\n    const end_vertex = Math.round(vertices.length * end_fraction)\n\n    return vertices.slice(begin_vertex, end_vertex)\n  }\n\n  paint(context) {\n    context.save()\n\n    // Draw the bounds of the machine\n    context.beginPath()\n    context.lineWidth = \"1\"\n    context.strokeStyle = \"lightblue\"\n    if (this.props.use_rect) {\n      this.moveTo_mm(context, Vertex((this.props.minX - this.props.maxX)/2.0, (this.props.minY - this.props.maxY)/2.0))\n      this.lineTo_mm(context, Vertex((this.props.maxX - this.props.minX)/2.0, (this.props.minY - this.props.maxY)/2.0))\n      this.lineTo_mm(context, Vertex((this.props.maxX - this.props.minX)/2.0, (this.props.maxY - this.props.minY)/2.0))\n      this.lineTo_mm(context, Vertex((this.props.minX - this.props.maxX)/2.0, (this.props.maxY - this.props.minY)/2.0))\n      this.lineTo_mm(context, Vertex((this.props.minX - this.props.maxX)/2.0, (this.props.minY - this.props.maxY)/2.0))\n    } else {\n      this.moveTo_mm(context, Vertex(this.props.maxRadius, 0.0))\n      let resolution = 128.0\n      for (let i=0; i<=resolution; i++) {\n        let angle = Math.PI * 2.0 / resolution * i\n        this.lineTo_mm(context, Vertex(this.props.maxRadius * Math.cos(angle),\n                                       this.props.maxRadius * Math.sin(angle)))\n      }\n    }\n    context.stroke()\n\n    var drawing_vertices = this.props.vertices\n    drawing_vertices = this.slice_vertices(drawing_vertices, this.props.sliderValue)\n    if (drawing_vertices && drawing_vertices.length > 0) {\n      // Draw the background vertices\n      if (this.props.sliderValue !== 0) {\n        context.beginPath()\n        context.lineWidth = this.mmToPixelsScale()\n        context.strokeStyle = \"rgba(204, 204, 204, 0.35)\"\n        this.moveTo_mm(context, this.props.vertices[0])\n        for (let i=0; i<this.props.vertices.length; i++) {\n          this.lineTo_mm(context, this.props.vertices[i])\n        }\n        context.stroke()\n      }\n\n      // Draw the specific vertices\n      var startColor = Color('#6E6E00')\n      const colorStep = 200.0 / drawing_vertices.length / 100\n\n      context.beginPath()\n      context.lineWidth = this.mmToPixelsScale()\n      this.moveTo_mm(context, drawing_vertices[0])\n      context.stroke()\n\n      for (let i=1; i<drawing_vertices.length; i++) {\n        const strokeColor = this.props.sliderValue !== 0 ? startColor.lighten(colorStep * i).hex() : 'yellow'\n\n        context.beginPath()\n        context.strokeStyle = strokeColor\n        context.lineWidth = this.mmToPixelsScale()\n        this.moveTo_mm(context, drawing_vertices[i-1])\n        this.lineTo_mm(context, drawing_vertices[i])\n        context.stroke()\n      }\n\n      // Draw the start and end points\n      context.beginPath()\n      context.lineWidth = 4.0\n      context.strokeStyle = \"green\"\n      this.dot_mm(context, this.props.vertices[0])\n      context.stroke()\n      context.beginPath()\n      context.lineWidth = 4.0\n      context.strokeStyle = \"red\"\n      this.dot_mm(context, this.props.vertices[this.props.vertices.length-1])\n      context.stroke()\n    }\n\n    if (this.props.trackVertices && this.props.trackVertices.length > 0 && this.props.showTrack) {\n      // Draw the track vertices\n      context.beginPath()\n      context.lineWidth = 6.0\n      context.strokeStyle = \"green\"\n      this.moveTo_mm(context, this.props.trackVertices[0])\n      for (let i=0; i<this.props.trackVertices.length; i++) {\n        this.lineTo_mm(context, this.props.trackVertices[i])\n      }\n      context.stroke()\n    }\n\n    context.restore()\n  }\n\n  resize(canvas, bigBox) {\n    const width = parseInt(getComputedStyle(bigBox).getPropertyValue('width'))\n    const height = parseInt(getComputedStyle(bigBox).getPropertyValue('height'))\n    const size = Math.max(Math.min(width, height))\n\n    if (this.props.canvasWidth !== size) {\n      this.props.onResize(size)\n    }\n\n    var context = canvas.getContext('2d')\n    this.paint(context)\n  }\n\n  render() {\n    const {canvasWidth, canvasHeight} = this.props\n    const visibilityClass = `preview-canvas ${this.visible ? 'd-inline' : 'd-none'}`\n\n    return (\n      <canvas\n        className={visibilityClass}\n        height={canvasHeight}\n        width={canvasWidth} />\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(PreviewWindow)\n","import { createSlice } from \"@reduxjs/toolkit\"\n\nconst gCodeSlice = createSlice({\n  name: 'gcode',\n  initialState: {\n    filename: \"sandify\",\n    pre: localStorage.getItem('gcode_pre') ? localStorage.getItem('gcode_pre') : '',\n    post: localStorage.getItem('gcode_post') ? localStorage.getItem('gcode_post') : '',\n    reverse: false,\n    show: false\n  },\n  reducers: {\n    setGCodeFilename(state, action) {\n      state.filename = action.payload\n    },\n    setGCodePre(state, action) {\n      state.pre = action.payload\n      localStorage.setItem('gcode_pre', state.pre)\n    },\n    setGCodePost(state, action) {\n      state.post = action.payload\n      localStorage.setItem('gcode_post', state.post)\n    },\n    setGCodeShow(state, action) {\n      state.show = action.payload\n    },\n    toggleGCodeReverse(state, action) {\n      state.reverse = !state.reverse\n    },\n  }\n})\n\nexport const {\n  setGCodeFilename,\n  setGCodePre,\n  setGCodePost,\n  setGCodeShow,\n  toggleGCodeReverse,\n} = gCodeSlice.actions\n\nexport default gCodeSlice.reducer\n","import { createSelector } from 'reselect'\nimport { getShape } from '../shapes/selectors'\n\nconst getApp = state => state.app\nconst getShapes = state => state.shapes\nconst getTransforms = state => state.transforms\nconst getFile = state => state.file\nconst getGCode = state => state.gcode\nconst getMachine = state => state.machine\n\nexport const getComments = createSelector(\n  [\n      getApp,\n      getShapes,\n      getTransforms,\n      getFile,\n      getGCode,\n      getMachine,\n  ],\n  (app, shapes, transforms, file, gcode, machine) => {\n    let state = {\n      app: app,\n      shapes: shapes,\n      shape: shapes.byId[shapes.currentId],\n      transforms: transforms,\n      transform: transforms.byId[shapes.currentId],\n      file: file,\n      gcode: gcode,\n      machine: machine\n    }\n\n    let comments = []\n\n    comments.push(\"Created by Sandify\")\n    comments.push(\"\")\n    comments.push(\"  https://sandify.org\")\n    comments.push(\"\")\n    comments.push(\"  Sandify Version: \" + state.app.sandifyVersion)\n    comments.push(\"\")\n    comments.push(\"  Machine Type: \" + (state.machine.rectangular ? \"Rectangular\" : \"Polar\"))\n\n    if (state.machine.rectangular) {\n      comments.push(\"    MinX: \" + state.machine.minX + \" MaxX: \" + state.machine.maxX + \" MinY: \" + state.machine.minY + \" MaxY: \" + state.machine.maxY)\n    } else {\n      comments.push(\"    Max Radius: \" + state.machine.maxRadius)\n      comments.push(\"    Start Point: \" + state.machine.polarStartPoint)\n      comments.push(\"    End Point: \" + state.machine.polarEndPoint)\n    }\n\n    comments.push(\"  Content Type: \" + state.app.input)\n\n    switch (state.app.input) {\n      case 'shape': // shapes\n        const shape = state.shapes.byId[state.shapes.currentId]\n        const metashape = getShape(shape)\n        const shapeOptions = metashape.getOptions()\n\n        comments.push(\"    Starting Size: \" + shape.startingSize)\n        comments.push(\"    Offset: X: \" + state.transform.offsetX + \" Y: \" + state.transform.offsetY)\n        comments.push(\"    Selected Shape: \" + metashape.name)\n\n        Object.keys(shapeOptions).forEach((key) => {\n          comments.push(\"      \" + shapeOptions[key].title + \": \" + shape[key])\n        })\n\n        comments.push(\"    Number of Loops: \" + state.transform.numLoops)\n        comments.push(\"    Spin: \" + state.transform.spinEnabled)\n        if (state.transform.spinEnabled) {\n          comments.push(\"      Spin Value: \" + state.transform.spinValue)\n          comments.push(\"      Spin Switchbacks: \" + state.transform.spinSwitchbacks)\n        }\n        comments.push(\"    Grow: \" + state.transform.growEnabled)\n        if (state.transform.growEnabled) {\n          comments.push(\"      Grow Value: \" + state.transform.growValue)\n        }\n        comments.push(\"    Track: \" + state.transform.trackEnabled)\n        if (state.transform.trackEnabled) {\n          comments.push(\"      Track Size: \" + state.transform.trackValue)\n          comments.push(\"      Track Length: \" + state.transform.trackLength)\n          comments.push(\"      Track Grow: \" + state.transform.trackGrowEnabled)\n          if (state.transform.trackGrowEnabled) {\n            comments.push(\"          Track Grow Value: \" + state.transform.trackGrow)\n          }\n        }\n        break\n\n      case 'code': // Theta Rho\n        comments.push(\"    Input File: \" + state.file.name)\n        comments.push(\"    Zoom: \"  + state.file.zoom)\n        comments.push(\"    Aspect Ratio: \" + state.file.aspectRatio)\n        break\n\n      default: // Dunno\n        comments.push(\"  Content Type: Unknown\")\n        break\n    }\n\n    comments.push(\"  Path Reversed: \" + state.gcode.reverse)\n    comments.push(\"\")\n    return comments\n  }\n)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  Accordion,\n  Button,\n  Form,\n  Modal,\n  Card\n} from 'react-bootstrap'\nimport {\n  setGCodeFilename,\n  setGCodePre,\n  setGCodePost,\n  setGCodeShow,\n  toggleGCodeReverse,\n} from './gCodeSlice'\nimport { getComments } from './selectors'\nimport { getVertices } from '../machine/selectors'\nimport { Vertex } from '../../common/Geometry'\nimport Victor from 'victor'\n\n// Helper function to take a string and make the user download a text file with that text as the\n// content.\n// I don't really understand this, but I took it from here, and it seems to work:\n// https://stackoverflow.com/a/18197511\nfunction download(filename, text) {\n  let link = document.createElement('a')\n  link.download = filename\n\n  let blob = new Blob([text],{type: 'text/plain;charset=utf-8'})\n\n  // Windows Edge fix\n  if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n    window.navigator.msSaveOrOpenBlob(blob, filename)\n  } else {\n    link.href = URL.createObjectURL(blob)\n    if (document.createEvent) {\n      var event = document.createEvent('MouseEvents')\n      event.initEvent('click', true, true)\n      link.dispatchEvent(event)\n    } else {\n      link.click()\n    }\n    URL.revokeObjectURL(link.href)\n  }\n}\n\nfunction gcode(vertex) {\n  var command = 'G01' +\n    ' X' + vertex.x.toFixed(3) +\n    ' Y' + vertex.y.toFixed(3)\n  if (vertex.speed > 0.0) {\n    command += ' F' + vertex.f\n  }\n  return command + '\\n'\n}\n\nfunction thetarho(vertex) {\n  return \"\" + vertex.x.toFixed(5) + \" \" + vertex.y.toFixed(5) + \"\\n\"\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    reverse: state.gcode.reverse,\n    show: state.gcode.show,\n    vertices: getVertices(state),\n    settings: getComments(state),\n    offsetX: (state.machine.minX + state.machine.maxX) / 2.0,\n    offsetY: (state.machine.minY + state.machine.maxY) / 2.0,\n    maxRadius: state.machine.maxRadius,\n    filename: state.gcode.filename,\n    pre: state.gcode.pre,\n    post: state.gcode.post,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    open: () => {\n      dispatch(setGCodeShow(true))\n    },\n    close: () => {\n      dispatch(setGCodeShow(false))\n    },\n    toggleReverse: () => {\n      dispatch(toggleGCodeReverse())\n    },\n    setFilename: (event) => {\n      dispatch(setGCodeFilename(event.target.value))\n    },\n    setPre: (event) => {\n      dispatch(setGCodePre(event.target.value))\n    },\n    setPost: (event) => {\n      dispatch(setGCodePost(event.target.value))\n    },\n  }\n}\n\n// A class that will encapsulate all the gcode generation. This is currently just a button that\n// converts vertices and a speed into a list of positions. There is a lot more than could exists\n// here.\nclass GCodeGenerator extends Component {\n  generateGCode() {\n    var content = \"; \" + this.props.settings.join(\"\\n; \")\n    content += \"\\n\"\n    content += \"; filename: '\" + this.props.filename + \"'\\n\\n\"\n    content += \"; BEGIN PRE\\n\"\n    content += this.props.pre\n    content += \"; END PRE\\n\"\n\n    var centeredVertices = this.props.vertices.map( (vertex) => {\n      return {\n        ...vertex,\n        x: vertex.x + this.props.offsetX,\n        y: vertex.y + this.props.offsetY,\n      }\n    })\n\n    var lines = centeredVertices.map(gcode)\n    content += lines.join('')\n    content += '\\n'\n    content += \"; BEGIN POST\\n\"\n    content += this.props.post\n    content += \"; END POST\\n\"\n\n    var filename = this.props.filename\n    if (!filename.includes(\".\")) {\n      filename += \".gcode\"\n    }\n\n    download(filename, content)\n    this.props.close()\n  }\n\n  generateThetaRho() {\n    var content = \"# \" + this.props.settings.join(\"\\n# \")\n    content += \"\\n\"\n    content += \"# filename: '\" + this.props.filename + \"'\\n\\n\"\n    content += \"# BEGIN PRE\\n\"\n    content += this.props.pre\n    content += \"# END PRE\\n\"\n    content += '\\n'\n\n    // First, downsample larger lines into smaller ones.\n    var maxLength = 2.0\n    var subsampledVertices = []\n    var previous = undefined\n    var next\n    for (next = 0; next < this.props.vertices.length; next++) {\n      if (previous !== undefined) {\n        var start = Victor.fromObject(this.props.vertices[previous])\n        var end = Victor.fromObject(this.props.vertices[next])\n\n        var delta = end.clone().subtract(start)\n        var deltaSegment = end.clone().subtract(start).normalize().multiply(Victor(maxLength, maxLength))\n\n        // This loads up (start, end].\n        for (let step = 0; step < (delta.magnitude() / maxLength) ; step++) {\n          subsampledVertices.push(Vertex(start.x + step * deltaSegment.x,\n                                         start.y + step * deltaSegment.y,\n                                         this.props.vertices[next].f))\n        }\n\n      }\n      previous = next\n    }\n    // Add in the end.\n    if (previous !== undefined) {\n      subsampledVertices.push(this.props.vertices[this.props.vertices.length - 1])\n    }\n\n    // Convert to Theta, Rho\n    var trVertices = []\n    var previousTheta = 0\n    var previousRawTheta = 0\n    for (next = 0; next < subsampledVertices.length; ++next) {\n      // Normalize the radius\n      var rho = Victor.fromObject(subsampledVertices[next]).magnitude() / this.props.maxRadius\n\n      // What is the basic theta for this point?\n      var rawTheta = Math.atan2(subsampledVertices[next].x,\n                                subsampledVertices[next].y)\n      // Convert to [0,2pi]\n      rawTheta = (rawTheta + 2.0 * Math.PI) % (2.0 * Math.PI)\n\n      // Compute the difference to the last point.\n      var deltaTheta = rawTheta - previousRawTheta\n      // Convert to [-pi,pi]\n      if (deltaTheta < -Math.PI) {\n        deltaTheta += 2.0 * Math.PI\n      }\n      if (deltaTheta > Math.PI) {\n        deltaTheta -= 2.0 * Math.PI\n      }\n      var theta = previousTheta + deltaTheta\n      previousRawTheta = rawTheta\n      previousTheta = theta\n\n      trVertices.push(Vertex(theta, rho, subsampledVertices[next].f))\n    }\n\n    var lines = trVertices.map(thetarho)\n\n    content += lines.join('')\n\n    content += '\\n'\n    content += \"# BEGIN POST\\n\"\n    content += this.props.post\n    content += \"# END POST\\n\"\n\n    var filename = this.props.filename\n    if (!filename.includes(\".\")) {\n      filename += \".thr\"\n    }\n    download(filename, content)\n\n    this.props.close()\n  }\n\n  render() {\n    var reverseActiveClass = (this.props.reverse ? \"active\" : null)\n\n    return (\n      <div>\n        <Button className=\"ml-2 mr-3\" variant=\"primary\" onClick={this.props.open}>Generate code</Button>\n\n        <Modal show={this.props.show} onHide={this.props.close}>\n          <Modal.Header closeButton>\n            <Modal.Title>Code Parameters</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <Form.Group controlId=\"sandify-filename\">\n              <Form.Label>Name of output</Form.Label>\n              <Form.Control type=\"text\" value={this.props.filename} onChange={this.props.setFilename} />\n            </Form.Group>\n\n            <Form.Group controlId=\"pre-code\">\n              <Form.Label>Program start code</Form.Label>\n              <Form.Control as=\"textarea\" value={this.props.pre} onChange={this.props.setPre} />\n            </Form.Group>\n\n            <Form.Group controlId=\"post-code\">\n              <Form.Label>Program end code</Form.Label>\n              <Form.Control as=\"textarea\" value={this.props.post} onChange={this.props.setPost} />\n            </Form.Group>\n\n            <Accordion>\n              <Card className={`${reverseActiveClass} overflow-auto`}>\n                <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.toggleReverse}>\n                  <h3>Reverse path</h3>\n                  Reverses the code, starting at the final location\n                </Accordion.Toggle>\n              </Card>\n            </Accordion>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button id=\"code-close\" variant=\"link\" onClick={this.props.close}>Close</Button>\n            <Button id=\"code-gen-gcode\" variant=\"primary\" onClick={this.generateGCode.bind(this)}>Generate GCode</Button>\n            <Button id=\"code-gen-thetarho\" variant=\"primary\" onClick={this.generateThetaRho.bind(this)}>Generate Theta Rho</Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GCodeGenerator)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Slider from 'rc-slider'\nimport 'rc-slider/assets/index.css'\nimport PreviewWindow from './PreviewWindow'\nimport GCodeGenerator from '../gcode/GCodeGenerator'\nimport { updateMachine } from './machineSlice'\nimport { getVerticesStats } from './selectors'\nimport './MachinePreview.scss'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    sliderValue: state.machine.sliderValue,\n    verticesStats: getVerticesStats(state),\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onSlider: (value) => {\n      dispatch(updateMachine({sliderValue: value}))\n    },\n  }\n}\n\nclass MachinePreview extends Component {\n  render() {\n    return (\n      <div className=\"machine-preview d-flex flex-grow-1 flex-column\" id=\"machine-preview\">\n        <div className=\"flex-grow-1 d-flex flex-column\">\n          <div id=\"preview-wrapper\" className=\"preview-wrapper overflow-hidden d-flex align-items-center\">\n            <PreviewWindow />\n          </div>\n\n          <div className=\"mt-auto pt-2 bg-white d-flex align-items-center\">\n            <div className=\"flex-grow-1\">\n              <div className=\"mx-2\">\n                Points: {this.props.verticesStats.numPoints}, Distance: {this.props.verticesStats.distance}\n              </div>\n\n              <div className=\"p-3\">\n                  <Slider\n                    value={this.props.sliderValue}\n                    step={1.0}\n                    min={0.0}\n                    max={100.0}\n                    onChange={this.props.onSlider}\n                  />\n              </div>\n            </div>\n            <GCodeGenerator />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MachinePreview)\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state')\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState)\n  } catch (err) {\n    return undefined\n  }\n}\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem('state', serializedState)\n  } catch {\n    // ignore write errors\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\"\nimport { combineReducers } from 'redux'\nimport appReducer from './appSlice'\nimport fileReducer from '../theta_rho/fileSlice'\nimport machineReducer from '../machine/machineSlice'\nimport gcodeReducer from '../gcode/gCodeSlice'\nimport shapesReducer from '../shapes/shapesSlice'\nimport transformsReducer from '../transforms/transformsSlice'\nimport { registeredShapes } from '../../common/registeredShapes'\nimport { loadState, saveState } from '../../common/localStorage'\nimport { addShape, setCurrentShape, updateShape } from '../shapes/shapesSlice'\nimport { addTransform, updateTransform } from '../transforms/transformsSlice'\n\nconst store = configureStore({\n  reducer: combineReducers({\n    app: appReducer,\n    shapes: shapesReducer,\n    transforms: transformsReducer,\n    file: fileReducer,\n    gcode: gcodeReducer,\n    machine: machineReducer\n  }),\n})\n\n// preload shapes into store\nObject.keys(registeredShapes).forEach(key => {\n  let shape = registeredShapes[key]\n  let state = shape.getInitialState()\n\n  state.id = key\n  state.name = shape.name\n  store.dispatch(addTransform({id: state.id, repeatEnabled: state.repeatEnabled}))\n  store.dispatch(addShape(state))\n})\n\n// set to true when running locally if you want to preserve your shape\n// settings across page loads; don't forget to toggle false when done testing!\nconst persistState = false\nif (persistState) {\n  // override default values with saved ones\n  const persistedState = loadState()\n\n  if (persistedState) {\n    Object.keys(persistedState.shapes.byId).forEach((key) => {\n      let shape = persistedState.shapes.byId[key]\n      shape.id = key\n      store.dispatch(updateShape(shape))\n    })\n\n    Object.keys(persistedState.transforms.byId).forEach((key) => {\n      let transform = persistedState.transforms.byId[key]\n      transform.id = key\n      store.dispatch(updateTransform(transform))\n    })\n  }\n}\n\nconst storedShape = localStorage.getItem('currentShape')\nconst currentShape = storedShape && registeredShapes[storedShape] ? storedShape : 'polygon'\nstore.dispatch(setCurrentShape(currentShape))\n\nif (persistState) {\n  store.subscribe(() => {\n    const state = store.getState()\n\n    saveState({\n      shapes: state.shapes,\n      transforms: state.transforms\n    })\n  })\n}\n\nexport default store\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Row\n} from 'react-bootstrap'\nimport { Provider } from 'react-redux'\nimport Header from './Header'\nimport InputTabs from './InputTabs'\nimport MachinePreview from '../machine/MachinePreview'\nimport store from './store'\nimport './App.scss'\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Header />\n\n          <main>\n            <Row className=\"no-gutters\">\n              <Col className=\"full-page d-flex flex-column\">\n                <MachinePreview />\n              </Col>\n\n              <div id=\"sidebar\">\n                <InputTabs />\n              </div>\n            </Row>\n          </main>\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './features/app/App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}