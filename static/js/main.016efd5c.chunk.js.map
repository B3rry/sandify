{"version":3,"sources":["features/app/logo.svg","features/app/reactGA.js","features/app/Header.js","features/shapes/shapesSlice.js","components/InputOption.js","components/DropdownOption.js","components/CheckboxOption.js","models/Transform.js","features/transforms/transformsSlice.js","models/Shape.js","models/Circle.js","common/util.js","models/Epicycloid.js","models/fractal_spirograph/Orbit.js","models/fractal_spirograph/FractalSpirograph.js","models/Heart.js","models/Hypocycloid.js","models/input_text/raysol_cursive.js","models/input_text/raysol_sanserif.js","models/input_text/Fonts.js","common/geometry.js","features/machine/Machine.js","features/machine/PolarMachine.js","models/input_text/InputText.js","common/lindenmayer.js","models/lsystem/subtypes.js","models/lsystem/LSystem.js","models/Polygon.js","models/Reuleaux.js","models/Rose.js","models/space_filler/subtypes.js","models/space_filler/SpaceFiller.js","models/Star.js","common/PriorityQueue.js","common/Graph.js","models/tessellation_twist/TessellationTwist.js","common/eulerianTrail.js","models/v1_engineering/Vicious1Vertices.js","models/v1_engineering/V1Engineering.js","models/Wiper.js","common/registeredShapes.js","features/shapes/selectors.js","features/transforms/ScaleTransform.js","features/transforms/RotationTransform.js","features/transforms/TrackTransform.js","features/transforms/Transforms.js","features/shapes/Shape.js","features/shapes/ShapeList.js","features/importer/importerSlice.js","features/importer/Importer.js","features/importer/ThetaRhoImporter.js","features/importer/GCodeImporter.js","models/Importer.js","features/importer/Uploader.js","models/Machine.js","features/machine/machineSlice.js","features/machine/RectSettings.js","features/machine/PolarSettings.js","features/machine/MachineSettings.js","features/app/Footer.js","features/app/appSlice.js","features/app/InputTabs.js","features/preview/previewSlice.js","features/machine/RectMachine.js","features/machine/computer.js","features/exporter/exporterSlice.js","features/machine/selectors.js","features/preview/PreviewWindow.js","features/exporter/Exporter.js","features/exporter/CommentExporter.js","features/exporter/selectors.js","features/exporter/ThetaRhoExporter.js","features/exporter/GCodeExporter.js","models/Exporter.js","features/exporter/Downloader.js","features/preview/MachinePreview.js","features/app/store.js","features/app/App.js","index.js"],"names":["module","exports","ReactGA","initialize","debug","pageview","window","location","pathname","search","Header","className","src","logo","alt","Component","shapesSlice","createSlice","name","initialState","currentId","byId","allIds","reducers","addShape","state","action","shape","payload","id","push","setCurrentShape","event","category","localStorage","setItem","updateShape","actions","InputOption","option","this","props","options","optionKey","model","optionType","type","minimum","min","parseFloat","maximum","max","visible","undefined","isVisible","Row","Col","sm","Form","Label","htmlFor","title","Control","as","step","isNaN","value","onChange","attrs","target","DropdownOption","currentChoice","key","index","label","choice","choices","map","CheckboxOption","checked","transformOptions","startingSize","canChangeSize","offsetX","offsetY","numLoops","transformMethod","growEnabled","growValue","spinEnabled","spinValue","spinSwitchbacks","trackEnabled","trackGrowEnabled","trackValue","trackNumLoops","trackLength","trackGrow","Transform","repeatEnabled","transformsSlice","addTransform","transform","meta","getInitialState","updateTransform","toggleRepeat","toggleGrow","toggleSpin","toggleTrack","toggleTrackGrow","shapeOptions","Shape","cache","canTransform","selectGroup","shouldCache","circleLobes","Circle","points","i","angle","Math","PI","Victor","cos","sin","roundP","n","p","round","Number","EPSILON","pow","reduce","numerator","denominator","gcd","a","b","epicycloidA","epicycloidB","Epicycloid","link","parseInt","reduced","rotations","isInteger","scale","multiply","x","y","Orbit","r","level","settings","parent","child","sign","alternateRotation","speed","velocity","resolution","newr","relativeSize","newx","newy","rsum","fractalSpirographVelocity","fractalSpirographResolution","fractalSpirographNumCircles","fractalSpirographRelativeSize","fractalSpirographAlternateRotation","FractalSpirograph","linkText","end","numCircles","sun","next","addChild","j","update","Heart","hypocycloidA","hypocycloidB","Star","raysol_cursive","raysol_sanserif","billsey","curve","Array","keys","billseyConverter","vertices","newVertices","prevPoint","forEach","vertex","width","abs","height","concat","cv","reverse","maxX","raysolConverter","MonospaceFont","ch","upper","toUpperCase","hasOwnProperty","CursiveFont","distance","v1","v2","sqrt","point","atan2","onSegment","start","resizeVertices","sizeX","sizeY","size","bounds","length","loX","hiX","loY","hiY","findBounds","scaledBounds","deltaX","deltaY","clone","add","vertexRoundP","v","Machine","enforceLimits","cleanVertices","limitPrecision","optimizePerimeter","addEndpoints","previous","nearestVertex","line","clipLine","pt","segments","stripExtraPerimeterVertices","minimizeMoves","minimizePerimeterMoves","connectedVertices","current","prev","tracePerimeter","flat","segment","perimeter","curr","onPerimeter","currentIndex","lastSegment","walked","shift","pop","minDist","MAX_SAFE_INTEGER","dist","perimeterDistance","splice","traceCircle","startAngle","endAngle","deltaAngle","tracePoints","PolarMachine","maxRadius","polarStartPoint","unshift","first","magnitude","startPoint","fromObject","polarEndPoint","last","endPoint","delta","rm","r1","r2","d","radStart","radEnd","intersections","getIntersections","intersection","on","otherPoint","point1","direction","subtract","normalize","t","distanceToLine","dt","point2","inputText","inputFont","rotateDir","getMaxX","InputText","prevLetter","lines","chi","nextLetter","vi","textPoints","connectorPoints","widthOffset","lastTheta","rPerY","thetaCenter","rOffset","maxY","rOffsetPerLine","thetaPerX","endTheta","onSubtypeChange","subtype","changes","maxIterations","minIterations","iterations","onMinIterations","onMaxIterations","lsystem","config","output","input","axiom","char","rules","lsystemDraw","side","lsystemPath","instructions","currVertices","startingAngle","returnPaths","slice","draw","includes","returnPath","revChar","subtypes","F","W","X","Y","Z","A","B","6","7","8","9","Object","LSystem","polygonSides","Polygon","reuleauxSides","Reuleaux","corners","coverageAngle","halfCoverageAngle","c","corn","roseN","roseD","Rose","thetaClose","theta","iterationsGrow","L","R","SpaceFiller","machine","rectangular","minX","minY","starRatio","star_scale","PriorityQueue","collection","element","isEmpty","added","mix","s","u","result","Graph","nodeMap","nodeKeys","Set","adjacencyList","edgeMap","edgeKeys","clearCachedPaths","node","toString","has","node1","node2","weight","node1Key","node2Key","edgeKey","sort","ekey1","ekey2","startNode","endNode","shortest","getCachedShortestPath","times","backtrace","pq","nodes","Infinity","enqueue","currentNode","dequeue","neighbor","time","path","lastStep","cacheShortestPath","cachedPaths","getPairedKey","vecTriangle","vecSquare","getEdges","edges","count","da","db","dc","ab","ac","bc","rotate","ap","bp","cp","tessellationTwistNumSides","tessellationTwistIterations","tessellationTwistRotate","TessellationTwist","numSides","angle2","tessellation","sides","getShapeVertices","graph","edge","addNode","addEdge","prevKey","trail","g","edgePointer","edgeUsed","idReverse","idCount","getId","pushEdge","deg","inDeg","outDeg","directed","check","oddVertex","odd","checkDirected","checkUndirected","dfs","to","eulerianTrail","values","walkedVertices","walkedEdges","missingEdges","from","filter","hash","split","hasEdge","dijkstraShortestPath","missingVertex","Vicious1Vertices","V1Engineering","wiperType","wiperSize","wiperAngleDeg","outOfBounds","boundPoint","good","bad","size_x","size_y","dx","dy","fixed","nearEnough","linearVertices","outputVertices","startLocation","cosa","sina","orig_delta_w","orig_delta_h","temp","delta_w","delta_h","endLocation","nextWidthPoint","nextHeightPoint","emergency_break","corner","Wiper","halfHeight","halfWidth","emergencyBreak","radius","radiusPerAngle","spiralVertices","registeredShapes","polygon","star","circle","heart","reuleaux","epicycloid","hypocycloid","Hypocycloid","rose","v1Engineering","fractal_spirograph","tessellation_twist","wiper","space_filler","getShapes","shapes","getCurrentShapeId","getShapesSelector","createSelector","getCurrentShapeSelector","getCurrentTransformSelector","transforms","getShape","ScaleTransform","activeClassName","active","activeKey","Accordion","defaultActiveKey","Card","Toggle","eventKey","onClick","onGrow","Collapse","Body","connect","ownProps","getOptions","dispatch","RotationTransform","onSpin","TrackTransform","activeGrowClassName","activeGrow","activeGrowKey","onTrack","onTrackGrow","Transforms","onRepeat","ToggleButtonGroup","ontransformMethodChange","ToggleButton","variant","optionsRender","optionsListRender","entries","linkRender","rel","href","Button","onRestoreDefaults","metashape","getShapeById","metatransform","tAttrs","getInitialTransformState","customStyles","control","base","minHeight","ShapeList","groupOptions","optionLabel","found","group","newOptions","selectedOption","currentShape","styles","maxMenuHeight","selected","importerSlice","fileName","comments","zoom","originalAspectRatio","aspectRatio","updateImporter","assign","toggleFileAspectRatio","Importer","text","ThetaRhoImporter","callback","hasVertex","thetaRhos","ii","trim","indexOf","pointStrings","convertToXY","max_angle","rhoStep","rho","GCodeImporter","isComment","addVertex","Toolpath","addLine","modal","addArcCurve","v0","startTheta","deltaTheta","motion","thetaStep","loadFromString","err","results","normalizeCoords","scaleX","scaleY","importerOptions","Uploader","importer","importerProps","endTime","performance","now","timing","variable","startTime","file","files","reader","FileReader","onload","toLowerCase","endsWith","import","onFileImported","bind","readAsText","commentsRender","comment","style","cursor","accept","onFileSelected","display","setZoom","toggleAspectRatio","machineOptions","origin","localMinX","getItem","localMaxX","localMinY","localMaxY","localMaxRadius","machineSlice","rectExpanded","polarExpanded","JSON","parse","rectOrigin","updateMachine","toggleMachineRectExpanded","toggleMachinePolarExpanded","setMachineRectOrigin","newValue","toggleMinimizeMoves","setMachineSize","RectSettings","activeCallback","onOriginChange","expanded","PolarSettings","onStartPointChange","onEndPointChange","MachineSettings","Footer","appSlice","sandifyVersion","chooseInput","InputTabs","Tabs","onSelect","handleSelect","Tab","previewSlice","canvasWidth","canvasHeight","sliderValue","updatePreview","setPreviewSize","RectMachine","outPoint","clipped","newPoint","rDx","rDy","p1","p2","includeOriginalPoints","o1","o2","d1","d2","xSign","ySign","lineStart","lineEnd","quadrantStart","pointLocation","quadrantEnd","intPoint","console","log","Error","lengthSq","midpoint","sideStart","sideEnd","lineCrossSidePerp","diff","angleDeg","scalePerc","offset","track","data","loopIndex","transformShape","amount","trackIndex","transformedVertex","loopPeriod","stage","spinAmount","buildTrackLoop","numTrackLoops","nextTrackVertex","backtrack","numVertices","trackVertices","trackDistances","trackVertex","minIdx","minD","idx","polishVertices","machineClass","polish","fileType","throttledReportTiming","throttle","trailing","LRUCache","getTransform","getImporter","getMachine","getShapedVertices","stringify","getCacheKey","get","getVertices","set","getTransformedVertices","scaledVertices","transformShapes","getComputedVertices","getImportedVertices","x_scale","y_scale","machine_aspect_ratio","scaleImportedVertices","app","hasImported","getVerticesStats","numPoints","floor","getTrackVertices","PreviewWindow","canvas","ReactDOM","findDOMNode","context","getContext","bigBox","document","getElementById","throttledResize","resize","addEventListener","setTimeout","paint","clearRect","machine_x","machine_y","use_rect","scale_x","scale_y","min_scale","mmToPixelsScale","in_mm","mmToPixels","moveTo","lineTo","arc","fillStyle","strokeStyle","fill","begin_fraction","end_fraction","begin_vertex","end_vertex","save","beginPath","lineWidth","moveTo_mm","lineTo_mm","stroke","sliderRange","sliderVertexRange","drawing_vertices","Color","showTrack","startColor","colorStep","strokeColor","lighten","hex","dot_mm","sliderEndPoint","restore","getComputedStyle","getPropertyValue","onResize","visibilityClass","preview","exporterSlice","pre","post","show","updateExporter","Exporter","startComments","keyValueLine","endComments","exportCode","content","padding","commenting","commentChar","indentLevel","metamodel","instance","optionLine","CommentExporter","indent","optionLines","dedent","exporter","getComments","export","thetarho","toFixed","ThetaRhoExporter","fileExtension","subsampledVertices","deltaSegment","trVertices","previousTheta","previousRawTheta","rawTheta","GCodeExporter","gcode","exporterOptions","exporters","Downloader","savedCode","gaRecord","downloadFile","join","close","createElement","download","blob","Blob","navigator","msSaveOrOpenBlob","URL","createObjectURL","createEvent","initEvent","dispatchEvent","click","revokeObjectURL","open","Modal","onHide","closeButton","Title","MachinePreview","verticesStats","onSlider","customizedMiddleware","getDefaultMiddleware","immutableCheck","ignoredPaths","serializableCheck","store","configureStore","reducer","combineReducers","appReducer","shapesReducer","transformsReducer","importerReducer","exporterReducer","machineReducer","previewReducer","middleware","tState","storedShape","App","render"],"mappings":"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MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,KAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,KAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,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,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,KAAQ,CAAC,OAAO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Q,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC90B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OAChrD,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACh8C,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MA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,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,GAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,KAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OACt8C,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,GAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OACp8B,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OACjtD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OAC3gC,KAAO,CAAE,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjrC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC9iC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CA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CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAA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Q,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAC10B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACz1C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC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MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OACt8C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OACllC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,C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AAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAChuB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAC91C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KA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OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAChY,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CA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AAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,gBAC3B,IAAIA,KAAO,cAAgB,gBAC3B,IAAIA,KAAO,cAAgB,gBAC3B,IAAIA,KAAO,aAAe,gBAC1B,IAAIA,KAAO,cAAgB,kBAC3B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,aAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5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","file":"static/js/main.016efd5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a6ab37e6.svg\";","import ReactGA from 'react-ga'\n\nReactGA.initialize('UA-126702426-1', {\n  debug: false // Set to true to see debug info in the console\n})\nReactGA.pageview(window.location.pathname + window.location.search)\n","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './Header.scss'\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <img src={logo} className=\"app-logo mr-2\" alt=\"logo\" />\n          <h1 className=\"d-inline m-0\">sandify</h1>\n          <p className=\"ml-4 d-none d-lg-block\">create patterns for robots that draw in sand with ball bearings</p>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default Header\n","import { createSlice } from '@reduxjs/toolkit'\nimport ReactGA from 'react-ga'\n\nconst shapesSlice = createSlice({\n  name: 'shape',\n  initialState: {\n    currentId: null,\n    byId: {},\n    allIds: []\n  },\n  reducers: {\n    addShape(state, action) {\n      let shape = { ...action.payload }\n      state.byId[shape.id] = shape\n      state.allIds.push(shape.id)\n    },\n    setCurrentShape(state, action) {\n      state.currentId = action.payload\n      ReactGA.event({\n        category: 'Shapes',\n        action: 'setCurrentShape: ' + action.payload,\n      })\n      localStorage.setItem('currentShape', state.currentId)\n    },\n    updateShape(state, action) {\n      const shape = action.payload\n      state.byId[shape.id] = {...state.byId[shape.id], ...shape}\n    }\n  }\n})\n\nexport const {\n  addShape,\n  setCurrentShape,\n  updateShape\n} = shapesSlice.actions\n\nexport default shapesSlice.reducer\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Form,\n  Row\n} from 'react-bootstrap'\n\nclass InputOption extends Component {\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n    const optionType = option.type || 'number'\n    const minimum = (typeof option.min === 'function') ? option.min(model) : parseFloat(option.min)\n    const maximum = (typeof option.max === 'function') ? option.max(model) : parseFloat(option.max)\n    const visible = option.isVisible === undefined ? true : option.isVisible(model)\n\n    return (\n      <Row className={\"align-items-center pb-1 \" + (visible ? null : ' d-none')}>\n        <Col sm={5}>\n        <Form.Label htmlFor=\"options-step\">\n          {option.title}\n        </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Form.Control\n            id=\"options-step\"\n            as={optionType===\"textarea\" ? \"textarea\" : \"input\"}\n            type={optionType}\n            step={option.step ? option.step : 1}\n            min={!isNaN(minimum) ? minimum : ''}\n            max={!isNaN(maximum) ? maximum : ''}\n            value={model[this.props.optionKey]}\n            onChange={(event) => {\n              let attrs = {}\n              let value = event.target.value\n\n              if (optionType === 'number') value = value === '' ? '' : parseFloat(value)\n              attrs[this.props.optionKey] = value\n\n              if (option.onChange !== undefined) {\n                attrs = option.onChange(attrs, model)\n              }\n\n              this.props.onChange(attrs)\n            }} />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default InputOption\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Form,\n  Row\n} from 'react-bootstrap'\nimport Select from 'react-select'\n\nclass DropdownOption extends Component {\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n    const currentChoice = model[this.props.optionKey]\n\n    return (\n      <Row className=\"align-items-center pb-2\" key={this.props.index}>\n        <Col sm={5}>\n          <Form.Label htmlFor=\"options-dropdown\">\n            {option.title}\n          </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Select\n            value={{value: currentChoice, label: currentChoice}}\n            onChange={(choice) => {\n              const value = choice.value\n              let attrs = {}\n              attrs[this.props.optionKey] = value\n\n              if (option.onChange !== undefined) {\n                attrs = option.onChange(attrs, model)\n              }\n\n              this.props.onChange(attrs)\n            }}\n            options={option.choices.map((choice) => {\n              return { value: choice, label: choice}\n            })}\n            />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default DropdownOption\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Row,\n  Form,\n} from 'react-bootstrap'\nimport Switch from 'react-switch'\n\nclass CheckboxOption extends Component {\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n\n    return (\n      <Row className=\"align-items-center pb-2\">\n        <Col sm={5}>\n        <Form.Label htmlFor=\"options-step\">\n          {option.title}\n        </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Switch\n            checked={model[this.props.optionKey]}\n            onChange={(checked) => {\n              let attrs = {}\n              attrs[this.props.optionKey] = checked\n\n              if (option.onChange !== undefined) {\n                attrs = option.onChange(attrs, model)\n              }\n\n              this.props.onChange(attrs)\n            }} />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default CheckboxOption\n","const transformOptions = {\n  startingSize: {\n    title: 'Starting size',\n    min: 1,\n    isVisible: (state) => { return state.canChangeSize },\n  },\n  offsetX: {\n    title: 'X offset',\n  },\n  offsetY: {\n    title: 'Y offset',\n  },\n  numLoops: {\n    title: 'Number of loops',\n    min: 1\n  },\n  transformMethod: {\n    title: 'When transforming shape',\n    type: 'dropdown',\n    choices: ['smear', 'intact'],\n  },\n  growEnabled: {\n    title: 'Grow'\n  },\n  growValue: {\n    title: 'Scale step (+/-)',\n  },\n  spinEnabled: {\n    title: 'Spin'\n  },\n  spinValue: {\n    title: 'Spin step (+/-)',\n    step: 0.1\n  },\n  spinSwitchbacks: {\n    title: 'Switchbacks',\n  },\n  trackEnabled: {\n    title: 'Track'\n  },\n  trackGrowEnabled: {\n    title: 'Track grow'\n  },\n  trackValue: {\n    title: 'Track size',\n  },\n  trackNumLoops: {\n    title: 'Number of loops at each track position',\n    min: 1\n  },\n  trackLength: {\n    title: 'Track length',\n    step: 0.05\n  },\n  trackGrow: {\n    title: 'Scale step (+/-)',\n  },\n}\n\nexport default class Transform {\n  getInitialState() {\n    return {\n      startingSize: 10,\n      offsetX: 0.0,\n      offsetY: 0.0,\n      numLoops: 10,\n      transformMethod: 'smear',\n      repeatEnabled: true,\n      growEnabled: true,\n      growValue: 100,\n      spinEnabled: false,\n      spinValue: 2,\n      spinSwitchbacks: 0,\n      trackEnabled: false,\n      trackGrowEnabled: false,\n      trackValue: 10,\n      trackLength: 0.2,\n      trackNumLoops: 1,\n      trackGrow: 50.0\n    }\n  }\n\n  getOptions() {\n    return transformOptions\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport Transform from '../../models/Transform'\n\nconst transformsSlice = createSlice({\n  name: 'transforms',\n  initialState: {\n    byId: {},\n    allIds: []\n  },\n  reducers: {\n    addTransform(state, action) {\n      const transform = action.payload\n      const meta = new Transform()\n      state.byId[transform.id] = {...meta.getInitialState(), ...transform}\n      state.allIds.push(transform.id)\n    },\n    updateTransform(state, action) {\n      const transform = action.payload\n      state.byId[transform.id] = {...state.byId[transform.id], ...transform}\n    },\n    toggleRepeat(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].repeatEnabled = !state.byId[transform.id].repeatEnabled\n    },\n    toggleGrow(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].growEnabled = !state.byId[transform.id].growEnabled\n    },\n    toggleSpin(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].spinEnabled = !state.byId[transform.id].spinEnabled\n    },\n    toggleTrack(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].trackEnabled = !state.byId[transform.id].trackEnabled\n    },\n    toggleTrackGrow(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].trackGrowEnabled = !state.byId[transform.id].trackGrowEnabled\n    },\n  }\n})\n\nexport const {\n  addTransform,\n  updateTransform,\n  toggleRepeat,\n  toggleSpin,\n  toggleGrow,\n  toggleTrack,\n  toggleTrackGrow,\n} = transformsSlice.actions\n\nexport default transformsSlice.reducer\n","export const shapeOptions = {}\n\nexport default class Shape {\n  constructor(name) {\n    this.name = name\n    this.cache = []\n  }\n\n  getInitialState() {\n    return {\n      repeatEnabled: true,\n      canTransform: true,\n      selectGroup: 'Shapes',\n      shouldCache: true,\n    }\n  }\n\n  getInitialTransformState() {\n    return {\n      startingSize: 10,\n      canChangeSize: true,\n    }\n  }\n\n  getOptions() {\n    return shapeOptions\n  }\n\n  getVertices(state) {\n    return []\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    circleLobes: {\n      title: 'Number of lobes',\n      min: 1\n    }\n  }\n}\n\nexport default class Circle extends Shape {\n  constructor() {\n    super('Circle')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'circle',\n        circleLobes: 1\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<=128; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      points.push(new Victor(Math.cos(angle), Math.sin(state.shape.circleLobes * angle)/state.shape.circleLobes))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export const difference = (a, b) => {\n  return new Set(\n    [\n      ...[...a].filter(x => !b.has(x)),\n      ...[...b].filter(x => !a.has(x))\n    ]\n  )\n}\n\n// round a given number n to p number of digits\nexport const roundP = (n, p) => {\n  return Math.round((n + Number.EPSILON) * Math.pow(10, p)) / Math.pow(10, p)\n}\n\n// https://stackoverflow.com/a/4652513\nexport const reduce = (numerator, denominator) => {\n  let gcd = (a,b) => {\n    return b ? gcd(b, a%b) : a;\n  }\n\n  gcd = gcd(numerator, denominator)\n  return [numerator/gcd, denominator/gcd]\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\nimport { reduce } from '../common/util'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    epicycloidA: {\n      title: \"Large circle radius\",\n      min: 1\n    },\n    epicycloidB: {\n      title: \"Small circle radius\",\n      min: 1\n    },\n  }\n}\n\nexport default class Epicycloid extends Shape {\n  constructor() {\n    super('Clover')\n    this.link = 'http://mathworld.wolfram.com/Epicycloid.html'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'epicycloid',\n        epicycloidA: 4,\n        epicycloidB: 1\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = parseInt(state.shape.epicycloidA)\n    let b = parseInt(state.shape.epicycloidB)\n    let reduced = reduce(a, b)\n    a = reduced[0]\n    b = reduced[1]\n    let rotations = Number.isInteger(a/b) ? 1 : b\n    let scale = 1/(a + 2*b)\n\n    for (let i=0; i<128*rotations; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      points.push(\n        new Victor(\n          (a + b) * Math.cos(angle) - b * Math.cos(((a + b) / b) * angle),\n          (a + b) * Math.sin(angle) - b * Math.sin(((a + b) / b) * angle)\n        ).multiply({x: scale, y: scale})\n      )\n    }\n\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export default class Orbit {\n  constructor(x, y, r, level, settings, parent) {\n    this.x = x\n    this.y = y\n    this.r = r\n    this.child = null\n    this.angle = Math.PI/2\n    this.level = level\n    this.settings = settings\n\n    let sign = this.settings.alternateRotation ? -1 : 1\n    this.speed = Math.pow(settings.velocity * sign, this.level - 1) * Math.PI / 180 / settings.resolution\n    this.parent = parent\n  }\n\n  addChild() {\n    let newr = this.r / this.settings.relativeSize\n    let newx = this.x + this.r + newr\n    let newy = this.y\n    this.child = new Orbit(newx, newy, newr, this.level + 1, this.settings, this)\n    return this.child\n  }\n\n  update() {\n    if (this.parent) {\n      this.angle += this.speed\n\n      let rsum = this.r + this.parent.r\n      this.x = this.parent.x + rsum * Math.cos(this.angle)\n      this.y = this.parent.y + rsum * Math.sin(this.angle)\n    }\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from '../Shape'\nimport Orbit from './Orbit'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    fractalSpirographVelocity: {\n      title: 'Velocity',\n      min: 2\n    },\n    fractalSpirographResolution: {\n      title: 'Resolution',\n      min: 1\n    },\n    fractalSpirographNumCircles: {\n      title: 'Number of circles',\n      min: 1,\n      max: 6\n    },\n    fractalSpirographRelativeSize: {\n      title: 'Relative size (parent to child circle)',\n      min: 2,\n      max: 6\n    },\n    fractalSpirographAlternateRotation: {\n      title: 'Alternate rotation direction',\n      type: 'checkbox'\n    },\n  }\n}\n\n// Inspired/adapted from https://thecodingtrain.com/CodingChallenges/061-fractal-spirograph\nexport default class FractalSpirograph extends Shape {\n  constructor() {\n    super('Fractal Spirograph')\n    this.link = 'https://benice-equation.blogspot.com/2012/01/fractal-spirograph.html'\n    this.linkText = 'Fun math art (pictures) - benice equation'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'fractal_spirograph',\n        fractalSpirographVelocity: 8,\n        fractalSpirographResolution: 2,\n        fractalSpirographNumCircles: 5,\n        fractalSpirographRelativeSize: 3,\n        fractalSpirographAlternateRotation: true,\n      }\n    }\n  }\n\n  getInitialTransformState() {\n    return {\n      ...super.getInitialTransformState(),\n      ...{\n        startingSize: 54,\n        repeatEnabled: false,\n      }\n    }\n  }\n\n  getVertices(state) {\n    let resolution = parseInt(state.shape.fractalSpirographResolution)\n    let settings = {\n      resolution: resolution,\n      velocity: parseInt(state.shape.fractalSpirographVelocity),\n      numCircles: parseInt(state.shape.fractalSpirographNumCircles),\n      relativeSize: parseInt(state.shape.fractalSpirographRelativeSize),\n      alternateRotation: state.shape.fractalSpirographAlternateRotation\n    }\n\n    let sun = new Orbit(0, 0, 1, 0, settings)\n    let next = sun\n    let end\n    let points = []\n\n    for (var i=0; i<settings.numCircles; i++) {\n      next = next.addChild()\n    }\n    end = next\n\n    for (let i=0; i<resolution; i++) {\n      for (let j=0; j<361; j++) {\n        let next = sun\n\n        while (next != null) {\n          next.update()\n          next = next.child\n        }\n\n        points.push(new Victor(end.x, end.y))\n      }\n    }\n\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape from './Shape'\n\nexport default class Heart extends Shape {\n  constructor() {\n    super('Heart')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'heart',\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<128; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      let scale = 0.9\n      // heart equation from: http://mathworld.wolfram.com/HeartCurve.html\n      points.push(new Victor(scale * 1.0 * Math.pow(Math.sin(angle), 3),\n                         scale * (13.0/16.0 * Math.cos(angle) +\n                                    -5.0/16.0 * Math.cos(2.0 * angle) +\n                                    -2.0/16.0 * Math.cos(3.0 * angle) +\n                                    -1.0/16.0 * Math.cos(4.0 * angle))))\n    }\n    return points\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\nimport { reduce } from '../common/util'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    hypocycloidA: {\n      title: 'Large circle radius',\n      min: 1\n    },\n    hypocycloidB: {\n      title: 'Small circle radius',\n      min: 1\n    },\n  }\n}\n\nexport default class Star extends Shape {\n  constructor() {\n    super('Web')\n    this.link = 'http://mathworld.wolfram.com/Hypocycloid.html'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'hypocycloid',\n        hypocycloidA: 6,\n        hypocycloidB: 1\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = parseInt(state.shape.hypocycloidA)\n    let b = parseInt(state.shape.hypocycloidB)\n    let reduced = reduce(a, b)\n    a = reduced[0]\n    b = reduced[1]\n    let rotations = Number.isInteger(a/b) ? 1 : b\n    let scale = b < a ? 1/a : 1/(2*(b - a/2))\n\n    for (let i=0; i<128*rotations; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      points.push(\n        new Victor(\n          (a - b) * Math.cos(angle) + b * Math.cos(((a - b) / b) * angle),\n          (a - b) * Math.sin(angle) - b * Math.sin(((a - b) / b) * angle)\n        ).multiply({x: scale, y: scale})\n      )\n    }\n\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export let raysol_cursive = {\n  ' ' : [ [0.000,-0.786], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786],  ],\n  '0' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.549,-0.786], [0.570,-0.779], [0.641,-0.741], [0.729,-0.673], [0.754,-0.642], [0.799,-0.548], [0.833,-0.422], [0.833,-0.317], [0.833,-0.211], [0.833,-0.106], [0.833,-0.001], [0.833,0.105], [0.833,0.210], [0.833,0.315], [0.833,0.421], [0.833,0.531], [0.810,0.599], [0.779,0.645], [0.749,0.690], [0.711,0.738], [0.629,0.786], [0.570,0.786], [0.513,0.786], [0.442,0.738], [0.374,0.690], [0.340,0.645], [0.315,0.599], [0.289,0.531], [0.289,0.422], [0.289,0.313], [0.289,0.204], [0.289,0.095], [0.289,-0.014], [0.289,-0.123], [0.289,-0.232], [0.289,-0.341], [0.289,-0.450], [0.315,-0.559], [0.351,-0.655], [0.388,-0.701], [0.449,-0.742], [0.489,-0.762], [0.549,-0.786], [0.655,-0.786], [0.731,-0.786], [0.816,-0.786], [0.901,-0.786], [0.986,-0.786], [1.071,-0.786], [1.156,-0.786],  ],\n  '1' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.629], [0.340,-0.472], [0.340,-0.315], [0.340,-0.157], [0.340,-0.000], [0.340,0.157], [0.340,0.314], [0.340,0.472], [0.340,0.629], [0.340,0.786], [0.340,0.629], [0.340,0.472], [0.340,0.314], [0.340,0.157], [0.340,-0.000], [0.340,-0.157], [0.340,-0.315], [0.340,-0.472], [0.340,-0.629], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786],  ],\n  '2' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.702], [0.442,-0.537], [0.544,-0.330], [0.624,-0.174], [0.660,0.032], [0.687,0.212], [0.698,0.295], [0.708,0.427], [0.714,0.514], [0.708,0.595], [0.690,0.659], [0.677,0.702], [0.663,0.726], [0.629,0.752], [0.587,0.769], [0.544,0.760], [0.493,0.744], [0.442,0.727], [0.374,0.701], [0.306,0.625], [0.247,0.574], [0.306,0.625], [0.374,0.701], [0.442,0.727], [0.493,0.744], [0.544,0.760], [0.587,0.769], [0.629,0.752], [0.663,0.726], [0.677,0.702], [0.690,0.659], [0.708,0.595], [0.714,0.514], [0.708,0.427], [0.698,0.295], [0.687,0.212], [0.660,0.032], [0.624,-0.174], [0.544,-0.330], [0.442,-0.537], [0.340,-0.702], [0.425,-0.701], [0.544,-0.633], [0.612,-0.599], [0.680,-0.574], [0.765,-0.591], [0.850,-0.616], [0.935,-0.667], [1.020,-0.744], [1.105,-0.786],  ],\n  '3' : [ [0.085,-0.786], [0.170,-0.786], [0.272,-0.786], [0.330,-0.786], [0.405,-0.786], [0.442,-0.786], [0.493,-0.772], [0.559,-0.752], [0.612,-0.718], [0.648,-0.683], [0.677,-0.653], [0.707,-0.618], [0.731,-0.548], [0.764,-0.473], [0.782,-0.396], [0.784,-0.312], [0.775,-0.241], [0.765,-0.181], [0.751,-0.123], [0.700,-0.029], [0.620,0.021], [0.544,0.038], [0.425,0.056], [0.557,0.087], [0.586,0.111], [0.640,0.165], [0.697,0.234], [0.734,0.337], [0.749,0.431], [0.741,0.516], [0.726,0.600], [0.712,0.659], [0.672,0.740], [0.641,0.777], [0.586,0.786], [0.537,0.777], [0.485,0.769], [0.412,0.744], [0.331,0.710], [0.412,0.744], [0.485,0.769], [0.537,0.777], [0.586,0.786], [0.641,0.777], [0.672,0.740], [0.712,0.659], [0.726,0.600], [0.741,0.516], [0.749,0.431], [0.734,0.337], [0.697,0.234], [0.640,0.165], [0.586,0.111], [0.557,0.087], [0.484,0.056], [0.544,0.038], [0.620,0.021], [0.700,-0.029], [0.751,-0.123], [0.765,-0.181], [0.775,-0.241], [0.784,-0.312], [0.782,-0.396], [0.764,-0.473], [0.731,-0.548], [0.707,-0.618], [0.677,-0.653], [0.648,-0.683], [0.612,-0.718], [0.559,-0.752], [0.493,-0.772], [0.425,-0.761], [0.357,-0.744], [0.289,-0.718], [0.221,-0.616], [0.289,-0.718], [0.357,-0.744], [0.425,-0.761], [0.493,-0.772], [0.559,-0.752], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  '4' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.765,-0.629], [0.765,-0.472], [0.765,-0.315], [0.765,-0.157], [0.765,-0.000], [0.765,0.157], [0.765,0.314], [0.765,0.472], [0.765,0.629], [0.765,0.786], [0.680,0.655], [0.595,0.524], [0.510,0.393], [0.425,0.262], [0.340,0.131], [0.255,-0.000], [0.356,-0.000], [0.457,-0.000], [0.558,-0.000], [0.659,-0.000], [0.760,-0.000], [0.861,-0.000], [0.962,-0.000], [1.062,-0.000], [1.139,-0.000], [1.062,-0.000], [0.962,-0.000], [0.861,-0.000], [0.760,-0.000], [0.765,-0.157], [0.765,-0.315], [0.765,-0.472], [0.765,-0.629], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786],  ],\n  '5' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.438,-0.786], [0.520,-0.786], [0.607,-0.786], [0.659,-0.783], [0.730,-0.749], [0.796,-0.698], [0.853,-0.612], [0.884,-0.497], [0.892,-0.319], [0.887,-0.167], [0.850,-0.064], [0.795,0.038], [0.744,0.100], [0.680,0.122], [0.608,0.144], [0.540,0.123], [0.441,0.081], [0.378,0.043], [0.302,-0.014], [0.302,0.145], [0.302,0.303], [0.302,0.461], [0.302,0.619], [0.302,0.727], [0.359,0.727], [0.415,0.727], [0.471,0.727], [0.528,0.727], [0.584,0.727], [0.640,0.727], [0.731,0.727], [0.850,0.727], [0.731,0.727], [0.640,0.727], [0.584,0.727], [0.528,0.727], [0.471,0.727], [0.415,0.727], [0.359,0.727], [0.302,0.727], [0.302,0.619], [0.302,0.461], [0.302,0.303], [0.302,0.145], [0.302,-0.014], [0.378,0.043], [0.441,0.081], [0.540,0.123], [0.608,0.144], [0.680,0.122], [0.744,0.100], [0.795,0.038], [0.850,-0.064], [0.887,-0.167], [0.892,-0.319], [0.884,-0.497], [0.853,-0.612], [0.796,-0.698], [0.730,-0.749], [0.659,-0.783], [0.607,-0.786], [0.520,-0.786], [0.425,-0.752], [0.357,-0.701], [0.289,-0.616], [0.238,-0.531], [0.187,-0.489], [0.153,-0.472], [0.187,-0.489], [0.238,-0.531], [0.289,-0.616], [0.357,-0.701], [0.425,-0.752], [0.520,-0.786], [0.607,-0.786], [0.659,-0.786], [0.816,-0.786], [0.901,-0.786], [0.986,-0.786], [1.071,-0.786], [1.156,-0.786], [1.241,-0.786], [1.326,-0.786],  ],\n  '6' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.449,-0.742], [0.489,-0.762], [0.549,-0.786], [0.655,-0.779], [0.726,-0.741], [0.814,-0.673], [0.839,-0.642], [0.866,-0.607], [0.924,-0.422], [0.926,-0.323], [0.911,-0.213], [0.895,-0.168], [0.864,-0.099], [0.834,-0.053], [0.796,-0.005], [0.720,0.034], [0.619,0.042], [0.557,0.034], [0.513,0.025], [0.453,-0.002], [0.332,-0.071], [0.373,0.033], [0.414,0.137], [0.455,0.241], [0.496,0.345], [0.538,0.449], [0.579,0.553], [0.620,0.657], [0.661,0.761], [0.620,0.657], [0.579,0.553], [0.538,0.449], [0.496,0.345], [0.455,0.241], [0.414,0.137], [0.373,0.033], [0.332,-0.071], [0.276,-0.200], [0.263,-0.274], [0.255,-0.347], [0.274,-0.489], [0.306,-0.559], [0.351,-0.655], [0.391,-0.701], [0.489,-0.762], [0.549,-0.786], [0.655,-0.779], [0.731,-0.786], [0.816,-0.786], [0.901,-0.786], [0.986,-0.786], [1.071,-0.786], [1.156,-0.786],  ],\n  '7' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.391,-0.629], [0.442,-0.472], [0.493,-0.315], [0.544,-0.157], [0.595,-0.000], [0.646,0.157], [0.697,0.314], [0.748,0.472], [0.799,0.629], [0.850,0.786], [0.776,0.786], [0.701,0.786], [0.627,0.786], [0.552,0.786], [0.478,0.786], [0.404,0.786], [0.329,0.786], [0.255,0.786], [0.329,0.786], [0.404,0.786], [0.478,0.786], [0.552,0.786], [0.627,0.786], [0.701,0.786], [0.776,0.786], [0.850,0.786], [0.799,0.629], [0.748,0.472], [0.697,0.314], [0.646,0.157], [0.595,-0.000], [0.544,-0.157], [0.493,-0.315], [0.442,-0.472], [0.391,-0.629], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '8' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.556,-0.784], [0.618,-0.786], [0.695,-0.763], [0.756,-0.733], [0.795,-0.664], [0.853,-0.560], [0.878,-0.429], [0.870,-0.334], [0.846,-0.267], [0.797,-0.132], [0.740,-0.033], [0.674,0.065], [0.643,0.098], [0.611,0.132], [0.561,0.166], [0.527,0.200], [0.493,0.247], [0.459,0.293], [0.425,0.361], [0.391,0.446], [0.408,0.545], [0.459,0.644], [0.510,0.701], [0.570,0.734], [0.643,0.760], [0.716,0.734], [0.777,0.701], [0.828,0.644], [0.879,0.545], [0.896,0.446], [0.862,0.361], [0.828,0.293], [0.794,0.247], [0.760,0.200], [0.726,0.166], [0.676,0.132], [0.579,0.098], [0.548,0.065], [0.481,-0.033], [0.425,-0.132], [0.376,-0.267], [0.352,-0.334], [0.344,-0.429], [0.369,-0.560], [0.427,-0.664], [0.466,-0.733], [0.527,-0.763], [0.603,-0.786], [0.666,-0.784], [0.695,-0.763], [0.756,-0.733], [0.795,-0.664], [0.853,-0.560], [0.878,-0.429], [0.870,-0.334], [0.846,-0.267], [0.797,-0.132], [0.740,-0.033], [0.797,-0.132], [0.846,-0.267], [0.870,-0.334], [0.878,-0.429], [0.853,-0.560], [0.795,-0.664], [0.756,-0.733], [0.695,-0.763], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '9' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.714,-0.786], [0.717,-0.612], [0.717,-0.455], [0.717,-0.297], [0.717,-0.139], [0.717,0.019], [0.717,0.177], [0.717,0.335], [0.717,0.493], [0.717,0.650], [0.717,0.786], [0.648,0.786], [0.521,0.786], [0.415,0.744], [0.340,0.659], [0.306,0.523], [0.292,0.364], [0.299,0.230], [0.317,0.147], [0.339,0.086], [0.387,-0.030], [0.442,-0.063], [0.509,-0.055], [0.558,-0.030], [0.618,-0.004], [0.663,0.013], [0.717,0.019], [0.717,-0.139], [0.717,-0.297], [0.717,-0.455], [0.717,-0.612], [0.714,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  'A' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.459,-0.781], [0.534,-0.759], [0.623,-0.711], [0.715,-0.601], [0.793,-0.507], [0.715,-0.601], [0.623,-0.711], [0.534,-0.759], [0.459,-0.781], [0.383,-0.743], [0.308,-0.661], [0.250,-0.586], [0.206,-0.475], [0.173,-0.322], [0.170,-0.191], [0.187,-0.003], [0.227,0.147], [0.284,0.286], [0.339,0.375], [0.435,0.509], [0.521,0.596], [0.637,0.685], [0.790,0.761], [0.865,0.786], [0.863,0.706], [0.861,0.583], [0.859,0.460], [0.857,0.337], [0.855,0.213], [0.853,0.090], [0.851,-0.033], [0.849,-0.156], [0.848,-0.280], [0.846,-0.403], [0.847,-0.466], [0.868,-0.563], [0.954,-0.635], [1.033,-0.701], [1.109,-0.744], [1.213,-0.786],  ],\n  'B' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.255,-0.629], [0.255,-0.471], [0.255,-0.313], [0.255,-0.155], [0.255,0.002], [0.255,0.160], [0.255,0.318], [0.255,0.476], [0.255,0.633], [0.281,0.659], [0.327,0.701], [0.380,0.744], [0.445,0.773], [0.501,0.777], [0.552,0.777], [0.589,0.761], [0.646,0.726], [0.699,0.680], [0.733,0.630], [0.764,0.556], [0.761,0.455], [0.748,0.389], [0.723,0.285], [0.689,0.191], [0.621,0.106], [0.517,0.064], [0.476,0.064], [0.517,0.064], [0.596,0.025], [0.650,-0.037], [0.680,-0.062], [0.748,-0.148], [0.791,-0.248], [0.809,-0.312], [0.814,-0.452], [0.811,-0.490], [0.796,-0.566], [0.780,-0.620], [0.697,-0.718], [0.622,-0.762], [0.572,-0.786], [0.476,-0.786], [0.374,-0.786], [0.255,-0.786], [0.374,-0.786], [0.476,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  'C' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.752], [0.459,-0.693], [0.397,-0.605], [0.357,-0.548], [0.332,-0.452], [0.306,-0.327], [0.298,-0.208], [0.298,-0.106], [0.298,0.016], [0.318,0.183], [0.338,0.310], [0.385,0.442], [0.462,0.585], [0.548,0.675], [0.652,0.746], [0.776,0.786], [0.872,0.767], [0.963,0.643], [1.019,0.491], [1.040,0.351], [1.019,0.491], [0.963,0.643], [0.872,0.767], [0.776,0.786], [0.652,0.746], [0.548,0.675], [0.462,0.585], [0.385,0.442], [0.338,0.310], [0.318,0.183], [0.298,0.016], [0.298,-0.106], [0.298,-0.208], [0.306,-0.327], [0.332,-0.452], [0.397,-0.605], [0.459,-0.693], [0.544,-0.748], [0.682,-0.786], [0.777,-0.786], [0.850,-0.786], [0.884,-0.786], [0.953,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786],  ],\n  'D' : [ [0.123,-0.786], [0.213,-0.786], [0.321,-0.786], [0.401,-0.786], [0.465,-0.786], [0.544,-0.786], [0.639,-0.786], [0.772,-0.764], [0.918,-0.711], [0.955,-0.676], [1.020,-0.592], [1.072,-0.460], [1.090,-0.357], [1.104,-0.199], [1.103,-0.111], [1.082,0.035], [1.062,0.183], [1.037,0.271], [1.009,0.356], [0.982,0.435], [0.899,0.546], [0.816,0.633], [0.748,0.684], [0.646,0.741], [0.566,0.766], [0.496,0.761], [0.425,0.733], [0.425,0.604], [0.425,0.526], [0.425,0.343], [0.425,0.149], [0.425,-0.030], [0.425,-0.156], [0.425,-0.442], [0.425,-0.544], [0.425,-0.701], [0.465,-0.786], [0.544,-0.786], [0.639,-0.786], [0.748,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786],  ],\n  'E' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.701], [0.381,-0.614], [0.317,-0.487], [0.277,-0.361], [0.274,-0.221], [0.309,-0.157], [0.356,-0.115], [0.405,-0.072], [0.493,-0.030], [0.563,0.006], [0.629,0.027], [0.714,0.027], [0.629,0.027], [0.570,0.064], [0.509,0.120], [0.474,0.143], [0.386,0.229], [0.331,0.313], [0.291,0.438], [0.293,0.552], [0.320,0.660], [0.383,0.743], [0.478,0.786], [0.564,0.786], [0.629,0.786], [0.675,0.786], [0.723,0.786], [0.799,0.786], [0.723,0.786], [0.675,0.786], [0.629,0.786], [0.564,0.786], [0.478,0.786], [0.383,0.743], [0.320,0.660], [0.293,0.552], [0.291,0.438], [0.331,0.313], [0.386,0.229], [0.474,0.143], [0.509,0.120], [0.570,0.064], [0.629,0.027], [0.714,0.027], [0.629,0.027], [0.563,0.006], [0.493,-0.030], [0.405,-0.072], [0.356,-0.115], [0.309,-0.157], [0.274,-0.221], [0.277,-0.361], [0.317,-0.487], [0.381,-0.614], [0.443,-0.698], [0.500,-0.735], [0.583,-0.769], [0.695,-0.781], [0.786,-0.780], [0.864,-0.780], [0.935,-0.779],  ],\n  'F' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.578,-0.786], [0.663,-0.786], [0.724,-0.767], [0.792,-0.699], [0.852,-0.558], [0.853,-0.440], [0.854,-0.321], [0.855,-0.203], [0.856,-0.085], [0.857,0.034], [0.858,0.152], [0.859,0.270], [0.860,0.389], [0.861,0.507], [0.863,0.625], [0.969,0.608], [1.076,0.588], [1.173,0.616], [1.282,0.654], [1.394,0.701], [1.282,0.654], [1.173,0.616], [1.076,0.588], [0.969,0.608], [0.863,0.625], [0.763,0.663], [0.633,0.713], [0.466,0.713], [0.317,0.628], [0.247,0.404], [0.317,0.628], [0.466,0.713], [0.633,0.713], [0.763,0.663], [0.863,0.625], [0.861,0.507], [0.860,0.389], [0.859,0.270], [0.858,0.152], [0.857,0.034], [0.742,0.037], [0.631,0.054], [0.442,0.071], [0.631,0.054], [0.742,0.037], [0.857,0.034], [0.960,0.035], [1.075,0.043], [1.224,0.052], [1.075,0.043], [0.960,0.035], [0.857,0.034], [0.856,-0.085], [0.855,-0.203], [0.854,-0.321], [0.854,-0.395], [0.850,-0.506], [0.852,-0.558], [0.833,-0.650], [0.773,-0.713], [0.663,-0.769], [0.591,-0.766], [0.564,-0.774], [0.537,-0.774], [0.501,-0.766], [0.452,-0.701], [0.420,-0.650], [0.413,-0.583], [0.422,-0.519], [0.474,-0.465], [0.511,-0.442], [0.573,-0.438], [0.653,-0.442], [0.740,-0.496], [0.866,-0.616], [0.927,-0.687], [1.035,-0.756], [1.079,-0.803], [1.211,-0.837], [1.310,-0.829], [1.406,-0.820], [1.491,-0.786],  ],\n  'G' : [ [0.085,-0.786], [0.171,-0.761], [0.245,-0.712], [0.316,-0.660], [0.389,-0.609], [0.489,-0.507], [0.573,-0.398], [0.610,-0.341], [0.658,-0.254], [0.708,-0.125], [0.757,0.004], [0.782,0.082], [0.819,0.177], [0.837,0.274], [0.857,0.392], [0.880,0.508], [0.884,0.597], [0.881,0.711], [0.842,0.799], [0.762,0.772], [0.720,0.745], [0.697,0.705], [0.640,0.590], [0.631,0.560], [0.612,0.445], [0.607,0.395], [0.628,0.243], [0.653,0.178], [0.695,0.088], [0.834,-0.031], [0.931,-0.028], [1.047,0.038], [1.117,0.106], [1.179,0.236], [1.262,0.405], [1.246,0.225], [1.209,-0.096], [1.181,-0.235], [1.140,-0.389], [1.103,-0.495], [1.032,-0.625], [0.956,-0.707], [0.865,-0.758], [0.770,-0.787], [0.681,-0.782], [0.598,-0.762], [0.500,-0.710], [0.455,-0.632], [0.427,-0.556], [0.380,-0.481], [0.324,-0.330], [0.465,-0.389], [0.637,-0.468], [0.784,-0.548], [0.909,-0.586], [1.032,-0.625], [1.141,-0.663], [1.245,-0.677], [1.351,-0.699], [1.489,-0.744], [1.611,-0.786],  ],\n  'H' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.496,-0.786], [0.496,-0.609], [0.496,-0.479], [0.496,-0.348], [0.496,-0.217], [0.496,-0.086], [0.496,0.044], [0.496,0.175], [0.496,0.306], [0.496,0.404], [0.496,0.508], [0.476,0.604], [0.453,0.687], [0.391,0.744], [0.272,0.786], [0.391,0.744], [0.453,0.687], [0.476,0.604], [0.496,0.508], [0.496,0.404], [0.496,0.306], [0.496,0.175], [0.496,0.044], [0.635,0.071], [0.774,0.097], [0.913,0.123], [1.051,0.149], [1.105,0.175], [1.105,0.306], [1.105,0.404], [1.105,0.508], [1.105,0.616], [1.122,0.701], [1.165,0.760], [1.275,0.786], [1.165,0.760], [1.122,0.701], [1.105,0.616], [1.105,0.508], [1.105,0.404], [1.105,0.306], [1.105,0.175], [1.105,0.044], [1.105,-0.086], [1.105,-0.217], [1.105,-0.348], [1.105,-0.479], [1.105,-0.609], [1.139,-0.701], [1.190,-0.761], [1.275,-0.778], [1.360,-0.786], [1.445,-0.786], [1.530,-0.786],  ],\n  'I' : [ [0.085,-0.786], [0.170,-0.786], [0.289,-0.786], [0.425,-0.786], [0.515,-0.773], [0.596,-0.794], [0.685,-0.801], [0.782,-0.773], [0.838,-0.602], [0.914,-0.473], [0.876,-0.349], [0.832,-0.152], [0.789,0.006], [0.773,0.196], [0.765,0.298], [0.773,0.517], [0.799,0.650], [0.833,0.740], [0.884,0.802], [1.020,0.804], [1.071,0.800], [1.120,0.702], [1.151,0.628], [1.189,0.387], [1.198,0.208], [1.180,-0.065], [1.165,-0.166], [1.100,-0.403], [1.046,-0.509], [1.007,-0.577], [0.899,-0.681], [0.782,-0.773], [0.685,-0.801], [0.596,-0.794], [0.515,-0.773], [0.420,-0.719], [0.381,-0.640], [0.357,-0.564], [0.317,-0.488], [0.271,-0.336], [0.408,-0.397], [0.574,-0.479], [0.716,-0.562], [0.838,-0.602], [0.958,-0.643], [1.064,-0.683], [1.168,-0.699], [1.271,-0.722], [1.408,-0.761], [1.529,-0.786],  ],\n  'J' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.457,-0.733], [0.593,-0.715], [0.428,-0.508], [0.343,-0.336], [0.301,-0.096], [0.292,0.057], [0.286,0.286], [0.316,0.532], [0.382,0.703], [0.439,0.754], [0.506,0.780], [0.591,0.790], [0.690,0.782], [0.734,0.739], [0.789,0.616], [0.802,0.553], [0.814,0.386], [0.818,0.209], [0.808,-0.059], [0.799,-0.253], [0.787,-0.441], [0.780,-0.614], [0.767,-0.807], [0.752,-0.952], [0.760,-1.127], [0.737,-1.292], [0.712,-1.438], [0.661,-1.505], [0.604,-1.531], [0.426,-1.533], [0.365,-1.508], [0.310,-1.439], [0.298,-1.296], [0.310,-1.143], [0.346,-0.955], [0.397,-0.844], [0.457,-0.733], [0.588,-0.715], [0.675,-0.731], [0.762,-0.748], [0.849,-0.764], [0.935,-0.780], [1.021,-0.779], [1.106,-0.779], [1.188,-0.786],  ],\n  'K' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.540,-0.627], [0.551,-0.494], [0.562,-0.360], [0.574,-0.227], [0.585,-0.094], [0.596,0.040], [0.580,0.158], [0.563,0.276], [0.547,0.393], [0.530,0.511], [0.514,0.629], [0.497,0.747], [0.442,0.744], [0.382,0.736], [0.317,0.679], [0.268,0.607], [0.223,0.532], [0.268,0.607], [0.317,0.679], [0.382,0.736], [0.442,0.744], [0.497,0.747], [0.514,0.629], [0.530,0.511], [0.547,0.393], [0.563,0.276], [0.580,0.158], [0.596,0.040], [0.689,0.087], [0.752,0.165], [0.815,0.242], [0.878,0.320], [0.941,0.397], [1.004,0.475], [1.067,0.553], [1.130,0.630], [1.149,0.740], [1.130,0.630], [1.067,0.553], [1.004,0.475], [0.941,0.397], [0.878,0.320], [0.815,0.242], [0.752,0.165], [0.689,0.087], [0.626,0.010], [0.675,-0.067], [0.725,-0.143], [0.775,-0.219], [0.825,-0.295], [0.875,-0.371], [0.925,-0.448], [0.974,-0.524], [1.024,-0.600], [1.074,-0.676], [1.124,-0.761], [1.220,-0.786], [1.299,-0.786], [1.363,-0.786], [1.442,-0.786], [1.526,-0.786],  ],\n  'L' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.323,-0.778], [0.370,-0.766], [0.406,-0.774], [0.433,-0.774], [0.460,-0.766], [0.520,-0.743], [0.558,-0.713], [0.629,-0.650], [0.681,-0.570], [0.717,-0.506], [0.723,-0.395], [0.739,-0.305], [0.748,-0.179], [0.751,-0.045], [0.743,0.148], [0.741,0.224], [0.757,0.263], [0.749,0.353], [0.776,0.537], [0.788,0.600], [0.824,0.711], [0.872,0.783], [0.894,0.827], [0.968,0.850], [1.027,0.795], [1.061,0.723], [1.082,0.596], [1.071,0.517], [1.050,0.464], [0.971,0.366], [0.940,0.343], [0.848,0.288], [0.808,0.275], [0.660,0.257], [0.624,0.259], [0.500,0.288], [0.386,0.343], [0.285,0.410], [0.386,0.343], [0.500,0.288], [0.624,0.259], [0.660,0.257], [0.808,0.275], [0.848,0.288], [0.940,0.343], [0.971,0.366], [1.050,0.464], [1.071,0.517], [1.082,0.596], [1.061,0.723], [1.027,0.795], [0.968,0.850], [0.894,0.827], [0.872,0.783], [0.824,0.711], [0.788,0.600], [0.776,0.537], [0.749,0.353], [0.757,0.263], [0.741,0.224], [0.743,0.148], [0.751,-0.045], [0.748,-0.179], [0.739,-0.305], [0.723,-0.395], [0.717,-0.506], [0.681,-0.570], [0.629,-0.650], [0.558,-0.713], [0.520,-0.743], [0.460,-0.766], [0.433,-0.774], [0.406,-0.774], [0.370,-0.766], [0.320,-0.701], [0.289,-0.650], [0.282,-0.583], [0.291,-0.519], [0.343,-0.465], [0.379,-0.442], [0.442,-0.438], [0.521,-0.442], [0.609,-0.496], [0.734,-0.616], [0.796,-0.687], [0.904,-0.756], [0.948,-0.786], [1.080,-0.786], [1.179,-0.786], [1.275,-0.786], [1.360,-0.786],  ],\n  'M' : [ [0.085,-0.786], [0.213,-0.786], [0.340,-0.786], [0.468,-0.786], [0.583,-0.736], [0.593,-0.622], [0.603,-0.507], [0.613,-0.393], [0.623,-0.278], [0.633,-0.164], [0.643,-0.049], [0.653,0.065], [0.663,0.180], [0.673,0.294], [0.683,0.409], [0.655,0.534], [0.628,0.634], [0.592,0.749], [0.500,0.795], [0.412,0.754], [0.321,0.685], [0.238,0.576], [0.321,0.685], [0.412,0.754], [0.500,0.795], [0.592,0.749], [0.628,0.634], [0.655,0.534], [0.683,0.409], [0.673,0.294], [0.663,0.180], [0.653,0.065], [0.643,-0.049], [0.633,-0.164], [0.623,-0.278], [0.613,-0.393], [0.603,-0.507], [0.593,-0.622], [0.583,-0.736], [0.593,-0.622], [0.603,-0.507], [0.613,-0.393], [0.623,-0.278], [0.633,-0.164], [0.643,-0.049], [0.653,0.065], [0.663,0.180], [0.673,0.294], [0.683,0.409], [0.727,0.575], [0.800,0.719], [0.921,0.793], [1.057,0.807], [1.122,0.730], [1.162,0.644], [1.188,0.569], [1.233,0.406], [1.223,0.292], [1.214,0.178], [1.205,0.063], [1.196,-0.051], [1.187,-0.166], [1.177,-0.280], [1.168,-0.394], [1.159,-0.509], [1.150,-0.623], [1.140,-0.737], [1.150,-0.623], [1.159,-0.509], [1.168,-0.394], [1.177,-0.280], [1.187,-0.166], [1.196,-0.051], [1.205,0.063], [1.214,0.178], [1.223,0.292], [1.233,0.406], [1.281,0.599], [1.354,0.743], [1.398,0.797], [1.480,0.835], [1.620,0.831], [1.673,0.767], [1.711,0.694], [1.737,0.619], [1.750,0.543], [1.747,0.420], [1.743,0.297], [1.740,0.174], [1.737,0.051], [1.733,-0.072], [1.730,-0.195], [1.726,-0.318], [1.723,-0.441], [1.719,-0.564], [1.716,-0.687], [1.815,-0.746], [1.921,-0.786], [2.001,-0.786], [2.085,-0.786], [2.186,-0.786],  ],\n  'N' : [ [0.128,-0.786], [0.255,-0.786], [0.425,-0.786], [0.568,-0.765], [0.577,-0.710], [0.580,-0.603], [0.584,-0.497], [0.587,-0.390], [0.590,-0.283], [0.593,-0.177], [0.597,-0.070], [0.600,0.037], [0.603,0.143], [0.607,0.250], [0.610,0.357], [0.582,0.537], [0.557,0.637], [0.528,0.747], [0.471,0.804], [0.406,0.800], [0.333,0.745], [0.282,0.665], [0.234,0.577], [0.282,0.665], [0.333,0.745], [0.406,0.800], [0.471,0.804], [0.528,0.747], [0.557,0.637], [0.582,0.537], [0.610,0.357], [0.607,0.250], [0.603,0.143], [0.600,0.037], [0.597,-0.070], [0.593,-0.177], [0.590,-0.283], [0.587,-0.390], [0.584,-0.497], [0.580,-0.603], [0.577,-0.710], [0.568,-0.765], [0.577,-0.710], [0.580,-0.603], [0.584,-0.497], [0.587,-0.390], [0.590,-0.283], [0.593,-0.177], [0.597,-0.070], [0.600,0.037], [0.603,0.143], [0.607,0.250], [0.610,0.357], [0.635,0.471], [0.659,0.604], [0.712,0.723], [0.759,0.795], [0.841,0.825], [0.947,0.826], [1.010,0.775], [1.078,0.692], [1.108,0.617], [1.130,0.465], [1.141,0.300], [1.141,0.199], [1.140,0.099], [1.139,-0.001], [1.138,-0.101], [1.137,-0.201], [1.136,-0.302], [1.136,-0.402], [1.135,-0.502], [1.134,-0.602], [1.133,-0.703], [1.197,-0.754], [1.234,-0.786], [1.306,-0.786], [1.355,-0.786], [1.420,-0.786], [1.505,-0.786],  ],\n  'O' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.565,-0.770], [0.621,-0.775], [0.714,-0.769], [0.806,-0.733], [0.867,-0.701], [0.912,-0.644], [0.959,-0.587], [1.028,-0.429], [1.061,-0.246], [1.067,-0.145], [1.065,0.024], [1.046,0.265], [1.037,0.379], [0.986,0.518], [0.918,0.668], [0.782,0.786], [0.714,0.786], [0.649,0.760], [0.572,0.699], [0.502,0.656], [0.435,0.572], [0.380,0.494], [0.332,0.378], [0.295,0.296], [0.271,0.169], [0.255,0.064], [0.255,-0.026], [0.255,-0.106], [0.266,-0.206], [0.307,-0.371], [0.340,-0.446], [0.373,-0.519], [0.417,-0.592], [0.451,-0.668], [0.509,-0.727], [0.565,-0.770], [0.621,-0.775], [0.714,-0.769], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786],  ],\n  'P' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.786], [0.289,-0.786], [0.289,-0.641], [0.289,-0.495], [0.289,-0.349], [0.289,-0.204], [0.289,-0.058], [0.314,-0.055], [0.410,-0.085], [0.476,-0.099], [0.603,-0.071], [0.676,-0.039], [0.777,0.051], [0.800,0.075], [0.856,0.217], [0.862,0.248], [0.866,0.337], [0.862,0.388], [0.856,0.463], [0.829,0.525], [0.776,0.636], [0.749,0.673], [0.688,0.748], [0.655,0.772], [0.603,0.786], [0.561,0.786], [0.493,0.769], [0.439,0.737], [0.400,0.701], [0.354,0.651], [0.323,0.599], [0.289,0.525], [0.289,0.379], [0.289,0.234], [0.289,0.088], [0.289,-0.058], [0.289,-0.204], [0.289,-0.349], [0.289,-0.495], [0.289,-0.641], [0.289,-0.786], [0.374,-0.786], [0.459,-0.786], [0.544,-0.786], [0.629,-0.786], [0.714,-0.786], [0.799,-0.786], [0.884,-0.786], [0.969,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  'Q' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.621,-0.786], [0.565,-0.770], [0.509,-0.727], [0.451,-0.668], [0.417,-0.592], [0.373,-0.519], [0.340,-0.446], [0.307,-0.371], [0.266,-0.206], [0.255,-0.106], [0.255,-0.026], [0.255,0.064], [0.271,0.169], [0.295,0.296], [0.332,0.378], [0.380,0.494], [0.435,0.572], [0.502,0.656], [0.572,0.710], [0.649,0.760], [0.714,0.786], [0.816,0.777], [0.918,0.668], [0.986,0.518], [1.037,0.379], [1.062,0.191], [1.065,0.024], [1.067,-0.145], [1.061,-0.246], [1.028,-0.429], [0.959,-0.587], [0.912,-0.644], [0.867,-0.701], [0.806,-0.733], [0.714,-0.769], [0.621,-0.786], [0.565,-0.770], [0.509,-0.727], [0.451,-0.668], [0.417,-0.592], [0.443,-0.531], [0.479,-0.481], [0.550,-0.430], [0.674,-0.430], [0.773,-0.472], [0.860,-0.532], [0.914,-0.595], [1.011,-0.667], [1.092,-0.732], [1.182,-0.786], [1.260,-0.786], [1.351,-0.786],  ],\n  'R' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.323,-0.786], [0.408,-0.786], [0.408,-0.640], [0.408,-0.494], [0.408,-0.348], [0.408,-0.201], [0.408,-0.055], [0.408,0.091], [0.408,0.237], [0.408,0.384], [0.408,0.530], [0.408,0.727], [0.480,0.744], [0.552,0.744], [0.648,0.744], [0.731,0.744], [0.816,0.744], [0.895,0.703], [0.966,0.616], [1.005,0.544], [1.026,0.494], [1.054,0.378], [1.051,0.276], [1.036,0.191], [0.998,0.132], [0.940,0.069], [0.850,0.004], [0.738,-0.016], [0.629,-0.030], [0.561,-0.034], [0.509,-0.037], [0.433,-0.032], [0.450,-0.091], [0.527,-0.191], [0.595,-0.319], [0.655,-0.400], [0.681,-0.437], [0.719,-0.487], [0.757,-0.536], [0.795,-0.585], [0.850,-0.650], [0.892,-0.710], [0.932,-0.769], [0.969,-0.803], [1.008,-0.820], [1.082,-0.829], [1.131,-0.820], [1.190,-0.786], [1.275,-0.786],  ],\n  'S' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.761], [0.306,-0.718], [0.357,-0.676], [0.391,-0.599], [0.433,-0.497], [0.493,-0.327], [0.544,-0.191], [0.620,-0.064], [0.689,0.064], [0.790,0.154], [0.833,0.234], [0.876,0.335], [0.909,0.429], [0.919,0.520], [0.922,0.614], [0.905,0.690], [0.871,0.749], [0.825,0.777], [0.739,0.786], [0.654,0.777], [0.584,0.760], [0.549,0.734], [0.525,0.681], [0.514,0.605], [0.507,0.548], [0.509,0.463], [0.517,0.404], [0.544,0.306], [0.587,0.174], [0.689,0.064], [0.790,-0.021], [0.872,-0.190], [0.944,-0.302], [0.918,-0.440], [0.884,-0.506], [0.850,-0.574], [0.765,-0.684], [0.680,-0.748], [0.579,-0.761], [0.519,-0.766], [0.476,-0.774], [0.425,-0.774], [0.344,-0.766], [0.298,-0.718], [0.264,-0.650], [0.256,-0.583], [0.265,-0.519], [0.313,-0.465], [0.354,-0.442], [0.423,-0.429], [0.501,-0.429], [0.581,-0.442], [0.669,-0.496], [0.794,-0.616], [0.855,-0.687], [0.963,-0.756], [1.046,-0.803], [1.140,-0.837], [1.239,-0.829], [1.335,-0.786],  ],\n  'T' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.440,-0.786], [0.514,-0.786], [0.578,-0.769], [0.621,-0.750], [0.683,-0.702], [0.717,-0.659], [0.759,-0.567], [0.790,-0.489], [0.809,-0.361], [0.820,-0.229], [0.830,-0.097], [0.840,0.035], [0.851,0.168], [0.861,0.300], [0.871,0.432], [0.882,0.564], [0.882,0.697], [0.920,0.681], [0.986,0.659], [1.052,0.655], [1.123,0.659], [1.188,0.681], [1.275,0.718], [1.394,0.759], [1.275,0.718], [1.188,0.681], [1.123,0.659], [1.052,0.655], [0.986,0.659], [0.920,0.681], [0.882,0.697], [0.785,0.730], [0.731,0.747], [0.679,0.762], [0.595,0.769], [0.471,0.728], [0.340,0.652], [0.471,0.728], [0.595,0.769], [0.679,0.762], [0.731,0.747], [0.785,0.730], [0.882,0.697], [0.882,0.564], [0.871,0.432], [0.861,0.300], [0.851,0.168], [0.840,0.035], [0.830,-0.097], [0.820,-0.229], [0.809,-0.361], [0.790,-0.489], [0.579,-0.761], [0.519,-0.766], [0.476,-0.774], [0.425,-0.774], [0.344,-0.766], [0.298,-0.718], [0.264,-0.650], [0.256,-0.583], [0.265,-0.519], [0.313,-0.465], [0.354,-0.442], [0.423,-0.429], [0.501,-0.429], [0.581,-0.442], [0.669,-0.496], [0.794,-0.616], [0.855,-0.687], [0.963,-0.756], [1.046,-0.803], [1.140,-0.837], [1.239,-0.829], [1.335,-0.820], [1.419,-0.803], [1.504,-0.786], [1.589,-0.786],  ],\n  'U' : [ [0.085,-0.786], [0.170,-0.785], [0.255,-0.783], [0.340,-0.781], [0.421,-0.745], [0.502,-0.709], [0.549,-0.661], [0.521,-0.621], [0.492,-0.535], [0.487,-0.355], [0.503,-0.237], [0.518,-0.119], [0.534,-0.001], [0.549,0.117], [0.565,0.234], [0.581,0.352], [0.596,0.470], [0.612,0.588], [0.594,0.643], [0.539,0.730], [0.499,0.755], [0.403,0.729], [0.349,0.658], [0.289,0.554], [0.252,0.493], [0.195,0.440], [0.252,0.493], [0.289,0.554], [0.349,0.658], [0.403,0.729], [0.499,0.755], [0.539,0.730], [0.594,0.643], [0.612,0.588], [0.596,0.470], [0.581,0.352], [0.565,0.234], [0.549,0.117], [0.534,-0.001], [0.518,-0.119], [0.503,-0.237], [0.487,-0.355], [0.492,-0.535], [0.521,-0.621], [0.549,-0.661], [0.591,-0.715], [0.678,-0.759], [0.764,-0.770], [0.837,-0.738], [0.902,-0.687], [0.936,-0.651], [0.967,-0.594], [1.005,-0.551], [1.061,-0.494], [1.073,-0.316], [1.088,-0.195], [1.103,-0.073], [1.117,0.049], [1.132,0.170], [1.147,0.292], [1.162,0.413], [1.177,0.535], [1.192,0.657], [1.217,0.817], [1.192,0.657], [1.177,0.535], [1.162,0.413], [1.147,0.292], [1.132,0.170], [1.117,0.049], [1.103,-0.073], [1.088,-0.195], [1.073,-0.316], [1.066,-0.418], [1.061,-0.494], [1.073,-0.609], [1.096,-0.659], [1.126,-0.710], [1.202,-0.752], [1.275,-0.761], [1.357,-0.786], [1.442,-0.786], [1.530,-0.786],  ],\n  'V' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.778], [0.425,-0.769], [0.510,-0.744], [0.595,-0.718], [0.646,-0.659], [0.682,-0.590], [0.717,-0.650], [0.751,-0.689], [0.790,-0.735], [0.867,-0.786], [0.969,-0.761], [1.022,-0.716], [1.085,-0.571], [1.118,-0.425], [1.135,-0.300], [1.152,-0.175], [1.169,-0.049], [1.186,0.076], [1.202,0.202], [1.219,0.327], [1.236,0.452], [1.253,0.578], [1.270,0.703], [1.287,0.786], [1.343,0.744], [1.420,0.688], [1.486,0.674], [1.543,0.699], [1.615,0.735], [1.543,0.699], [1.486,0.674], [1.420,0.688], [1.343,0.744], [1.287,0.786], [1.270,0.703], [1.253,0.578], [1.236,0.452], [1.219,0.327], [1.202,0.202], [1.186,0.076], [1.169,-0.049], [1.152,-0.175], [1.135,-0.300], [1.118,-0.425], [1.085,-0.571], [1.022,-0.716], [0.969,-0.761], [0.867,-0.786], [0.790,-0.735], [0.751,-0.689], [0.717,-0.650], [0.682,-0.590], [0.642,-0.426], [0.642,-0.262], [0.642,-0.097], [0.642,0.067], [0.642,0.231], [0.642,0.395], [0.626,0.588], [0.592,0.664], [0.552,0.735], [0.505,0.786], [0.459,0.760], [0.414,0.718], [0.371,0.667], [0.323,0.621], [0.255,0.542], [0.323,0.621], [0.371,0.667], [0.414,0.718], [0.459,0.760], [0.505,0.786], [0.552,0.735], [0.592,0.664], [0.626,0.588], [0.642,0.395], [0.642,0.231], [0.642,0.067], [0.642,-0.097], [0.642,-0.262], [0.642,-0.426], [0.682,-0.590], [0.717,-0.650], [0.751,-0.689], [0.790,-0.735], [0.867,-0.786], [0.969,-0.761], [1.022,-0.716], [1.105,-0.752], [1.190,-0.769], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786], [1.530,-0.786], [1.615,-0.786], [1.700,-0.786], [1.785,-0.786],  ],\n  'W' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.552,-0.739], [0.516,-0.647], [0.487,-0.569], [0.458,-0.430], [0.454,-0.354], [0.450,-0.252], [0.456,-0.096], [0.463,0.061], [0.469,0.218], [0.475,0.374], [0.481,0.531], [0.478,0.660], [0.459,0.724], [0.413,0.803], [0.357,0.775], [0.306,0.659], [0.238,0.531], [0.306,0.659], [0.357,0.775], [0.413,0.803], [0.459,0.724], [0.478,0.660], [0.481,0.531], [0.475,0.374], [0.469,0.218], [0.463,0.061], [0.456,-0.096], [0.450,-0.252], [0.454,-0.354], [0.458,-0.430], [0.487,-0.569], [0.516,-0.647], [0.552,-0.739], [0.599,-0.760], [0.652,-0.766], [0.726,-0.753], [0.788,-0.724], [0.856,-0.681], [0.912,-0.581], [0.949,-0.494], [0.987,-0.275], [0.990,-0.164], [0.993,-0.052], [0.996,0.060], [0.999,0.172], [1.002,0.283], [1.005,0.395], [1.008,0.507], [1.011,0.619], [1.014,0.730], [1.018,0.786], [1.014,0.730], [1.011,0.619], [1.008,0.507], [1.005,0.395], [1.002,0.283], [0.999,0.172], [0.996,0.060], [0.993,-0.052], [0.990,-0.164], [0.987,-0.275], [0.990,-0.543], [1.025,-0.644], [1.080,-0.695], [1.158,-0.761], [1.249,-0.761], [1.335,-0.718], [1.401,-0.672], [1.437,-0.622], [1.446,-0.474], [1.455,-0.326], [1.464,-0.179], [1.473,-0.031], [1.482,0.117], [1.491,0.265], [1.500,0.413], [1.509,0.561], [1.518,0.708], [1.527,0.786], [1.518,0.708], [1.509,0.561], [1.500,0.413], [1.491,0.265], [1.482,0.117], [1.473,-0.031], [1.464,-0.179], [1.455,-0.326], [1.446,-0.474], [1.437,-0.622], [1.514,-0.678], [1.602,-0.718], [1.688,-0.752], [1.774,-0.786], [1.861,-0.786], [1.945,-0.786],  ],\n  'X' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.321,-0.682], [0.388,-0.578], [0.454,-0.473], [0.520,-0.369], [0.586,-0.264], [0.653,-0.160], [0.719,-0.055], [0.785,0.049], [0.852,0.154], [0.918,0.258], [0.984,0.363], [1.050,0.467], [1.117,0.572], [1.183,0.676], [1.249,0.781], [1.183,0.676], [1.117,0.572], [1.050,0.467], [0.984,0.363], [0.918,0.258], [0.852,0.154], [0.781,0.144], [0.761,0.265], [0.741,0.387], [0.721,0.508], [0.701,0.629], [0.637,0.768], [0.512,0.730], [0.425,0.642], [0.370,0.577], [0.308,0.475], [0.370,0.577], [0.425,0.642], [0.512,0.730], [0.637,0.768], [0.701,0.629], [0.721,0.508], [0.741,0.387], [0.761,0.265], [0.781,0.144], [0.801,0.023], [0.821,-0.099], [0.841,-0.220], [0.861,-0.341], [0.881,-0.463], [0.901,-0.584], [0.947,-0.685], [0.984,-0.782], [1.037,-0.786], [1.036,-0.786], [1.117,-0.786], [1.214,-0.786], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786],  ],\n  'Y' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.365,-0.701], [0.387,-0.581], [0.375,-0.466], [0.383,-0.340], [0.404,-0.134], [0.426,0.071], [0.447,0.276], [0.468,0.481], [0.473,0.634], [0.445,0.749], [0.410,0.786], [0.340,0.777], [0.255,0.752], [0.340,0.777], [0.410,0.786], [0.445,0.749], [0.473,0.634], [0.468,0.481], [0.447,0.276], [0.426,0.071], [0.404,-0.134], [0.383,-0.340], [0.375,-0.466], [0.387,-0.581], [0.423,-0.684], [0.467,-0.750], [0.521,-0.756], [0.573,-0.733], [0.628,-0.686], [0.685,-0.624], [0.731,-0.548], [0.790,-0.489], [0.866,-0.430], [0.886,-0.303], [0.906,-0.176], [0.927,-0.050], [0.947,0.077], [0.968,0.204], [0.988,0.331], [1.009,0.458], [1.029,0.585], [1.050,0.701], [1.070,0.786], [1.050,0.701], [1.029,0.585], [1.009,0.458], [0.988,0.331], [0.968,0.204], [0.947,0.077], [0.927,-0.050], [0.906,-0.176], [0.886,-0.303], [0.866,-0.430], [0.847,-0.571], [0.829,-0.712], [0.810,-0.852], [0.792,-0.993], [0.773,-1.134], [0.755,-1.275], [0.724,-1.403], [0.679,-1.484], [0.620,-1.509], [0.562,-1.522], [0.476,-1.534], [0.408,-1.484], [0.376,-1.419], [0.367,-1.306], [0.392,-1.217], [0.442,-1.109], [0.510,-0.999], [0.570,-0.891], [0.626,-0.833], [0.714,-0.786], [0.782,-0.786], [0.833,-0.786], [0.929,-0.786], [0.986,-0.786], [1.054,-0.786], [1.139,-0.786], [1.224,-0.786],  ],\n  'Z' : [ [0.085,-0.786], [0.170,-0.786], [0.245,-0.786], [0.323,-0.701], [0.395,-0.577], [0.488,-0.462], [0.626,-0.240], [0.699,-0.091], [0.750,0.051], [0.784,0.192], [0.797,0.370], [0.762,0.534], [0.748,0.571], [0.701,0.657], [0.628,0.747], [0.561,0.752], [0.446,0.715], [0.342,0.625], [0.314,0.592], [0.255,0.530], [0.314,0.592], [0.342,0.625], [0.446,0.715], [0.561,0.752], [0.628,0.747], [0.701,0.657], [0.748,0.571], [0.762,0.534], [0.797,0.370], [0.784,0.192], [0.750,0.051], [0.699,-0.091], [0.626,-0.240], [0.488,-0.462], [0.395,-0.577], [0.323,-0.701], [0.384,-0.684], [0.417,-0.665], [0.532,-0.661], [0.562,-0.686], [0.666,-0.950], [0.652,-1.118], [0.645,-1.167], [0.586,-1.385], [0.570,-1.429], [0.499,-1.570], [0.379,-1.580], [0.305,-1.560], [0.274,-1.523], [0.251,-1.475], [0.234,-1.358], [0.247,-1.211], [0.311,-1.087], [0.375,-0.970], [0.442,-0.871], [0.502,-0.799], [0.595,-0.761], [0.646,-0.769], [0.714,-0.786], [0.792,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  'a' : [ [0.085,-0.718], [0.146,-0.557], [0.146,-0.500], [0.153,-0.455], [0.180,-0.395], [0.204,-0.353], [0.219,-0.319], [0.246,-0.276], [0.272,-0.234], [0.298,-0.191], [0.333,-0.157], [0.379,-0.132], [0.432,-0.098], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.561,-0.718], [0.501,-0.773], [0.425,-0.801], [0.357,-0.820], [0.279,-0.801], [0.230,-0.754], [0.213,-0.731], [0.184,-0.681], [0.151,-0.616], [0.146,-0.557], [0.146,-0.500], [0.153,-0.455], [0.180,-0.395], [0.204,-0.353], [0.219,-0.319], [0.246,-0.276], [0.272,-0.234], [0.298,-0.191], [0.333,-0.157], [0.379,-0.132], [0.432,-0.098], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.678,-0.744], [0.729,-0.801], [0.781,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  'b' : [ [0.043,-0.786], [0.085,-0.761], [0.128,-0.727], [0.170,-0.693], [0.199,-0.667], [0.227,-0.625], [0.256,-0.574], [0.285,-0.497], [0.313,-0.429], [0.342,-0.361], [0.371,-0.268], [0.399,-0.191], [0.428,-0.106], [0.457,-0.004], [0.485,0.064], [0.514,0.140], [0.543,0.241], [0.571,0.320], [0.587,0.399], [0.588,0.510], [0.572,0.602], [0.529,0.674], [0.473,0.743], [0.432,0.750], [0.397,0.739], [0.367,0.724], [0.343,0.686], [0.323,0.627], [0.318,0.497], [0.316,0.368], [0.315,0.238], [0.313,0.108], [0.316,-0.022], [0.318,-0.152], [0.320,-0.282], [0.321,-0.412], [0.323,-0.542], [0.333,-0.672], [0.352,-0.718], [0.381,-0.771], [0.412,-0.786], [0.463,-0.786], [0.500,-0.782], [0.537,-0.764], [0.564,-0.746], [0.590,-0.688], [0.604,-0.634], [0.622,-0.573], [0.636,-0.514], [0.655,-0.446], [0.662,-0.377], [0.670,-0.293], [0.672,-0.200], [0.674,-0.112], [0.743,-0.140], [0.790,-0.157], [0.842,-0.149],  ],\n  'c' : [ [0.034,-0.769], [0.051,-0.735], [0.076,-0.676], [0.097,-0.599], [0.113,-0.565], [0.136,-0.514], [0.163,-0.446], [0.210,-0.344], [0.246,-0.268], [0.272,-0.222], [0.296,-0.191], [0.329,-0.152], [0.360,-0.123], [0.396,-0.094], [0.442,-0.081], [0.485,-0.072], [0.529,-0.064], [0.595,-0.064], [0.646,-0.106], [0.680,-0.191], [0.646,-0.106], [0.595,-0.064], [0.529,-0.064], [0.485,-0.072], [0.442,-0.081], [0.396,-0.094], [0.360,-0.123], [0.329,-0.152], [0.296,-0.191], [0.272,-0.222], [0.246,-0.268], [0.199,-0.407], [0.199,-0.497], [0.202,-0.565], [0.220,-0.657], [0.246,-0.708], [0.263,-0.731], [0.279,-0.754], [0.306,-0.795], [0.355,-0.829], [0.446,-0.846], [0.561,-0.829], [0.637,-0.820], [0.697,-0.812], [0.765,-0.803], [0.850,-0.795], [0.935,-0.786],  ],\n  'd' : [ [0.085,-0.786], [0.136,-0.769], [0.181,-0.701], [0.238,-0.616], [0.279,-0.557], [0.282,-0.500], [0.289,-0.455], [0.298,-0.395], [0.313,-0.319], [0.333,-0.242], [0.357,-0.191], [0.425,-0.123], [0.469,-0.089], [0.515,-0.072], [0.629,-0.043], [0.697,-0.036], [0.782,-0.036], [0.697,-0.036], [0.629,-0.043], [0.515,-0.072], [0.469,-0.089], [0.425,-0.123], [0.357,-0.191], [0.333,-0.242], [0.313,-0.319], [0.298,-0.395], [0.289,-0.455], [0.282,-0.500], [0.279,-0.557], [0.287,-0.616], [0.320,-0.681], [0.366,-0.754], [0.415,-0.801], [0.459,-0.810], [0.510,-0.808], [0.561,-0.801], [0.637,-0.773], [0.697,-0.718], [0.799,-0.650], [0.867,-0.639], [0.867,-0.592], [0.867,-0.489], [0.867,-0.404], [0.867,-0.293], [0.867,-0.149], [0.867,0.064], [0.867,0.234], [0.867,0.404], [0.867,0.574], [0.867,0.744], [0.867,0.574], [0.867,0.404], [0.867,0.234], [0.867,0.064], [0.867,-0.149], [0.867,-0.293], [0.867,-0.404], [0.867,-0.489], [0.867,-0.592], [0.867,-0.639], [0.875,-0.701], [0.899,-0.744], [0.950,-0.801], [1.002,-0.824], [1.068,-0.815], [1.122,-0.812], [1.190,-0.786],  ],\n  'e' : [ [0.085,-0.786], [0.170,-0.786], [0.290,-0.744], [0.378,-0.693], [0.459,-0.659], [0.503,-0.616], [0.537,-0.548], [0.561,-0.497], [0.571,-0.446], [0.576,-0.404], [0.579,-0.336], [0.576,-0.276], [0.568,-0.229], [0.559,-0.191], [0.551,-0.160], [0.534,-0.106], [0.517,-0.072], [0.486,-0.047], [0.444,-0.030], [0.401,-0.021], [0.359,-0.030], [0.316,-0.047], [0.286,-0.072], [0.269,-0.106], [0.252,-0.160], [0.243,-0.191], [0.235,-0.229], [0.226,-0.276], [0.223,-0.336], [0.226,-0.404], [0.231,-0.446], [0.241,-0.497], [0.265,-0.548], [0.299,-0.616], [0.342,-0.659], [0.422,-0.701], [0.510,-0.744], [0.605,-0.761], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786],  ],\n  'f' : [ [0.043,-0.786], [0.076,-0.779], [0.107,-0.773], [0.145,-0.744], [0.192,-0.710], [0.225,-0.684], [0.264,-0.667], [0.321,-0.642], [0.374,-0.592], [0.425,-0.548], [0.451,-0.446], [0.468,-0.361], [0.485,-0.276], [0.501,-0.191], [0.518,-0.106], [0.535,-0.038], [0.552,0.047], [0.565,0.131], [0.582,0.212], [0.605,0.299], [0.619,0.402], [0.632,0.506], [0.614,0.607], [0.578,0.667], [0.535,0.680], [0.485,0.684], [0.425,0.671], [0.374,0.652], [0.329,0.619], [0.298,0.531], [0.294,0.428], [0.292,0.299], [0.294,0.169], [0.296,-0.000], [0.296,-0.172], [0.296,-0.276], [0.298,-0.385], [0.297,-0.489], [0.296,-0.598], [0.295,-0.710], [0.295,-0.829], [0.292,-0.931], [0.289,-1.041], [0.286,-1.126], [0.281,-1.254], [0.281,-1.356], [0.279,-1.466], [0.272,-1.602], [0.323,-1.602], [0.374,-1.601], [0.423,-1.594], [0.474,-1.551], [0.510,-1.509], [0.542,-1.466], [0.550,-1.381], [0.542,-1.296], [0.533,-1.211], [0.522,-1.126], [0.508,-1.041], [0.491,-0.956], [0.468,-0.888], [0.442,-0.846], [0.383,-0.752], [0.420,-0.769], [0.468,-0.803], [0.510,-0.829], [0.567,-0.812], [0.639,-0.803], [0.723,-0.795], [0.807,-0.786], [0.892,-0.786],  ],\n  'g' : [ [0.033,-0.778], [0.067,-0.761], [0.117,-0.727], [0.145,-0.706], [0.204,-0.662], [0.238,-0.633], [0.284,-0.592], [0.317,-0.557], [0.350,-0.506], [0.384,-0.458], [0.400,-0.430], [0.434,-0.384], [0.467,-0.337], [0.500,-0.291], [0.527,-0.251], [0.559,-0.217], [0.601,-0.175], [0.633,-0.149], [0.678,-0.132], [0.729,-0.115], [0.780,-0.098], [0.831,-0.086], [0.883,-0.089], [0.901,-0.123], [0.898,-0.191], [0.894,-0.259], [0.891,-0.327], [0.887,-0.395], [0.884,-0.463], [0.881,-0.531], [0.877,-0.599], [0.874,-0.667], [0.870,-0.735], [0.816,-0.761], [0.763,-0.786], [0.678,-0.812], [0.610,-0.824], [0.527,-0.812], [0.457,-0.786], [0.400,-0.754], [0.355,-0.676], [0.334,-0.592], [0.317,-0.557], [0.350,-0.506], [0.384,-0.458], [0.400,-0.430], [0.434,-0.384], [0.467,-0.337], [0.500,-0.291], [0.527,-0.251], [0.559,-0.217], [0.601,-0.175], [0.633,-0.149], [0.678,-0.132], [0.729,-0.115], [0.780,-0.098], [0.831,-0.086], [0.883,-0.089], [0.901,-0.123], [0.898,-0.191], [0.894,-0.259], [0.891,-0.327], [0.887,-0.395], [0.884,-0.463], [0.881,-0.531], [0.877,-0.599], [0.874,-0.667], [0.870,-0.735], [0.867,-0.803], [0.864,-0.871], [0.860,-0.939], [0.857,-1.007], [0.853,-1.075], [0.850,-1.143], [0.847,-1.211], [0.843,-1.279], [0.840,-1.347], [0.836,-1.415], [0.833,-1.484], [0.830,-1.551], [0.826,-1.619], [0.765,-1.615], [0.697,-1.608], [0.646,-1.598], [0.595,-1.568], [0.544,-1.526], [0.493,-1.466], [0.459,-1.398], [0.442,-1.347], [0.425,-1.279], [0.433,-1.228], [0.459,-1.186], [0.500,-1.125], [0.530,-1.084], [0.567,-1.041], [0.627,-0.990], [0.695,-0.948], [0.746,-0.914], [0.800,-0.871], [0.873,-0.829], [0.949,-0.820], [1.037,-0.812], [1.105,-0.803], [1.190,-0.786],  ],\n  'h' : [ [0.046,-0.710], [0.072,-0.666], [0.110,-0.611], [0.134,-0.564], [0.169,-0.515], [0.197,-0.467], [0.221,-0.419], [0.250,-0.374], [0.277,-0.327], [0.303,-0.276], [0.326,-0.242], [0.349,-0.200], [0.383,-0.155], [0.432,-0.083], [0.483,-0.038], [0.508,0.013], [0.549,0.064], [0.575,0.131], [0.602,0.202], [0.617,0.249], [0.641,0.297], [0.651,0.370], [0.660,0.438], [0.662,0.523], [0.651,0.616], [0.641,0.693], [0.599,0.742], [0.542,0.769], [0.483,0.769], [0.406,0.738], [0.355,0.702], [0.321,0.636], [0.295,0.511], [0.295,0.425], [0.295,0.339], [0.295,0.227], [0.295,0.114], [0.295,0.001], [0.295,-0.111], [0.295,-0.224], [0.295,-0.336], [0.295,-0.449], [0.295,-0.561], [0.295,-0.674], [0.295,-0.786], [0.299,-0.674], [0.302,-0.561], [0.329,-0.514], [0.368,-0.447], [0.392,-0.386], [0.420,-0.307], [0.447,-0.255], [0.475,-0.185], [0.507,-0.149], [0.564,-0.132], [0.625,-0.123], [0.678,-0.132], [0.743,-0.166], [0.767,-0.229], [0.760,-0.307], [0.755,-0.375], [0.748,-0.453], [0.748,-0.533], [0.761,-0.623], [0.786,-0.717], [0.845,-0.766], [0.920,-0.794], [1.005,-0.786],  ],\n  'i' : [ [0.085,-0.791], [0.173,-0.803], [0.256,-0.811], [0.289,-0.765], [0.316,-0.712], [0.331,-0.635], [0.333,-0.550], [0.335,-0.508], [0.341,-0.431], [0.346,-0.372], [0.352,-0.287], [0.352,-0.202], [0.354,-0.143], [0.357,-0.032], [0.357,-0.143], [0.358,-0.202], [0.356,-0.287], [0.360,-0.372], [0.364,-0.432], [0.368,-0.508], [0.369,-0.551], [0.370,-0.636], [0.384,-0.712], [0.409,-0.765], [0.441,-0.811], [0.518,-0.829], [0.585,-0.795], [0.677,-0.786],  ],\n  'j' : [ [0.042,-0.761], [0.098,-0.734], [0.131,-0.693], [0.159,-0.658], [0.188,-0.613], [0.199,-0.589], [0.225,-0.548], [0.250,-0.516], [0.272,-0.468], [0.295,-0.420], [0.317,-0.360], [0.334,-0.299], [0.343,-0.264], [0.360,-0.195], [0.373,-0.100], [0.383,-0.049], [0.383,-0.099], [0.383,-0.167], [0.383,-0.276], [0.383,-0.395], [0.383,-0.513], [0.383,-0.632], [0.383,-0.751], [0.383,-0.869], [0.383,-0.988], [0.383,-1.107], [0.383,-1.225], [0.383,-1.344], [0.368,-1.405], [0.349,-1.466], [0.326,-1.514], [0.296,-1.530], [0.255,-1.534], [0.218,-1.518], [0.196,-1.496], [0.172,-1.406], [0.162,-1.296], [0.159,-1.211], [0.173,-1.126], [0.196,-1.053], [0.218,-1.005], [0.241,-0.957], [0.263,-0.909], [0.286,-0.861], [0.301,-0.837], [0.328,-0.808], [0.356,-0.780], [0.384,-0.753], [0.408,-0.742], [0.439,-0.734], [0.473,-0.733], [0.509,-0.750], [0.552,-0.767], [0.595,-0.786],  ],\n  'k' : [ [0.043,-0.744], [0.076,-0.701], [0.106,-0.659], [0.136,-0.616], [0.170,-0.548], [0.206,-0.500], [0.239,-0.453], [0.272,-0.407], [0.298,-0.384], [0.337,-0.305], [0.384,-0.226], [0.431,-0.147], [0.479,-0.069], [0.526,0.010], [0.555,0.056], [0.584,0.103], [0.605,0.149], [0.622,0.195], [0.659,0.261], [0.677,0.309], [0.695,0.356], [0.713,0.404], [0.732,0.451], [0.750,0.499], [0.765,0.565], [0.771,0.635], [0.737,0.676], [0.695,0.684], [0.654,0.684], [0.603,0.684], [0.552,0.676], [0.501,0.659], [0.451,0.612], [0.400,0.562], [0.357,0.466], [0.340,0.369], [0.340,0.273], [0.340,0.176], [0.340,0.079], [0.340,0.010], [0.340,-0.066], [0.340,-0.143], [0.340,-0.219], [0.340,-0.296], [0.340,-0.372], [0.340,-0.449], [0.340,-0.525], [0.340,-0.601], [0.340,-0.678], [0.340,-0.754], [0.340,-0.847], [0.340,-0.754], [0.340,-0.678], [0.340,-0.601], [0.340,-0.525], [0.340,-0.449], [0.354,-0.372], [0.397,-0.361], [0.465,-0.353], [0.533,-0.344], [0.618,-0.327], [0.686,-0.302], [0.754,-0.276], [0.797,-0.234], [0.822,-0.198], [0.812,-0.140], [0.788,-0.089], [0.758,-0.059], [0.720,-0.032], [0.652,-0.055], [0.601,-0.106], [0.516,-0.191], [0.465,-0.276], [0.431,-0.336], [0.383,-0.378], [0.414,-0.421], [0.455,-0.453], [0.489,-0.500], [0.522,-0.546], [0.554,-0.592], [0.577,-0.639], [0.591,-0.662], [0.622,-0.708], [0.655,-0.754], [0.688,-0.801], [0.729,-0.846], [0.771,-0.871], [0.814,-0.863], [0.856,-0.846], [0.899,-0.829], [0.941,-0.812], [0.971,-0.803], [1.011,-0.786], [1.065,-0.803], [1.105,-0.786],  ],\n  'l' : [ [0.060,-0.744], [0.097,-0.694], [0.124,-0.646], [0.145,-0.616], [0.171,-0.574], [0.194,-0.526], [0.224,-0.477], [0.255,-0.429], [0.289,-0.381], [0.306,-0.332], [0.340,-0.286], [0.377,-0.238], [0.403,-0.191], [0.435,-0.115], [0.459,-0.055], [0.483,0.013], [0.501,0.056], [0.510,0.095], [0.524,0.140], [0.534,0.190], [0.548,0.237], [0.554,0.284], [0.566,0.351], [0.578,0.404], [0.585,0.480], [0.594,0.566], [0.595,0.613], [0.585,0.682], [0.550,0.734], [0.515,0.771], [0.480,0.782], [0.451,0.786], [0.400,0.781], [0.347,0.767], [0.324,0.719], [0.315,0.672], [0.308,0.632], [0.304,0.574], [0.304,0.488], [0.304,0.401], [0.304,0.314], [0.304,0.227], [0.304,0.141], [0.304,0.054], [0.304,-0.033], [0.304,-0.119], [0.303,-0.206], [0.303,-0.293], [0.303,-0.380], [0.303,-0.466], [0.303,-0.553], [0.303,-0.640], [0.311,-0.702], [0.343,-0.752], [0.383,-0.778], [0.434,-0.784], [0.483,-0.807], [0.538,-0.821], [0.603,-0.803], [0.677,-0.795], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  'm' : [ [0.066,-0.744], [0.100,-0.708], [0.116,-0.685], [0.150,-0.639], [0.166,-0.615], [0.200,-0.569], [0.216,-0.546], [0.233,-0.523], [0.250,-0.500], [0.270,-0.463], [0.295,-0.412], [0.316,-0.384], [0.324,-0.361], [0.334,-0.337], [0.349,-0.314], [0.372,-0.276], [0.389,-0.251], [0.416,-0.222], [0.449,-0.175], [0.466,-0.152], [0.482,-0.129], [0.499,-0.106], [0.527,-0.081], [0.567,-0.069], [0.603,-0.055], [0.649,-0.059], [0.665,-0.083], [0.669,-0.103], [0.674,-0.154], [0.679,-0.205], [0.685,-0.256], [0.690,-0.307], [0.695,-0.358], [0.686,-0.402], [0.676,-0.447], [0.666,-0.491], [0.657,-0.535], [0.647,-0.579], [0.637,-0.624], [0.628,-0.668], [0.618,-0.712], [0.608,-0.756], [0.599,-0.801], [0.608,-0.756], [0.618,-0.712], [0.628,-0.668], [0.637,-0.624], [0.647,-0.579], [0.657,-0.535], [0.666,-0.491], [0.676,-0.447], [0.686,-0.402], [0.695,-0.358], [0.715,-0.314], [0.743,-0.276], [0.765,-0.245], [0.782,-0.222], [0.798,-0.198], [0.815,-0.175], [0.832,-0.152], [0.848,-0.129], [0.882,-0.089], [0.916,-0.064], [0.966,-0.044], [1.015,-0.036], [1.031,-0.059], [1.048,-0.083], [1.065,-0.106], [1.075,-0.143], [1.085,-0.180], [1.095,-0.217], [1.105,-0.254], [1.114,-0.291], [1.103,-0.340], [1.091,-0.388], [1.080,-0.437], [1.068,-0.486], [1.056,-0.534], [1.045,-0.583], [1.033,-0.632], [1.021,-0.680], [1.010,-0.729], [1.009,-0.777], [1.010,-0.729], [1.021,-0.680], [1.033,-0.632], [1.045,-0.583], [1.056,-0.534], [1.068,-0.486], [1.080,-0.437], [1.091,-0.388], [1.103,-0.340], [1.114,-0.291], [1.131,-0.268], [1.156,-0.234], [1.181,-0.198], [1.198,-0.175], [1.215,-0.140], [1.248,-0.106], [1.264,-0.083], [1.290,-0.059], [1.358,-0.038], [1.431,-0.059], [1.464,-0.106], [1.480,-0.129], [1.497,-0.175], [1.489,-0.224], [1.480,-0.272], [1.472,-0.320], [1.464,-0.369], [1.455,-0.417], [1.447,-0.466], [1.439,-0.514], [1.431,-0.562], [1.422,-0.611], [1.414,-0.659], [1.414,-0.708], [1.447,-0.754], [1.464,-0.777], [1.496,-0.803], [1.580,-0.812], [1.630,-0.812], [1.677,-0.799], [1.730,-0.795], [1.785,-0.786],  ],\n  'n' : [ [0.033,-0.786], [0.067,-0.786], [0.085,-0.744], [0.102,-0.701], [0.119,-0.625], [0.145,-0.531], [0.170,-0.446], [0.196,-0.361], [0.221,-0.234], [0.255,-0.106], [0.292,0.010], [0.332,0.064], [0.374,0.038], [0.400,-0.013], [0.414,-0.059], [0.423,-0.106], [0.431,-0.149], [0.435,-0.198], [0.430,-0.254], [0.430,-0.310], [0.430,-0.365], [0.430,-0.421], [0.430,-0.476], [0.430,-0.532], [0.430,-0.588], [0.430,-0.643], [0.430,-0.699], [0.430,-0.754], [0.430,-0.699], [0.430,-0.643], [0.430,-0.588], [0.430,-0.532], [0.430,-0.476], [0.430,-0.421], [0.430,-0.365], [0.430,-0.310], [0.430,-0.254], [0.459,-0.242], [0.485,-0.217], [0.508,-0.198], [0.525,-0.175], [0.542,-0.152], [0.558,-0.129], [0.587,-0.098], [0.620,-0.059], [0.656,-0.013], [0.691,0.010], [0.741,0.010], [0.774,-0.013], [0.791,-0.036], [0.808,-0.059], [0.816,-0.106], [0.825,-0.149], [0.825,-0.234], [0.825,-0.293], [0.825,-0.361], [0.825,-0.421], [0.825,-0.480], [0.825,-0.523], [0.825,-0.574], [0.825,-0.616], [0.825,-0.662], [0.825,-0.708], [0.833,-0.761], [0.865,-0.812], [0.924,-0.820], [0.967,-0.812], [1.024,-0.786],  ],\n  'o' : [ [0.085,-0.727], [0.134,-0.659], [0.162,-0.608], [0.187,-0.557], [0.204,-0.514], [0.214,-0.480], [0.238,-0.430], [0.256,-0.395], [0.267,-0.361], [0.289,-0.319], [0.314,-0.268], [0.331,-0.245], [0.346,-0.222], [0.372,-0.183], [0.397,-0.152], [0.414,-0.129], [0.431,-0.106], [0.447,-0.083], [0.482,-0.072], [0.525,-0.055], [0.584,-0.055], [0.627,-0.072], [0.647,-0.083], [0.669,-0.106], [0.685,-0.123], [0.697,-0.149], [0.714,-0.175], [0.720,-0.224], [0.719,-0.272], [0.724,-0.320], [0.723,-0.368], [0.716,-0.417], [0.711,-0.465], [0.702,-0.513], [0.689,-0.562], [0.671,-0.610], [0.654,-0.658], [0.643,-0.701], [0.620,-0.752], [0.595,-0.795], [0.552,-0.829], [0.510,-0.846], [0.459,-0.854], [0.397,-0.842], [0.372,-0.820], [0.347,-0.791], [0.314,-0.754], [0.298,-0.731], [0.281,-0.708], [0.264,-0.685], [0.253,-0.659], [0.236,-0.616], [0.219,-0.574], [0.207,-0.531], [0.214,-0.480], [0.238,-0.430], [0.256,-0.395], [0.267,-0.361], [0.289,-0.319], [0.314,-0.268], [0.331,-0.245], [0.346,-0.222], [0.372,-0.183], [0.397,-0.152], [0.414,-0.129], [0.431,-0.106], [0.447,-0.083], [0.482,-0.072], [0.524,-0.106], [0.544,-0.149], [0.570,-0.183], [0.595,-0.200], [0.629,-0.217], [0.663,-0.225], [0.697,-0.225], [0.731,-0.225], [0.765,-0.225], [0.799,-0.221], [0.833,-0.217], [0.867,-0.208], [0.901,-0.191], [0.935,-0.174], [0.969,-0.149],  ],\n  'p' : [ [0.069,-0.801], [0.130,-0.767], [0.181,-0.693], [0.211,-0.610], [0.232,-0.524], [0.253,-0.438], [0.274,-0.352], [0.291,-0.300], [0.316,-0.257], [0.337,-0.179], [0.364,-0.136], [0.372,-0.215], [0.370,-0.323], [0.368,-0.431], [0.367,-0.539], [0.365,-0.646], [0.363,-0.754], [0.361,-0.862], [0.359,-0.970], [0.357,-1.078], [0.355,-1.186], [0.353,-1.294], [0.352,-1.402], [0.350,-1.510], [0.352,-1.402], [0.353,-1.294], [0.355,-1.186], [0.357,-1.078], [0.359,-0.970], [0.361,-0.862], [0.363,-0.754], [0.365,-0.646], [0.367,-0.539], [0.368,-0.431], [0.370,-0.323], [0.372,-0.215], [0.374,-0.107], [0.364,-0.136], [0.407,-0.091], [0.438,-0.048], [0.478,-0.020], [0.510,-0.002], [0.534,0.007], [0.564,0.017], [0.610,0.010], [0.662,-0.011], [0.709,-0.077], [0.722,-0.104], [0.753,-0.170], [0.771,-0.282], [0.771,-0.357], [0.774,-0.469], [0.760,-0.538], [0.748,-0.616], [0.726,-0.654], [0.691,-0.694], [0.651,-0.714], [0.589,-0.754], [0.531,-0.747], [0.476,-0.744], [0.425,-0.727], [0.476,-0.744], [0.531,-0.747], [0.589,-0.754], [0.625,-0.748], [0.678,-0.763], [0.763,-0.777], [0.814,-0.783], [0.878,-0.803], [0.935,-0.803], [0.996,-0.795], [1.054,-0.786],  ],\n  'q' : [ [0.033,-0.778], [0.067,-0.761], [0.117,-0.727], [0.145,-0.706], [0.183,-0.662], [0.216,-0.615], [0.233,-0.592], [0.275,-0.548], [0.299,-0.506], [0.333,-0.458], [0.349,-0.430], [0.383,-0.384], [0.416,-0.337], [0.449,-0.291], [0.476,-0.251], [0.508,-0.217], [0.550,-0.175], [0.582,-0.149], [0.627,-0.132], [0.678,-0.115], [0.729,-0.098], [0.780,-0.086], [0.832,-0.089], [0.850,-0.123], [0.847,-0.191], [0.843,-0.259], [0.840,-0.327], [0.836,-0.395], [0.833,-0.463], [0.830,-0.531], [0.826,-0.599], [0.823,-0.667], [0.819,-0.735], [0.765,-0.761], [0.712,-0.786], [0.627,-0.812], [0.559,-0.824], [0.476,-0.812], [0.406,-0.786], [0.349,-0.754], [0.304,-0.676], [0.283,-0.592], [0.299,-0.506], [0.333,-0.458], [0.349,-0.430], [0.383,-0.384], [0.416,-0.337], [0.449,-0.291], [0.476,-0.251], [0.508,-0.217], [0.550,-0.175], [0.582,-0.149], [0.627,-0.132], [0.678,-0.115], [0.729,-0.098], [0.780,-0.086], [0.832,-0.089], [0.850,-0.123], [0.847,-0.191], [0.843,-0.259], [0.840,-0.327], [0.836,-0.395], [0.833,-0.463], [0.830,-0.531], [0.826,-0.599], [0.823,-0.667], [0.819,-0.735], [0.816,-0.803], [0.813,-0.871], [0.809,-0.939], [0.806,-1.007], [0.802,-1.075], [0.799,-1.143], [0.796,-1.211], [0.792,-1.279], [0.789,-1.347], [0.785,-1.415], [0.782,-1.484], [0.779,-1.551], [0.775,-1.619], [0.816,-1.615], [0.867,-1.608], [0.901,-1.598], [0.935,-1.568], [0.969,-1.526], [1.003,-1.466], [1.037,-1.398], [1.054,-1.347], [1.062,-1.279], [1.054,-1.228], [1.037,-1.186], [1.003,-1.125], [0.969,-1.084], [0.935,-1.041], [0.901,-0.990], [0.867,-0.948], [0.850,-0.914], [0.850,-0.854], [0.898,-0.829], [0.952,-0.812], [1.003,-0.795], [1.054,-0.786], [1.139,-0.786], [1.224,-0.786],  ],\n  'r' : [ [0.085,-0.786], [0.170,-0.752], [0.221,-0.701], [0.255,-0.659], [0.289,-0.616], [0.309,-0.531], [0.332,-0.446], [0.349,-0.353], [0.362,-0.293], [0.374,-0.234], [0.389,-0.166], [0.400,-0.106], [0.527,-0.106], [0.612,-0.106], [0.697,-0.106], [0.782,-0.106], [0.867,-0.106], [0.867,-0.149], [0.859,-0.234], [0.850,-0.319], [0.833,-0.404], [0.816,-0.489], [0.807,-0.574], [0.833,-0.659], [0.867,-0.701], [0.935,-0.744], [1.020,-0.769], [1.122,-0.786], [1.241,-0.786],  ],\n  's' : [ [0.066,-0.769], [0.134,-0.731], [0.168,-0.701], [0.200,-0.667], [0.255,-0.615], [0.313,-0.531], [0.383,-0.446], [0.417,-0.378], [0.442,-0.319], [0.451,-0.242], [0.451,-0.191], [0.425,-0.064], [0.510,-0.140], [0.561,-0.191], [0.612,-0.234], [0.653,-0.276], [0.697,-0.319], [0.731,-0.402], [0.748,-0.446], [0.756,-0.490], [0.765,-0.534], [0.756,-0.578], [0.739,-0.622], [0.714,-0.666], [0.680,-0.710], [0.632,-0.747], [0.567,-0.786], [0.517,-0.801], [0.468,-0.803], [0.417,-0.801], [0.374,-0.786], [0.306,-0.761], [0.238,-0.727], [0.306,-0.761], [0.374,-0.786], [0.417,-0.801], [0.468,-0.803], [0.517,-0.801], [0.567,-0.786], [0.632,-0.747], [0.678,-0.769], [0.720,-0.786], [0.763,-0.786], [0.805,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  't' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.786], [0.298,-0.786], [0.374,-0.786], [0.445,-0.786], [0.484,-0.759], [0.499,-0.605], [0.514,-0.452], [0.529,-0.299], [0.543,-0.146], [0.558,0.008], [0.573,0.161], [0.588,0.314], [0.552,0.314], [0.522,0.314], [0.467,0.314], [0.411,0.314], [0.340,0.314], [0.255,0.314], [0.170,0.314], [0.255,0.314], [0.340,0.314], [0.411,0.314], [0.467,0.314], [0.522,0.314], [0.552,0.314], [0.633,0.314], [0.688,0.314], [0.729,0.314], [0.784,0.314], [0.840,0.314], [0.895,0.314], [0.978,0.314], [1.062,0.314], [0.978,0.314], [0.895,0.314], [0.840,0.314], [0.784,0.314], [0.729,0.314], [0.688,0.314], [0.633,0.314], [0.588,0.314], [0.602,0.467], [0.617,0.621], [0.632,0.774], [0.632,0.621], [0.632,0.467], [0.632,0.314], [0.632,0.161], [0.632,0.008], [0.632,-0.146], [0.632,-0.299], [0.632,-0.452], [0.632,-0.605], [0.632,-0.759], [0.659,-0.805], [0.720,-0.816], [0.807,-0.799], [0.894,-0.791], [0.978,-0.786], [1.062,-0.786], [1.147,-0.786], [1.232,-0.786],  ],\n  'u' : [ [0.043,-0.761], [0.085,-0.744], [0.128,-0.727], [0.156,-0.710], [0.179,-0.690], [0.204,-0.646], [0.221,-0.602], [0.238,-0.557], [0.255,-0.506], [0.286,-0.491], [0.293,-0.442], [0.299,-0.392], [0.306,-0.343], [0.312,-0.294], [0.319,-0.245], [0.325,-0.195], [0.332,-0.146], [0.338,-0.097], [0.344,-0.048], [0.338,-0.097], [0.332,-0.146], [0.325,-0.195], [0.319,-0.245], [0.312,-0.294], [0.306,-0.343], [0.299,-0.392], [0.293,-0.442], [0.286,-0.491], [0.280,-0.540], [0.273,-0.589], [0.267,-0.639], [0.260,-0.688], [0.254,-0.737], [0.260,-0.786], [0.289,-0.803], [0.332,-0.812], [0.383,-0.803], [0.425,-0.795], [0.461,-0.778], [0.501,-0.761], [0.544,-0.744], [0.583,-0.727], [0.616,-0.710], [0.646,-0.684], [0.671,-0.650], [0.682,-0.605], [0.686,-0.558], [0.689,-0.511], [0.693,-0.464], [0.697,-0.416], [0.700,-0.369], [0.704,-0.322], [0.708,-0.275], [0.711,-0.228], [0.715,-0.180], [0.719,-0.133], [0.723,-0.074], [0.726,-0.023], [0.723,-0.074], [0.719,-0.133], [0.715,-0.180], [0.711,-0.228], [0.708,-0.275], [0.704,-0.322], [0.700,-0.369], [0.697,-0.416], [0.693,-0.464], [0.712,-0.529], [0.719,-0.582], [0.731,-0.633], [0.748,-0.684], [0.756,-0.735], [0.790,-0.786], [0.845,-0.803], [0.901,-0.803], [0.944,-0.795], [1.020,-0.786],  ],\n  'v' : [ [0.030,-0.784], [0.050,-0.735], [0.070,-0.687], [0.091,-0.639], [0.111,-0.591], [0.131,-0.543], [0.151,-0.494], [0.172,-0.431], [0.184,-0.375], [0.204,-0.327], [0.224,-0.279], [0.245,-0.231], [0.265,-0.182], [0.285,-0.134], [0.321,-0.085], [0.348,-0.060], [0.388,-0.046], [0.430,-0.054], [0.455,-0.076], [0.476,-0.097], [0.488,-0.134], [0.498,-0.176], [0.508,-0.212], [0.509,-0.244], [0.505,-0.280], [0.503,-0.321], [0.501,-0.363], [0.498,-0.404], [0.496,-0.446], [0.493,-0.487], [0.491,-0.528], [0.488,-0.570], [0.486,-0.611], [0.493,-0.657], [0.509,-0.707], [0.525,-0.749], [0.554,-0.790], [0.593,-0.814], [0.635,-0.793], [0.674,-0.766], [0.689,-0.723], [0.703,-0.680], [0.718,-0.637], [0.733,-0.594], [0.737,-0.547], [0.753,-0.502], [0.759,-0.450], [0.769,-0.408], [0.780,-0.331], [0.791,-0.255], [0.803,-0.179], [0.814,-0.102], [0.886,-0.110], [0.960,-0.130], [1.015,-0.143], [1.058,-0.149],  ],\n  'w' : [ [0.030,-0.781], [0.050,-0.754], [0.083,-0.708], [0.102,-0.684], [0.123,-0.659], [0.146,-0.611], [0.170,-0.564], [0.193,-0.516], [0.216,-0.468], [0.240,-0.420], [0.262,-0.361], [0.284,-0.290], [0.306,-0.219], [0.328,-0.148], [0.350,-0.077], [0.361,-0.041], [0.356,-0.126], [0.352,-0.210], [0.348,-0.294], [0.343,-0.379], [0.339,-0.463], [0.342,-0.517], [0.351,-0.602], [0.359,-0.670], [0.390,-0.738], [0.433,-0.783], [0.495,-0.799], [0.565,-0.776], [0.589,-0.728], [0.612,-0.680], [0.636,-0.632], [0.655,-0.585], [0.673,-0.537], [0.689,-0.490], [0.704,-0.442], [0.711,-0.358], [0.719,-0.274], [0.726,-0.190], [0.734,-0.105], [0.741,-0.064], [0.753,-0.120], [0.765,-0.219], [0.777,-0.317], [0.789,-0.416], [0.801,-0.515], [0.812,-0.614], [0.824,-0.712], [0.867,-0.780], [0.911,-0.786], [0.952,-0.775], [0.988,-0.723], [1.014,-0.682], [1.037,-0.634], [1.061,-0.587], [1.073,-0.530], [1.085,-0.448], [1.091,-0.403], [1.101,-0.314], [1.112,-0.224], [1.122,-0.135], [1.133,-0.064], [1.188,-0.072], [1.244,-0.089], [1.298,-0.106], [1.356,-0.149],  ],\n  'x' : [ [0.085,-0.786], [0.170,-0.786], [0.220,-0.721], [0.262,-0.667], [0.304,-0.614], [0.346,-0.560], [0.388,-0.506], [0.430,-0.452], [0.471,-0.398], [0.522,-0.337], [0.555,-0.291], [0.597,-0.237], [0.639,-0.183], [0.681,-0.129], [0.723,-0.075], [0.765,-0.021], [0.799,0.021], [0.765,-0.021], [0.723,-0.075], [0.681,-0.129], [0.639,-0.183], [0.597,-0.237], [0.555,-0.291], [0.522,-0.337], [0.445,-0.429], [0.417,-0.383], [0.380,-0.315], [0.343,-0.248], [0.306,-0.181], [0.269,-0.114], [0.232,-0.046], [0.196,0.021], [0.232,-0.046], [0.269,-0.114], [0.306,-0.181], [0.343,-0.248], [0.380,-0.315], [0.417,-0.383], [0.445,-0.429], [0.491,-0.517], [0.528,-0.585], [0.565,-0.652], [0.602,-0.719], [0.639,-0.786], [0.680,-0.824], [0.718,-0.830], [0.763,-0.846], [0.799,-0.842], [0.834,-0.837], [0.863,-0.820], [0.901,-0.808], [0.935,-0.795], [0.986,-0.786],  ],\n  'y' : [ [0.033,-0.778], [0.066,-0.760], [0.099,-0.739], [0.124,-0.720], [0.145,-0.684], [0.166,-0.648], [0.187,-0.612], [0.208,-0.576], [0.229,-0.540], [0.251,-0.504], [0.272,-0.468], [0.293,-0.431], [0.314,-0.395], [0.335,-0.359], [0.357,-0.323], [0.378,-0.287], [0.399,-0.251], [0.420,-0.215], [0.441,-0.179], [0.462,-0.143], [0.513,-0.123], [0.547,-0.123], [0.586,-0.138], [0.604,-0.161], [0.611,-0.198], [0.606,-0.241], [0.601,-0.279], [0.585,-0.358], [0.570,-0.437], [0.554,-0.515], [0.539,-0.594], [0.523,-0.672], [0.521,-0.735], [0.531,-0.788], [0.549,-0.811], [0.568,-0.834], [0.586,-0.857], [0.609,-0.878], [0.635,-0.895], [0.669,-0.902], [0.703,-0.902], [0.773,-0.893], [0.838,-0.857], [0.870,-0.823], [0.943,-0.745], [0.950,-0.674], [0.957,-0.603], [0.964,-0.533], [0.971,-0.462], [0.977,-0.391], [0.984,-0.320], [0.991,-0.249], [0.998,-0.179], [1.005,-0.132], [0.998,-0.179], [0.991,-0.249], [0.984,-0.320], [0.977,-0.391], [0.971,-0.462], [0.964,-0.533], [0.957,-0.603], [0.950,-0.674], [0.943,-0.745], [0.936,-0.816], [0.929,-0.887], [0.923,-0.957], [0.916,-1.028], [0.909,-1.099], [0.902,-1.170], [0.895,-1.241], [0.888,-1.311], [0.881,-1.382], [0.875,-1.453], [0.868,-1.524], [0.838,-1.571], [0.787,-1.584], [0.720,-1.593], [0.652,-1.601], [0.590,-1.593], [0.543,-1.576], [0.524,-1.553], [0.506,-1.530], [0.488,-1.507], [0.472,-1.476], [0.466,-1.438], [0.473,-1.387], [0.497,-1.348], [0.511,-1.314], [0.534,-1.275], [0.548,-1.241], [0.567,-1.205], [0.582,-1.181], [0.597,-1.158], [0.612,-1.134], [0.627,-1.111], [0.642,-1.087], [0.657,-1.064], [0.698,-1.038], [0.747,-1.012], [0.796,-0.986], [0.846,-0.959], [0.983,-0.897], [1.038,-0.858], [1.094,-0.827], [1.151,-0.809], [1.207,-0.791], [1.258,-0.786],  ],\n  'z' : [ [0.034,-0.752], [0.067,-0.708], [0.083,-0.685], [0.116,-0.639], [0.133,-0.615], [0.166,-0.569], [0.183,-0.546], [0.216,-0.500], [0.233,-0.476], [0.266,-0.430], [0.287,-0.395], [0.316,-0.353], [0.333,-0.327], [0.366,-0.285], [0.389,-0.251], [0.440,-0.191], [0.491,-0.123], [0.516,-0.083], [0.549,-0.047], [0.576,-0.030], [0.615,-0.036], [0.649,-0.059], [0.665,-0.083], [0.682,-0.106], [0.699,-0.129], [0.708,-0.191], [0.699,-0.245], [0.678,-0.319], [0.652,-0.386], [0.615,-0.453], [0.582,-0.500], [0.542,-0.574], [0.499,-0.639], [0.466,-0.685], [0.449,-0.708], [0.399,-0.777], [0.383,-0.801], [0.399,-0.777], [0.449,-0.708], [0.466,-0.685], [0.499,-0.639], [0.549,-0.639], [0.576,-0.667], [0.599,-0.708], [0.615,-0.731], [0.642,-0.769], [0.665,-0.824], [0.669,-0.847], [0.665,-0.870], [0.665,-0.916], [0.665,-0.963], [0.652,-1.084], [0.627,-1.169], [0.602,-1.243], [0.582,-1.287], [0.566,-1.310], [0.532,-1.380], [0.516,-1.403], [0.493,-1.432], [0.459,-1.495], [0.432,-1.519], [0.401,-1.534], [0.366,-1.519], [0.349,-1.495], [0.304,-1.441], [0.283,-1.403], [0.270,-1.356], [0.283,-1.310], [0.303,-1.267], [0.333,-1.218], [0.349,-1.194], [0.366,-1.171], [0.383,-1.148], [0.399,-1.125], [0.416,-1.102], [0.432,-1.079], [0.449,-1.055], [0.466,-1.032], [0.501,-1.002], [0.536,-0.965], [0.571,-0.931], [0.605,-0.897], [0.640,-0.871], [0.675,-0.846], [0.710,-0.829], [0.745,-0.812], [0.780,-0.803], [0.815,-0.791], [0.850,-0.786], [0.892,-0.778], [0.935,-0.778], [0.978,-0.786],  ],\n  'a*' : [ [0.068,-0.174], [0.136,-0.149], [0.204,-0.132], [0.272,-0.098], [0.340,-0.089], [0.432,-0.081], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.561,-0.718], [0.501,-0.773], [0.425,-0.801], [0.357,-0.820], [0.279,-0.801], [0.230,-0.754], [0.213,-0.731], [0.184,-0.681], [0.151,-0.616], [0.146,-0.557], [0.146,-0.500], [0.153,-0.455], [0.180,-0.395], [0.204,-0.353], [0.219,-0.319], [0.246,-0.276], [0.272,-0.234], [0.298,-0.191], [0.333,-0.157], [0.379,-0.132], [0.432,-0.081], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.678,-0.744], [0.729,-0.801], [0.781,-0.786], [0.850,-0.786],  ],\n  'b*' : [ [0.043,-0.157], [0.085,-0.166], [0.128,-0.157], [0.179,-0.157], [0.230,-0.162], [0.281,-0.157], [0.332,-0.140], [0.365,-0.115], [0.391,-0.064], [0.414,-0.004], [0.443,0.064], [0.472,0.140], [0.500,0.241], [0.529,0.320], [0.544,0.399], [0.546,0.510], [0.530,0.602], [0.487,0.674], [0.431,0.743], [0.390,0.750], [0.355,0.739], [0.324,0.724], [0.300,0.686], [0.281,0.627], [0.275,0.497], [0.274,0.368], [0.272,0.238], [0.270,0.108], [0.274,-0.022], [0.275,-0.152], [0.277,-0.282], [0.279,-0.412], [0.281,-0.542], [0.291,-0.672], [0.309,-0.718], [0.339,-0.771], [0.369,-0.786], [0.420,-0.786], [0.457,-0.782], [0.494,-0.764], [0.522,-0.746], [0.548,-0.688], [0.562,-0.634], [0.580,-0.573], [0.594,-0.514], [0.613,-0.446], [0.619,-0.377], [0.628,-0.293], [0.630,-0.200], [0.631,-0.112], [0.701,-0.140], [0.748,-0.157], [0.799,-0.149],  ],\n  'c*' : [ [0.085,-0.140], [0.175,-0.132], [0.243,-0.123], [0.311,-0.106], [0.367,-0.089], [0.413,-0.081], [0.456,-0.072], [0.500,-0.064], [0.566,-0.064], [0.617,-0.106], [0.651,-0.191], [0.617,-0.106], [0.566,-0.064], [0.500,-0.064], [0.456,-0.072], [0.413,-0.081], [0.367,-0.094], [0.331,-0.123], [0.300,-0.152], [0.267,-0.191], [0.243,-0.222], [0.217,-0.268], [0.170,-0.407], [0.170,-0.497], [0.173,-0.565], [0.191,-0.657], [0.217,-0.708], [0.234,-0.731], [0.251,-0.754], [0.277,-0.795], [0.326,-0.829], [0.417,-0.846], [0.532,-0.829], [0.609,-0.820], [0.668,-0.812], [0.736,-0.803], [0.821,-0.795], [0.906,-0.786],  ],\n  'd*' : [ [0.068,-0.157], [0.136,-0.166], [0.204,-0.157], [0.272,-0.140], [0.340,-0.123], [0.425,-0.123], [0.469,-0.089], [0.515,-0.072], [0.629,-0.043], [0.697,-0.036], [0.782,-0.036], [0.697,-0.036], [0.629,-0.043], [0.515,-0.072], [0.469,-0.089], [0.425,-0.123], [0.357,-0.191], [0.333,-0.242], [0.313,-0.319], [0.298,-0.395], [0.289,-0.455], [0.282,-0.500], [0.279,-0.557], [0.287,-0.616], [0.320,-0.681], [0.366,-0.754], [0.415,-0.801], [0.459,-0.810], [0.510,-0.808], [0.561,-0.801], [0.637,-0.773], [0.697,-0.718], [0.799,-0.650], [0.867,-0.639], [0.867,-0.592], [0.867,-0.489], [0.867,-0.404], [0.867,-0.293], [0.867,-0.149], [0.867,0.064], [0.867,0.234], [0.867,0.404], [0.867,0.574], [0.867,0.744], [0.867,0.574], [0.867,0.404], [0.867,0.234], [0.867,0.064], [0.867,-0.149], [0.867,-0.293], [0.867,-0.404], [0.867,-0.489], [0.867,-0.592], [0.867,-0.639], [0.875,-0.701], [0.899,-0.744], [0.950,-0.801], [1.002,-0.824], [1.068,-0.815], [1.122,-0.812], [1.190,-0.795], [1.275,-0.786],  ],\n  'e*' : [ [0.085,-0.149], [0.136,-0.162], [0.170,-0.174], [0.204,-0.191], [0.231,-0.208], [0.264,-0.242], [0.315,-0.276], [0.383,-0.327], [0.451,-0.344], [0.501,-0.336], [0.552,-0.268], [0.566,-0.229], [0.568,-0.191], [0.559,-0.160], [0.542,-0.106], [0.525,-0.072], [0.495,-0.047], [0.452,-0.030], [0.410,-0.021], [0.367,-0.030], [0.325,-0.047], [0.294,-0.072], [0.260,-0.106], [0.235,-0.149], [0.231,-0.208], [0.231,-0.268], [0.231,-0.327], [0.235,-0.404], [0.240,-0.446], [0.250,-0.497], [0.260,-0.548], [0.281,-0.616], [0.298,-0.667], [0.332,-0.701], [0.365,-0.735], [0.417,-0.761], [0.485,-0.769], [0.552,-0.778], [0.620,-0.786], [0.680,-0.786], [0.765,-0.786],  ],\n  'f*' : [ [0.043,-0.191], [0.076,-0.234], [0.111,-0.310], [0.145,-0.395], [0.179,-0.446], [0.213,-0.489], [0.247,-0.531], [0.281,-0.574], [0.321,-0.642], [0.374,-0.592], [0.425,-0.548], [0.451,-0.446], [0.468,-0.361], [0.485,-0.276], [0.501,-0.191], [0.518,-0.106], [0.535,-0.038], [0.552,0.047], [0.565,0.131], [0.582,0.212], [0.605,0.299], [0.619,0.402], [0.632,0.506], [0.614,0.607], [0.578,0.667], [0.535,0.680], [0.485,0.684], [0.425,0.671], [0.374,0.652], [0.329,0.619], [0.298,0.531], [0.294,0.428], [0.292,0.299], [0.294,0.169], [0.296,-0.000], [0.296,-0.172], [0.296,-0.276], [0.298,-0.385], [0.297,-0.489], [0.296,-0.598], [0.295,-0.710], [0.295,-0.829], [0.292,-0.931], [0.289,-1.041], [0.286,-1.126], [0.281,-1.254], [0.281,-1.356], [0.279,-1.466], [0.272,-1.602], [0.323,-1.602], [0.374,-1.601], [0.423,-1.594], [0.474,-1.551], [0.510,-1.509], [0.542,-1.466], [0.550,-1.381], [0.542,-1.296], [0.533,-1.211], [0.522,-1.126], [0.508,-1.041], [0.491,-0.956], [0.468,-0.888], [0.442,-0.846], [0.383,-0.752], [0.420,-0.769], [0.468,-0.803], [0.510,-0.829], [0.567,-0.812], [0.639,-0.803], [0.723,-0.795], [0.807,-0.786],  ],\n  'g*' : [ [0.068,-0.157], [0.136,-0.166], [0.204,-0.174], [0.272,-0.183], [0.340,-0.174], [0.391,-0.179], [0.448,-0.175], [0.480,-0.149], [0.525,-0.132], [0.576,-0.115], [0.627,-0.098], [0.678,-0.086], [0.730,-0.089], [0.748,-0.123], [0.745,-0.191], [0.741,-0.259], [0.738,-0.327], [0.734,-0.395], [0.731,-0.463], [0.728,-0.531], [0.724,-0.599], [0.721,-0.667], [0.717,-0.735], [0.663,-0.761], [0.610,-0.786], [0.525,-0.812], [0.457,-0.824], [0.374,-0.812], [0.304,-0.786], [0.247,-0.754], [0.202,-0.676], [0.181,-0.592], [0.177,-0.548], [0.197,-0.506], [0.231,-0.458], [0.247,-0.430], [0.281,-0.384], [0.314,-0.337], [0.347,-0.291], [0.374,-0.251], [0.406,-0.217], [0.448,-0.175], [0.480,-0.149], [0.525,-0.132], [0.576,-0.115], [0.627,-0.098], [0.678,-0.086], [0.730,-0.089], [0.748,-0.123], [0.745,-0.191], [0.741,-0.259], [0.738,-0.327], [0.734,-0.395], [0.731,-0.463], [0.728,-0.531], [0.724,-0.599], [0.721,-0.667], [0.717,-0.735], [0.714,-0.803], [0.711,-0.871], [0.707,-0.939], [0.704,-1.007], [0.700,-1.075], [0.697,-1.143], [0.694,-1.211], [0.690,-1.279], [0.687,-1.347], [0.683,-1.415], [0.680,-1.484], [0.677,-1.551], [0.673,-1.619], [0.612,-1.615], [0.544,-1.608], [0.493,-1.598], [0.442,-1.568], [0.391,-1.526], [0.340,-1.466], [0.306,-1.398], [0.289,-1.347], [0.272,-1.279], [0.281,-1.228], [0.306,-1.186], [0.347,-1.125], [0.377,-1.084], [0.414,-1.041], [0.474,-0.990], [0.542,-0.948], [0.593,-0.914], [0.647,-0.871], [0.720,-0.829], [0.796,-0.820], [0.884,-0.812], [0.969,-0.803], [1.054,-0.786],  ],\n  'h*' : [ [0.068,-0.174], [0.136,-0.200], [0.204,-0.217], [0.272,-0.225], [0.323,-0.217], [0.303,-0.276], [0.326,-0.242], [0.349,-0.200], [0.383,-0.155], [0.432,-0.083], [0.483,-0.038], [0.508,0.013], [0.549,0.064], [0.575,0.131], [0.602,0.202], [0.617,0.249], [0.641,0.297], [0.651,0.370], [0.660,0.438], [0.662,0.523], [0.651,0.616], [0.641,0.693], [0.599,0.742], [0.542,0.769], [0.483,0.769], [0.406,0.738], [0.355,0.702], [0.321,0.636], [0.295,0.511], [0.295,0.425], [0.295,0.339], [0.295,0.227], [0.295,0.114], [0.295,0.001], [0.295,-0.111], [0.295,-0.224], [0.295,-0.336], [0.295,-0.449], [0.295,-0.561], [0.295,-0.674], [0.295,-0.786], [0.299,-0.674], [0.302,-0.561], [0.329,-0.514], [0.368,-0.447], [0.392,-0.386], [0.420,-0.307], [0.447,-0.255], [0.475,-0.185], [0.507,-0.149], [0.564,-0.132], [0.625,-0.123], [0.678,-0.132], [0.743,-0.166], [0.767,-0.229], [0.760,-0.307], [0.755,-0.375], [0.748,-0.453], [0.748,-0.533], [0.761,-0.623], [0.786,-0.717], [0.845,-0.766], [0.920,-0.794], [1.005,-0.786],  ],\n  'i*' : [ [0.051,-0.166], [0.084,-0.167], [0.118,-0.160], [0.154,-0.143], [0.192,-0.084], [0.233,-0.026], [0.227,-0.136], [0.224,-0.195], [0.218,-0.280], [0.216,-0.365], [0.216,-0.425], [0.216,-0.501], [0.216,-0.544], [0.214,-0.629], [0.219,-0.706], [0.241,-0.759], [0.271,-0.806], [0.347,-0.827], [0.431,-0.803],  ],\n  'j*' : [ [0.034,-0.155], [0.061,-0.162], [0.095,-0.166], [0.129,-0.174], [0.163,-0.157], [0.197,-0.140], [0.231,-0.115], [0.265,-0.089], [0.299,-0.072], [0.316,-0.055], [0.333,-0.050], [0.357,-0.038], [0.383,-0.049], [0.383,-0.099], [0.383,-0.167], [0.383,-0.276], [0.383,-0.395], [0.383,-0.513], [0.383,-0.632], [0.383,-0.751], [0.383,-0.869], [0.383,-0.988], [0.383,-1.107], [0.383,-1.225], [0.383,-1.344], [0.368,-1.405], [0.349,-1.466], [0.326,-1.514], [0.296,-1.530], [0.255,-1.534], [0.218,-1.518], [0.196,-1.496], [0.172,-1.406], [0.162,-1.296], [0.159,-1.211], [0.173,-1.126], [0.196,-1.053], [0.218,-1.005], [0.241,-0.957], [0.263,-0.909], [0.286,-0.861], [0.301,-0.837], [0.328,-0.808], [0.356,-0.780], [0.384,-0.753], [0.408,-0.742], [0.439,-0.734], [0.473,-0.733], [0.509,-0.750], [0.552,-0.767], [0.595,-0.786],  ],\n  'k*' : [ [0.043,-0.166], [0.085,-0.191], [0.119,-0.208], [0.153,-0.251], [0.187,-0.276], [0.221,-0.276], [0.272,-0.259], [0.323,-0.234], [0.337,-0.305], [0.384,-0.226], [0.431,-0.147], [0.479,-0.069], [0.526,0.010], [0.555,0.056], [0.584,0.103], [0.605,0.149], [0.622,0.195], [0.659,0.261], [0.677,0.309], [0.695,0.356], [0.713,0.404], [0.732,0.451], [0.750,0.499], [0.765,0.565], [0.771,0.635], [0.737,0.676], [0.695,0.684], [0.654,0.684], [0.603,0.684], [0.552,0.676], [0.501,0.659], [0.451,0.612], [0.400,0.562], [0.357,0.466], [0.340,0.369], [0.340,0.273], [0.340,0.176], [0.340,0.079], [0.340,0.010], [0.340,-0.066], [0.340,-0.143], [0.340,-0.219], [0.340,-0.296], [0.340,-0.372], [0.340,-0.449], [0.340,-0.525], [0.340,-0.601], [0.340,-0.678], [0.340,-0.754], [0.340,-0.847], [0.340,-0.754], [0.340,-0.678], [0.340,-0.601], [0.340,-0.525], [0.340,-0.449], [0.354,-0.372], [0.397,-0.361], [0.465,-0.353], [0.533,-0.344], [0.618,-0.327], [0.686,-0.302], [0.754,-0.276], [0.797,-0.234], [0.822,-0.198], [0.812,-0.140], [0.788,-0.089], [0.758,-0.059], [0.720,-0.032], [0.652,-0.055], [0.601,-0.106], [0.516,-0.191], [0.465,-0.276], [0.431,-0.336], [0.383,-0.378], [0.414,-0.421], [0.455,-0.453], [0.489,-0.500], [0.522,-0.546], [0.554,-0.592], [0.577,-0.639], [0.591,-0.662], [0.622,-0.708], [0.655,-0.754], [0.688,-0.801], [0.729,-0.846], [0.771,-0.871], [0.814,-0.863], [0.856,-0.846], [0.899,-0.829], [0.941,-0.812], [0.971,-0.803], [1.011,-0.786], [1.065,-0.786], [1.105,-0.786],  ],\n  'l*' : [ [0.031,-0.157], [0.054,-0.174], [0.088,-0.191], [0.122,-0.234], [0.156,-0.276], [0.207,-0.302], [0.241,-0.319], [0.284,-0.327], [0.306,-0.332], [0.340,-0.286], [0.377,-0.238], [0.403,-0.191], [0.435,-0.115], [0.459,-0.055], [0.483,0.013], [0.501,0.056], [0.510,0.095], [0.524,0.140], [0.534,0.190], [0.548,0.237], [0.554,0.284], [0.566,0.351], [0.578,0.404], [0.585,0.480], [0.594,0.566], [0.595,0.613], [0.585,0.682], [0.550,0.734], [0.515,0.771], [0.480,0.782], [0.451,0.786], [0.400,0.781], [0.347,0.767], [0.324,0.719], [0.315,0.672], [0.308,0.632], [0.304,0.574], [0.304,0.488], [0.304,0.401], [0.304,0.314], [0.304,0.227], [0.304,0.141], [0.304,0.054], [0.304,-0.033], [0.304,-0.119], [0.303,-0.206], [0.303,-0.293], [0.303,-0.380], [0.303,-0.466], [0.303,-0.553], [0.303,-0.640], [0.311,-0.702], [0.343,-0.752], [0.383,-0.778], [0.434,-0.784], [0.483,-0.807], [0.538,-0.821], [0.603,-0.803], [0.677,-0.795], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  'm*' : [ [0.034,-0.149], [0.085,-0.140], [0.136,-0.140], [0.187,-0.132], [0.238,-0.123], [0.272,-0.106], [0.315,-0.072], [0.349,-0.055], [0.394,-0.059], [0.410,-0.083], [0.414,-0.103], [0.419,-0.154], [0.424,-0.205], [0.430,-0.256], [0.435,-0.307], [0.440,-0.358], [0.431,-0.402], [0.421,-0.447], [0.411,-0.491], [0.402,-0.535], [0.392,-0.579], [0.382,-0.624], [0.373,-0.668], [0.363,-0.712], [0.353,-0.756], [0.344,-0.801], [0.353,-0.756], [0.363,-0.712], [0.373,-0.668], [0.382,-0.624], [0.392,-0.579], [0.402,-0.535], [0.411,-0.491], [0.421,-0.447], [0.431,-0.402], [0.440,-0.358], [0.460,-0.314], [0.488,-0.276], [0.510,-0.245], [0.527,-0.222], [0.543,-0.198], [0.560,-0.175], [0.577,-0.152], [0.593,-0.129], [0.627,-0.089], [0.661,-0.064], [0.711,-0.044], [0.760,-0.036], [0.776,-0.059], [0.793,-0.083], [0.810,-0.106], [0.820,-0.143], [0.830,-0.180], [0.840,-0.217], [0.850,-0.254], [0.859,-0.291], [0.848,-0.340], [0.836,-0.388], [0.825,-0.437], [0.813,-0.486], [0.801,-0.534], [0.790,-0.583], [0.778,-0.632], [0.766,-0.680], [0.755,-0.729], [0.754,-0.777], [0.755,-0.729], [0.766,-0.680], [0.778,-0.632], [0.790,-0.583], [0.801,-0.534], [0.813,-0.486], [0.825,-0.437], [0.836,-0.388], [0.848,-0.340], [0.859,-0.291], [0.876,-0.268], [0.901,-0.234], [0.926,-0.198], [0.943,-0.175], [0.961,-0.140], [0.993,-0.106], [1.009,-0.083], [1.035,-0.059], [1.103,-0.038], [1.176,-0.059], [1.209,-0.106], [1.225,-0.129], [1.242,-0.175], [1.234,-0.224], [1.225,-0.272], [1.217,-0.320], [1.209,-0.369], [1.200,-0.417], [1.192,-0.466], [1.184,-0.514], [1.176,-0.562], [1.167,-0.611], [1.159,-0.659], [1.159,-0.708], [1.192,-0.754], [1.209,-0.777], [1.241,-0.803], [1.325,-0.812], [1.375,-0.812], [1.422,-0.803], [1.475,-0.799], [1.564,-0.795], [1.649,-0.786],  ],\n  'n*' : [ [0.051,-0.132], [0.102,-0.115], [0.153,-0.098], [0.204,-0.047], [0.238,-0.004], [0.264,0.021], [0.291,0.038], [0.332,0.064], [0.374,0.038], [0.400,-0.013], [0.414,-0.059], [0.423,-0.106], [0.431,-0.149], [0.435,-0.198], [0.430,-0.254], [0.430,-0.310], [0.430,-0.365], [0.430,-0.421], [0.430,-0.476], [0.430,-0.532], [0.430,-0.588], [0.430,-0.643], [0.430,-0.699], [0.430,-0.754], [0.430,-0.699], [0.430,-0.643], [0.430,-0.588], [0.430,-0.532], [0.430,-0.476], [0.430,-0.421], [0.430,-0.365], [0.430,-0.310], [0.430,-0.254], [0.459,-0.242], [0.485,-0.217], [0.508,-0.198], [0.525,-0.175], [0.542,-0.152], [0.558,-0.129], [0.587,-0.098], [0.620,-0.059], [0.656,-0.013], [0.691,0.010], [0.741,0.010], [0.774,-0.013], [0.791,-0.036], [0.808,-0.059], [0.816,-0.106], [0.825,-0.149], [0.825,-0.234], [0.825,-0.293], [0.825,-0.361], [0.825,-0.421], [0.825,-0.480], [0.825,-0.523], [0.825,-0.574], [0.825,-0.616], [0.825,-0.662], [0.825,-0.708], [0.833,-0.761], [0.865,-0.812], [0.924,-0.820], [0.967,-0.812], [1.024,-0.786], [1.088,-0.786],  ],\n  'o*' : [ [0.051,-0.170], [0.102,-0.174], [0.153,-0.166], [0.204,-0.157], [0.255,-0.149], [0.306,-0.140], [0.346,-0.152], [0.363,-0.129], [0.380,-0.106], [0.396,-0.083], [0.431,-0.072], [0.474,-0.055], [0.533,-0.055], [0.576,-0.072], [0.596,-0.083], [0.618,-0.106], [0.634,-0.123], [0.646,-0.149], [0.663,-0.175], [0.669,-0.224], [0.668,-0.272], [0.673,-0.320], [0.671,-0.368], [0.665,-0.417], [0.660,-0.465], [0.651,-0.513], [0.637,-0.562], [0.620,-0.610], [0.603,-0.658], [0.592,-0.701], [0.570,-0.752], [0.544,-0.795], [0.501,-0.829], [0.459,-0.846], [0.408,-0.854], [0.346,-0.842], [0.321,-0.820], [0.296,-0.791], [0.263,-0.754], [0.247,-0.731], [0.230,-0.708], [0.213,-0.685], [0.202,-0.659], [0.185,-0.616], [0.168,-0.574], [0.156,-0.531], [0.163,-0.480], [0.187,-0.430], [0.205,-0.395], [0.216,-0.361], [0.238,-0.319], [0.263,-0.268], [0.280,-0.245], [0.295,-0.222], [0.321,-0.183], [0.346,-0.152], [0.363,-0.129], [0.380,-0.106], [0.396,-0.083], [0.431,-0.072], [0.473,-0.106], [0.493,-0.149], [0.518,-0.183], [0.544,-0.200], [0.578,-0.217], [0.612,-0.225], [0.646,-0.225], [0.680,-0.225], [0.714,-0.225], [0.748,-0.221], [0.782,-0.217], [0.816,-0.208], [0.850,-0.191], [0.884,-0.174], [0.918,-0.149],  ],\n  'p*' : [ [0.043,-0.153], [0.085,-0.157], [0.136,-0.157], [0.187,-0.157], [0.238,-0.140], [0.279,-0.136], [0.287,-0.215], [0.285,-0.323], [0.283,-0.431], [0.282,-0.539], [0.280,-0.646], [0.278,-0.754], [0.276,-0.862], [0.274,-0.970], [0.272,-1.078], [0.270,-1.186], [0.268,-1.294], [0.267,-1.402], [0.265,-1.510], [0.267,-1.402], [0.268,-1.294], [0.270,-1.186], [0.272,-1.078], [0.274,-0.970], [0.276,-0.862], [0.278,-0.754], [0.280,-0.646], [0.282,-0.539], [0.283,-0.431], [0.285,-0.323], [0.287,-0.215], [0.289,-0.107], [0.279,-0.136], [0.322,-0.091], [0.353,-0.048], [0.393,-0.020], [0.425,-0.002], [0.449,0.007], [0.479,0.017], [0.525,0.010], [0.577,-0.011], [0.624,-0.077], [0.637,-0.104], [0.668,-0.170], [0.686,-0.282], [0.686,-0.357], [0.689,-0.469], [0.675,-0.538], [0.663,-0.616], [0.641,-0.654], [0.606,-0.694], [0.566,-0.714], [0.504,-0.754], [0.446,-0.747], [0.391,-0.744], [0.340,-0.727], [0.391,-0.744], [0.446,-0.747], [0.504,-0.754], [0.540,-0.748], [0.593,-0.763], [0.678,-0.777], [0.729,-0.783], [0.793,-0.803], [0.850,-0.803], [0.911,-0.795], [0.969,-0.786],  ],\n  'q*' : [ [0.051,-0.153], [0.102,-0.157], [0.153,-0.162], [0.204,-0.166], [0.255,-0.183], [0.306,-0.200], [0.357,-0.191], [0.408,-0.183], [0.459,-0.166], [0.514,-0.149], [0.559,-0.132], [0.610,-0.115], [0.661,-0.098], [0.712,-0.086], [0.764,-0.089], [0.782,-0.123], [0.779,-0.191], [0.775,-0.259], [0.772,-0.327], [0.768,-0.395], [0.765,-0.463], [0.762,-0.531], [0.758,-0.599], [0.755,-0.667], [0.751,-0.735], [0.697,-0.761], [0.644,-0.786], [0.559,-0.812], [0.491,-0.824], [0.408,-0.812], [0.338,-0.786], [0.281,-0.754], [0.236,-0.676], [0.215,-0.592], [0.207,-0.548], [0.231,-0.506], [0.265,-0.458], [0.281,-0.430], [0.315,-0.384], [0.348,-0.337], [0.381,-0.291], [0.408,-0.251], [0.440,-0.217], [0.482,-0.175], [0.514,-0.149], [0.559,-0.132], [0.610,-0.115], [0.661,-0.098], [0.712,-0.086], [0.764,-0.089], [0.782,-0.123], [0.779,-0.191], [0.775,-0.259], [0.772,-0.327], [0.768,-0.395], [0.765,-0.463], [0.762,-0.531], [0.758,-0.599], [0.755,-0.667], [0.751,-0.735], [0.748,-0.803], [0.745,-0.871], [0.741,-0.939], [0.738,-1.007], [0.734,-1.075], [0.731,-1.143], [0.728,-1.211], [0.724,-1.279], [0.721,-1.347], [0.717,-1.415], [0.714,-1.484], [0.711,-1.551], [0.707,-1.619], [0.748,-1.615], [0.799,-1.608], [0.833,-1.598], [0.867,-1.568], [0.901,-1.526], [0.935,-1.466], [0.969,-1.398], [0.986,-1.347], [0.995,-1.279], [0.986,-1.228], [0.969,-1.186], [0.935,-1.125], [0.901,-1.084], [0.867,-1.041], [0.833,-0.990], [0.799,-0.948], [0.782,-0.914], [0.782,-0.854], [0.830,-0.829], [0.884,-0.812], [0.935,-0.803], [0.986,-0.799], [1.020,-0.795], [1.105,-0.791], [1.207,-0.786],  ],\n  'r*' : [ [0.085,-0.174], [0.170,-0.183], [0.170,-0.064], [0.255,-0.064], [0.340,-0.064], [0.425,-0.064], [0.510,-0.064], [0.510,-0.149], [0.501,-0.234], [0.493,-0.319], [0.476,-0.404], [0.459,-0.489], [0.451,-0.574], [0.476,-0.659], [0.510,-0.701], [0.578,-0.744], [0.663,-0.769], [0.765,-0.786],  ],\n  's*' : [ [0.085,-0.149], [0.170,-0.157], [0.221,-0.174], [0.272,-0.200], [0.323,-0.234], [0.374,-0.234], [0.425,-0.225], [0.476,-0.217], [0.527,-0.200], [0.561,-0.191], [0.603,-0.166], [0.663,-0.145], [0.748,-0.119], [0.819,-0.106], [0.820,-0.174], [0.830,-0.222], [0.842,-0.289], [0.855,-0.353], [0.867,-0.402], [0.867,-0.446], [0.867,-0.490], [0.859,-0.534], [0.850,-0.578], [0.842,-0.622], [0.825,-0.666], [0.782,-0.710], [0.657,-0.769], [0.611,-0.757], [0.547,-0.735], [0.497,-0.684], [0.447,-0.616], [0.397,-0.531], [0.354,-0.446], [0.332,-0.361], [0.323,-0.276], [0.332,-0.361], [0.354,-0.446], [0.397,-0.531], [0.447,-0.616], [0.497,-0.684], [0.547,-0.735], [0.611,-0.757], [0.657,-0.769], [0.700,-0.786], [0.742,-0.795], [0.785,-0.803], [0.850,-0.812], [0.935,-0.803], [1.020,-0.795], [1.105,-0.786],  ],\n  't*' : [ [0.085,-0.191], [0.170,-0.234], [0.255,-0.276], [0.340,-0.259], [0.425,-0.191], [0.510,-0.106], [0.558,0.008], [0.573,0.161], [0.588,0.314], [0.552,0.314], [0.522,0.314], [0.467,0.314], [0.411,0.314], [0.340,0.314], [0.255,0.314], [0.170,0.314], [0.255,0.314], [0.340,0.314], [0.411,0.314], [0.467,0.314], [0.522,0.314], [0.552,0.314], [0.633,0.314], [0.688,0.314], [0.729,0.314], [0.784,0.314], [0.840,0.314], [0.895,0.314], [0.978,0.314], [1.062,0.314], [0.978,0.314], [0.895,0.314], [0.840,0.314], [0.784,0.314], [0.729,0.314], [0.688,0.314], [0.633,0.314], [0.588,0.314], [0.602,0.467], [0.617,0.621], [0.632,0.774], [0.632,0.621], [0.632,0.467], [0.632,0.314], [0.632,0.161], [0.632,0.008], [0.632,-0.146], [0.632,-0.299], [0.632,-0.452], [0.632,-0.605], [0.632,-0.759], [0.659,-0.805], [0.720,-0.816], [0.807,-0.799], [0.894,-0.791], [0.978,-0.786], [1.062,-0.786], [1.147,-0.786], [1.232,-0.786],  ],\n  'u*' : [ [0.043,-0.157], [0.085,-0.166], [0.128,-0.157], [0.162,-0.157], [0.196,-0.140], [0.230,-0.106], [0.272,-0.081], [0.306,-0.055], [0.344,-0.048], [0.338,-0.097], [0.332,-0.146], [0.325,-0.195], [0.319,-0.245], [0.312,-0.294], [0.306,-0.343], [0.299,-0.392], [0.293,-0.442], [0.286,-0.491], [0.280,-0.540], [0.273,-0.589], [0.267,-0.639], [0.260,-0.688], [0.254,-0.737], [0.260,-0.786], [0.289,-0.803], [0.332,-0.812], [0.383,-0.803], [0.425,-0.795], [0.461,-0.778], [0.501,-0.761], [0.544,-0.744], [0.583,-0.727], [0.616,-0.710], [0.646,-0.684], [0.671,-0.650], [0.682,-0.605], [0.686,-0.558], [0.689,-0.511], [0.693,-0.464], [0.697,-0.416], [0.700,-0.369], [0.704,-0.322], [0.708,-0.275], [0.711,-0.228], [0.715,-0.180], [0.719,-0.133], [0.723,-0.074], [0.726,-0.023], [0.723,-0.074], [0.719,-0.133], [0.715,-0.180], [0.711,-0.228], [0.708,-0.275], [0.704,-0.322], [0.700,-0.369], [0.697,-0.416], [0.693,-0.464], [0.712,-0.529], [0.719,-0.582], [0.731,-0.633], [0.748,-0.684], [0.756,-0.735], [0.790,-0.786], [0.845,-0.803], [0.901,-0.803], [0.944,-0.795], [1.020,-0.786],  ],\n  'v*' : [ [0.051,-0.157], [0.102,-0.140], [0.136,-0.123], [0.162,-0.098], [0.187,-0.081], [0.211,-0.055], [0.243,-0.054], [0.268,-0.076], [0.289,-0.097], [0.301,-0.134], [0.311,-0.176], [0.321,-0.212], [0.322,-0.244], [0.318,-0.280], [0.316,-0.321], [0.314,-0.363], [0.311,-0.404], [0.309,-0.446], [0.306,-0.487], [0.304,-0.528], [0.301,-0.570], [0.299,-0.611], [0.306,-0.657], [0.322,-0.707], [0.338,-0.749], [0.367,-0.790], [0.406,-0.814], [0.448,-0.793], [0.487,-0.766], [0.502,-0.723], [0.516,-0.680], [0.531,-0.637], [0.546,-0.594], [0.550,-0.547], [0.566,-0.502], [0.572,-0.450], [0.582,-0.408], [0.593,-0.331], [0.604,-0.255], [0.616,-0.179], [0.627,-0.102], [0.699,-0.110], [0.773,-0.130], [0.828,-0.143], [0.871,-0.149],  ],\n  'w*' : [ [0.051,-0.128], [0.102,-0.115], [0.153,-0.081], [0.187,-0.064], [0.225,-0.041], [0.220,-0.126], [0.216,-0.210], [0.212,-0.294], [0.207,-0.379], [0.203,-0.463], [0.206,-0.517], [0.215,-0.602], [0.223,-0.670], [0.254,-0.738], [0.297,-0.783], [0.359,-0.799], [0.429,-0.776], [0.453,-0.728], [0.476,-0.680], [0.500,-0.632], [0.519,-0.585], [0.537,-0.537], [0.553,-0.490], [0.568,-0.442], [0.575,-0.358], [0.583,-0.274], [0.590,-0.190], [0.598,-0.105], [0.605,-0.064], [0.617,-0.120], [0.629,-0.219], [0.641,-0.317], [0.653,-0.416], [0.665,-0.515], [0.676,-0.614], [0.688,-0.712], [0.731,-0.780], [0.775,-0.786], [0.816,-0.775], [0.852,-0.723], [0.878,-0.682], [0.901,-0.634], [0.925,-0.587], [0.937,-0.530], [0.949,-0.448], [0.955,-0.403], [0.965,-0.314], [0.976,-0.224], [0.986,-0.135], [0.997,-0.064], [1.052,-0.072], [1.108,-0.089], [1.162,-0.106], [1.220,-0.149],  ],\n  'x*' : [ [0.043,-0.106], [0.085,-0.064], [0.128,-0.004], [0.196,0.021], [0.232,-0.046], [0.269,-0.114], [0.306,-0.181], [0.343,-0.248], [0.380,-0.315], [0.417,-0.383], [0.445,-0.429], [0.430,-0.452], [0.388,-0.506], [0.346,-0.560], [0.304,-0.614], [0.262,-0.667], [0.220,-0.721], [0.170,-0.786], [0.220,-0.721], [0.262,-0.667], [0.304,-0.614], [0.346,-0.560], [0.388,-0.506], [0.430,-0.452], [0.471,-0.398], [0.522,-0.337], [0.555,-0.291], [0.597,-0.237], [0.639,-0.183], [0.681,-0.129], [0.723,-0.075], [0.765,-0.021], [0.799,0.021], [0.765,-0.021], [0.723,-0.075], [0.681,-0.129], [0.639,-0.183], [0.597,-0.237], [0.555,-0.291], [0.522,-0.337], [0.471,-0.398], [0.445,-0.429], [0.491,-0.517], [0.528,-0.585], [0.565,-0.652], [0.602,-0.719], [0.639,-0.786], [0.680,-0.824], [0.718,-0.830], [0.763,-0.846], [0.799,-0.842], [0.834,-0.837], [0.863,-0.820], [0.901,-0.808], [0.935,-0.795], [0.986,-0.786],  ],\n  'y*' : [ [0.043,-0.157], [0.085,-0.166], [0.128,-0.157], [0.162,-0.157], [0.196,-0.149], [0.230,-0.140], [0.264,-0.123], [0.306,-0.123], [0.340,-0.123], [0.379,-0.138], [0.397,-0.161], [0.405,-0.198], [0.399,-0.241], [0.394,-0.279], [0.378,-0.358], [0.363,-0.437], [0.347,-0.515], [0.332,-0.594], [0.317,-0.672], [0.315,-0.735], [0.325,-0.788], [0.343,-0.811], [0.361,-0.834], [0.379,-0.857], [0.402,-0.878], [0.428,-0.895], [0.462,-0.902], [0.496,-0.902], [0.566,-0.893], [0.632,-0.857], [0.663,-0.823], [0.737,-0.745], [0.743,-0.674], [0.750,-0.603], [0.757,-0.533], [0.764,-0.462], [0.771,-0.391], [0.778,-0.320], [0.785,-0.249], [0.791,-0.179], [0.799,-0.132], [0.791,-0.179], [0.785,-0.249], [0.778,-0.320], [0.771,-0.391], [0.764,-0.462], [0.757,-0.533], [0.750,-0.603], [0.743,-0.674], [0.737,-0.745], [0.730,-0.816], [0.723,-0.887], [0.716,-0.957], [0.709,-1.028], [0.702,-1.099], [0.695,-1.170], [0.689,-1.241], [0.682,-1.311], [0.675,-1.382], [0.668,-1.453], [0.661,-1.524], [0.631,-1.571], [0.580,-1.584], [0.513,-1.593], [0.446,-1.601], [0.383,-1.593], [0.336,-1.576], [0.318,-1.553], [0.300,-1.530], [0.281,-1.507], [0.265,-1.476], [0.260,-1.438], [0.267,-1.387], [0.291,-1.348], [0.304,-1.314], [0.327,-1.275], [0.342,-1.241], [0.360,-1.205], [0.375,-1.181], [0.390,-1.158], [0.405,-1.134], [0.420,-1.111], [0.435,-1.087], [0.450,-1.064], [0.491,-1.038], [0.541,-1.012], [0.590,-0.986], [0.639,-0.959], [0.777,-0.897], [0.832,-0.858], [0.888,-0.827], [0.944,-0.809], [1.001,-0.791], [1.052,-0.786],  ],\n  'z*' : [ [0.043,-0.157], [0.085,-0.166], [0.136,-0.174], [0.187,-0.174], [0.238,-0.174], [0.289,-0.174], [0.340,-0.157], [0.374,-0.140], [0.406,-0.115], [0.431,-0.083], [0.464,-0.047], [0.491,-0.030], [0.530,-0.036], [0.564,-0.059], [0.595,-0.083], [0.612,-0.106], [0.629,-0.149], [0.623,-0.191], [0.614,-0.245], [0.593,-0.319], [0.567,-0.386], [0.530,-0.453], [0.497,-0.500], [0.457,-0.574], [0.414,-0.639], [0.381,-0.685], [0.364,-0.708], [0.314,-0.777], [0.298,-0.801], [0.314,-0.777], [0.364,-0.708], [0.381,-0.685], [0.414,-0.639], [0.464,-0.639], [0.491,-0.667], [0.514,-0.708], [0.530,-0.731], [0.557,-0.769], [0.580,-0.824], [0.584,-0.847], [0.580,-0.870], [0.580,-0.916], [0.580,-0.963], [0.567,-1.084], [0.542,-1.169], [0.517,-1.243], [0.497,-1.287], [0.481,-1.310], [0.447,-1.380], [0.431,-1.403], [0.408,-1.432], [0.374,-1.495], [0.347,-1.519], [0.316,-1.534], [0.281,-1.519], [0.264,-1.495], [0.219,-1.441], [0.198,-1.403], [0.185,-1.356], [0.198,-1.310], [0.218,-1.267], [0.248,-1.218], [0.264,-1.194], [0.281,-1.171], [0.298,-1.148], [0.314,-1.125], [0.331,-1.102], [0.347,-1.079], [0.364,-1.055], [0.381,-1.032], [0.416,-1.002], [0.451,-0.965], [0.486,-0.931], [0.520,-0.897], [0.555,-0.871], [0.590,-0.846], [0.625,-0.829], [0.660,-0.812], [0.695,-0.803], [0.730,-0.791], [0.765,-0.786], [0.816,-0.778], [0.867,-0.778], [0.918,-0.786],  ],\n  ',' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.357,-0.701], [0.391,-0.616], [0.459,-0.701], [0.476,-0.786], [0.493,-0.871], [0.493,-0.956], [0.459,-1.041], [0.425,-1.126], [0.357,-1.211], [0.255,-1.296], [0.357,-1.211], [0.425,-1.126], [0.459,-1.041], [0.493,-0.956], [0.493,-0.871], [0.476,-0.786], [0.459,-0.701], [0.391,-0.616], [0.459,-0.701], [0.476,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786],  ],\n  '?' : [ [0.085,-0.786], [0.170,-0.786], [0.272,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.786], [0.425,-0.701], [0.425,-0.616], [0.425,-0.531], [0.425,-0.446], [0.425,-0.361], [0.425,-0.276], [0.425,-0.191], [0.425,-0.064], [0.527,-0.038], [0.586,-0.021], [0.640,0.004], [0.697,0.080], [0.734,0.149], [0.749,0.252], [0.748,0.387], [0.741,0.516], [0.726,0.600], [0.712,0.659], [0.672,0.740], [0.641,0.777], [0.586,0.786], [0.537,0.794], [0.485,0.786], [0.412,0.744], [0.340,0.701], [0.213,0.616], [0.340,0.701], [0.412,0.744], [0.485,0.786], [0.537,0.794], [0.586,0.786], [0.641,0.777], [0.672,0.740], [0.712,0.659], [0.726,0.600], [0.741,0.516], [0.748,0.387], [0.749,0.252], [0.734,0.149], [0.697,0.080], [0.640,0.004], [0.586,-0.021], [0.527,-0.038], [0.425,-0.064], [0.425,-0.191], [0.425,-0.276], [0.425,-0.361], [0.425,-0.446], [0.425,-0.531], [0.425,-0.616], [0.425,-0.701], [0.425,-0.786], [0.612,-0.786], [0.561,-0.659], [0.425,-0.574], [0.289,-0.659], [0.238,-0.786], [0.289,-0.914], [0.425,-0.999], [0.561,-0.914], [0.612,-0.786], [0.425,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '&' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.786], [0.344,-0.778], [0.425,-0.774], [0.501,-0.774], [0.630,-0.761], [0.731,-0.748], [0.816,-0.684], [0.901,-0.574], [0.969,-0.506], [1.020,-0.440], [1.105,-0.319], [1.207,-0.191], [1.105,-0.319], [1.020,-0.440], [0.969,-0.506], [0.901,-0.574], [0.816,-0.684], [0.731,-0.748], [0.630,-0.761], [0.501,-0.774], [0.425,-0.774], [0.344,-0.778], [0.298,-0.718], [0.272,-0.676], [0.255,-0.599], [0.247,-0.497], [0.255,-0.327], [0.306,-0.191], [0.408,-0.064], [0.493,0.004], [0.544,0.047], [0.663,0.089], [0.756,0.154], [0.799,0.234], [0.842,0.335], [0.875,0.429], [0.885,0.520], [0.888,0.614], [0.871,0.690], [0.837,0.749], [0.790,0.777], [0.706,0.786], [0.637,0.786], [0.570,0.777], [0.499,0.760], [0.464,0.734], [0.440,0.681], [0.429,0.605], [0.422,0.548], [0.424,0.463], [0.432,0.404], [0.459,0.306], [0.501,0.174], [0.578,0.064], [0.646,-0.106], [0.714,-0.276], [0.765,-0.446], [0.816,-0.616], [0.867,-0.786], [0.935,-0.829], [1.020,-0.829], [1.097,-0.803], [1.191,-0.786], [1.290,-0.786], [1.385,-0.786], [1.462,-0.786],  ],\n  '$' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-1.041], [0.510,-0.786], [0.510,-0.531], [0.510,-0.276], [0.510,-0.021], [0.510,0.234], [0.510,0.489], [0.510,0.829], [0.544,0.829], [0.544,0.489], [0.544,0.234], [0.544,-0.021], [0.544,-0.276], [0.544,-0.531], [0.544,-0.786], [0.544,-1.041], [0.544,-0.786], [0.652,-0.786], [0.729,-0.778], [0.790,-0.733], [0.829,-0.664], [0.887,-0.560], [0.912,-0.429], [0.904,-0.334], [0.880,-0.267], [0.831,-0.191], [0.774,-0.140], [0.708,-0.140], [0.629,-0.140], [0.544,-0.140], [0.475,-0.140], [0.408,-0.132], [0.340,-0.098], [0.306,-0.072], [0.272,-0.030], [0.221,0.038], [0.187,0.115], [0.170,0.242], [0.187,0.341], [0.238,0.440], [0.289,0.497], [0.349,0.530], [0.425,0.548], [0.510,0.548], [0.592,0.548], [0.680,0.548], [0.765,0.548], [0.850,0.548], [0.765,0.548], [0.680,0.548], [0.592,0.548], [0.510,0.548], [0.425,0.548], [0.349,0.530], [0.289,0.497], [0.238,0.440], [0.187,0.341], [0.170,0.242], [0.187,0.115], [0.221,0.038], [0.272,-0.030], [0.306,-0.072], [0.340,-0.098], [0.408,-0.132], [0.475,-0.140], [0.544,-0.140], [0.629,-0.140], [0.708,-0.140], [0.774,-0.140], [0.831,-0.191], [0.880,-0.267], [0.904,-0.334], [0.912,-0.429], [0.887,-0.560], [0.829,-0.664], [0.790,-0.733], [0.729,-0.778], [0.652,-0.786], [0.510,-0.786], [0.425,-0.786], [0.340,-0.786], [0.255,-0.786], [0.170,-0.786], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '!' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.531], [0.510,-0.276], [0.510,-0.021], [0.510,0.234], [0.510,0.489], [0.510,0.786], [0.510,0.489], [0.510,0.234], [0.510,-0.021], [0.510,-0.276], [0.510,-0.531], [0.510,-0.786], [0.697,-0.786], [0.646,-0.659], [0.510,-0.574], [0.374,-0.659], [0.323,-0.786], [0.374,-0.914], [0.510,-0.999], [0.646,-0.914], [0.697,-0.786], [0.510,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n}\n","export let raysol_sanserif = {\n  ' ' : [ [0.000,-0.786], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '0' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.544,-0.691], [0.629,-0.595], [0.680,-0.500], [0.723,-0.404], [0.765,-0.308], [0.799,-0.213], [0.833,-0.117], [0.840,-0.009], [0.833,0.117], [0.799,0.212], [0.765,0.308], [0.723,0.404], [0.680,0.499], [0.629,0.595], [0.544,0.690], [0.425,0.786], [0.306,0.690], [0.221,0.595], [0.170,0.499], [0.128,0.404], [0.085,0.308], [0.051,0.212], [0.017,0.117], [0.010,-0.009], [0.017,-0.117], [0.051,-0.213], [0.085,-0.308], [0.128,-0.404], [0.170,-0.500], [0.221,-0.595], [0.306,-0.691], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  '1' : [ [0.085,-0.786], [0.085,-0.629], [0.085,-0.472], [0.085,-0.315], [0.085,-0.157], [0.085,-0.000], [0.085,0.157], [0.085,0.314], [0.085,0.472], [0.085,0.629], [0.085,0.786], [0.085,0.629], [0.085,0.472], [0.085,0.314], [0.085,0.157], [0.085,-0.000], [0.085,-0.157], [0.085,-0.315], [0.085,-0.472], [0.085,-0.629], [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  '2' : [ [0.085,-0.786], [0.170,-0.786], [0.085,-0.786], [0.177,-0.599], [0.269,-0.412], [0.360,-0.225], [0.452,-0.038], [0.544,0.149], [0.612,0.276], [0.654,0.404], [0.663,0.531], [0.637,0.616], [0.587,0.701], [0.527,0.752], [0.451,0.782], [0.383,0.786], [0.315,0.782], [0.238,0.752], [0.179,0.701], [0.128,0.616], [0.085,0.531], [0.128,0.616], [0.179,0.701], [0.238,0.752], [0.315,0.782], [0.383,0.786], [0.451,0.782], [0.527,0.752], [0.587,0.701], [0.637,0.616], [0.663,0.531], [0.654,0.404], [0.612,0.276], [0.544,0.149], [0.452,-0.038], [0.360,-0.225], [0.269,-0.412], [0.177,-0.599], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.765,-0.786], [0.850,-0.574], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  '3' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.786], [0.408,-0.782], [0.485,-0.752], [0.544,-0.701], [0.595,-0.616], [0.620,-0.531], [0.612,-0.404], [0.570,-0.276], [0.476,-0.149], [0.340,0.064], [0.255,0.064], [0.340,0.064], [0.501,0.149], [0.570,0.276], [0.612,0.404], [0.620,0.531], [0.595,0.616], [0.544,0.701], [0.485,0.752], [0.408,0.782], [0.340,0.786], [0.272,0.782], [0.196,0.752], [0.136,0.701], [0.085,0.616], [0.043,0.531], [0.085,0.616], [0.136,0.701], [0.196,0.752], [0.272,0.782], [0.340,0.786], [0.408,0.782], [0.485,0.752], [0.544,0.701], [0.595,0.616], [0.620,0.531], [0.612,0.404], [0.570,0.276], [0.501,0.149], [0.340,0.064], [0.255,0.064], [0.340,0.064], [0.476,-0.149], [0.570,-0.276], [0.612,-0.404], [0.620,-0.531], [0.595,-0.616], [0.544,-0.701], [0.485,-0.752], [0.408,-0.782], [0.340,-0.786], [0.272,-0.782], [0.196,-0.752], [0.136,-0.701], [0.085,-0.616], [0.043,-0.531], [0.000,-0.438], [0.043,-0.531], [0.085,-0.616], [0.136,-0.701], [0.196,-0.752], [0.272,-0.782], [0.340,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '4' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.595,-0.616], [0.595,-0.446], [0.595,-0.276], [0.595,-0.106], [0.595,-0.000], [0.510,-0.000], [0.425,-0.000], [0.340,-0.000], [0.255,-0.000], [0.170,-0.000], [0.068,-0.000], [0.085,0.064], [0.085,0.234], [0.085,0.404], [0.085,0.574], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.574], [0.085,0.404], [0.085,0.234], [0.085,0.064], [0.085,-0.000], [0.170,-0.000], [0.255,-0.000], [0.340,-0.000], [0.425,-0.000], [0.510,-0.000], [0.595,-0.000], [0.680,-0.000], [0.807,-0.000], [0.935,-0.000], [0.807,-0.000], [0.680,-0.000], [0.595,-0.000], [0.595,0.064], [0.595,0.234], [0.595,0.404], [0.595,0.574], [0.595,0.744], [0.595,0.786], [0.595,0.744], [0.595,0.574], [0.595,0.404], [0.595,0.234], [0.595,0.064], [0.595,-0.000], [0.595,-0.106], [0.595,-0.276], [0.595,-0.446], [0.595,-0.616], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  '5' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.744], [0.493,-0.740], [0.570,-0.710], [0.629,-0.659], [0.680,-0.574], [0.706,-0.489], [0.714,-0.361], [0.697,-0.191], [0.654,-0.064], [0.561,0.064], [0.425,0.174], [0.272,0.166], [0.136,0.140], [0.153,0.302], [0.170,0.463], [0.187,0.625], [0.204,0.786], [0.289,0.786], [0.374,0.786], [0.459,0.786], [0.544,0.786], [0.680,0.786], [0.799,0.786], [0.680,0.786], [0.544,0.786], [0.459,0.786], [0.374,0.786], [0.289,0.786], [0.204,0.786], [0.187,0.625], [0.170,0.463], [0.153,0.302], [0.136,0.140], [0.272,0.166], [0.425,0.174], [0.561,0.064], [0.654,-0.064], [0.697,-0.191], [0.714,-0.361], [0.706,-0.489], [0.680,-0.574], [0.629,-0.659], [0.570,-0.710], [0.493,-0.740], [0.425,-0.744], [0.357,-0.740], [0.281,-0.710], [0.221,-0.659], [0.170,-0.616], [0.128,-0.548], [0.076,-0.421], [0.128,-0.548], [0.170,-0.616], [0.221,-0.659], [0.281,-0.710], [0.357,-0.740], [0.425,-0.744], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  '6' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.357,-0.744], [0.425,-0.740], [0.501,-0.710], [0.561,-0.659], [0.612,-0.574], [0.637,-0.489], [0.629,-0.361], [0.587,-0.234], [0.510,-0.106], [0.442,-0.038], [0.357,-0.021], [0.272,-0.038], [0.442,-0.038], [0.357,-0.021], [0.272,-0.038], [0.204,-0.106], [0.128,-0.234], [0.085,-0.361], [0.112,-0.247], [0.139,-0.132], [0.167,-0.017], [0.194,0.098], [0.221,0.212], [0.248,0.327], [0.275,0.442], [0.303,0.557], [0.330,0.671], [0.357,0.786], [0.330,0.671], [0.303,0.557], [0.275,0.442], [0.248,0.327], [0.221,0.212], [0.194,0.098], [0.167,-0.017], [0.139,-0.132], [0.112,-0.247], [0.085,-0.361], [0.076,-0.489], [0.102,-0.574], [0.153,-0.659], [0.213,-0.710], [0.289,-0.740], [0.357,-0.744], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '7' : [ [0.085,-0.786], [0.170,-0.786], [0.221,-0.629], [0.272,-0.472], [0.323,-0.315], [0.374,-0.157], [0.425,-0.000], [0.476,0.157], [0.527,0.314], [0.578,0.472], [0.629,0.629], [0.680,0.786], [0.606,0.786], [0.531,0.786], [0.457,0.786], [0.383,0.786], [0.308,0.786], [0.234,0.786], [0.159,0.786], [0.043,0.786], [0.159,0.786], [0.234,0.786], [0.308,0.786], [0.383,0.786], [0.457,0.786], [0.531,0.786], [0.606,0.786], [0.680,0.786], [0.629,0.629], [0.578,0.472], [0.527,0.314], [0.476,0.157], [0.425,-0.000], [0.374,-0.157], [0.323,-0.315], [0.272,-0.472], [0.221,-0.629], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  '8' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.744], [0.408,-0.740], [0.485,-0.710], [0.544,-0.659], [0.595,-0.574], [0.620,-0.489], [0.612,-0.361], [0.570,-0.234], [0.493,-0.106], [0.425,0.021], [0.340,0.021], [0.255,0.021], [0.179,0.149], [0.111,0.276], [0.068,0.404], [0.060,0.531], [0.085,0.616], [0.136,0.701], [0.196,0.752], [0.272,0.782], [0.340,0.786], [0.408,0.782], [0.485,0.752], [0.544,0.701], [0.595,0.616], [0.620,0.531], [0.612,0.404], [0.570,0.276], [0.501,0.149], [0.425,0.021], [0.340,0.021], [0.255,0.021], [0.187,-0.106], [0.111,-0.234], [0.068,-0.361], [0.060,-0.489], [0.085,-0.574], [0.136,-0.659], [0.196,-0.710], [0.272,-0.740], [0.340,-0.744], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '9' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.646,-0.786], [0.646,-0.616], [0.646,-0.446], [0.646,-0.276], [0.646,-0.106], [0.646,0.064], [0.646,0.234], [0.646,0.404], [0.595,0.276], [0.527,0.149], [0.365,0.064], [0.204,0.149], [0.136,0.276], [0.093,0.404], [0.085,0.531], [0.111,0.616], [0.162,0.701], [0.221,0.752], [0.298,0.782], [0.365,0.786], [0.433,0.782], [0.510,0.752], [0.570,0.701], [0.620,0.616], [0.646,0.531], [0.646,0.404], [0.646,0.234], [0.646,0.064], [0.646,-0.106], [0.646,-0.276], [0.646,-0.446], [0.646,-0.616], [0.646,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'A' : [ [0.085,-0.786], [0.128,-0.629], [0.170,-0.472], [0.213,-0.315], [0.255,-0.157], [0.298,-0.000], [0.340,0.157], [0.383,0.314], [0.425,0.472], [0.468,0.629], [0.510,0.786], [0.552,0.629], [0.595,0.472], [0.637,0.314], [0.680,0.157], [0.723,-0.000], [0.765,-0.157], [0.680,-0.157], [0.595,-0.157], [0.510,-0.157], [0.425,-0.157], [0.340,-0.157], [0.255,-0.157], [0.340,-0.157], [0.425,-0.157], [0.510,-0.157], [0.595,-0.157], [0.680,-0.157], [0.765,-0.157], [0.807,-0.315], [0.850,-0.472], [0.892,-0.629], [0.935,-0.786], [1.275,-0.786],  ],\n  'B' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.459,0.777], [0.510,0.752], [0.561,0.701], [0.595,0.667], [0.629,0.616], [0.663,0.531], [0.697,0.446], [0.697,0.404], [0.663,0.319], [0.629,0.234], [0.595,0.183], [0.561,0.149], [0.510,0.098], [0.459,0.072], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.459,0.055], [0.510,0.030], [0.561,-0.021], [0.595,-0.055], [0.629,-0.106], [0.663,-0.191], [0.697,-0.276], [0.714,-0.361], [0.697,-0.446], [0.663,-0.531], [0.629,-0.616], [0.595,-0.667], [0.561,-0.701], [0.510,-0.752], [0.459,-0.778], [0.425,-0.786], [0.357,-0.786], [0.289,-0.786], [0.221,-0.786], [0.153,-0.786], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.561,-0.786], [0.646,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'C' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.442,-0.740], [0.365,-0.710], [0.306,-0.659], [0.255,-0.574], [0.213,-0.489], [0.170,-0.395], [0.136,-0.276], [0.102,-0.132], [0.085,0.021], [0.102,0.174], [0.136,0.319], [0.170,0.438], [0.213,0.531], [0.255,0.616], [0.306,0.701], [0.365,0.752], [0.442,0.782], [0.510,0.786], [0.578,0.782], [0.654,0.752], [0.714,0.701], [0.765,0.616], [0.807,0.531], [0.765,0.616], [0.714,0.701], [0.654,0.752], [0.578,0.782], [0.510,0.786], [0.442,0.782], [0.365,0.752], [0.306,0.701], [0.255,0.616], [0.213,0.531], [0.170,0.438], [0.136,0.319], [0.102,0.174], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.765,-0.574], [0.714,-0.659], [0.654,-0.710], [0.578,-0.740], [0.510,-0.744], [0.510,-0.786], [0.425,-0.786], [0.374,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'D' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.408,-0.740], [0.485,-0.710], [0.544,-0.659], [0.595,-0.574], [0.637,-0.489], [0.680,-0.395], [0.714,-0.276], [0.748,-0.132], [0.765,0.021], [0.748,0.174], [0.714,0.319], [0.680,0.438], [0.637,0.531], [0.595,0.616], [0.544,0.701], [0.485,0.752], [0.408,0.782], [0.340,0.786], [0.272,0.786], [0.196,0.786], [0.136,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'E' : [ [0.085,-0.786], [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.629,0.064], [0.561,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.493,0.786], [0.561,0.786], [0.629,0.786], [0.629,0.701], [0.629,0.531], [0.629,0.701], [0.561,0.786], [0.493,0.786], [0.425,0.786], [0.357,0.786], [0.289,0.786], [0.221,0.786], [0.153,0.786], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.493,-0.786], [0.561,-0.786], [0.629,-0.701], [0.629,-0.531], [0.629,-0.701], [0.629,-0.786], [0.714,-0.786], [1.054,-0.786],  ],\n  'F' : [ [0.085,-0.786], [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.085,0.064], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.493,0.786], [0.561,0.786], [0.629,0.786], [0.561,0.786], [0.493,0.786], [0.425,0.786], [0.357,0.786], [0.289,0.786], [0.221,0.786], [0.153,0.786], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.493,-0.786], [0.561,-0.786], [0.629,-0.786], [0.969,-0.786],  ],\n  'G' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.744], [0.493,-0.740], [0.570,-0.710], [0.629,-0.659], [0.680,-0.574], [0.723,-0.489], [0.765,-0.395], [0.799,-0.276], [0.833,-0.132], [0.850,0.021], [0.765,0.021], [0.680,0.021], [0.595,0.021], [0.510,0.021], [0.425,0.021], [0.510,0.021], [0.595,0.021], [0.680,0.021], [0.765,0.021], [0.850,0.021], [0.833,-0.132], [0.799,-0.276], [0.765,-0.395], [0.723,-0.489], [0.680,-0.574], [0.629,-0.659], [0.570,-0.710], [0.493,-0.740], [0.425,-0.744], [0.357,-0.740], [0.281,-0.710], [0.221,-0.659], [0.170,-0.574], [0.128,-0.489], [0.085,-0.395], [0.051,-0.276], [0.017,-0.132], [0.000,0.021], [0.017,0.174], [0.051,0.319], [0.085,0.438], [0.128,0.531], [0.170,0.616], [0.221,0.701], [0.281,0.752], [0.357,0.782], [0.425,0.786], [0.493,0.782], [0.570,0.752], [0.629,0.701], [0.680,0.616], [0.629,0.701], [0.570,0.752], [0.493,0.782], [0.425,0.786], [0.357,0.782], [0.281,0.752], [0.221,0.701], [0.170,0.616], [0.128,0.531], [0.085,0.438], [0.051,0.319], [0.017,0.174], [0.000,0.021], [0.017,-0.132], [0.051,-0.276], [0.085,-0.395], [0.128,-0.489], [0.170,-0.574], [0.221,-0.659], [0.281,-0.710], [0.357,-0.740], [0.425,-0.744], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'H' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.629,0.064], [0.697,0.064], [0.765,0.064], [0.765,0.149], [0.765,0.234], [0.765,0.319], [0.765,0.404], [0.765,0.489], [0.765,0.574], [0.765,0.659], [0.765,0.744], [0.765,0.786], [0.765,0.744], [0.765,0.659], [0.765,0.574], [0.765,0.489], [0.765,0.404], [0.765,0.319], [0.765,0.234], [0.765,0.149], [0.765,0.064], [0.697,0.064], [0.629,0.064], [0.561,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.629,0.064], [0.697,0.064], [0.765,0.064], [0.765,-0.021], [0.765,-0.106], [0.765,-0.191], [0.765,-0.276], [0.765,-0.361], [0.765,-0.446], [0.765,-0.531], [0.765,-0.616], [0.765,-0.701], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'I' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.701], [0.340,-0.616], [0.340,-0.531], [0.340,-0.446], [0.340,-0.361], [0.340,-0.276], [0.340,-0.191], [0.340,-0.106], [0.340,-0.021], [0.340,0.064], [0.340,0.149], [0.340,0.234], [0.340,0.319], [0.340,0.404], [0.340,0.489], [0.340,0.574], [0.340,0.659], [0.340,0.744], [0.340,0.786], [0.255,0.786], [0.170,0.786], [0.085,0.786], [0.170,0.786], [0.255,0.786], [0.340,0.786], [0.425,0.786], [0.510,0.786], [0.595,0.786], [0.510,0.786], [0.425,0.786], [0.340,0.744], [0.340,0.659], [0.340,0.574], [0.340,0.489], [0.340,0.404], [0.340,0.319], [0.340,0.234], [0.340,0.149], [0.340,0.064], [0.340,-0.021], [0.340,-0.106], [0.340,-0.191], [0.340,-0.276], [0.340,-0.361], [0.340,-0.446], [0.340,-0.531], [0.340,-0.616], [0.340,-0.701], [0.340,-0.786], [0.255,-0.701], [0.170,-0.701], [0.085,-0.701], [0.170,-0.701], [0.255,-0.701], [0.340,-0.701], [0.425,-0.701], [0.510,-0.701], [0.595,-0.701], [0.510,-0.701], [0.425,-0.701], [0.340,-0.701], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  'J' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.391,-0.786], [0.425,-0.778], [0.476,-0.752], [0.527,-0.701], [0.561,-0.667], [0.595,-0.616], [0.629,-0.531], [0.663,-0.446], [0.680,-0.361], [0.680,-0.276], [0.680,-0.191], [0.680,-0.106], [0.680,-0.021], [0.680,0.064], [0.680,0.149], [0.680,0.234], [0.680,0.319], [0.680,0.404], [0.680,0.489], [0.680,0.574], [0.680,0.659], [0.680,0.744], [0.680,0.786], [0.680,0.744], [0.680,0.659], [0.680,0.574], [0.680,0.489], [0.680,0.404], [0.680,0.319], [0.680,0.234], [0.680,0.149], [0.680,0.064], [0.680,-0.021], [0.680,-0.106], [0.680,-0.191], [0.680,-0.276], [0.680,-0.361], [0.663,-0.446], [0.629,-0.531], [0.595,-0.616], [0.561,-0.667], [0.527,-0.701], [0.476,-0.752], [0.425,-0.778], [0.391,-0.786], [0.340,-0.786], [0.289,-0.786], [0.255,-0.778], [0.204,-0.752], [0.153,-0.701], [0.119,-0.667], [0.085,-0.616], [0.051,-0.531], [0.017,-0.446], [0.000,-0.361], [0.017,-0.446], [0.051,-0.531], [0.085,-0.616], [0.119,-0.667], [0.153,-0.701], [0.204,-0.752], [0.255,-0.778], [0.289,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'K' : [ [0.085,-0.786], [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.224,0.136], [0.279,0.208], [0.333,0.280], [0.388,0.353], [0.442,0.425], [0.496,0.497], [0.551,0.569], [0.605,0.642], [0.660,0.714], [0.714,0.786], [0.660,0.714], [0.605,0.642], [0.551,0.569], [0.496,0.497], [0.442,0.425], [0.388,0.353], [0.333,0.280], [0.279,0.208], [0.224,0.136], [0.170,0.064], [0.224,-0.021], [0.279,-0.106], [0.333,-0.191], [0.388,-0.276], [0.442,-0.361], [0.496,-0.446], [0.551,-0.531], [0.605,-0.616], [0.660,-0.701], [0.714,-0.786], [0.799,-0.786], [1.139,-0.786],  ],\n  'L' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.765,-0.574], [0.765,-0.446], [0.765,-0.574], [0.765,-0.701], [0.765,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'M' : [ [0.085,-0.786], [0.085,-0.786], [0.119,-0.629], [0.153,-0.472], [0.187,-0.315], [0.221,-0.157], [0.255,-0.000], [0.289,0.157], [0.323,0.314], [0.357,0.472], [0.391,0.629], [0.425,0.786], [0.459,0.629], [0.493,0.472], [0.527,0.314], [0.561,0.157], [0.595,-0.000], [0.629,-0.157], [0.663,-0.315], [0.697,-0.472], [0.731,-0.629], [0.765,-0.786], [0.799,-0.629], [0.833,-0.472], [0.867,-0.315], [0.901,-0.157], [0.935,-0.000], [0.969,0.157], [1.003,0.314], [1.037,0.472], [1.071,0.629], [1.105,0.786], [1.139,0.629], [1.173,0.472], [1.207,0.314], [1.241,0.157], [1.275,-0.000], [1.309,-0.157], [1.343,-0.315], [1.377,-0.472], [1.411,-0.629], [1.445,-0.786], [1.530,-0.786], [1.870,-0.786],  ],\n  'N' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.170,0.629], [0.255,0.472], [0.340,0.314], [0.425,0.157], [0.510,-0.000], [0.595,-0.157], [0.680,-0.315], [0.765,-0.472], [0.850,-0.629], [0.935,-0.786], [0.935,-0.701], [0.935,-0.616], [0.935,-0.531], [0.935,-0.446], [0.935,-0.361], [0.935,-0.276], [0.935,-0.191], [0.935,-0.106], [0.935,-0.021], [0.935,0.064], [0.935,0.149], [0.935,0.234], [0.935,0.319], [0.935,0.404], [0.935,0.489], [0.935,0.574], [0.935,0.659], [0.935,0.744], [0.935,0.786], [0.935,0.744], [0.935,0.659], [0.935,0.574], [0.935,0.489], [0.935,0.404], [0.935,0.319], [0.935,0.234], [0.935,0.149], [0.935,0.064], [0.935,-0.021], [0.935,-0.106], [0.935,-0.191], [0.935,-0.276], [0.935,-0.361], [0.935,-0.446], [0.935,-0.531], [0.935,-0.616], [0.935,-0.701], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'O' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.850,-0.395], [0.884,-0.276], [0.918,-0.132], [0.935,0.021], [0.918,0.174], [0.884,0.319], [0.850,0.438], [0.807,0.531], [0.765,0.616], [0.714,0.701], [0.654,0.752], [0.578,0.782], [0.510,0.786], [0.442,0.782], [0.365,0.752], [0.306,0.701], [0.255,0.616], [0.213,0.531], [0.170,0.438], [0.136,0.319], [0.102,0.174], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'P' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.459,0.072], [0.510,0.098], [0.561,0.149], [0.595,0.183], [0.629,0.234], [0.663,0.319], [0.697,0.404], [0.697,0.446], [0.663,0.531], [0.629,0.616], [0.595,0.667], [0.561,0.701], [0.510,0.752], [0.459,0.777], [0.425,0.786], [0.357,0.786], [0.289,0.786], [0.221,0.786], [0.153,0.786], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.493,-0.786], [0.561,-0.786], [0.629,-0.786], [0.697,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'Q' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.850,-0.395], [0.884,-0.276], [0.918,-0.132], [0.935,0.021], [0.918,0.174], [0.884,0.319], [0.850,0.438], [0.807,0.531], [0.765,0.616], [0.714,0.701], [0.654,0.752], [0.578,0.782], [0.510,0.786], [0.442,0.782], [0.365,0.752], [0.306,0.701], [0.255,0.616], [0.213,0.531], [0.170,0.438], [0.136,0.319], [0.102,0.174], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.799,-0.854], [0.833,-0.922], [0.867,-0.990], [0.765,-0.786], [0.765,-0.786], [0.867,-0.990], [0.833,-0.922], [0.799,-0.854], [0.765,-0.786], [0.731,-0.718], [0.697,-0.650], [0.663,-0.582], [0.629,-0.514], [0.595,-0.446], [0.629,-0.514], [0.663,-0.582], [0.697,-0.650], [0.731,-0.718], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'R' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.459,0.777], [0.510,0.752], [0.561,0.701], [0.595,0.667], [0.629,0.616], [0.663,0.531], [0.697,0.446], [0.697,0.404], [0.663,0.319], [0.629,0.234], [0.595,0.183], [0.561,0.149], [0.510,0.098], [0.459,0.072], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.391,-0.021], [0.425,-0.106], [0.459,-0.191], [0.493,-0.276], [0.527,-0.361], [0.561,-0.446], [0.595,-0.531], [0.629,-0.616], [0.663,-0.701], [0.697,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'S' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.744], [0.493,-0.740], [0.570,-0.710], [0.629,-0.659], [0.680,-0.574], [0.706,-0.489], [0.697,-0.361], [0.654,-0.234], [0.561,-0.106], [0.425,0.021], [0.289,0.149], [0.196,0.276], [0.153,0.404], [0.145,0.531], [0.170,0.616], [0.221,0.701], [0.281,0.752], [0.357,0.782], [0.425,0.786], [0.493,0.782], [0.570,0.752], [0.629,0.701], [0.680,0.616], [0.723,0.531], [0.680,0.616], [0.629,0.701], [0.570,0.752], [0.493,0.782], [0.425,0.786], [0.357,0.782], [0.281,0.752], [0.221,0.701], [0.170,0.616], [0.145,0.531], [0.153,0.404], [0.196,0.276], [0.289,0.149], [0.425,0.021], [0.561,-0.106], [0.654,-0.234], [0.697,-0.361], [0.706,-0.489], [0.680,-0.574], [0.629,-0.659], [0.570,-0.710], [0.493,-0.740], [0.425,-0.744], [0.357,-0.740], [0.281,-0.710], [0.221,-0.659], [0.170,-0.574], [0.128,-0.489], [0.085,-0.395], [0.128,-0.489], [0.170,-0.574], [0.221,-0.659], [0.281,-0.710], [0.357,-0.740], [0.425,-0.744], [0.425,-0.786], [0.425,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'T' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.595,-0.701], [0.595,-0.616], [0.595,-0.531], [0.595,-0.446], [0.595,-0.361], [0.595,-0.276], [0.595,-0.191], [0.595,-0.106], [0.595,-0.021], [0.595,0.064], [0.595,0.149], [0.595,0.234], [0.595,0.319], [0.595,0.404], [0.595,0.489], [0.595,0.574], [0.595,0.659], [0.595,0.744], [0.595,0.786], [0.510,0.786], [0.425,0.786], [0.340,0.786], [0.255,0.786], [0.170,0.786], [0.085,0.786], [0.170,0.786], [0.255,0.786], [0.340,0.786], [0.425,0.786], [0.510,0.786], [0.595,0.786], [0.680,0.786], [0.765,0.786], [0.850,0.786], [0.935,0.786], [1.020,0.786], [1.105,0.786], [1.020,0.786], [0.935,0.786], [0.850,0.786], [0.765,0.786], [0.680,0.786], [0.595,0.744], [0.595,0.659], [0.595,0.574], [0.595,0.489], [0.595,0.404], [0.595,0.319], [0.595,0.234], [0.595,0.149], [0.595,0.064], [0.595,-0.021], [0.595,-0.106], [0.595,-0.191], [0.595,-0.276], [0.595,-0.361], [0.595,-0.446], [0.595,-0.531], [0.595,-0.616], [0.595,-0.701], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.445,-0.786],  ],\n  'U' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.850,-0.395], [0.884,-0.276], [0.918,-0.132], [0.935,0.021], [0.935,0.106], [0.935,0.191], [0.935,0.276], [0.935,0.361], [0.935,0.446], [0.935,0.531], [0.935,0.616], [0.935,0.701], [0.935,0.786], [0.935,0.701], [0.935,0.616], [0.935,0.531], [0.935,0.446], [0.935,0.361], [0.935,0.276], [0.935,0.191], [0.935,0.106], [0.935,0.021], [0.918,-0.132], [0.884,-0.276], [0.850,-0.395], [0.807,-0.489], [0.765,-0.574], [0.714,-0.659], [0.654,-0.710], [0.578,-0.740], [0.510,-0.744], [0.442,-0.740], [0.365,-0.710], [0.306,-0.659], [0.255,-0.574], [0.213,-0.489], [0.170,-0.395], [0.136,-0.276], [0.102,-0.132], [0.085,0.021], [0.085,0.106], [0.085,0.191], [0.085,0.276], [0.085,0.361], [0.085,0.446], [0.085,0.531], [0.085,0.616], [0.085,0.701], [0.085,0.786], [0.085,0.701], [0.085,0.616], [0.085,0.531], [0.085,0.446], [0.085,0.361], [0.085,0.276], [0.085,0.191], [0.085,0.106], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'V' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.646,-0.629], [0.697,-0.472], [0.748,-0.315], [0.799,-0.157], [0.850,-0.000], [0.901,0.157], [0.952,0.314], [1.003,0.472], [1.054,0.629], [1.105,0.786], [1.054,0.629], [1.003,0.472], [0.952,0.314], [0.901,0.157], [0.850,-0.000], [0.799,-0.157], [0.748,-0.315], [0.697,-0.472], [0.646,-0.629], [0.595,-0.786], [0.544,-0.629], [0.493,-0.472], [0.442,-0.315], [0.391,-0.157], [0.340,-0.000], [0.289,0.157], [0.238,0.314], [0.187,0.472], [0.136,0.629], [0.085,0.786], [0.136,0.629], [0.187,0.472], [0.238,0.314], [0.289,0.157], [0.340,-0.000], [0.391,-0.157], [0.442,-0.315], [0.493,-0.472], [0.544,-0.629], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'W' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.786], [0.391,-0.629], [0.357,-0.472], [0.323,-0.315], [0.289,-0.157], [0.255,-0.000], [0.221,0.157], [0.187,0.314], [0.153,0.472], [0.119,0.629], [0.085,0.786], [0.119,0.629], [0.153,0.472], [0.187,0.314], [0.221,0.157], [0.255,-0.000], [0.289,-0.157], [0.323,-0.315], [0.357,-0.472], [0.391,-0.629], [0.425,-0.786], [0.459,-0.629], [0.493,-0.472], [0.527,-0.315], [0.561,-0.157], [0.595,-0.000], [0.629,0.157], [0.663,0.314], [0.697,0.472], [0.731,0.629], [0.765,0.786], [0.799,0.629], [0.833,0.472], [0.867,0.314], [0.901,0.157], [0.935,-0.000], [0.969,-0.157], [1.003,-0.315], [1.037,-0.472], [1.071,-0.629], [1.105,-0.786], [1.139,-0.629], [1.173,-0.472], [1.207,-0.315], [1.241,-0.157], [1.275,-0.000], [1.309,0.157], [1.343,0.314], [1.377,0.472], [1.411,0.629], [1.445,0.786], [1.411,0.629], [1.377,0.472], [1.343,0.314], [1.309,0.157], [1.275,-0.000], [1.241,-0.157], [1.207,-0.315], [1.173,-0.472], [1.139,-0.629], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786], [1.530,-0.786], [1.870,-0.786],  ],\n  'X' : [ [0.085,-0.786], [0.187,-0.629], [0.289,-0.472], [0.391,-0.315], [0.493,-0.157], [0.595,-0.000], [0.697,0.157], [0.799,0.314], [0.901,0.472], [1.003,0.629], [1.105,0.786], [1.003,0.629], [0.901,0.472], [0.799,0.314], [0.697,0.157], [0.595,-0.000], [0.493,0.157], [0.391,0.314], [0.289,0.472], [0.187,0.629], [0.085,0.786], [0.187,0.629], [0.289,0.472], [0.391,0.314], [0.493,0.157], [0.595,-0.000], [0.697,-0.157], [0.799,-0.315], [0.901,-0.472], [1.003,-0.629], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'Y' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.595,-0.701], [0.595,-0.616], [0.595,-0.531], [0.595,-0.446], [0.595,-0.361], [0.595,-0.276], [0.595,-0.191], [0.595,-0.106], [0.595,-0.021], [0.595,-0.000], [0.697,0.157], [0.799,0.314], [0.901,0.472], [1.003,0.629], [1.105,0.786], [1.003,0.629], [0.901,0.472], [0.799,0.314], [0.697,0.157], [0.595,-0.000], [0.493,0.157], [0.391,0.314], [0.289,0.472], [0.187,0.629], [0.085,0.786], [0.187,0.629], [0.289,0.472], [0.391,0.314], [0.493,0.157], [0.595,-0.000], [0.595,-0.021], [0.595,-0.106], [0.595,-0.191], [0.595,-0.276], [0.595,-0.361], [0.595,-0.446], [0.595,-0.531], [0.595,-0.616], [0.595,-0.701], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'Z' : [ [0.085,-0.786], [0.187,-0.629], [0.289,-0.472], [0.391,-0.315], [0.493,-0.157], [0.595,-0.000], [0.697,0.157], [0.799,0.314], [0.901,0.472], [1.003,0.629], [1.105,0.786], [0.935,0.786], [0.765,0.786], [0.595,0.786], [0.425,0.786], [0.255,0.786], [0.085,0.786], [0.255,0.786], [0.425,0.786], [0.595,0.786], [0.765,0.786], [0.935,0.786], [1.105,0.786], [1.003,0.629], [0.901,0.472], [0.799,0.314], [0.697,0.157], [0.595,-0.000], [0.493,-0.157], [0.391,-0.315], [0.289,-0.472], [0.187,-0.629], [0.085,-0.769], [0.255,-0.769], [0.425,-0.769], [0.595,-0.769], [0.765,-0.769], [0.935,-0.769], [1.105,-0.769], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'a' : [ [0.068,-0.786], [0.153,-0.786], [0.238,-0.786], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.646,-0.701], [0.646,-0.616], [0.646,-0.531], [0.646,-0.446], [0.646,-0.361], [0.646,-0.276], [0.646,-0.191], [0.646,-0.106], [0.646,-0.021], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.731,-0.786], [1.071,-0.786],  ],\n  'b' : [ [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.459,-0.778], [0.510,-0.752], [0.561,-0.701], [0.595,-0.667], [0.629,-0.616], [0.663,-0.531], [0.697,-0.446], [0.714,-0.361], [0.697,-0.276], [0.663,-0.191], [0.629,-0.106], [0.595,-0.055], [0.561,-0.021], [0.510,0.030], [0.459,0.055], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.017,-0.786], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.561,-0.786], [0.646,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'c' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.340,-0.778], [0.289,-0.752], [0.238,-0.701], [0.204,-0.667], [0.170,-0.616], [0.136,-0.531], [0.102,-0.446], [0.085,-0.361], [0.102,-0.276], [0.136,-0.191], [0.170,-0.106], [0.204,-0.055], [0.238,-0.021], [0.289,0.030], [0.340,0.055], [0.374,0.064], [0.442,0.064], [0.510,0.064], [0.578,0.064], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.986,-0.786],  ],\n  'd' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.714,-0.786], [0.714,-0.701], [0.714,-0.616], [0.714,-0.531], [0.714,-0.446], [0.714,-0.361], [0.714,-0.276], [0.714,-0.191], [0.714,-0.106], [0.714,-0.021], [0.714,0.064], [0.714,0.149], [0.714,0.234], [0.714,0.319], [0.714,0.404], [0.714,0.489], [0.714,0.574], [0.714,0.659], [0.714,0.744], [0.714,0.786], [0.714,0.744], [0.714,0.659], [0.714,0.574], [0.714,0.489], [0.714,0.404], [0.714,0.319], [0.714,0.234], [0.714,0.149], [0.714,0.064], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.714,-0.786], [0.799,-0.786], [1.139,-0.786],  ],\n  'e' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.340,-0.778], [0.289,-0.752], [0.238,-0.701], [0.204,-0.667], [0.170,-0.616], [0.128,-0.531], [0.102,-0.446], [0.094,-0.361], [0.179,-0.361], [0.255,-0.361], [0.332,-0.361], [0.408,-0.361], [0.476,-0.361], [0.518,-0.361], [0.595,-0.361], [0.671,-0.361], [0.748,-0.361], [0.723,-0.276], [0.706,-0.191], [0.663,-0.106], [0.629,-0.055], [0.595,-0.021], [0.544,0.030], [0.493,0.055], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.128,-0.191], [0.102,-0.276], [0.102,-0.446], [0.128,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.714,-0.786], [0.816,-0.786], [1.156,-0.786],  ],\n  'f' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.701], [0.425,-0.616], [0.425,-0.531], [0.425,-0.446], [0.425,-0.361], [0.425,-0.276], [0.425,-0.191], [0.425,-0.106], [0.425,-0.021], [0.425,0.064], [0.510,0.064], [0.595,0.064], [0.680,0.064], [0.807,0.064], [0.680,0.064], [0.595,0.064], [0.510,0.064], [0.425,0.064], [0.340,0.064], [0.255,0.064], [0.170,0.064], [0.043,0.064], [0.170,0.064], [0.255,0.064], [0.340,0.064], [0.425,0.064], [0.425,0.149], [0.425,0.234], [0.425,0.319], [0.442,0.446], [0.468,0.531], [0.510,0.616], [0.544,0.667], [0.578,0.701], [0.629,0.752], [0.680,0.777], [0.714,0.786], [0.782,0.786], [0.850,0.786], [0.782,0.786], [0.714,0.786], [0.680,0.777], [0.629,0.752], [0.578,0.701], [0.544,0.667], [0.510,0.616], [0.468,0.531], [0.442,0.446], [0.425,0.319], [0.425,0.234], [0.425,0.149], [0.425,0.064], [0.425,-0.021], [0.425,-0.106], [0.425,-0.191], [0.425,-0.276], [0.425,-0.361], [0.425,-0.446], [0.425,-0.531], [0.425,-0.616], [0.425,-0.701], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'g' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.646,-0.871], [0.646,-0.956], [0.646,-1.041], [0.646,-1.126], [0.629,-1.254], [0.603,-1.339], [0.561,-1.424], [0.527,-1.475], [0.493,-1.509], [0.442,-1.560], [0.391,-1.585], [0.357,-1.594], [0.289,-1.594], [0.221,-1.594], [0.153,-1.594], [0.221,-1.594], [0.289,-1.594], [0.357,-1.594], [0.391,-1.585], [0.442,-1.560], [0.493,-1.509], [0.527,-1.475], [0.561,-1.424], [0.603,-1.339], [0.629,-1.254], [0.646,-1.126], [0.646,-1.041], [0.646,-0.956], [0.646,-0.871], [0.646,-0.786], [0.646,-0.701], [0.646,-0.616], [0.646,-0.531], [0.646,-0.446], [0.646,-0.361], [0.646,-0.276], [0.646,-0.191], [0.646,-0.106], [0.646,-0.021], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.714,-0.786], [1.054,-0.786],  ],\n  'h' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.744], [0.085,0.786], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.106], [0.102,-0.064], [0.153,-0.030], [0.238,0.021], [0.323,0.064], [0.425,0.064], [0.510,0.021], [0.595,-0.030], [0.646,-0.064], [0.663,-0.106], [0.663,-0.191], [0.663,-0.276], [0.663,-0.361], [0.663,-0.446], [0.663,-0.531], [0.663,-0.616], [0.663,-0.701], [0.663,-0.786], [0.748,-0.786], [1.088,-0.786],  ],\n  'i' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'j' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.493,-0.786], [0.493,-0.701], [0.493,-0.616], [0.493,-0.531], [0.493,-0.446], [0.493,-0.361], [0.493,-0.276], [0.493,-0.191], [0.493,-0.106], [0.493,-0.021], [0.493,0.064], [0.493,-0.021], [0.493,-0.106], [0.493,-0.191], [0.493,-0.276], [0.493,-0.361], [0.493,-0.446], [0.493,-0.531], [0.493,-0.616], [0.493,-0.701], [0.493,-0.786], [0.493,-0.871], [0.493,-0.956], [0.493,-1.041], [0.493,-1.126], [0.476,-1.254], [0.451,-1.339], [0.408,-1.424], [0.374,-1.475], [0.340,-1.509], [0.289,-1.560], [0.238,-1.585], [0.204,-1.594], [0.136,-1.594], [0.068,-1.594], [0.000,-1.594], [0.068,-1.594], [0.136,-1.594], [0.204,-1.594], [0.238,-1.585], [0.289,-1.560], [0.340,-1.509], [0.374,-1.475], [0.408,-1.424], [0.451,-1.339], [0.476,-1.254], [0.493,-1.126], [0.493,-1.041], [0.493,-0.956], [0.493,-0.871], [0.493,-0.786], [0.442,-0.786], [0.493,-0.786], [0.578,-0.786], [0.918,-0.786],  ],\n  'k' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.744], [0.085,0.786], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.184,-0.295], [0.283,-0.228], [0.383,-0.162], [0.482,-0.095], [0.581,-0.029], [0.680,0.038], [0.581,-0.029], [0.482,-0.095], [0.383,-0.162], [0.283,-0.228], [0.184,-0.295], [0.085,-0.361], [0.184,-0.432], [0.283,-0.503], [0.383,-0.574], [0.482,-0.645], [0.581,-0.716], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'l' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.744], [0.085,0.786], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'm' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.153,0.004], [0.255,0.030], [0.323,0.047], [0.391,0.047], [0.459,0.030], [0.561,0.004], [0.612,-0.021], [0.629,-0.106], [0.629,-0.191], [0.629,-0.276], [0.629,-0.361], [0.629,-0.446], [0.629,-0.531], [0.629,-0.616], [0.629,-0.701], [0.629,-0.808], [0.629,-0.701], [0.629,-0.616], [0.629,-0.531], [0.629,-0.446], [0.629,-0.361], [0.629,-0.276], [0.629,-0.191], [0.629,-0.106], [0.646,-0.021], [0.697,0.004], [0.799,0.030], [0.867,0.047], [0.935,0.047], [1.003,0.030], [1.105,0.004], [1.156,-0.021], [1.173,-0.106], [1.173,-0.191], [1.173,-0.276], [1.173,-0.361], [1.173,-0.446], [1.173,-0.531], [1.173,-0.616], [1.173,-0.701], [1.173,-0.786], [1.258,-0.786], [1.598,-0.786],  ],\n  'n' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.153,0.004], [0.255,0.030], [0.323,0.047], [0.391,0.047], [0.459,0.030], [0.561,0.004], [0.612,-0.021], [0.629,-0.106], [0.629,-0.191], [0.629,-0.276], [0.629,-0.361], [0.629,-0.446], [0.629,-0.531], [0.629,-0.616], [0.629,-0.701], [0.629,-0.786], [0.714,-0.786], [1.054,-0.786],  ],\n  'o' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.646,-0.786], [0.680,-0.778], [0.731,-0.752], [0.782,-0.701], [0.816,-0.667], [0.850,-0.616], [0.884,-0.531], [0.918,-0.446], [0.935,-0.361], [0.918,-0.276], [0.884,-0.191], [0.850,-0.106], [0.816,-0.055], [0.782,-0.021], [0.731,0.030], [0.680,0.055], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'p' : [ [0.085,-0.786], [0.085,-0.871], [0.085,-0.956], [0.085,-1.041], [0.085,-1.126], [0.085,-1.211], [0.085,-1.296], [0.085,-1.381], [0.085,-1.466], [0.085,-1.551], [0.085,-1.211], [0.085,-1.551], [0.085,-1.466], [0.085,-1.381], [0.085,-1.296], [0.085,-1.211], [0.085,-1.126], [0.085,-1.041], [0.085,-0.956], [0.085,-0.871], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.391,-0.778], [0.442,-0.752], [0.493,-0.701], [0.527,-0.667], [0.561,-0.616], [0.595,-0.531], [0.629,-0.446], [0.646,-0.361], [0.629,-0.276], [0.595,-0.191], [0.561,-0.106], [0.527,-0.055], [0.493,-0.021], [0.442,0.030], [0.391,0.055], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.493,-0.786], [0.578,-0.786], [0.663,-0.786], [0.731,-0.786], [1.071,-0.786],  ],\n  'q' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.646,-0.871], [0.646,-0.956], [0.646,-1.041], [0.646,-1.126], [0.663,-1.254], [0.689,-1.339], [0.731,-1.424], [0.765,-1.475], [0.799,-1.509], [0.850,-1.560], [0.901,-1.585], [0.935,-1.594], [1.003,-1.594], [1.071,-1.594], [1.139,-1.594], [1.071,-1.594], [1.003,-1.594], [0.935,-1.594], [0.901,-1.585], [0.850,-1.560], [0.799,-1.509], [0.765,-1.475], [0.731,-1.424], [0.689,-1.339], [0.663,-1.254], [0.646,-1.126], [0.646,-1.041], [0.646,-0.956], [0.646,-0.871], [0.646,-0.786], [0.646,-0.701], [0.646,-0.616], [0.646,-0.531], [0.646,-0.446], [0.646,-0.361], [0.646,-0.276], [0.646,-0.191], [0.646,-0.106], [0.646,-0.021], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.714,-0.786], [0.816,-0.786], [0.918,-0.786], [1.020,-0.786], [1.105,-0.786], [1.224,-0.786], [1.564,-0.786],  ],\n  'r' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,-0.021], [0.085,0.149], [0.085,0.191], [0.085,0.149], [0.085,-0.021], [0.153,0.004], [0.255,0.030], [0.323,0.055], [0.391,0.064], [0.459,0.055], [0.527,0.030], [0.595,-0.021], [0.527,0.030], [0.459,0.055], [0.391,0.064], [0.323,0.055], [0.255,0.030], [0.153,0.004], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  's' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.561,-0.786], [0.595,-0.778], [0.646,-0.752], [0.697,-0.701], [0.731,-0.667], [0.765,-0.616], [0.756,-0.565], [0.731,-0.531], [0.663,-0.489], [0.595,-0.446], [0.510,-0.404], [0.425,-0.361], [0.340,-0.319], [0.255,-0.276], [0.187,-0.234], [0.119,-0.191], [0.102,-0.115], [0.119,-0.055], [0.153,-0.021], [0.204,0.030], [0.255,0.055], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.595,0.055], [0.646,0.030], [0.697,-0.021], [0.731,-0.055], [0.697,-0.021], [0.646,0.030], [0.595,0.055], [0.561,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.255,0.055], [0.204,0.030], [0.153,-0.021], [0.119,-0.055], [0.102,-0.115], [0.119,-0.191], [0.187,-0.234], [0.255,-0.276], [0.340,-0.319], [0.425,-0.361], [0.510,-0.404], [0.595,-0.446], [0.663,-0.489], [0.731,-0.531], [0.756,-0.565], [0.765,-0.616], [0.731,-0.667], [0.697,-0.701], [0.646,-0.752], [0.595,-0.778], [0.561,-0.786], [0.510,-0.786], [0.425,-0.786], [0.340,-0.786], [0.289,-0.786], [0.255,-0.778], [0.204,-0.752], [0.153,-0.701], [0.119,-0.667], [0.060,-0.616], [0.119,-0.667], [0.153,-0.701], [0.204,-0.752], [0.255,-0.778], [0.289,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  't' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.374,-0.786], [0.374,-0.701], [0.374,-0.616], [0.374,-0.531], [0.374,-0.446], [0.374,-0.361], [0.374,-0.276], [0.374,-0.191], [0.374,-0.106], [0.374,-0.021], [0.374,0.064], [0.374,0.149], [0.374,0.234], [0.374,0.319], [0.374,0.361], [0.374,0.446], [0.306,0.446], [0.238,0.446], [0.170,0.446], [0.043,0.446], [0.170,0.446], [0.238,0.446], [0.306,0.446], [0.374,0.446], [0.442,0.446], [0.510,0.446], [0.578,0.446], [0.706,0.446], [0.578,0.446], [0.510,0.446], [0.442,0.446], [0.374,0.446], [0.374,0.531], [0.374,0.616], [0.374,0.701], [0.374,0.786], [0.374,0.701], [0.374,0.616], [0.374,0.531], [0.374,0.446], [0.374,0.361], [0.374,0.319], [0.374,0.234], [0.374,0.149], [0.374,0.064], [0.374,-0.021], [0.374,-0.106], [0.374,-0.191], [0.374,-0.276], [0.374,-0.361], [0.374,-0.446], [0.374,-0.531], [0.374,-0.616], [0.374,-0.701], [0.374,-0.786], [0.459,-0.786], [0.544,-0.786], [0.663,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'u' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.323,-0.769], [0.255,-0.752], [0.153,-0.727], [0.102,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.102,-0.701], [0.153,-0.727], [0.255,-0.752], [0.323,-0.769], [0.391,-0.786], [0.459,-0.769], [0.527,-0.752], [0.629,-0.727], [0.680,-0.701], [0.697,-0.701], [0.697,-0.616], [0.697,-0.531], [0.697,-0.446], [0.697,-0.361], [0.697,-0.276], [0.697,-0.191], [0.697,-0.106], [0.697,-0.021], [0.697,0.064], [0.697,-0.021], [0.697,-0.106], [0.697,-0.191], [0.697,-0.276], [0.697,-0.361], [0.697,-0.446], [0.697,-0.531], [0.697,-0.616], [0.697,-0.701], [0.697,-0.786], [0.782,-0.786], [1.122,-0.786],  ],\n  'v' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.468,-0.786], [0.429,-0.701], [0.391,-0.616], [0.353,-0.531], [0.315,-0.446], [0.276,-0.361], [0.238,-0.276], [0.200,-0.191], [0.162,-0.106], [0.123,-0.021], [0.085,0.064], [0.123,-0.021], [0.162,-0.106], [0.200,-0.191], [0.238,-0.276], [0.276,-0.361], [0.315,-0.446], [0.353,-0.531], [0.391,-0.616], [0.429,-0.701], [0.468,-0.786], [0.506,-0.701], [0.544,-0.616], [0.582,-0.531], [0.620,-0.446], [0.659,-0.361], [0.697,-0.276], [0.735,-0.191], [0.773,-0.106], [0.812,-0.021], [0.850,0.064], [0.812,-0.021], [0.773,-0.106], [0.735,-0.191], [0.697,-0.276], [0.659,-0.361], [0.620,-0.446], [0.582,-0.531], [0.544,-0.616], [0.506,-0.701], [0.468,-0.786], [0.552,-0.786], [0.663,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'w' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.315,-0.701], [0.289,-0.616], [0.264,-0.531], [0.238,-0.446], [0.213,-0.361], [0.187,-0.276], [0.162,-0.191], [0.136,-0.106], [0.111,-0.021], [0.085,0.064], [0.111,-0.021], [0.136,-0.106], [0.162,-0.191], [0.187,-0.276], [0.213,-0.361], [0.238,-0.446], [0.264,-0.531], [0.289,-0.616], [0.315,-0.701], [0.340,-0.786], [0.365,-0.701], [0.391,-0.616], [0.417,-0.531], [0.442,-0.446], [0.468,-0.361], [0.493,-0.276], [0.518,-0.191], [0.544,-0.106], [0.570,-0.021], [0.595,0.064], [0.620,-0.021], [0.646,-0.106], [0.671,-0.191], [0.697,-0.276], [0.723,-0.361], [0.748,-0.446], [0.773,-0.531], [0.799,-0.616], [0.825,-0.701], [0.850,-0.786], [0.875,-0.701], [0.901,-0.616], [0.926,-0.531], [0.952,-0.446], [0.978,-0.361], [1.003,-0.276], [1.028,-0.191], [1.054,-0.106], [1.079,-0.021], [1.105,0.064], [1.079,-0.021], [1.054,-0.106], [1.028,-0.191], [1.003,-0.276], [0.978,-0.361], [0.952,-0.446], [0.926,-0.531], [0.901,-0.616], [0.875,-0.701], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'x' : [ [0.076,-0.701], [0.153,-0.616], [0.230,-0.531], [0.306,-0.446], [0.383,-0.361], [0.459,-0.276], [0.535,-0.191], [0.612,-0.106], [0.689,-0.021], [0.765,0.064], [0.689,-0.021], [0.612,-0.106], [0.535,-0.191], [0.459,-0.276], [0.383,-0.361], [0.306,-0.276], [0.230,-0.191], [0.153,-0.106], [0.076,-0.021], [0.000,0.064], [0.076,-0.021], [0.153,-0.106], [0.230,-0.191], [0.306,-0.276], [0.383,-0.361], [0.459,-0.446], [0.535,-0.531], [0.612,-0.616], [0.689,-0.701], [0.765,-0.786], [1.105,-0.786],  ],\n  'y' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.468,-0.786], [0.429,-0.701], [0.391,-0.616], [0.353,-0.531], [0.315,-0.446], [0.276,-0.361], [0.238,-0.276], [0.200,-0.191], [0.162,-0.106], [0.123,-0.021], [0.085,0.064], [0.123,-0.021], [0.162,-0.106], [0.200,-0.191], [0.238,-0.276], [0.276,-0.361], [0.315,-0.446], [0.353,-0.531], [0.391,-0.616], [0.429,-0.701], [0.468,-0.786], [0.506,-0.701], [0.544,-0.616], [0.582,-0.531], [0.620,-0.446], [0.659,-0.361], [0.697,-0.276], [0.735,-0.191], [0.773,-0.106], [0.812,-0.021], [0.850,0.064], [0.812,-0.021], [0.773,-0.106], [0.735,-0.191], [0.697,-0.276], [0.659,-0.361], [0.620,-0.446], [0.582,-0.531], [0.544,-0.616], [0.506,-0.701], [0.468,-0.786], [0.429,-0.871], [0.391,-0.956], [0.353,-1.041], [0.315,-1.126], [0.276,-1.211], [0.238,-1.296], [0.200,-1.381], [0.238,-1.296], [0.276,-1.211], [0.315,-1.126], [0.353,-1.041], [0.391,-0.956], [0.429,-0.871], [0.468,-0.786], [0.552,-0.786], [0.637,-0.786], [0.723,-0.786], [0.807,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'z' : [ [0.085,-0.786], [0.162,-0.701], [0.238,-0.616], [0.315,-0.531], [0.391,-0.446], [0.468,-0.361], [0.544,-0.276], [0.620,-0.191], [0.697,-0.106], [0.773,-0.021], [0.850,0.064], [0.765,0.064], [0.680,0.064], [0.595,0.064], [0.510,0.064], [0.425,0.064], [0.340,0.064], [0.255,0.064], [0.170,0.064], [0.085,0.064], [0.170,0.064], [0.255,0.064], [0.340,0.064], [0.425,0.064], [0.510,0.064], [0.595,0.064], [0.680,0.064], [0.765,0.064], [0.850,0.064], [0.773,-0.021], [0.697,-0.106], [0.620,-0.191], [0.544,-0.276], [0.468,-0.361], [0.391,-0.446], [0.315,-0.531], [0.238,-0.616], [0.162,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'a*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'b*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'c*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'd*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'e*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'f*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'g*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'h*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'i*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'j*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'k*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'l*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'm*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'n*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'o*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'p*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'q*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'r*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  's*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  't*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'u*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'v*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'w*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'x*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'y*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'z*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  ',' : [ [0.085,-0.786], [0.170,-0.786], [0.187,-0.701], [0.221,-0.616], [0.289,-0.701], [0.306,-0.786], [0.323,-0.871], [0.323,-0.956], [0.289,-1.041], [0.255,-1.126], [0.187,-1.211], [0.085,-1.296], [0.187,-1.211], [0.255,-1.126], [0.289,-1.041], [0.323,-0.956], [0.323,-0.871], [0.306,-0.786], [0.289,-0.701], [0.221,-0.616], [0.289,-0.701], [0.306,-0.786], [0.425,-0.786], [0.765,-0.786],  ],\n  '?' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.701], [0.425,-0.616], [0.425,-0.531], [0.425,-0.446], [0.425,-0.361], [0.425,-0.276], [0.425,-0.191], [0.425,-0.106], [0.425,-0.081], [0.452,-0.038], [0.476,0.004], [0.510,0.072], [0.544,0.149], [0.578,0.208], [0.612,0.276], [0.629,0.319], [0.646,0.361], [0.654,0.404], [0.660,0.472], [0.663,0.531], [0.654,0.574], [0.637,0.616], [0.620,0.659], [0.587,0.701], [0.561,0.735], [0.527,0.752], [0.485,0.773], [0.451,0.782], [0.417,0.786], [0.383,0.786], [0.340,0.783], [0.315,0.782], [0.272,0.769], [0.238,0.752], [0.204,0.731], [0.179,0.701], [0.150,0.659], [0.128,0.616], [0.102,0.574], [0.085,0.531], [0.102,0.574], [0.128,0.616], [0.150,0.659], [0.179,0.701], [0.204,0.731], [0.238,0.752], [0.272,0.769], [0.315,0.782], [0.340,0.783], [0.383,0.786], [0.417,0.786], [0.451,0.782], [0.485,0.773], [0.527,0.752], [0.561,0.735], [0.587,0.701], [0.620,0.659], [0.637,0.616], [0.654,0.574], [0.663,0.531], [0.660,0.472], [0.654,0.404], [0.646,0.361], [0.629,0.319], [0.612,0.276], [0.578,0.208], [0.544,0.149], [0.510,0.072], [0.476,0.004], [0.452,-0.038], [0.425,-0.081], [0.425,-0.106], [0.425,-0.149], [0.425,-0.191], [0.425,-0.234], [0.425,-0.276], [0.425,-0.319], [0.425,-0.361], [0.425,-0.404], [0.425,-0.446], [0.425,-0.489], [0.425,-0.531], [0.425,-0.574], [0.425,-0.616], [0.425,-0.659], [0.425,-0.701], [0.425,-0.744], [0.425,-0.786], [0.340,-0.786], [0.425,-0.786], [0.612,-0.786], [0.561,-0.659], [0.425,-0.574], [0.289,-0.659], [0.238,-0.786], [0.289,-0.914], [0.425,-0.999], [0.561,-0.914], [0.612,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '&' : [ [0.085,-0.786], [0.174,-0.778], [0.255,-0.774], [0.332,-0.774], [0.460,-0.761], [0.561,-0.748], [0.646,-0.684], [0.731,-0.574], [0.799,-0.506], [0.850,-0.440], [0.935,-0.319], [1.037,-0.191], [0.935,-0.319], [0.850,-0.440], [0.799,-0.506], [0.731,-0.574], [0.646,-0.684], [0.561,-0.748], [0.460,-0.761], [0.332,-0.774], [0.255,-0.774], [0.174,-0.778], [0.128,-0.718], [0.102,-0.676], [0.085,-0.599], [0.076,-0.497], [0.085,-0.327], [0.136,-0.191], [0.238,-0.064], [0.323,0.004], [0.374,0.047], [0.493,0.089], [0.587,0.154], [0.629,0.234], [0.672,0.335], [0.706,0.429], [0.715,0.520], [0.718,0.614], [0.701,0.690], [0.667,0.749], [0.620,0.777], [0.535,0.786], [0.468,0.786], [0.400,0.777], [0.329,0.760], [0.294,0.734], [0.270,0.681], [0.259,0.605], [0.252,0.548], [0.254,0.463], [0.262,0.404], [0.289,0.306], [0.332,0.174], [0.408,0.064], [0.476,-0.106], [0.544,-0.276], [0.595,-0.446], [0.646,-0.616], [0.697,-0.786], [0.765,-0.829], [0.850,-0.829], [0.926,-0.803], [1.021,-0.786], [1.120,-0.786], [1.460,-0.786],  ],\n  '$' : [ [0.102,-0.786], [0.221,-0.786], [0.306,-0.786], [0.391,-0.786], [0.476,-0.786], [0.476,-0.786], [0.476,-1.126], [0.476,-0.786], [0.476,-0.531], [0.476,-0.276], [0.476,-0.021], [0.476,0.234], [0.476,0.489], [0.476,0.829], [0.510,0.829], [0.510,0.489], [0.510,0.234], [0.510,-0.021], [0.510,-0.276], [0.510,-0.531], [0.510,-0.786], [0.510,-1.126], [0.510,-0.786], [0.476,-0.786], [0.476,-0.871], [0.595,-0.910], [0.671,-0.880], [0.731,-0.829], [0.782,-0.744], [0.807,-0.659], [0.799,-0.531], [0.756,-0.404], [0.663,-0.276], [0.476,-0.149], [0.289,-0.021], [0.196,0.106], [0.153,0.234], [0.145,0.361], [0.170,0.446], [0.221,0.531], [0.281,0.582], [0.357,0.612], [0.476,0.616], [0.595,0.612], [0.671,0.582], [0.731,0.531], [0.782,0.446], [0.825,0.361], [0.782,0.446], [0.731,0.531], [0.671,0.582], [0.595,0.612], [0.476,0.616], [0.357,0.612], [0.281,0.582], [0.221,0.531], [0.170,0.446], [0.145,0.361], [0.153,0.234], [0.196,0.106], [0.289,-0.021], [0.476,-0.149], [0.663,-0.276], [0.756,-0.404], [0.799,-0.531], [0.807,-0.659], [0.782,-0.744], [0.731,-0.829], [0.671,-0.880], [0.595,-0.910], [0.476,-0.914], [0.357,-0.910], [0.281,-0.880], [0.221,-0.829], [0.170,-0.744], [0.128,-0.659], [0.085,-0.565], [0.128,-0.659], [0.170,-0.744], [0.221,-0.829], [0.281,-0.880], [0.357,-0.910], [0.476,-0.914], [0.476,-0.786], [0.561,-0.786], [0.646,-0.786], [0.731,-0.786], [0.816,-0.786], [0.901,-0.786], [1.241,-0.786],  ],\n  '!' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.255,-0.531], [0.255,-0.276], [0.255,-0.021], [0.255,0.234], [0.255,0.489], [0.255,0.786], [0.255,0.489], [0.255,0.234], [0.255,-0.021], [0.255,-0.276], [0.255,-0.531], [0.255,-0.786], [0.442,-0.786], [0.391,-0.659], [0.255,-0.574], [0.119,-0.659], [0.068,-0.786], [0.119,-0.914], [0.255,-0.999], [0.391,-0.914], [0.442,-0.786], [0.255,-0.786], [0.425,-0.786], [0.510,-0.786], [0.850,-0.786],  ],\n}\n","import Victor from 'victor'\nimport { raysol_cursive } from './raysol_cursive'\nimport { raysol_sanserif } from './raysol_sanserif'\n\nconst fontSpacing = 1.5\n\n// Format for vertices: [x,y,b] where in a 0:7(8) by -1:7 grid defining x,y and b defines the line or curve.\n// Bulge directions could be represented by a 0:4 list starting at none, then NE and going clockwise.\n// 4  1\n// 3  2\nlet billsey = {\n  ' ': [ [8,-1,0] ],\n  'A': [ [0,0,0], [3.5,7,0], [7,0,0], [5,3.5,0], [2,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'B': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [0,3.5,0], [3.5,3.5,0], [7,1.75,1], [3.5,0,2], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'C': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,3.5,4], [3.5,0,3], [7,1.75,2], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'D': [ [0,0,0], [0,7,0], [3.5,7,0], [7,3.5,1], [3.5,0,2], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'E': [ [0,0,0], [0,7,0], [7,7,0], [0,7,0], [0,3.5,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [7,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'F': [ [0,0,0], [0,7,0], [7,7,0], [0,7,0], [0,3.5,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'G': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,3.5,4], [3.5,0,3], [7,1.75,2], [5.25,1.75,0], [7,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'H': [ [0,0,0], [0,7,0], [0,3.5,0], [7,3.5,0], [7,7,0], [7,0,0], [7,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'I': [ [3.5,-1,0], [3.5,7,0], [0,7,0], [7,7,0], [3.5,7,0], [3.5,0,0], [0,0,0], [7,0,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'J': [ [3.5,-1,0], [3.5,0,0], [0,1.75,3], [3.5,0,3], [7,1.75,2], [7,7,0], [7,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'K': [ [0,0,0], [0,7,0], [0,1.75,0], [3.5,3.5,0], [7,7,0], [3.5,3.5,0], [7,0,0], [3.5,3.5,0], [0,1.75,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'L': [ [0,0,0], [0,7,0], [0,0,0], [7,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'M': [ [0,0,0], [0,7,0], [3.5,0,0], [7,7,0], [7,0,0], [7,7,0], [3.5,0,0], [0,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'N': [ [0,0,0], [0,7,0], [7,0,0], [7,7,0], [7,0,0], [0,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'O': [ [3.5,-1,0], [3.5, 0, 0], [0, 3.5, 3], [3.5, 7, 4], [7.0, 3.5, 1], [3.5, 0, 2], [3.5, -1, 0], [8, -1, 0] ],\n  'P': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'Q': [ [3.5,-1,0], [3.5, 0, 0], [0, 3.5, 3], [3.5, 7, 4], [7.0, 3.5, 1], [3.5, 0, 2], [4.325,0.5,4], [6.075,0,0], [7,0.5,2], [6.075,0,2], [4.325,0.5,0], [3.5,0,4], [3.5, -1, 0], [8, -1, 0] ],\n  'R': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [7,0,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'S': [ [3.5,-1,0], [3.5,0,0], [0,1.75,3], [3.5,0,3], [7,1.75,2], [3.5,3.5,1], [0,5.25,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,5.25,4], [3.5,3.5,3], [7,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'T': [ [3.5,-1,0], [3.5,7,0], [0,7,0], [7,7,0], [3.5,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'U': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [0,7,0], [0,3.5,0], [3.5,0,3], [7,3.5,2], [7,7,0], [7,3.5,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'V': [ [3.5,-1,0], [3.5,0,0], [0,7,0], [3.5,0,0], [7,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'W': [ [1.75,-1,0], [1.75,0,0], [0,7,0], [1.75,0,0], [3.5,7,0], [5.25,0,0], [7,7,0], [5.25,0,0], [3.5,7,0], [1.75,0,0], [1.75,-1,0], [8,-1,0] ],\n  'X': [ [0,0,0], [7,7,0], [3.5,3.5,0], [0,7,0], [7,0,0], [3.5,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'Y': [ [3.5,-1,0], [3.5,3.5,0], [0,7,0], [3.5,3.5,0], [7,7,0], [3.5,3.5,0], [3.5,-1,0], [8,-1,0] ],\n  'Z': [ [0,0,0], [7,0,0], [0,0,0], [7,7,0], [0,7,0], [7,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  '0': [ [3.5,-1,0], [3.5,0,0], [6,3.5,2], [3.5,7,1], [1,3.5,4], [3.5,0,3], [3.5,-1,0], [8,-1,0] ],\n  '1': [ [0,-1,0], [0,0,0], [0,0,0], [7,0,0], [3.5,0,0], [3.5,7,0], [1.5,6,2], [3.5,7,2], [3.5,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  '2': [ [1,-1,0], [1,0,0], [6,5.25,0], [3.5,7,1], [1,5.25,4], [3.5,7,4], [6,5.25,1], [1,0,0], [6,0,0], [1,0,0], [1,-1,0], [8,-1,0] ],\n  '3': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [3.5,0,3], [6,1.75,2], [3.5,3.5,1], [6,5.25,2], [3.5,7,1], [1,5.25,4], [3.5,7,4], [6,5.25,1], [3.5,3.5,2], [6,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '4': [ [3.5,-1,0], [3.5,0,0], [3.5,7,0], [1,3.5,0], [6,3.5,0], [3.5,3.5,0], [3.5,-1,0], [8,-1,0] ],\n  '5': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [3.5,0,3], [6,1.75,2], [3.5,3.5,1],[1,3.5,0], [1,7,0], [6,7,0], [1,7,0], [1,3.5,0], [3.5,3.5,0], [6,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '6': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [5.25,7,4], [1,1.75,4], [3.5,0,3],[6,1.75,2], [3.5,3.5,1], [1,1.75,4], [3.5,0,3], [3.5,-1,0], [8,-1,0] ],\n  '7': [ [3.5,-1,0], [3.5,0,0], [6,7,0], [1,7,0], [6,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  '8': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [6,5.25,0], [3.5,7,1], [1,5.25,4], [6,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '9': [ [3.5,-1,0], [3.5,0,0], [6,5.25,2], [3.5,7,1], [1,5.25,4], [3.5,3.5,3], [6,5.25,2], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '$': [ [3.5,-1,0], [3.5,0.5,0], [0,2.00,3], [3.5,0.5,3], [7,2.00,2], [3.5,3.5,1], [0,5.00,3], [3.5,6.5,4], [7,5.00,1], [3.5,6.5,1], [3.5, 7, 0], [3.5, 0, 0], [3.5,-1,0], [8,-1,0] ],\n  '.': [ [3.5,-1,0], [3.5,0.5,0], [3,1,3], [3.5,1.5,4], [4,1,1], [3.5,0.5,2], [3.5,-1,0], [8,-1,0] ],\n}\n\n// This is a clever way to create a range from 0..32, and then compute an x,y for each of those\n// points on the unit circle from zero to pi/2.\nconst curve = [...Array(32).keys()].map((index) => {\n  let angle = (index+1) * Math.PI/2.0/32.0\n  return new Victor(Math.cos(angle), Math.sin(angle))\n})\n\nconst billseyConverter = (vertices) => {\n  let newVertices = []\n  let prevPoint = new Victor(0,0)\n  vertices.forEach( (vertex) => {\n    switch (vertex[2]) {\n    case 0:\n    default:\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 1: // NE\n      if (vertex[1] < prevPoint[1]) { // clockwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      } else { // ccwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 2: // SE\n      if (vertex[1] < prevPoint[1]) { // clockwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      } else { // ccwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 3: // SW\n      if (vertex[1] > prevPoint[1]) { // clockwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      } else { // ccwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 4: // NW\n      if (vertex[1] > prevPoint[1]) { // clockwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      } else { // ccwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    }\n    prevPoint = vertex\n  })\n\n  const scale = 0.6;\n  const offset_y = -0.5\n  const scaledVertices = newVertices.map( vertex => {\n    return new Victor(scale * vertex.x, scale * vertex.y + offset_y)\n  })\n  return {\n    maxX: fontSpacing,\n    vertices: scaledVertices,\n  }\n}\n\nconst raysolConverter = (vertices) => {\n  let newVertices = []\n  vertices.forEach( (vertex) => {\n    newVertices.push(new Victor(vertex[0], vertex[1]))\n  })\n\n  return {\n    maxX: fontSpacing,\n    vertices: newVertices,\n  }\n}\n\nexport const MonospaceFont = (ch) => {\n  let upper = ch.toUpperCase()\n  if (billsey.hasOwnProperty(upper)) {\n    return billseyConverter(billsey[upper])\n  } else {\n    return billseyConverter(billsey[' '])\n  }\n}\n\nexport const CursiveFont = (ch) => {\n  if (raysol_cursive.hasOwnProperty(ch)) {\n    return raysolConverter(raysol_cursive[ch])\n  } else {\n    return raysolConverter(raysol_cursive[' '])\n  }\n}\n\nexport const SansSerifFont = (ch) => {\n  if (raysol_cursive.hasOwnProperty(ch)) {\n    return raysolConverter(raysol_sanserif[ch])\n  } else {\n    return raysolConverter(raysol_sanserif[' '])\n  }\n}\n","import Victor from 'victor'\nimport { roundP } from './util'\n\n// convert degrees to radians\nexport const degToRad = (deg) => {\n  return deg / 180.0 * Math.PI\n}\n\n// convert radians to degrees\nexport const radToDeg = (rad) => {\n  return rad * 180.0 / Math.PI\n}\n\nexport const distance = (v1, v2) => {\n  return Math.sqrt(Math.pow(v1.x - v2.x, 2.0) + Math.pow(v1.y - v2.y, 2.0))\n}\n\n// calculate the coterminal angle (0..2*PI) of a given angle\nexport const coterminal = (angle) => {\n  return angle - Math.floor(angle / (Math.PI * 2)) * Math.PI * 2\n}\n\nexport const angle = (point) => {\n  return Math.atan2(point.y, point.x)\n}\n\n// returns whether a point is on the segment defined by start and end\nexport const onSegment = (start, end, point) => {\n  return start.distance(point) + end.distance(point) - start.distance(end) < 0.001\n}\n\nexport const slope = (v1, v2) => {\n  let d = v2.x - v1.x\n  let n = v2.y - v1.y\n  return d === 0 ? undefined : n / d\n}\n\n// computes a bounding box from a set of points.\nexport const findBounds = (vertices) => {\n  let n = vertices.length\n\n  if (n === 0) {\n    return []\n  }\n\n  let loX = vertices[0].x\n  let hiX = vertices[0].x\n  let loY = vertices[0].y\n  let hiY = vertices[0].y\n\n  for(let i=1; i<n; ++i) {\n    let p = vertices[i]\n    loX = Math.min(loX, p.x)\n    hiX = Math.max(hiX, p.x)\n    loY = Math.min(loY, p.y)\n    hiY = Math.max(hiY, p.y)\n  }\n\n  return [new Victor(loX, loY), new Victor(hiX, hiY)]\n}\n\n// resizes each vertex in a list to the specified dimensions. Will not stretch the shape.\nexport const resizeVertices = (vertices, sizeX, sizeY) => {\n  let size = Math.max(sizeX, sizeY)\n  let bounds = findBounds(vertices)\n  let curveSize = Math.max(bounds[1].y - bounds[0].y, bounds[1].x - bounds[0].x)\n  let scale = size/curveSize\n\n  let scaledBounds = [bounds[0].multiply({x: scale, y: scale}), bounds[1].multiply({x: scale, y: scale})]\n  let deltaX = scaledBounds[1].x - (scaledBounds[1].x - scaledBounds[0].x)/2\n  let deltaY = scaledBounds[1].y - (scaledBounds[1].y - scaledBounds[0].y)/2\n\n  return vertices.map(vertex => vertex.clone().multiply({x: scale, y: scale}).add({x: -deltaX, y: -deltaY}))\n}\n\n// returns a vertex with x and y rounded to p number of digits\nexport const vertexRoundP = (v, p) => {\n  return new Victor(roundP(v.x, p), roundP(v.y, p))\n}\n","import { vertexRoundP } from '../../common/geometry'\n\n// base machine class\nexport default class Machine {\n  polish() {\n    return this.enforceLimits()\n      .cleanVertices()\n      .limitPrecision()\n      .optimizePerimeter()\n      .addEndpoints()\n  }\n\n  // clean the list of vertices and remove duplicate points\n  cleanVertices() {\n    let previous = null\n    let cleanVertices = []\n\n    for (let i=0; i<this.vertices.length; i++) {\n      if (previous) {\n        let start = this.vertices[i]\n        let end = previous\n\n        if (start.distance(end) > 0.001) {\n          cleanVertices.push(this.nearestVertex(this.vertices[i]))\n        }\n      } else {\n        cleanVertices.push(this.nearestVertex(this.vertices[i]))\n      }\n      previous = this.vertices[i]\n    }\n\n    this.vertices = cleanVertices\n    return this\n  }\n\n  // walk the given vertices, clipping as needed along the circle perimeter\n  enforceLimits() {\n    let cleanVertices = []\n    let previous = null\n\n    for (let next=0; next<this.vertices.length; next++) {\n      const vertex = this.vertices[next]\n\n      if (previous) {\n        const line = this.clipLine(previous, vertex)\n\n        for (let pt=0; pt<line.length; pt++) {\n          if (line[pt] !== previous) {\n            cleanVertices.push(line[pt])\n          }\n        }\n      } else {\n        cleanVertices.push(this.nearestVertex(vertex))\n      }\n\n      previous = vertex\n    }\n\n    this.vertices = cleanVertices\n    return this\n  }\n\n  // strip out unnecessary/redundant perimeter moves\n  optimizePerimeter() {\n    let segments = this.stripExtraPerimeterVertices()\n\n    if (this.settings.minimizeMoves) {\n      segments = this.minimizePerimeterMoves(segments)\n    }\n\n    // connect the segments together\n    let connectedVertices = []\n    for (let j=0; j<segments.length; j++) {\n      const current = segments[j]\n\n      if (j > 0) {\n        // connect the two segments along the circle perimeter\n        const prev = segments[j-1]\n        connectedVertices.push(this.tracePerimeter(prev[prev.length-1], current[0]))\n      }\n      connectedVertices.push(current)\n    }\n\n    this.vertices = connectedVertices.flat()\n    return this\n  }\n\n  // remove all non-essential perimeter vertices. returns a list of segments\n  // involving non-perimeter paths\n  stripExtraPerimeterVertices() {\n    let segments = []\n    let segment = []\n    let perimeter = null\n\n    for (let i=0; i<this.vertices.length; i++) {\n      const curr = this.vertices[i]\n      const prev = this.vertices[i-1]\n\n      if (!prev || !this.onPerimeter(curr, prev)) {\n        if (perimeter) { segment.push(perimeter) }\n        segment.push(curr)\n        perimeter = null\n      } else {\n        if (!perimeter) {\n          segments.push(segment)\n          segment = []\n        }\n        perimeter = curr\n      }\n    }\n\n    if (segment.length > 0) {\n      segments.push(segment)\n    }\n\n    return segments\n  }\n\n  // primitive O(n^2) algorithm that orders segments to try to minimize the distance traveled\n  minimizePerimeterMoves(segments) {\n    let walked = []\n    let current = segments.shift()\n    let currentIndex\n    let lastSegment\n\n    if (segments.length > 0) {\n      // reserve the last segment to ensure we don't draw an invalid line connecting\n      // to it\n      lastSegment = segments.pop()\n    }\n\n    walked.push(current)\n    while (segments.length > 0) {\n      // find segment that is the shortest distance from our current one\n      let minDist = Number.MAX_SAFE_INTEGER\n      let prev = current\n\n      /* eslint-disable no-loop-func */\n      segments.forEach((segment, index) => {\n        const dist = Math.min(\n          this.perimeterDistance(current[current.length-1], segment[0]),\n          this.perimeterDistance(current[current.length-1], segment[segment.length-1])\n        )\n\n        if (dist < minDist) {\n          currentIndex = index\n          minDist = dist\n        }\n      })\n      /* eslint-enable no-loop-func */\n\n      // reverse if needed to connect\n      current = segments.splice(currentIndex, 1)[0]\n      if (this.perimeterDistance(prev[prev.length-1], current[0]) > this.perimeterDistance(prev[prev.length-1], current[current.length-1])) {\n        current = current.reverse()\n      }\n      walked.push(current)\n    }\n\n    if (lastSegment) {\n      walked.push(lastSegment)\n    }\n\n    return walked\n  }\n\n  // round each vertex to the nearest .001. This eliminates floating point\n  // math errors and allows us to do accurate equality comparisons.\n  limitPrecision() {\n    this.vertices = this.vertices.map(vertex => vertexRoundP(vertex, 3))\n    return this\n  }\n}\n","import { angle, onSegment } from '../../common/geometry'\nimport Machine from './Machine'\nimport Victor from 'victor'\n\nexport const traceCircle = (startAngle, endAngle, size) => {\n  let resolution = (Math.PI*2.0) / 128.0 // 128 segments per circle. Enough?\n  let deltaAngle = ((endAngle - startAngle) + 2.0 * Math.PI) % (2.0 * Math.PI)\n\n  if (deltaAngle > Math.PI) {\n    deltaAngle -= 2.0 * Math.PI\n  }\n  if (deltaAngle < 0.0) {\n    resolution *= -1.0\n  }\n\n  let tracePoints = []\n  for (let step = 0; step < (deltaAngle/resolution) ; step++) {\n    tracePoints.push(Victor(size * Math.cos(resolution * step + startAngle),\n                            size * Math.sin(resolution * step + startAngle)))\n  }\n  return tracePoints\n}\n\nexport default class PolarMachine extends Machine {\n  constructor(vertices, settings) {\n    super()\n    this.vertices = vertices\n    this.settings = settings\n  }\n\n  addEndpoints() {\n    const maxRadius = this.settings.maxRadius\n\n    if (this.settings.polarStartPoint !== 'none') {\n      if (this.settings.polarStartPoint === 'center') {\n        this.vertices.unshift(new Victor(0.0, 0.0))\n      } else {\n        const first = this.vertices[0]\n        const scale = maxRadius / first.magnitude()\n        const startPoint = Victor.fromObject(first).multiply(new Victor(scale, scale))\n        this.vertices.unshift(new Victor(startPoint.x, startPoint.y))\n      }\n    }\n\n    if (this.settings.polarEndPoint !== 'none') {\n      if (this.settings.polarEndPoint === 'center') {\n        this.vertices.push(new Victor(0.0, 0.0))\n      } else {\n        const last = this.vertices[this.vertices.length-1]\n        const scale = maxRadius / last.magnitude()\n        const endPoint =  Victor.fromObject(last).multiply(new Victor(scale, scale))\n        this.vertices.push(new Victor(endPoint.x, endPoint.y))\n      }\n    }\n\n    return this\n  }\n\n  // Finds the nearest vertex that is in the bounds of the circle. This will change the\n  // shape. i.e. this doesn't care about the line segment, only about the point.\n  nearestVertex(vertex) {\n    const size = this.settings.maxRadius\n\n    if ( vertex.length() > size) {\n      const scale = size / vertex.length()\n      return vertex.multiply(new Victor(scale, scale))\n    } else {\n      return vertex\n    }\n  }\n\n  // Returns the distance along the perimeter between two points.\n  perimeterDistance(v1, v2) {\n    const startAngle = angle(v1)\n    const endAngle = angle(v2)\n    let deltaAngle = Math.abs(endAngle - startAngle)\n\n    if (deltaAngle > Math.PI) {\n      deltaAngle -= 2.0 * Math.PI\n    }\n\n    return Math.abs(deltaAngle) * this.settings.maxRadius\n  }\n\n  // Returns points along the circle from the start to the end, tracing a circle of radius size.\n  tracePerimeter(start, end) {\n    return traceCircle(start.angle(), end.angle(), this.settings.maxRadius)\n  }\n\n  // Returns whether a given path lies on the perimeter of the circle.\n  onPerimeter(v1, v2, delta=1) {\n    let rm = Math.pow(this.settings.maxRadius, 2)\n    let r1 = Math.pow(v1.x, 2) + Math.pow(v1.y, 2)\n    let r2 = Math.pow(v2.x, 2) + Math.pow(v2.y, 2)\n    let d = this.perimeterDistance(v1, v2)\n\n    // Delta is purposefully large to accommodate the squaring of the compared values.\n    // Setting delta too small will result in perimeter moves being miscategorized.\n    // d is used to guard against the case where there is a straight line connecting two\n    // perimeter points directly. In this case, we want to register that as a non-perimeter\n    // move, or it will be incorrectly optimized out of the final vertices. The 3/50\n    // ratio could likely be refined further (relative to maxRadius), but it seems to produce\n    // accurate results at various machine sizes.\n    return Math.abs(r1 - rm) < delta && Math.abs(r2 - rm) < delta && d < 3*this.settings.maxRadius/50\n  }\n\n  // The guts of logic for this limits enforcer. It will take a single line (defined by\n  // start and end) and if the line goes out of bounds, returns the vertices around the\n  // outside edge to follow around without messing up the shape of the vertices.\n  clipLine(start, end) {\n    // Cases:\n    // 1 - Entire line is inside\n    //     return start, end\n    // 2 - Entire line is outside\n    //     trace from start to end\n    // 3 - only start is inside\n    //     find the intersection\n    //     include start\n    //     include intersection\n    //     trace from intersection to closest to end point\n    // 4 - only end is inside\n    //     do reverse of 3\n    // 4 - Neither end is inside, but there is some line segment inside\n    //     find both intersections\n    //     trace from start to first intersction\n    //     trace from second intersection to end\n    const size = this.settings.maxRadius\n    const radStart = start.magnitude()\n    const radEnd = end.magnitude()\n\n    if (radStart <= size && radEnd <= size) {\n      // The whole segment is inside\n      return [start, end]\n    }\n\n    // Check for the odd case of coincident points\n    if (start.distance(end) < 0.00001) {\n       return [this.nearestVertex(start)]\n    }\n\n    let intersections = this.getIntersections(start, end)\n    if (!intersections.intersection) {\n      // The whole line is outside, just trace.\n      return this.tracePerimeter(start, end)\n    }\n\n    // if neither point is on the segment, then it should just be a trace\n    if (!intersections.points[0].on && !intersections.points[1].on) {\n      return this.tracePerimeter(start, end)\n    }\n\n    // If both points are outside, but there's an intersection\n    if (radStart > size + 1.0e-9 && radEnd > size + 1.0e-9) {\n      let point = intersections.points[0].point\n      let otherPoint = intersections.points[1].point\n\n      return [\n        ...this.tracePerimeter(start, point),\n        point,\n        ...this.tracePerimeter(otherPoint, end)\n      ]\n    }\n\n    // If we're here, then one point is still in the circle.\n    if (radStart <= size) {\n      let point1 = (intersections.points[0].on && Math.abs(intersections.points[0].point - start) > 0.0001) ? intersections.points[0].point : intersections.points[1].point\n\n      return [\n        start,\n        ...this.tracePerimeter(point1, end),\n        end\n      ]\n    } else {\n      const point1 = intersections.points[0].on ? intersections.points[0].point : intersections.points[1].point\n\n      return [\n        ...this.tracePerimeter(start, point1),\n        point1,\n        end\n      ]\n    }\n  }\n\n  getIntersections(start, end) {\n    const size = this.settings.maxRadius\n    let direction = end.clone().subtract(start).clone().normalize()\n    let t = direction.x * -1.0 * start.x + direction.y * -1.0 * start.y\n    let e = direction.clone().multiply(Victor(t,t)).add(start)\n    let distanceToLine = e.magnitude()\n\n    if (distanceToLine >= size) {\n      return {\n        intersection: false,\n        points: [],\n      }\n    }\n\n    let dt = Math.sqrt(size*size - distanceToLine*distanceToLine)\n    let point1 = direction.clone().multiply(Victor(t - dt,t - dt)).add(start)\n    let point2 = direction.clone().multiply(Victor(t + dt,t + dt)).add(start)\n\n    return {\n      intersection: true,\n      points: [\n        {\n          point: point1,\n          on: onSegment(start, end, point1),\n        },\n        {\n          point: point2,\n          on: onSegment(start, end, point2),\n        }\n      ]}\n  }\n}\n","import { CursiveFont, SansSerifFont, MonospaceFont } from './Fonts'\nimport Victor from 'victor'\nimport Shape, { shapeOptions } from '../Shape'\nimport { traceCircle } from '../../features/machine/PolarMachine'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    inputText: {\n      title: 'Text',\n      type: 'textarea',\n    },\n    inputFont: {\n      title: 'Font',\n      type: 'dropdown',\n      choices: ['Cursive', 'Sans Serif', 'Monospace'],\n    },\n    rotateDir: {\n      title: 'Rotate',\n      type: 'dropdown',\n      choices: ['Top', 'Center', 'Bottom'],\n    },\n  }\n}\n\nfunction getMaxX(points) {\n  // Measure the width of the line\n  let maxX = 0\n  points.forEach( (point) => {\n    if (point.x > maxX) {\n      maxX = point.x\n    }\n  })\n  return maxX\n}\n\nexport default class InputText extends Shape {\n  constructor() {\n    super('Text')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'inputText',\n        inputText: 'Sandify',\n        inputFont: 'Cursive',\n        rotateDir: 'Center',\n      }\n    }\n  }\n\n  getInitialTransformState() {\n    return {\n      ...super.getInitialTransformState(),\n      ...{\n        repeatEnabled: false,\n        startingSize: 25\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let prevLetter = ''\n    let x = 0.0\n    let lines = []\n    for (let chi = 0; chi < state.shape.inputText.length; chi++) {\n      var nextLetter = state.shape.inputText[chi]\n      if (prevLetter === 'b' || prevLetter === 'v' || prevLetter === 'o' || prevLetter === 'w') {\n        // Save this letter before we possibly add in a '*'\n        prevLetter = nextLetter\n        if (nextLetter.search('[a-z]+') !== -1 && state.shape.inputFont === 'Cursive')\n        {\n          nextLetter = nextLetter + '*'\n        }\n      }\n      else {\n        prevLetter = nextLetter\n      }\n\n      if (nextLetter === '\\n') {\n        // New line\n        lines.push(points)\n        points = []\n        x = 0.0\n        continue\n      }\n\n      var shape = undefined\n      if (state.shape.inputFont === 'Cursive') {\n        shape = CursiveFont(nextLetter)\n      } else if (state.shape.inputFont === 'Sans Serif') {\n        shape = SansSerifFont(nextLetter)\n      } else if (state.shape.inputFont === 'Monospace') {\n        shape = MonospaceFont(nextLetter)\n      } else {\n        // Internal error, but I'm going to just recover\n        shape = CursiveFont(nextLetter)\n      }\n\n      // TODO add in the \"Kern\" here.\n      for (let vi = 0; vi < shape.vertices.length; vi++) {\n        points.push(new Victor(shape.vertices[vi].x + x, shape.vertices[vi].y))\n      }\n      x += shape.vertices[shape.vertices.length-1].x\n    }\n    // Save the last line we were working on.\n    lines.push(points)\n\n    // The height of a row of text, including the space above.\n    const maxY = 2.4\n\n    if (state.shape.rotateDir === 'Center') {\n      // Starting Y offset\n      let y = (lines.length - 1) * maxY / 2.0\n      let textPoints = []\n\n      // Capture some wrap around points, to connect the lines.\n      let connectorPoints = []\n      lines.forEach( (points) => {\n        let maxX = getMaxX(points)\n        let widthOffset = maxX / 2.0\n\n        // Add in the connector points (if we have any)\n        textPoints = [...textPoints, ...connectorPoints]\n        connectorPoints = []\n\n        // offset the line's vertices\n        textPoints = [...textPoints, ...points.map( (point) => {\n          return new Victor(point.x - widthOffset, point.y + y)\n        })]\n\n        // Add in some points way off, so to wrap around for this line.\n        connectorPoints.push(new Victor(1e9, y))\n        connectorPoints.push(new Victor(1e9, -1e9))\n        connectorPoints.push(new Victor(-1e9, -1e9))\n        y -= maxY\n        connectorPoints.push(new Victor(-1e9, y))\n      })\n      return textPoints\n    } else {\n      // This variable controls \"Top\" vs. \"Bottom\"\n      let direction = 1.0\n      if (state.shape.rotateDir === 'Bottom') {\n        direction = -1.0\n        lines.reverse()\n      }\n\n      // These are the vertices we will be using.\n      let textPoints = []\n\n      // Some constants to rotate the letters.\n      //\n      // The \"lines\" object contains lines of words, in vertices.\n      // The vertices are in X, Y, the X starts at 0, the Y goes between -something and +something.\n      // The middle of the word is about at Y=0.\n      //\n      // We want the words to follow around a circle. We want them to stay about the same size, as\n      // if they were plotted in a line. We want them to be centered.\n      //\n      // r is the radius, theta is the angle.\n      // rPerY is the multiplier to get from Y to r.\n      // thetaPerX is the multiplier to get from X to theta.\n      //\n      // The Max is based on how far away from the center we start.\n      //\n      // Offset is because we want to start the row far away from the center.\n      //\n      // thetaCenter is how far off from the theta=0 we start the words.\n      //\n      const maxRPerY = 0.8\n      let rPerY = direction * maxRPerY\n      let thetaCenter = direction * Math.PI / 2.0\n      const maxROffset = maxY * 2.0\n      let rOffset = maxROffset\n      const rOffsetPerLine = rOffset / lines.length\n      let thetaPerX = -rPerY / rOffset\n\n      // This captures the previous angle, so we can track around for the next line.\n      let lastTheta\n\n      lines.forEach( (points) => {\n\n        let maxX = getMaxX(points)\n        // This widthOffset is in X.\n        let widthOffset = maxX / 2.0\n\n        // Scale the size of the words to fit within one circle.\n        if (Math.PI * 2.0 < Math.abs(thetaPerX * maxX)) {\n          // We are going to roll all the way around\n          thetaPerX = direction * -Math.PI * 2.0 / maxX\n          rPerY = -thetaPerX * rOffset\n        }\n\n        // Add in the connector points (if we have any)\n        if (lastTheta) {\n          let endTheta = thetaCenter + thetaPerX * -widthOffset\n\n          // Get the Y value of the first point in the next (this) line.\n          let r = rOffset + rPerY * 0.0\n          if (points.length > 0) {\n            r = rOffset + rPerY * points[0].y\n          }\n\n          textPoints = [...textPoints, ...traceCircle(lastTheta, endTheta, r)]\n        }\n\n        // Transform the points and add them to textPoints.\n        textPoints = [...textPoints, ...points.map( (point) => {\n          const r = rOffset + rPerY * point.y\n          lastTheta = thetaCenter + thetaPerX * (point.x - widthOffset)\n          return new Victor(r * Math.cos(lastTheta), r * Math.sin(lastTheta))\n        })]\n\n        // Set up for the next line.\n        rOffset -= rOffsetPerLine\n        rPerY = direction * Math.sqrt(maxRPerY * rOffset / maxROffset)\n        thetaPerX = -rPerY / rOffset\n      })\n      return textPoints\n    }\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport { vertexRoundP } from './geometry'\n\nexport const onSubtypeChange = (subtype, changes, attrs) => {\n  // if we switch back with too many iterations, the code\n  // will crash from recursion, so we'll set a ceiling where needed\n  if (subtype) {\n    let max = subtype.maxIterations\n    let min = subtype.minIterations\n    let iterations = attrs.iterations || 1\n\n    if (max) {\n      iterations = Math.min(iterations, max)\n    }\n\n    if (min) {\n      iterations = Math.max(iterations, min)\n    }\n\n    changes.iterations = iterations\n  }\n\n  return changes\n}\n\nexport const onMinIterations = (subtype, state) => {\n  return (subtype && subtype.minIterations) || 1\n}\n\nexport const onMaxIterations = (subtype, state) => {\n  return (subtype && subtype.maxIterations) || 7\n}\n\n// Implements a Lindenmayer system (L-system). See https://en.wikipedia.org/wiki/L-system.\n// Adapted from http://bl.ocks.org/nitaku/ce638f8bd5e70cb809e1\nexport const lsystem = (config) => {\n  let input = config.axiom\n  let output\n\n  for (let i=0; i<config.iterations; i++) {\n    output = ''\n\n    for (let j=0; j<input.length; j++) {\n      let char = input[j]\n\n      if (config.rules[char] !== undefined) {\n        output += config.rules[char]\n      } else {\n        output += char\n      }\n    }\n    input = output\n  }\n  return output\n}\n\nconst lsystemDraw = (vertex, angle, config) => {\n  return vertexRoundP(vertex.clone().add({x: -config.side * Math.cos(angle), y: -config.side * Math.sin(angle)}), 2)\n}\n\nexport const lsystemPath = (instructions, config) => {\n  let vertex = new Victor(0, 0)\n  let currVertices = [vertex]\n  let angle = -Math.PI/2\n\n  if (config.startingAngle) {\n    angle = typeof config.startingAngle === 'function' ?\n      config.startingAngle(config.iterations) :\n      config.startingAngle\n  }\n\n  // This will store the previous return paths we are not working on.\n  let returnPaths = []\n  for (let i=0; i<instructions.length; i++) {\n    let char = instructions[i]\n\n    if (char === '+') {\n      angle += config.angle\n      if (returnPaths.length) {\n        returnPaths.slice(-1)[0].push('-')\n      }\n    } else if (char === '-') {\n      angle -= config.angle\n      if (returnPaths.length) {\n        returnPaths.slice(-1)[0].push('+')\n      }\n    } else if (config.draw.includes(char)) {\n      vertex = lsystemDraw(vertex, angle, config)\n      currVertices.push(vertex)\n      if (returnPaths.length) {\n        returnPaths.slice(-1)[0].push('B')\n      }\n    } else if (char === '[') {\n      // open a branch\n      returnPaths.push([])\n\n    } else if (char === ']') {\n      // Return to the beginning of the branch\n      let returnPath = returnPaths.pop().reverse()\n\n      for (let j=0; j<returnPath.length; j++) {\n        let revChar = returnPath[j]\n\n        if (revChar === '+') {\n          angle += config.angle\n        } else if (revChar === '-') {\n          angle -= config.angle\n        } else if (revChar === 'B') {\n          // Reverse Draw\n          vertex = lsystemDraw(vertex, angle + Math.PI, config)\n          currVertices.push(vertex)\n        }\n      }\n    }\n  }\n\n  return currVertices\n}\n","// L-system instructions for space filling curves\nexport const subtypes = {\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  '32-segment': {\n    axiom: 'F+F+F+F',\n    draw: ['F'],\n    rules:  {\n      F: '-F+F-F-F+F+FF-F+F+FF+F-F-FF+FF-FF+F+F-FF-F-F+FF-F-F+F+F-F+'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 2\n  },\n  // http://www.kevs3d.co.uk/dev/lsystems/\n  'Cog Triangle': {\n    axiom: 'W----W----W',\n    draw: ['F'],\n    rules:  {\n      W: '+++X--F--ZFX+',\n      X: '---W++F++YFW-',\n      Y: '+ZFX--F--Z+++',\n      Z: '-YFW++F++Y---'\n    },\n    angle: Math.PI/6,\n    minIterations: 1,\n    maxIterations: 8\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Fractal Tree': {\n    axiom: 'F',\n    draw: ['F'],\n    rules:  {\n      F: 'F[+FF][-FF]F[-F][+F]F',\n    },\n    angle: Math.PI/5,\n    maxIterations: 5\n  },\n  // https://www.vexlio.com/blog/drawing-simple-organics-with-l-systems/\n  'Fractal Tree 2': {\n    axiom: 'F',\n    draw: ['F'],\n    rules:  {\n      F: 'F[-F][+F]',\n    },\n    angle: 10*Math.PI/72,\n    maxIterations: 9\n  },\n  // https://www.vexlio.com/blog/drawing-simple-organics-with-l-systems/\n  'Fractal Tree 3': {\n    axiom: 'X',\n    draw: ['F'],\n    rules:  {\n      F: 'FF',\n      X: 'F+[-F-XF-X][+FF][--XF[+X]][++F-X]'\n    },\n    angle: Math.PI/8,\n    maxIterations: 6\n  },\n  // https://www.vexlio.com/blog/drawing-simple-organics-with-l-systems/\n  'Fractal Tree 4': {\n    axiom: 'X',\n    draw: ['F'],\n    rules:  {\n      F: 'FX[FX[+XF]]',\n      X: 'FF[+XZ++X-F[+ZX]][-X++F-X]',\n      Z: '[+F-X-F][++ZX]'\n    },\n    angle: Math.PI/8,\n    maxIterations: 5\n  },\n  // http://algorithmicbotany.org/papers/abop/abop-ch1.pdf\n  'Fractal Tree 5': {\n    axiom: 'X',\n    draw: ['F'],\n    rules:  {\n      X: 'F[+X]F[-X]+X',\n      F: 'FF'\n    },\n    angle: Math.PI/9,\n    maxIterations: 8\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Gosper (flowsnake)': {\n    axiom: 'A',\n    draw: ['A', 'B'],\n    rules:  {\n      A: 'A-B--B+A++AA+B-',\n      B: '+A-BB--B-A++A+B'\n    },\n    angle: Math.PI / 3,\n    maxIterations: 5\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Ice': {\n    axiom: 'F+F+F+F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF+F++F+F'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 6\n  },\n  // https://fronkonstin.com/2017/06/26/a-shiny-app-to-draw-curves-based-on-l-systems/\n  'Koch Cube 1': {\n    axiom: 'F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF-F-F-F-FF',\n    },\n    maxIterations: 5\n  },\n  // http://algorithmicbotany.org/papers/abop/abop-ch1.pdf\n  'Koch Cube 2': {\n    axiom: 'F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF-F+F-F-FF',\n    },\n    maxIterations: 5\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Koch Curve': {\n    axiom: 'F',\n    draw: ['F'],\n    rules:  {\n      F: 'F+F--F+F'\n    },\n    angle: 4*Math.PI/9,\n    startingAngle: Math.PI,\n    maxIterations: 7\n  },\n  // https://fronkonstin.com/2017/06/26/a-shiny-app-to-draw-curves-based-on-l-systems/\n  'Koch Flower': {\n    axiom: 'F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF-F-F-F-F-F+F',\n    },\n    maxIterations: 4\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Koch Island': {\n    axiom: 'F+F+F+F',\n    draw: ['F'],\n    rules:  {\n      F: 'F+F-F-FF+F+F-F'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 4\n  },\n  'Koch Snowflake': {\n    axiom: 'F--F--F--',\n    draw: ['F'],\n    rules:  {\n      F: 'F+F--F+F'\n    },\n    angle: Math.PI / 3,\n    startingAngle: -Math.PI / 3,\n    maxIterations: 5\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'McWorter\\'s Pentadendrite': {\n    axiom: 'F-F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'F-F-F++F+F-F',\n    },\n    angle: 2*Math.PI/5,\n    maxIterations: 5\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Penrose Tile': {\n     axiom: '[7]++[7]++[7]++[7]++[7]',\n     draw: ['6', '7', '8', '9'],\n    rules: {\n      6: '8++9----7[-8----6]++',\n      7: '+8--9[---6--7]+',\n      8: '-6++7[+++8++9]-',\n      9: '--8++++6[+9++++7]--7'\n    },\n    angle: Math.PI/5,\n    maxIterations: 6\n  },\n  'Plusses': {\n    axiom: 'XYXYXYX+XYXYXYX+XYXYXYX+XYXYXYX',\n    draw: ['F'],\n    rules:  {\n      X: 'FX+FX+FXFY-FY-',\n      Y: '+FX+FXFY-FY-FY'\n    },\n    maxIterations: 4\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Red Dragon': {\n    axiom: 'FA',\n    draw: ['F'],\n    rules:  {\n      A: 'A+BF+',\n      B: '-FA-B'\n    },\n    minIterations: 9,\n    maxIterations: 15,\n    startingAngle: Math.PI\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Sierpinski Triangle (arrowhead)': {\n    axiom: 'X',\n    draw: ['X', 'Y'],\n    rules:  {\n      X: 'Y+X+Y',\n      Y: 'X-Y-X'\n    },\n    angle: Math.PI / 3,\n    startingAngle: (i) => {\n      if (i % 2 === 0) {\n        return 0\n      } else {\n        return -Math.PI/3\n      }\n    },\n    maxIterations: 8\n  },\n}\n","import Shape, { shapeOptions } from '../Shape'\nimport {\n  lsystem,\n  lsystemPath,\n  onSubtypeChange,\n  onMinIterations,\n  onMaxIterations\n} from '../../common/lindenmayer'\nimport { subtypes } from './subtypes'\nimport { resizeVertices } from '../../common/geometry'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    subtype: {\n      title: 'Type',\n      type: 'dropdown',\n      choices: Object.keys(subtypes),\n      onChange: (changes, attrs) => {\n        return onSubtypeChange(subtypes[changes.subtype], changes, attrs)\n      }\n    },\n    iterations: {\n      title: 'Iterations',\n      min: (state) => {\n        return onMinIterations(subtypes[state.subtype], state)\n      },\n      max: (state) => {\n        return onMaxIterations(subtypes[state.subtype], state)\n      }\n    },\n  }\n}\n\nexport default class LSystem extends Shape {\n  constructor() {\n    super('Fractal Line Writer')\n    this.link = 'https://en.wikipedia.org/wiki/L-system'\n    this.linkText = 'this Wikipedia article on L-systems'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'lsystem',\n        iterations: 3,\n        subtype: 'McWorter\\'s Pentadendrite',\n      }\n    }\n  }\n\n  getInitialTransformState() {\n    return {\n      ...super.getInitialTransformState(),\n      ...{\n        repeatEnabled: false,\n        startingSize: 23,\n      }\n    }\n  }\n\n  getVertices(state) {\n    const shape = state.shape\n    const iterations = shape.iterations || 1\n    const size = 8\n\n    // generate our vertices using a set of l-system rules\n    let config = subtypes[shape.subtype]\n    config.iterations = iterations\n    config.side = 5\n\n    if (config.angle === undefined) { config.angle = Math.PI/2 }\n\n    let curve = lsystemPath(lsystem(config), config)\n\n    return resizeVertices(curve, size, size)\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    polygonSides: {\n      title: 'Number of sides',\n      min: 3\n    }\n  }\n}\n\nexport default class Polygon extends Shape {\n  constructor() {\n    super('Polygon')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'polygon',\n        polygonSides: 4\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<=state.shape.polygonSides; i++) {\n      let angle = Math.PI * 2.0 / state.shape.polygonSides * (0.5 + i)\n      points.push(new Victor(Math.cos(angle), Math.sin(angle)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    reuleauxSides: {\n      title: 'Number of sides',\n      step: 1,\n      min: 2\n    },\n  }\n}\n\nexport default class Reuleaux extends Shape {\n  constructor() {\n    super('Reuleaux')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'reuleaux',\n        reuleauxSides: 3\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    // Construct an equalateral triangle\n    let corners = []\n    // Initial location at PI/2\n    let angle = Math.PI/2.0\n    // How much of the circle in one side?\n    let coverageAngle = Math.PI/state.shape.reuleauxSides\n    let halfCoverageAngle = 0.5 * coverageAngle\n    for (let c=0; c<state.shape.reuleauxSides; c++) {\n      let startAngle = angle + Math.PI - halfCoverageAngle\n      corners.push( [new Victor(Math.cos(angle), Math.sin(angle)), startAngle] )\n      angle += 2.0 * Math.PI / state.shape.reuleauxSides\n    }\n    let length = 0.5 / Math.cos(Math.PI/2.0/state.shape.reuleauxSides)\n    const scale = 1.7\n    for (let corn=0; corn < corners.length; corn++) {\n      for (let i=0; i<128; i++) {\n        let angle = coverageAngle  * (i / 128.0) + corners[corn][1]\n        points.push(new Victor(scale * (length * corners[corn][0].x + Math.cos(angle)),\n                           scale * (length * corners[corn][0].y + Math.sin(angle))))\n      }\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    roseN: {\n      title: 'Numerator',\n      step: 1,\n      min: 1\n    },\n    roseD: {\n      title: 'Denominator',\n      step: 1,\n      min: 1\n    },\n  }\n}\n\nexport default class Rose extends Shape {\n  constructor() {\n    super('Rose')\n    this.link = 'http://mathworld.wolfram.com/Rose.html'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'rose',\n        roseN: 3,\n        roseD: 2\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = 2\n    let n = parseInt(state.shape.roseN)\n    let d = parseInt(state.shape.roseD)\n    let p = (n * d % 2 === 0) ? 2 : 1\n    let thetaClose = d * p * 32 * n\n    let resolution = 64 * n\n\n    for (let i=0; i<thetaClose+1; i++) {\n      let theta = Math.PI * 2.0 / (resolution) * i\n      let r = 0.5 * a * Math.sin((n / d) * theta)\n      points.push(new Victor(r * Math.cos(theta), r * Math.sin(theta)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","// L-system instructions for space filling curves\nexport const subtypes = {\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Gosper (flowsnake)': {\n    axiom: 'A',\n    draw: ['A', 'B'],\n    rules:  {\n      A: 'A-B--B+A++AA+B-',\n      B: '+A-BB--B-A++A+B'\n    },\n    angle: Math.PI / 3,\n    iterationsGrow: (config) => {\n      return config.iterations\n    },\n    maxIterations: 6\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Hilbert': {\n    axiom: 'L',\n    draw: 'F',\n    rules: {\n      L: '+RF-LFL-FR+',\n      R: '-LF+RFR+FL-'\n    },\n    startingAngle: Math.PI,\n    minIterations: 2\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Hilbert 2': {\n    axiom: 'X',\n    draw: 'F',\n    rules: {\n      X: 'XFYFX+F+YFXFY-F-XFYFX',\n      Y: 'YFXFY-F-XFYFX+F+YFXFY'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 4\n  },\n  // https://en.wikipedia.org/wiki/Sierpi%C5%84ski_curve\n  'Sierpinski': {\n    axiom: 'F--XF--F--XF',\n    draw: ['F', 'G'],\n    rules: {\n      X: 'XF+G+XF--F--XF+G+X'\n    },\n    startingAngle: Math.PI/4,\n    angle: Math.PI/4,\n    maxIterations: 6\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Penrose Tile': {\n     axiom: '[7]++[7]++[7]++[7]++[7]',\n     draw: ['6', '7', '8', '9'],\n    rules: {\n      6: '8++9----7[-8----6]++',\n      7: '+8--9[---6--7]+',\n      8: '-6++7[+++8++9]-',\n      9: '--8++++6[+9++++7]--7'\n    },\n    angle: Math.PI/5,\n    maxIterations: 6,\n    iterationsGrow: (config) => {\n      return 1 + Math.max(1, 3/config.iterations)\n    }\n  },\n  // https://en.wikipedia.org/wiki/Sierpi%C5%84ski_curve\n  'Sierpinski Square': {\n    axiom: 'F+XF+F+XF',\n    draw: 'F',\n    rules: {\n      X: 'XF-F+F-XF+F+XF-F+F-X'\n    },\n    startingAngle: Math.PI/4,\n    maxIterations: 6\n  },\n}\n","import Shape, { shapeOptions } from '../Shape'\nimport {\n  lsystem,\n  lsystemPath,\n  onSubtypeChange,\n  onMinIterations,\n  onMaxIterations\n} from '../../common/lindenmayer'\nimport { resizeVertices } from '../../common/geometry'\nimport { subtypes } from './subtypes'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    subtype: {\n      title: 'Type',\n      type: 'dropdown',\n      choices: Object.keys(subtypes),\n      onChange: (changes, attrs) => {\n        return onSubtypeChange(subtypes[changes.subtype], changes, attrs)\n      }\n    },\n    iterations: {\n      title: 'Iterations',\n      min: (state) => {\n        return onMinIterations(subtypes[state.subtype], state)\n      },\n      max: (state) => {\n        return onMaxIterations(subtypes[state.subtype], state)\n      }\n    }\n  }\n}\n\nexport default class SpaceFiller extends Shape {\n  constructor() {\n    super('Space Filler')\n    this.linkText = 'Fractal charm: space filling curves'\n    this.link = 'https://www.youtube.com/watch?v=RU0wScIj36o'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'space_filler',\n        selectGroup: 'Erasers',\n        canTransform: false,\n        iterations: 6,\n        subtype: 'Hilbert'\n      }\n    }\n  }\n\n  getInitialTransformState() {\n    return {\n      ...super.getInitialTransformState(),\n      ...{\n        repeatEnabled: false,\n        startingSize: 1,\n        canChangeSize: false,\n      }\n    }\n  }\n\n  getVertices(state) {\n    const machine = state.machine\n    const iterations = state.shape.iterations || 1\n\n    let sizeX, sizeY\n    if (machine.rectangular) {\n      sizeX = machine.maxX - machine.minX\n      sizeY = machine.maxY - machine.minY\n    } else {\n      sizeX = sizeY = machine.maxRadius * 2.0\n    }\n\n    // generate our vertices using a set of l-system rules\n    let config = subtypes[state.shape.subtype]\n    config.iterations = iterations\n\n    if (config.side === undefined) { config.side = 5 }\n    if (config.angle === undefined) { config.angle = Math.PI/2 }\n\n    let curve = lsystemPath(lsystem(config), config)\n    let scale = 1\n\n    if (config.iterationsGrow) {\n      scale = (typeof config.iterationsGrow === 'function') ? config.iterationsGrow(config) : config.iterationsGrow\n    }\n\n    return resizeVertices(curve, sizeX*scale, sizeY*scale)\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    points: {\n      title: 'Number of points',\n      min: 2\n    },\n    starRatio: {\n      title: 'Size of points',\n      step: 0.05,\n      min: 0.05\n    },\n  }\n}\n\nexport default class Star extends Shape {\n  constructor() {\n    super('Star')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'star',\n        points: 5,\n        starRatio: 0.5\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<=state.shape.points * 2; i++) {\n      let angle = Math.PI * 2.0 / (2.0 * state.shape.points) * i\n      let star_scale = 1.0\n      if (i % 2 === 0) {\n        star_scale *= state.shape.starRatio\n      }\n      points.push(new Victor(star_scale * Math.cos(angle), star_scale * Math.sin(angle)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export class PriorityQueue {\n  constructor() {\n    this.collection = []\n  }\n\n  enqueue(element) {\n    if (this.isEmpty()) {\n      this.collection.push(element)\n    } else {\n      let added = false\n      for (let i = 1; i <= this.collection.length; i++) {\n        if (element[1] < this.collection[i-1][1]){\n          this.collection.splice(i-1, 0, element)\n          added = true\n          break\n        }\n      }\n\n      if (!added) {\n        this.collection.push(element)\n      }\n    }\n  }\n\n  dequeue() {\n    let value = this.collection.shift()\n    return value\n  }\n\n  isEmpty() {\n    return (this.collection.length === 0)\n  }\n}\n","import { PriorityQueue } from './PriorityQueue.js'\nimport Victor from 'victor'\n\nexport const mix = (v1, v2, s) => {\n  let u = [v1.x, v1.y]\n  let v = [v2.x, v2.y]\n  var result = []\n\n  for (var i = 0; i < u.length; ++i ) {\n    result.push((1.0 - s) * u[i] + s * v[i])\n  }\n\n  return new Victor(result[0], result[1])\n}\n\n// note: requires string-based nodes to work properly\nexport default class Graph {\n  constructor() {\n    this.nodeMap = {}\n    this.nodeKeys = new Set()\n    this.adjacencyList = {}\n    this.edgeMap = {}\n    this.edgeKeys = new Set()\n    this.clearCachedPaths()\n  }\n\n  addNode(node) {\n    let key = node.toString()\n\n    if (!this.nodeKeys.has(key)) {\n      this.nodeKeys.add(key)\n      this.nodeMap[key] = node\n      this.adjacencyList[key] = []\n      this.clearCachedPaths()\n    }\n  }\n\n  addEdge(node1, node2, weight=1) {\n    let node1Key = node1.toString()\n    let node2Key = node2.toString()\n    let edgeKey = [node1Key, node2Key].sort().toString()\n\n    if (!this.edgeKeys.has(edgeKey)) {\n      this.adjacencyList[node1Key].push({node: node2, weight: weight})\n      this.adjacencyList[node2Key].push({node: node1, weight: weight})\n      this.edgeKeys.add(edgeKey)\n      this.edgeMap[edgeKey] = [node1.toString(), node2.toString()]\n      this.clearCachedPaths()\n    }\n  }\n\n  hasEdge(ekey1, ekey2) {\n    let edgeKey = [ekey1, ekey2].sort().toString()\n    return this.edgeMap[edgeKey]\n  }\n\n  dijkstraShortestPath(startNode, endNode) {\n    let shortest = this.getCachedShortestPath(startNode, endNode)\n\n    if (shortest === undefined) {\n      let times = {}\n      let backtrace = {}\n      let pq = new PriorityQueue()\n      let nodes = this.nodeKeys\n\n      times[startNode] = 0\n\n      nodes.forEach(node => {\n        if (node !== startNode) {\n          times[node] = Infinity\n        }\n      })\n\n      pq.enqueue([startNode, 0])\n\n      while (!pq.isEmpty()) {\n        let shortestStep = pq.dequeue()\n        let currentNode = shortestStep[0]\n        this.adjacencyList[currentNode.toString()].forEach(neighbor => {\n          let time = times[currentNode] + neighbor.weight\n\n          if (time < times[neighbor.node]) {\n            times[neighbor.node] = time\n            backtrace[neighbor.node] = currentNode\n            pq.enqueue([neighbor.node, time])\n          }\n        })\n      }\n\n      let path = [endNode.toString()]\n      let lastStep = endNode\n\n      while(lastStep !== startNode) {\n        path.unshift(backtrace[lastStep].toString())\n        lastStep = backtrace[lastStep]\n      }\n\n      shortest = path.map(node => this.nodeMap[node])\n      this.cacheShortestPath(startNode, endNode, shortest)\n    }\n\n    return shortest\n  }\n\n  clearCachedPaths() {\n    this.cachedPaths = {}\n  }\n\n  cacheShortestPath(node1, node2, path) {\n    this.cachedPaths[this.getPairedKey(node1, node2)] = [...path]\n    this.cachedPaths[this.getPairedKey(node2, node1)] = [...path].reverse()\n  }\n\n  getCachedShortestPath(node1, node2) {\n    let shortest = this.cachedPaths[this.getPairedKey(node1, node2)]\n    return shortest === undefined ? undefined : [...shortest]\n  }\n\n  getPairedKey(node1, node2) {\n    return node1.toString() + '-' + node2.toString()\n  }\n}\n","import Victor from 'victor'\nimport Graph, { mix } from '../../common/Graph'\nimport eulerianTrail from '../../common/eulerianTrail'\nimport { difference } from '../../common/util'\nimport Shape, { shapeOptions } from '../Shape'\n\nconst vecTriangle = [\n  new Victor(-0.85, -0.4907477295),\n  new Victor(0.85, -0.4907477295),\n  new Victor(0.0,  0.9814954573),\n]\n\nconst vecSquare = [\n  new Victor(-0.7, -0.7),\n  new Victor( 0.7,  0.7),\n  new Victor(-0.7,  0.7),\n\n  new Victor(-0.7, -0.7),\n  new Victor(0.7,  0.7),\n  new Victor(0.7, -0.7)\n]\n\nfunction getEdges(edges, a, b, c, count, settings) {\n  let da, db, dc\n\n  if (count === 0) {\n    if (settings.rotate > 0) {\n      da = Math.sqrt(Math.pow(a.x, 2) + Math.pow(a.y, 2)) * (settings.rotate * Math.PI / 180.0)\n      db = Math.sqrt(Math.pow(b.x, 2) + Math.pow(b.y, 2)) * (settings.rotate * Math.PI / 180.0)\n      dc = Math.sqrt(Math.pow(c.x, 2) + Math.pow(c.y, 2)) * (settings.rotate * Math.PI / 180.0)\n    } else {\n      da = (settings.rotate * Math.PI / 180.0)\n      db = (settings.rotate * Math.PI / 180.0)\n      dc = (settings.rotate * Math.PI / 180.0)\n    }\n\n    let ap = new Victor(\n      (a.x * Math.cos(da)) - (a.y * Math.sin(da)),\n      (a.x * Math.sin(da)) + (a.y * Math.cos(da)))\n    let bp = new Victor(\n      (b.x * Math.cos(db)) - (b.y * Math.sin(db)),\n      (b.x * Math.sin(db)) + (b.y * Math.cos(db)))\n    let cp = new Victor(\n      (c.x * Math.cos(dc)) - (c.y * Math.sin(dc)),\n      (c.x * Math.sin(dc)) + (c.y * Math.cos(dc)))\n\n    edges.push([ap, bp], [ap, cp], [bp, cp])\n    return\n  }\n\n  let ab = mix(a, b, 0.5)\n  let ac = mix(a, c, 0.5)\n  let bc = mix(b, c, 0.5)\n\n  getEdges(edges, ab, ac, bc, count - 1, settings)\n  getEdges(edges, c, ac, bc, count - 1, settings)\n  getEdges(edges, b, bc, ab, count - 1, settings)\n  getEdges(edges, a, ab, ac, count - 1, settings)\n}\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    tessellationTwistNumSides: {\n      title: \"Number of sides\",\n      min: 3\n    },\n    tessellationTwistIterations: {\n      title: \"Iterations\",\n      min: 0,\n      max: 4\n    },\n    tessellationTwistRotate: {\n      title: \"Rotate and twist\",\n      step: 5,\n      min: 0\n    }\n  }\n}\n\n// Adapted from https://codepen.io/rafaelpascoalrodrigues/pen/KpBJve.\nexport default class TessellationTwist extends Shape {\n  constructor() {\n    super('Tessellation Twist')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'tessellation_twist',\n        tessellationTwistNumSides: 5,\n        tessellationTwistIterations: 2,\n        tessellationTwistRotate: 0,\n      }\n    }\n  }\n\n  getInitialTransformState() {\n    return {\n      ...super.getInitialTransformState(),\n      ...{\n        startingSize: 110,\n        repeatEnabled: false,\n      }\n    }\n  }\n\n  getShapeVertices(numSides) {\n    let vertices = []\n    for (let i=0; i<=numSides; i++) {\n      let angle = Math.PI * 2.0 / numSides * (0.5 + i)\n      let angle2 = Math.PI * 2.0 / numSides * (0.5 + ((i + 1) % numSides))\n\n      vertices.push(new Victor(0, 0))\n      vertices.push(new Victor(Math.cos(angle), Math.sin(angle)))\n      vertices.push(new Victor(Math.cos(angle2), Math.sin(angle2)))\n    }\n    return vertices\n  }\n\n  getVertices(state) {\n    let vertices\n    let edges = []\n    const tessellation = parseInt(state.shape.tessellationTwistIterations)\n    const sides = parseInt(state.shape.tessellationTwistNumSides)\n\n    switch (sides) {\n      case 3:\n        vertices = vecTriangle.slice(0)\n        break\n      case 4:\n        vertices = vecSquare.slice(0)\n        break\n      default:\n        vertices = this.getShapeVertices(sides)\n        break\n    }\n\n    // build our tessellations\n    for (var i = 0; i < vertices.length; i += 3) {\n      getEdges(edges, vertices[i + 0], vertices[i + 1], vertices[i + 2],\n        tessellation, { rotate: parseInt(state.shape.tessellationTwistRotate) })\n    }\n\n    // build edge and adjacency maps; this serves to ensure unique\n    // vertices and edges, and give us a string-based key to access and run\n    // algorithms on them.\n    let graph = new Graph()\n\n    edges.forEach((edge) => {\n      let v1 = edge[0]\n      let v2 = edge[1]\n\n      graph.addNode(v1)\n      graph.addNode(v2)\n      graph.addEdge(v1, v2)\n    })\n\n    // build a graph\n    // find the eulerian trail that efficiently visits all of the vertices\n    let trail = eulerianTrail({edges: Object.values(graph.edgeMap)})\n\n    let prevKey\n    let walkedVertices = []\n    var walkedEdges = []\n\n    // if there are nodes with an odd number of edges (as in pentagon and hexagon)\n    // there is not a eulerian trail that visits all of the nodes. So we need to identify\n    // the missing nodes and create edges for them. There is a complex algorithm\n    // (chinese postman) that can be used to do this for the general case, but\n    // it's computationally expensive and overkill for our situation.\n    for (i = 0; i < trail.length-1; i++) {\n      let edge = [trail[i], trail[i+1]].sort().toString()\n      walkedEdges.push(edge)\n    }\n    walkedEdges = new Set(walkedEdges)\n\n    let missingEdges = Array.from(difference(walkedEdges, graph.edgeKeys)).reduce((hash, d) => {\n      d = d.split(',')\n      hash[d[0] + ',' + d[1]] = d[2] + ',' + d[3]\n      return hash\n    }, {})\n\n    trail.forEach((key, index) => {\n      let vertex = graph.nodeMap[key]\n\n      if (prevKey) {\n        if (!graph.hasEdge(key, prevKey)) {\n          // non-eulerian move, so we'll walk the shortest valid path between them\n          let path = graph.dijkstraShortestPath(prevKey, key)\n          path.shift()\n          path.forEach(node => walkedVertices.push(node))\n          walkedVertices.push(vertex)\n        } else {\n          walkedVertices.push(vertex)\n        }\n      } else {\n        walkedVertices.push(vertex)\n      }\n\n      // add any missing edges\n      if (missingEdges[key]) {\n        let missingVertex = graph.nodeMap[missingEdges[key]]\n        let edgeKey = [key, missingEdges[key]].sort().toString()\n\n        if (graph.edgeMap[edgeKey]) {\n          // only add valid edges\n          walkedVertices.push(missingVertex)\n          walkedVertices.push(vertex)\n        }\n        delete missingEdges[key]\n      }\n\n      prevKey = key\n    })\n\n    return walkedVertices\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","// adapted from https://github.com/mauriciopoppe/eulerian-trail/blob/master/lib/eulerian-trail.js\n// commented out thrown exceptions to return non-optimal eulerian paths\nexport default function(options) {\n  var g = []\n  var i\n  var edgePointer = []\n  var edgeUsed = []\n  var trail = []\n\n  var id = {}\n  var idReverse = []\n  var idCount = 0\n\n  function getId(x) {\n    if (!id.hasOwnProperty(x)) {\n      edgePointer[idCount] = 0\n      idReverse[idCount] = x\n      id[x] = idCount++\n    }\n    return id[x]\n  }\n\n  function dfs(v) {\n    for (; edgePointer[v] < g[v].length; edgePointer[v] += 1) {\n      var edge = g[v][edgePointer[v]]\n      var to = edge[0]\n      var id = edge[1]\n      if (!edgeUsed[id]) {\n        edgeUsed[id] = true\n        dfs(to)\n      }\n    }\n    trail.push(v)\n  }\n\n  function pushEdge(u, v, id) {\n    g[u] = g[u] || []\n    g[v] = g[v] || []\n    g[u].push([v, id])\n  }\n\n  var deg = []\n  var inDeg = [], outDeg = []\n\n  for (i = 0; i < options.edges.length; i += 1) {\n    var edge = options.edges[i]\n    var u = getId(edge[0])\n    var v = getId(edge[1])\n\n    pushEdge(u, v, i)\n    if (!options.directed) {\n      pushEdge(v, u, i)\n    }\n\n    if (options.directed) {\n      outDeg[u] = outDeg[u] || 0\n      inDeg[u] = inDeg[u] || 0\n      outDeg[v] = outDeg[v] || 0\n      inDeg[v] = inDeg[v] || 0\n      outDeg[u] += 1\n      inDeg[v] += 1\n    } else {\n      deg[u] = deg[u] || 0\n      deg[v] = deg[v] || 0\n      deg[u] += 1\n      deg[v] += 1\n    }\n  }\n\n  function checkDirected() {\n    var oddVertex = 0\n    var start = 0\n\n    for (i = 0; i < idCount; i += 1) {\n      if (outDeg[i] - inDeg[i] !== 0) {\n        if (outDeg[i] > inDeg[i]) {\n          start = i\n        }\n        oddVertex += 1\n      }\n    }\n    return {odd: oddVertex, start: start}\n  }\n\n  function checkUndirected() {\n    var oddVertex = 0\n    var start = 0\n\n    for (i = 0; i < idCount; i += 1) {\n      if (deg[i] % 2 !== 0) {\n        start = i\n        oddVertex += 1\n      }\n    }\n    return {odd: oddVertex, start: start}\n  }\n\n  var check = options.directed ? checkDirected() : checkUndirected()\n  if (check.odd % 2 !== 0 || check.odd > 2) {\n//    throw Error('the graph does not have an eulerian trail')\n  }\n  dfs(check.start)\n\n  if (trail.length !== options.edges.length + 1) {\n//    throw Error('the graph does not have an eulerian trail')\n  }\n\n  trail.reverse()\n\n  // id to input\n  return trail.map(function (id) {\n    return idReverse[id]\n  })\n}\n","import Victor from 'victor'\n\nlet Vicious1Vertices = () => {\n  return [\n    new Victor(-0.745613252629, 0.342139688058),\n    new Victor(-0.722681883112, 0.350763810109),\n    new Victor(-0.700286039815, 0.359363989838),\n    new Victor(-0.683380317501, 0.365945196632),\n    new Victor(-0.666520036737, 0.372640251609),\n    new Victor(-0.649705686141, 0.379449643388),\n    new Victor(-0.632937754332, 0.386372394731),\n    new Victor(-0.61621672993, 0.393408994259),\n    new Victor(-0.59954407879, 0.400558464732),\n    new Victor(-0.582920289531, 0.40782080615),\n    new Victor(-0.566345850773, 0.415195529896),\n    new Victor(-0.549821739752, 0.42268214735),\n    new Victor(-0.533348933706, 0.430280658513),\n    new Victor(-0.516927921255, 0.437990574764),\n    new Victor(-0.500559191017, 0.445811896105),\n    new Victor(-0.484244208848, 0.453743645298),\n    new Victor(-0.467982974749, 0.461785822342),\n    new Victor(-0.451776954575, 0.46993793862),\n    new Victor(-0.435626636946, 0.478199505511),\n    new Victor(-0.417042020391, 0.487809171708),\n    new Victor(-0.398529230801, 0.497557117029),\n    new Victor(-0.380089734033, 0.507441875618),\n    new Victor(-0.361724018706, 0.517463936093),\n    new Victor(-0.343433550675, 0.527621343979),\n    new Victor(-0.325218818561, 0.537915076515),\n    new Victor(-0.307080799601, 0.548343667842),\n    new Victor(-0.289020959651, 0.558906629343),\n    new Victor(-0.271040275948, 0.569603472399),\n    new Victor(-0.253139237112, 0.580433708391),\n    new Victor(-0.235319797618, 0.591396360082),\n    new Victor(-0.217581468846, 0.60249142747),\n    new Victor(-0.199926693892, 0.61371793332),\n    new Victor(-0.182355472755, 0.625075389011),\n    new Victor(-0.164869271291, 0.636562817306),\n    new Victor(-0.147469066739, 0.648180218206),\n    new Victor(-0.130155347716, 0.659926125854),\n    new Victor(-0.112929580079, 0.671800540249),\n    new Victor(-0.0957922524482, 0.683802484155),\n    new Victor(-0.0787448306786, 0.695931957571),\n    new Victor(-0.0617878033894, 0.708187006022),\n    new Victor(-0.0449226364371, 0.720568118127),\n    new Victor(-0.0281493298216, 0.733074316648),\n    new Victor(-0.0114698380183, 0.745704624347),\n    new Victor(0.00511535035415, 0.758458552606),\n    new Victor(0.021605258058, 0.771335124187),\n    new Victor(0.0379993964745, 0.78433433909),\n    new Victor(0.0542962997473, 0.79745424284),\n    new Victor(0.0689143087782, 0.809362371934),\n    new Victor(0.0834609794625, 0.821357963795),\n    new Victor(0.0979358231812, 0.833440041186),\n    new Victor(0.112337862697, 0.845608604107),\n    new Victor(0.12666660939, 0.857863652558),\n    new Victor(0.140921574643, 0.870203720682),\n    new Victor(0.155102758455, 0.882629297099),\n    new Victor(0.169209183589, 0.895138915952),\n    new Victor(0.181539967956, 0.906207597924),\n    new Victor(0.193955771996, 0.91718051061),\n    new Victor(0.206455618473, 0.928057165389),\n    new Victor(0.219038530147, 0.938837562262),\n    new Victor(0.22146207946, 0.940840899396),\n    new Victor(0.223916411758, 0.942806124262),\n    new Victor(0.226401527041, 0.944732748242),\n    new Victor(0.228916936691, 0.946620282717),\n    new Victor(0.230887047745, 0.948104706671),\n    new Victor(0.232926054052, 0.949493361338),\n    new Victor(0.235029069424, 0.950783803623),\n    new Victor(0.237191207672, 0.951972124576),\n    new Victor(0.239407582608, 0.953055881104),\n    new Victor(0.241672819425, 0.954032630111),\n    new Victor(0.243982520555, 0.954900417123),\n    new Victor(0.246330822571, 0.955656799046),\n    new Victor(0.248847209458, 0.956426373676),\n    new Victor(0.251395845187, 0.957082100124),\n    new Victor(0.253971354951, 0.957622512531),\n    new Victor(0.256568363942, 0.958047610898),\n    new Victor(0.259181985973, 0.958355440751),\n    new Victor(0.261806846237, 0.958546002088),\n    new Victor(0.264437081308, 0.958618806291),\n    new Victor(0.267068293617, 0.958573364741),\n    new Victor(0.269695108356, 0.958410166058),\n    new Victor(0.2723116621, 0.95812921024),\n    new Victor(0.274913068661, 0.957731474526),\n    new Victor(0.277493953231, 0.957217447535),\n    new Victor(0.280048941005, 0.956588595122),\n    new Victor(0.282573634412, 0.955845405908),\n    new Victor(0.285062170027, 0.954989834366),\n    new Victor(0.287510150281, 0.954023834973),\n    new Victor(0.289695253613, 0.953107674698),\n    new Victor(0.291880845564, 0.952108937844),\n    new Victor(0.301388879047, 0.947138218659),\n    new Victor(0.310845118937, 0.942069775711),\n    new Victor(0.320249076614, 0.936904097619),\n    new Victor(0.329599286221, 0.931642650239),\n    new Victor(0.363485000908, 0.912453612212),\n    new Victor(0.397329182996, 0.8931922586),\n    new Victor(0.431132321104, 0.873858589404),\n    new Victor(0.464893926612, 0.854453093243),\n    new Victor(0.498613999522, 0.834975281497),\n    new Victor(0.532292539832, 0.815425642786),\n    new Victor(0.565929058925, 0.795804177109),\n    new Victor(0.599524045418, 0.776110884466),\n    new Victor(0.614195802519, 0.767461354237),\n    new Victor(0.628780096852, 0.758665238364),\n    new Victor(0.643274973942, 0.749722536847),\n    new Victor(0.657679456551, 0.740634715542),\n    new Victor(0.663100193664, 0.737124966608),\n    new Victor(0.668459853424, 0.733522380099),\n    new Victor(0.673756481358, 0.729827933253),\n    new Victor(0.678988611609, 0.72604211469),\n    new Victor(0.681833350338, 0.72394251965),\n    new Victor(0.684601864533, 0.721743246372),\n    new Victor(0.687290245243, 0.719446737951),\n    new Victor(0.689896049373, 0.717056903336),\n    new Victor(0.692415367973, 0.714576674241),\n    new Victor(0.694845269331, 0.71200800514),\n    new Victor(0.697182821733, 0.709355293604),\n    new Victor(0.699425093466, 0.706621471345),\n    new Victor(0.70031242523, 0.705263599663),\n    new Victor(0.70110301047, 0.703846605105),\n    new Victor(0.701792940234, 0.702378794191),\n    new Victor(0.702378794191, 0.700866030346),\n    new Victor(0.702858129247, 0.699316131471),\n    new Victor(0.703228502307, 0.697736426848),\n    new Victor(0.703487470278, 0.696135222997),\n    new Victor(0.703634544541, 0.694519360583),\n    new Victor(0.703808492838, 0.692484263226),\n    new Victor(0.704005894839, 0.688243540547),\n    new Victor(0.704113390977, 0.683999886156),\n    new Victor(0.704130981255, 0.679754765908),\n    new Victor(0.704059154289, 0.675510622897),\n    new Victor(0.703896932843, 0.671268434362),\n    new Victor(0.703645294154, 0.667031132015),\n    new Victor(0.703303749604, 0.662799693094),\n    new Victor(0.702872787811, 0.658576560692),\n    new Victor(0.701225165173, 0.648144060414),\n    new Victor(0.699422161753, 0.637737456933),\n    new Victor(0.697463288931, 0.627358704724),\n    new Victor(0.695350012565, 0.617010735501),\n    new Victor(0.693864122754, 0.60962184181),\n    new Victor(0.691242194203, 0.596705692105),\n    new Victor(0.688638833167, 0.58378514483),\n    new Victor(0.686055016884, 0.570860688605),\n    new Victor(0.683489768115, 0.557932812049),\n    new Victor(0.679173798139, 0.53578860744),\n    new Victor(0.675031287842, 0.513610688133),\n    new Victor(0.671063214461, 0.491401008603),\n    new Victor(0.667269089377, 0.469161523326),\n    new Victor(0.663649889828, 0.446892232301),\n    new Victor(0.660205127196, 0.424595578622),\n    new Victor(0.65693480148, 0.402273028147),\n    new Victor(0.653839889918, 0.379925069493),\n    new Victor(0.65092039251, 0.357553168517),\n    new Victor(0.648176309256, 0.335159768314),\n    new Victor(0.645608128774, 0.312745357501),\n    new Victor(0.643215362447, 0.290311401936),\n    new Victor(0.641387928086, 0.272862824121),\n    new Victor(0.640313455316, 0.262524627274),\n    new Victor(0.639318138793, 0.252178123907),\n    new Victor(0.638402467138, 0.241824779876),\n    new Victor(0.637566440349, 0.231464595183),\n    new Victor(0.636809569807, 0.221098058444),\n    new Victor(0.636132344132, 0.210726146899),\n    new Victor(0.635534763324, 0.200349349165),\n    new Victor(0.635016338763, 0.189968153863),\n    new Victor(0.634136336281, 0.166283334136),\n    new Victor(0.633371647838, 0.14259411684),\n    new Victor(0.632722273436, 0.118901479213),\n    new Victor(0.632187724454, 0.0952059098725),\n    new Victor(0.631768489513, 0.0715078974381),\n    new Victor(0.631464568611, 0.0478084191472),\n    new Victor(0.63127547313, 0.0241079636186),\n    new Victor(0.631201691689, 0.000406530852484),\n    new Victor(0.631270098323, -0.0222394852774),\n    new Victor(0.631441114908, -0.0448845241697),\n    new Victor(0.631715230062, -0.0675285858243),\n    new Victor(0.632092443786, -0.0901711816225),\n    new Victor(0.63257226746, -0.112811822945),\n    new Victor(0.633154701085, -0.135450021174),\n    new Victor(0.63384023328, -0.158085776309),\n    new Victor(0.634628864044, -0.180717622493),\n    new Victor(0.635306089719, -0.195449968327),\n    new Victor(0.636126969325, -0.210174984878),\n    new Victor(0.637091014243, -0.22489120629),\n    new Victor(0.638198713093, -0.239597655326),\n    new Victor(0.639449577254, -0.254292377511),\n    new Victor(0.640843606728, -0.268974395606),\n    new Victor(0.642380801514, -0.283642243756),\n    new Victor(0.644060672993, -0.298293967485),\n    new Victor(0.64612020129, -0.31581290641),\n    new Victor(0.6482320118, -0.333325493289),\n    new Victor(0.65039757038, -0.350831239505),\n    new Victor(0.652615411173, -0.368331122296),\n    new Victor(0.654741880247, -0.384873800832),\n    new Victor(0.656970959272, -0.401402798041),\n    new Victor(0.659303625486, -0.417918113923),\n    new Victor(0.661739390269, -0.434418282622),\n    new Victor(0.664278253622, -0.450902815519),\n    new Victor(0.666919726926, -0.467371223995),\n    new Victor(0.66966381018, -0.483822530812),\n    new Victor(0.672510992004, -0.500256735972),\n    new Victor(0.675460295159, -0.516672862235),\n    new Victor(0.678512696885, -0.533069932364),\n    new Victor(0.681666731323, -0.54944794636),\n    new Victor(0.684923375712, -0.565805926984),\n    new Victor(0.688253801542, -0.582478578124),\n    new Victor(0.691624294115, -0.599143411363),\n    new Victor(0.695033876193, -0.615799938082),\n    new Victor(0.698483036394, -0.632448158282),\n    new Victor(0.700362264349, -0.641257466863),\n    new Victor(0.702110053844, -0.650093649478),\n    new Victor(0.703725916259, -0.658955240272),\n    new Victor(0.705209362975, -0.667839796151),\n    new Victor(0.705560191283, -0.670609776202),\n    new Victor(0.705811829972, -0.673129583421),\n    new Victor(0.705988709982, -0.675296119238),\n    new Victor(0.706054184903, -0.677469495719),\n    new Victor(0.706007766116, -0.679642872199),\n    new Victor(0.70584945362, -0.681811362492),\n    new Victor(0.705579736035, -0.683968614552),\n    new Victor(0.705199590599, -0.686109253572),\n    new Victor(0.704709505929, -0.688227904745),\n    new Victor(0.704111436502, -0.690317727409),\n    new Victor(0.702891355326, -0.694066410943),\n    new Victor(0.701505632372, -0.697756460219),\n    new Victor(0.699955733497, -0.701380545956),\n    new Victor(0.698245567651, -0.704932316108),\n    new Victor(0.696378555166, -0.708403464156),\n    new Victor(0.694358116374, -0.711788126674),\n    new Victor(0.692188648844, -0.715079462999),\n    new Victor(0.689874061527, -0.718270143849),\n    new Victor(0.688711148751, -0.719521985248),\n    new Victor(0.687505237521, -0.720732294048),\n    new Victor(0.686256816453, -0.721899115774),\n    new Victor(0.684968817262, -0.723021473187),\n    new Victor(0.683641728566, -0.724097900432),\n    new Victor(0.68227750484, -0.725126443034),\n    new Victor(0.68087761194, -0.726106612373),\n    new Victor(0.679444492961, -0.727036942593),\n    new Victor(0.669607619016, -0.733287843069),\n    new Victor(0.659707713245, -0.739438576688),\n    new Victor(0.649746730121, -0.745489632069),\n    new Victor(0.639724669646, -0.751439054737),\n    new Victor(0.626066307964, -0.75960143201),\n    new Victor(0.588245257356, -0.781929357292),\n    new Victor(0.550379253818, -0.804180569421),\n    new Victor(0.512467808729, -0.826354091159),\n    new Victor(0.474510922092, -0.848449922505),\n    new Victor(0.436509082523, -0.87046806346),\n    new Victor(0.398462290023, -0.892408514024),\n    new Victor(0.360370544593, -0.914271274197),\n    new Victor(0.322234334851, -0.936056343978),\n    new Victor(0.311636192795, -0.942000391839),\n    new Victor(0.303639945919, -0.946411153865),\n    new Victor(0.301535464691, -0.947610713051),\n    new Victor(0.299393848434, -0.94874333146),\n    new Victor(0.29721754024, -0.949807054616),\n    new Victor(0.295008494586, -0.9508013939),\n    new Victor(0.292769154566, -0.951725372076),\n    new Victor(0.290501474654, -0.952577523286),\n    new Victor(0.288207897946, -0.95335784753),\n    new Victor(0.285890867534, -0.954064878953),\n    new Victor(0.282197886545, -0.955003515693),\n    new Victor(0.278465327432, -0.955768692754),\n    new Victor(0.274700519477, -0.956358455661),\n    new Victor(0.270912257819, -0.956772315796),\n    new Victor(0.267109337597, -0.957008318683),\n    new Victor(0.263299088092, -0.957066464322),\n    new Victor(0.259490304444, -0.956946752712),\n    new Victor(0.255691781792, -0.956649183855),\n    new Victor(0.251910849416, -0.956174246369),\n    new Victor(0.248156302456, -0.95552340611),\n    new Victor(0.244436447432, -0.954697640316),\n    new Victor(0.240758613626, -0.953699392081),\n    new Victor(0.240319833932, -0.953534238922),\n    new Victor(0.238502171947, -0.952568728147),\n    new Victor(0.236709918141, -0.951555821348),\n    new Victor(0.234945026988, -0.950496007142),\n    new Victor(0.233208964345, -0.949390262768),\n    new Victor(0.23150270745, -0.948239076844),\n    new Victor(0.22982723354, -0.94704293799),\n    new Victor(0.228184008471, -0.945803312061),\n    new Victor(0.226574009482, -0.944520687677),\n    new Victor(0.224074235635, -0.942570121375),\n    new Victor(0.212583875626, -0.933021043911),\n    new Victor(0.201218113415, -0.923323914947),\n    new Victor(0.189977926239, -0.913481666195),\n    new Victor(0.178866245811, -0.903494297655),\n    new Victor(0.161323853183, -0.887790577622),\n    new Victor(0.143655885521, -0.872228557044),\n    new Victor(0.125862831443, -0.856809213159),\n    new Victor(0.107946156805, -0.841533523206),\n    new Victor(0.0899073274635, -0.82640295304),\n    new Victor(0.0717468320377, -0.811418479899),\n    new Victor(0.0534666250026, -0.796580103784),\n    new Victor(0.0350671949772, -0.781890267787),\n    new Victor(0.0165500078179, -0.767348483291),\n    new Victor(-0.00208395923779, -0.752956704771),\n    new Victor(-0.0208327517145, -0.738715420845),\n    new Victor(-0.0396958809936, -0.724625608751),\n    new Victor(-0.0586718812184, -0.710688245726),\n    new Victor(-0.0777597751514, -0.69690382039),\n    new Victor(-0.0969580969362, -0.683274287218),\n    new Victor(-0.116265380716, -0.66979964621),\n    new Victor(-0.135680649254, -0.656480874603),\n    new Victor(-0.155202436693, -0.643318949635),\n    new Victor(-0.174829765796, -0.630314359925),\n    new Victor(-0.194561170706, -0.617469059948),\n    new Victor(-0.214395674185, -0.604782561085),\n    new Victor(-0.234331321759, -0.592256329193),\n    new Victor(-0.254367624808, -0.579891341509),\n    new Victor(-0.274502628858, -0.567688086652),\n    new Victor(-0.29394086248, -0.556123456584),\n    new Victor(-0.313469979201, -0.54471371868),\n    new Victor(-0.333088513165, -0.533458384321),\n    new Victor(-0.352795975753, -0.522359407981),\n    new Victor(-0.372590901108, -0.511416789662),\n    new Victor(-0.392471334756, -0.500631017982),\n    new Victor(-0.412437276696, -0.490003070179),\n    new Victor(-0.432486283835, -0.47953392349),\n    new Victor(-0.452617867553, -0.469224066534),\n    new Victor(-0.472830073375, -0.459073499311),\n    new Victor(-0.493122412682, -0.449083687678),\n    new Victor(-0.513493419618, -0.439255120252),\n    new Victor(-0.533941628327, -0.429588285654),\n    new Victor(-0.554465572951, -0.420083183884),\n    new Victor(-0.575064276254, -0.410741769415),\n    new Victor(-0.595736272379, -0.401563065011),\n    new Victor(-0.61648009547, -0.392549025148),\n    new Victor(-0.637294768288, -0.383699161205),\n    new Victor(-0.658179313597, -0.37501493904),\n    new Victor(-0.679131776921, -0.366496358653),\n    new Victor(-0.698898362385, -0.3585812225),\n    new Victor(-0.718729934152, -0.350830262268),\n    new Victor(-0.738624537745, -0.34324250072),\n    new Victor(-0.758581195928, -0.33581989233),\n    new Victor(-0.778598442844, -0.32856194848),\n    new Victor(-0.798674812635, -0.32146915779),\n    new Victor(-0.818809328066, -0.314542497496),\n    new Victor(-0.83900003466, -0.307782456217),\n    new Victor(-0.849647527216, -0.304229708827),\n    new Victor(-0.859482935305, -0.301024369413),\n    new Victor(-0.86930319621, -0.297772122593),\n    new Victor(-0.879107821313, -0.294472968367),\n    new Victor(-0.888896810615, -0.291126906735),\n    new Victor(-0.898669186876, -0.287733937697),\n    new Victor(-0.908425927336, -0.284294061253),\n    new Victor(-0.918165566137, -0.28080825464),\n    new Victor(-0.927888591898, -0.277275540622),\n    new Victor(-0.931015263683, -0.276110673371),\n    new Victor(-0.934077437785, -0.27478553915),\n    new Victor(-0.937066807683, -0.273304046909),\n    new Victor(-0.939975066859, -0.271669128361),\n    new Victor(-0.942794886029, -0.269885669693),\n    new Victor(-0.945518447293, -0.267958557094),\n    new Victor(-0.948138909988, -0.265892676752),\n    new Victor(-0.950648456212, -0.263693892093),\n    new Victor(-0.953040245302, -0.261368066543),\n    new Victor(-0.955308902451, -0.258921063527),\n    new Victor(-0.957447586996, -0.256360212328),\n    new Victor(-0.959450435511, -0.25369186499),\n    new Victor(-0.961260768213, -0.251131991028),\n    new Victor(-0.962993410524, -0.248518368997),\n    new Victor(-0.96464591935, -0.245853930609),\n    new Victor(-0.966217317453, -0.24314063034),\n    new Victor(-0.972878657732, -0.231316055063),\n    new Victor(-0.972926053757, -0.0130031238537),\n    new Victor(-0.972925565138, 0.00628803550555),\n    new Victor(-0.97291628138, 0.0249869888634),\n    new Victor(-0.972898202484, 0.0430570898088),\n    new Victor(-0.972858135742, 0.0776097691758),\n    new Victor(-0.972741844464, 0.112162448543),\n    new Victor(-0.972548351414, 0.146714639291),\n    new Victor(-0.972277656592, 0.181266341421),\n    new Victor(-0.972203875151, 0.189501034277),\n    new Victor(-0.972085629398, 0.197735727134),\n    new Victor(-0.971922919333, 0.205968954135),\n    new Victor(-0.971715256338, 0.214201692516),\n    new Victor(-0.971568670694, 0.217132916776),\n    new Victor(-0.971310679961, 0.220056811754),\n    new Victor(-0.970942749994, 0.222968491261),\n    new Victor(-0.970464880795, 0.225864534966),\n    new Victor(-0.969878049601, 0.228740056681),\n    new Victor(-0.96918274503, 0.231591636074),\n    new Victor(-0.968380432939, 0.234414875576),\n    new Victor(-0.967472090565, 0.237205866236),\n    new Victor(-0.966500716365, 0.23992551855),\n    new Victor(-0.965406210223, 0.242597774839),\n    new Victor(-0.964191015235, 0.245217260296),\n    new Victor(-0.962857085875, 0.247778600114),\n    new Victor(-0.961408331095, 0.250276908105),\n    new Victor(-0.959846705368, 0.252705832225),\n    new Victor(-0.958176117646, 0.255061463523),\n    new Victor(-0.956399499642, 0.257337938573),\n    new Victor(-0.954520760305, 0.259531348425),\n    new Victor(-0.952544297207, 0.261636318272),\n    new Victor(-0.950473530677, 0.263649427781),\n    new Victor(-0.948313346904, 0.265565790766),\n    new Victor(-0.946067654839, 0.267381009657),\n    new Victor(-0.94374134067, 0.269092641359),\n    new Victor(-0.941339779204, 0.270695799685),\n    new Victor(-0.93886736801, 0.27218804154),\n    new Victor(-0.936329481894, 0.273565946593),\n    new Victor(-0.933731007046, 0.274826094512),\n    new Victor(-0.93107829551, 0.27596701944),\n    new Victor(-0.928375744855, 0.276985301047),\n    new Victor(-0.913861323012, 0.282438287001),\n    new Victor(-0.899294130338, 0.287750550737),\n    new Victor(-0.884676121307, 0.292920137779),\n    new Victor(-0.870008761776, 0.297948025366),\n    new Victor(-0.854391527272, 0.303278856616),\n    new Victor(-0.838793348902, 0.308665390412),\n    new Victor(-0.823214226666, 0.314107138133),\n    new Victor(-0.807654649182, 0.319603611161),\n    new Victor(-0.792114127832, 0.325155298116),\n    new Victor(-0.776593639853, 0.330761710377),\n    new Victor(-0.761093185246, 0.336423336564),\n    new Victor(-0.745613252629, 0.342139688058),\n  ];\n}\n\nexport default Vicious1Vertices;\n","import Vicious1Vertices from './Vicious1Vertices'\nimport Shape from '../Shape'\n\nexport default class V1Engineering extends Shape {\n  constructor() {\n    super('V1Engineering')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'v1Engineering',\n      }\n    }\n  }\n\n  getVertices(state) {\n    return Vicious1Vertices()\n  }\n}\n","import { degToRad } from '../common/geometry'\nimport Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    wiperType: {\n      title: 'Type',\n      type: 'dropdown',\n      choices: ['Lines', 'Spiral'],\n    },\n    wiperSize: {\n      title: 'Wiper size',\n      min: 1\n    },\n    wiperAngleDeg: {\n      title: 'Wiper angle',\n      isVisible: (state) => { return state.wiperType === 'Lines' },\n    },\n  }\n}\n\nconst outOfBounds = (point, width, height) => {\n  if (point.x < -width/2.0) {\n    return true\n  }\n  if (point.y < -height/2.0) {\n    return true\n  }\n  if (point.x > width/2.0) {\n    return true\n  }\n  if (point.y > height/2.0) {\n    return true\n  }\n  return false\n}\n\n// Intersect the line with the boundary, and return the point exactly on the boundary.\n// This will keep the shape. i.e. It will follow the line segment, and return the point on that line\n// segment.\nfunction boundPoint(good, bad, size_x, size_y) {\n  var dx = good.x - bad.x\n  var dy = good.y - bad.y\n\n  var fixed = Victor(bad.x, bad.y)\n  var distance = 0\n  if (bad.x < -size_x || bad.x > size_x) {\n    if (bad.x < -size_x) {\n      // we are leaving the left\n      fixed.x = -size_x\n    } else {\n      // we are leaving the right\n      fixed.x = size_x\n    }\n    distance = (fixed.x - good.x) / dx\n    fixed.y = good.y + distance * dy\n    // We fixed x, but y might have the same problem, so we'll rerun this, with different points.\n    return boundPoint(good, fixed, size_x, size_y)\n  }\n  if (bad.y < -size_y || bad.y > size_y) {\n    if (bad.y < -size_y) {\n      // we are leaving the bottom\n      fixed.y = -size_y\n    } else {\n      // we are leaving the top\n      fixed.y = size_y\n    }\n    distance = (fixed.y - good.y) / dy\n    fixed.x = good.x + distance * dx\n  }\n  return fixed\n}\n\nfunction nearEnough(end, point) {\n  if (point.clone().subtract(end).length() < 0.01) {\n    return true\n  }\n  return false\n}\n\nfunction spiralVertices(state) {\n  // Determine the max radius\n  let maxRadius = state.machine.maxRadius\n  if (state.machine.rectangular) {\n    const halfHeight = (state.machine.maxY - state.machine.minY)/2.0\n    const halfWidth = (state.machine.maxX - state.machine.minX)/2.0\n    maxRadius = Math.sqrt(Math.pow(halfHeight, 2.0) + Math.pow(halfWidth, 2.0))\n  }\n\n  var vertices = []\n\n  let emergencyBreak = 0\n  let radius = 0.1\n  let angle = 0\n  const arcLength = 1.0\n  const radiusPerAngle = state.shape.wiperSize / (2.0 * Math.PI)\n  while (radius <= maxRadius) {\n    // Save where we are right now.\n    vertices.push(new Victor(radius * Math.cos(angle), radius * Math.sin(angle)))\n\n    // We want to have the next point be about the right arc length.\n    let deltaAngle = arcLength / radius * 2.0 * Math.PI\n\n    // Limit this at small radii\n    deltaAngle = Math.min(deltaAngle, 0.1)\n\n    // Update for the next point.\n    angle += deltaAngle\n    radius += deltaAngle * radiusPerAngle\n\n    emergencyBreak += 1\n    if (emergencyBreak > 1e9) {\n      // If we get to this point: bail. We did something terrible.\n      break\n    }\n  }\n\n  return vertices\n}\n\nfunction linearVertices(state) {\n  var outputVertices = []\n\n  // Get the angle between 0,180\n  let angle = (180.0 - (state.shape.wiperAngleDeg % 360)) % 180.0\n  if (angle < 0.0) {\n    angle += 180.0\n  }\n  angle = degToRad(angle)\n\n  // Start with the defaults for 0,45\n  let height = 1\n  let width = 1\n  let machine = state.machine\n  if (machine.rectangular) {\n    height = machine.maxY - machine.minY\n    width = machine.maxX - machine.minX\n  } else {\n    height = machine.maxRadius * 2.0\n    width = height\n  }\n\n  let startLocation = Victor(-width/2.0, height/2.0)\n  let cosa = Math.cos(angle)\n  let sina = Math.sin(angle)\n\n  // These can be zero, but infinity isn't great for out math, so let's just clip it.\n  if (Math.abs(cosa) < 1.0e-10) {\n    cosa = 1.0e-10\n  }\n  if (Math.abs(sina) < 1.0e-10) {\n    sina = 1.0e-10\n  }\n  let orig_delta_w = Victor(state.shape.wiperSize / cosa, 0.0)\n  let orig_delta_h = Victor(0.0, -state.shape.wiperSize / sina)\n\n  if (angle > Math.PI/4.0 && angle < 0.75 * Math.PI) {\n    // flip the logic of x,y\n    let temp = orig_delta_w.clone()\n    orig_delta_w = orig_delta_h.clone()\n    orig_delta_h = temp\n  }\n  if (angle > Math.PI/2.0) {\n    startLocation = Victor(-width/2.0, -height/2.0)\n    orig_delta_w = orig_delta_w.clone().multiply(Victor(-1.0, -1.0))\n    orig_delta_h = orig_delta_h.clone().multiply(Victor(-1.0, -1.0))\n  }\n  let delta_w = orig_delta_w\n  let delta_h = orig_delta_h\n  let endLocation = startLocation.clone().multiply(Victor(-1.0, -1.0))\n  outputVertices.push(startLocation)\n  let nextWidthPoint = startLocation\n  let nextHeightPoint = startLocation\n\n  let emergency_break = 0\n  while (emergency_break < 1000) {\n    emergency_break += 1\n\n    // \"right\"\n    nextWidthPoint = nextWidthPoint.clone().add(delta_w)\n    if (outOfBounds(nextWidthPoint, width, height)) {\n      let corner = boundPoint(nextWidthPoint.clone().subtract(delta_w), nextWidthPoint, width/2.0, height/2.0)\n      outputVertices.push(corner)\n      if (nearEnough(endLocation, corner)) {\n        break\n      }\n      nextWidthPoint = boundPoint(nextHeightPoint, nextWidthPoint, width/2.0, height/2.0)\n      delta_w = orig_delta_h\n    }\n    outputVertices.push(nextWidthPoint)\n    if (nearEnough(endLocation, nextWidthPoint)) {\n      break\n    }\n\n    // \"down-left\"\n    nextHeightPoint = nextHeightPoint.clone().add(delta_h)\n    if (outOfBounds(nextHeightPoint, width, height)) {\n      nextHeightPoint = boundPoint(nextWidthPoint, nextHeightPoint, width/2.0, height/2.0)\n      delta_h = orig_delta_w\n    }\n    outputVertices.push(nextHeightPoint)\n    if (nearEnough(endLocation, nextHeightPoint)) {\n      break\n    }\n\n    // \"down\"\n    nextHeightPoint = nextHeightPoint.clone().add(delta_h)\n    outputVertices.push(nextHeightPoint)\n    if (nearEnough(endLocation, nextHeightPoint)) {\n      break\n    }\n    if (outOfBounds(nextHeightPoint, width, height)) {\n      let corner = boundPoint(nextHeightPoint.clone().subtract(delta_h), nextHeightPoint, width/2.0, height/2.0)\n      outputVertices.push(corner)\n      if (nearEnough(endLocation, corner)) {\n        break\n      }\n      nextHeightPoint = boundPoint(nextWidthPoint, nextHeightPoint, width/2.0, height/2.0)\n      delta_h = orig_delta_w\n    }\n    outputVertices.push(nextHeightPoint)\n    if (nearEnough(endLocation, nextHeightPoint)) {\n      break\n    }\n\n    // \"up-right\"\n    nextWidthPoint = nextWidthPoint.clone().add(delta_w)\n    outputVertices.push(nextWidthPoint)\n    if (nearEnough(endLocation, nextWidthPoint)) {\n      break\n    }\n    if (outOfBounds(nextWidthPoint, width, height)) {\n      nextWidthPoint = boundPoint(nextHeightPoint, nextWidthPoint, width/2.0, height/2.0)\n      delta_w = orig_delta_h\n    }\n  }\n  return outputVertices\n}\n\nexport default class Wiper extends Shape {\n  constructor() {\n    super('Wiper')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'wiper',\n        wiperAngleDeg: 15,\n        wiperSize: 12,\n        wiperType: 'Lines',\n        selectGroup: 'Erasers',\n        canTransform: false,\n        shouldCache: false,\n      }\n    }\n  }\n\n  getInitialTransformState() {\n    return {\n      ...super.getInitialTransformState(),\n      ...{\n        startingSize: 1,\n        canChangeSize: false,\n        repeatEnabled: false,\n      }\n    }\n  }\n\n  getVertices(state) {\n    if (state.shape.wiperType === 'Lines') {\n      return linearVertices(state)\n    } else {\n      return spiralVertices(state)\n    }\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Circle from '../models/Circle'\nimport Epicycloid from '../models/Epicycloid'\nimport FractalSpirograph from '../models/fractal_spirograph/FractalSpirograph'\nimport Heart from '../models/Heart'\nimport Hypocycloid from '../models/Hypocycloid'\nimport InputText from '../models/input_text/InputText'\nimport LSystem from '../models/lsystem/LSystem'\nimport Polygon from '../models/Polygon'\nimport Reuleaux from '../models/Reuleaux'\nimport Rose from '../models/Rose'\nimport SpaceFiller from '../models/space_filler/SpaceFiller'\nimport Star from '../models/Star'\nimport TessellationTwist from '../models/tessellation_twist/TessellationTwist'\nimport V1Engineering from '../models/v1_engineering/V1Engineering'\nimport Wiper from '../models/Wiper'\n\n/*----------------------------------------------\nSupported input shapes\n-----------------------------------------------*/\nexport const registeredShapes = {\n  polygon: new Polygon(),\n  star: new Star(),\n  circle: new Circle(),\n  heart: new Heart(),\n  reuleaux: new Reuleaux(),\n  epicycloid: new Epicycloid(),\n  hypocycloid: new Hypocycloid(),\n  rose: new Rose(),\n  inputText: new InputText(),\n  v1Engineering: new V1Engineering(),\n  lsystem: new LSystem(),\n  fractal_spirograph: new FractalSpirograph(),\n  tessellation_twist: new TessellationTwist(),\n  wiper: new Wiper(),\n  space_filler: new SpaceFiller()\n}\n","import { createSelector } from 'reselect'\nimport { registeredShapes } from '../../common/registeredShapes'\n\nconst getShapes = state => state.shapes\nconst getTransforms = state => state.transforms\nconst getCurrentShapeId = state => state.shapes.currentId\n\nexport const getShapesSelector = createSelector(\n  [ getShapes ],\n  shapes => shapes.allIds.map(id => shapes.byId[id])\n)\nexport const getCurrentShapeSelector = createSelector(\n  [ getCurrentShapeId, getShapes ],\n  (id, shapes) => shapes.byId[id]\n)\n\nexport const getCurrentTransformSelector = createSelector(\n  [ getCurrentShapeId, getTransforms ],\n  (id, transforms) => transforms.byId[id]\n)\n\nexport const getShape = (shape) => {\n  return registeredShapes[shape.type]\n}\n\nexport const getShapeById = (id) => {\n  return registeredShapes[id]\n}\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  updateTransform,\n  toggleGrow\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../models/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.growEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onGrow: () => {\n      dispatch(toggleGrow({id: id}))\n    },\n  }\n}\n\nclass ScaleTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={`${activeClassName} overflow-auto`}>\n          <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onGrow}>\n            <h3>Scale</h3>\n            Grows or shrinks the shape\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={0}>\n            <Card.Body>\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"growValue\"\n                optionKey=\"growValue\"\n                index={0}\n                model={this.props.transform} />\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ScaleTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  toggleSpin,\n  updateTransform,\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../models/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.spinEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onSpin: () => {\n      dispatch(toggleSpin({id: id}))\n    },\n  }\n}\n\nclass RotationTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={`${activeClassName} overflow-auto`}>\n          <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onSpin}>\n            <h3>Spin</h3>\n            Spins the shape\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={0}>\n            <Card.Body>\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"spinValue\"\n                optionKey=\"spinValue\"\n                index={0}\n                model={this.props.transform} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"spinSwitchbacks\"\n                optionKey=\"spinSwitchbacks\"\n                index={0}\n                model={this.props.transform} />\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RotationTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  toggleTrack,\n  toggleTrackGrow,\n  updateTransform\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../models/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.trackEnabled,\n    activeGrow: transform.trackGrowEnabled,\n    options: new Transform().getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onTrack: () => {\n      dispatch(toggleTrack({id: id}))\n    },\n    onTrackGrow: () => {\n      dispatch(toggleTrackGrow({id: id}))\n    },\n  }\n}\n\nclass TrackTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n    const activeGrowClassName = this.props.activeGrow ? 'active' : ''\n    const activeGrowKey = this.props.activeGrow ? 0 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={activeClassName}>\n          <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onTrack}>\n            <h3>Track</h3>\n            Moves the shape along a track (shown in green)\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={0}>\n            <Card.Body>\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackValue\"\n                optionKey=\"trackValue\"\n                index={0}\n                model={this.props.transform} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackLength\"\n                optionKey=\"trackLength\"\n                index={0}\n                step={0.05}\n                model={this.props.transform} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackNumLoops\"\n                optionKey=\"trackNumLoops\"\n                index={0}\n                model={this.props.transform} />\n\n              <Accordion defaultActiveKey={activeGrowKey} className=\"mt-3\">\n                <Card className={activeGrowClassName}>\n                  <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onTrackGrow}>\n                    <h3>Scale track</h3>\n                    Grows or shrinks the track\n                  </Accordion.Toggle>\n\n                  <Accordion.Collapse eventKey={0}>\n                    <Card.Body>\n                      <InputOption\n                        onChange={this.props.onChange}\n                        options={this.props.options}\n                        key=\"trackGrow\"\n                        optionKey=\"trackGrow\"\n                        index={0}\n                        model={this.props.transform} />\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              </Accordion>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TrackTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card,\n  Row,\n  Col,\n  Form,\n  ToggleButton,\n  ToggleButtonGroup\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  updateTransform,\n  toggleRepeat\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../models/Transform'\nimport ScaleTransform from './ScaleTransform'\nimport RotationTransform from './RotationTransform'\nimport TrackTransform from './TrackTransform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.repeatEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onRepeat: () => {\n      dispatch(toggleRepeat({id: id}))\n    },\n    ontransformMethodChange: (value) => {\n      dispatch(updateTransform({ transformMethod: value, id: id}))\n    }\n  }\n}\n\nclass Transforms extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n\n    return (\n      <div className=\"transforms\">\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"startingSize\"\n          optionKey=\"startingSize\"\n          index={0}\n          model={this.props.transform} />\n\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"offsetX\"\n          optionKey=\"offsetX\"\n          index={0}\n          model={this.props.transform} />\n\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"offsetY\"\n          optionKey=\"offsetY\"\n          index={0}\n          model={this.props.transform} />\n\n        <Accordion className=\"mt-3\" defaultActiveKey={activeKey} activeKey={activeKey}>\n          <Card className={activeClassName}>\n            <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onRepeat}>\n              <h3>Loop and transform</h3>\n              Draws the shape multiple times, transforming it each time.\n            </Accordion.Toggle>\n\n            <Accordion.Collapse eventKey={0}>\n              <Card.Body>\n                <InputOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  key=\"numLoops\"\n                  optionKey=\"numLoops\"\n                  index={0}\n                  model={this.props.transform} />\n\n                  <Row className=\"align-items-center pb-2\">\n                    <Col sm={5}>\n                      <Form.Label htmlFor=\"transformMethod\">\n                        When transforming shape\n                      </Form.Label>\n                    </Col>\n\n                    <Col sm={7}>\n                      <ToggleButtonGroup id=\"transformMethod\" type=\"radio\" name=\"transformMethod\" value={this.props.transform.transformMethod} onChange={this.props.ontransformMethodChange}>\n                        <ToggleButton variant=\"light\" value=\"smear\">smear</ToggleButton>\n                        <ToggleButton variant=\"light\" value=\"intact\">keep intact</ToggleButton>\n                      </ToggleButtonGroup>\n                    </Col>\n                  </Row>\n\n                  <Accordion className=\"mt-3\">\n                    <ScaleTransform id={this.props.transform.id} />\n                    <RotationTransform id={this.props.transform.id} />\n                    <TrackTransform id={this.props.transform.id} />\n                  </Accordion>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transforms)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Button,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport DropdownOption from '../../components/DropdownOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport Transforms from '../transforms/Transforms'\nimport { updateShape } from './shapesSlice'\nimport { updateTransform } from '../transforms/transformsSlice'\nimport {\n  getShape,\n  getShapeById,\n  getCurrentShapeSelector\n} from './selectors'\nimport Transform from '../../models/Transform'\nimport './Shape.css'\n\nconst mapStateToProps = (state, ownProps) => {\n  const shape = getCurrentShapeSelector(state)\n  const metashape = getShape(shape)\n\n  return {\n    shape: shape,\n    options: metashape.getOptions(),\n    link: metashape.link,\n    linkText: metashape.linkText\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n  const metashape = getShapeById(id)\n  const metatransform = new Transform()\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateShape(attrs))\n    },\n    onRestoreDefaults: (event) => {\n      let attrs = metashape.getInitialState()\n      attrs.id = id\n\n      let tAttrs = {\n        ...{id: id},\n        ...metatransform.getInitialState(),\n        ...metashape.getInitialTransformState()\n      }\n\n      dispatch(updateShape(attrs))\n      dispatch(updateTransform(tAttrs))\n    }\n  }\n}\n\nclass Shape extends Component {\n  render() {\n    const optionsRender = Object.keys(this.props.options).map((key, index) => {\n      const option = this.props.options[key]\n\n      if (option.type === 'dropdown') {\n        return  <DropdownOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.shape} />\n      } else if (option.type === 'checkbox') {\n        return <CheckboxOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.shape} />\n      } else {\n        return  <InputOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.shape} />\n      }\n    })\n\n    let optionsListRender = undefined\n    if (Object.entries(this.props.options).length > 0) {\n      const linkText = this.props.linkText || this.props.link\n      const linkRender = this.props.link ? <p className=\"mb-3\">See <a target=\"_blank\" rel=\"noopener noreferrer\" href={this.props.link}>{linkText}</a> for ideas.</p> : undefined\n\n      optionsListRender =\n        <div className=\"shape-options\">\n          {linkRender}\n          {optionsRender}\n        </div>\n    }\n\n    return (\n      <div className=\"pt-1\">\n        <div className=\"d-flex align-items-center pt-1 pb-3\">\n          <Button variant=\"outline-primary\" size=\"sm\" onClick={this.props.onRestoreDefaults}>Restore defaults</Button>\n        </div>\n        { optionsListRender }\n        { this.props.shape.canTransform && <Transforms id={this.props.shape.id} />}\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Shape)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  Card\n} from 'react-bootstrap'\nimport Select from 'react-select'\n\nimport {\n  setCurrentShape,\n} from '../shapes/shapesSlice'\nimport Shape from './Shape'\nimport {\n  getShapesSelector,\n  getCurrentShapeSelector\n} from './selectors'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    currentShape: getCurrentShapeSelector(state),\n    shapes: getShapesSelector(state)\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    setCurrentShape: (selected) => {\n      dispatch(setCurrentShape(selected.value))\n    },\n  }\n}\n\nconst customStyles = {\n  control: base => ({\n    ...base,\n    height: 55,\n    minHeight: 55\n  })\n}\n\nclass ShapeList extends Component {\n  render() {\n    const groupOptions = []\n    for (const shape of this.props.shapes) {\n      const optionLabel = { value: shape.id, label: shape.name }\n      var found = false\n      for (const group of groupOptions) {\n        if (group.label === shape.selectGroup) {\n          found = true\n          group.options.push(optionLabel)\n        }\n      }\n      if (!found) {\n        const newOptions = [ optionLabel ]\n        groupOptions.push( { label: shape.selectGroup, options: newOptions } )\n      }\n    }\n\n    const selectedOption = {\n      value: this.props.currentShape.id,\n      label: this.props.currentShape.name\n    }\n\n    return (\n      <div>\n        <Card className=\"p-3 border-0\">\n          <Select\n            value={selectedOption}\n            onChange={this.props.setCurrentShape}\n            styles={customStyles}\n            maxMenuHeight={305}\n            options={groupOptions} />\n\n          <Shape key={this.props.currentShape.id} id={this.props.currentShape.id} />\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShapeList)\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst importerSlice = createSlice({\n  name: 'importer',\n  initialState: {\n    fileName: '',\n    comments: [],\n    vertices: [],\n    zoom: 100,\n    originalAspectRatio: 1.0,\n    aspectRatio: false,\n  },\n  reducers: {\n    updateImporter(state, action) {\n      Object.assign(state, action.payload)\n    },\n    toggleFileAspectRatio(state, action) {\n      state.aspectRatio = !state.aspectRatio\n    },\n  }\n})\n\nexport const {\n  updateImporter,\n  toggleFileAspectRatio\n} = importerSlice.actions\n\nexport default importerSlice.reducer\n","export default class Importer {\n  constructor(fileName, text) {\n    this.fileName = fileName\n    this.text = text\n  }\n}\n","import Importer from './Importer'\n\nexport default class ThetaRhoImporter extends Importer {\n  constructor(fileName, text) {\n    super(fileName, text)\n    this.label = 'ThetaRho'\n  }\n\n  // calls callback, returning an object containing relevant properties\n  import(callback) {\n    let hasVertex = false\n    let props = {\n      comments: [],\n      originalAspectRatio: 1.0,\n      fileName: this.fileName\n    }\n\n    let lines = this.text.split('\\n')\n    let thetaRhos = []\n\n    for (let ii = 0; ii < lines.length; ii++) {\n      var line = lines[ii].trim()\n\n      if (line.length === 0) {\n        // blank lines\n        continue\n      }\n\n      if (line.indexOf(\"#\") === 0 && !hasVertex) {\n        props.comments.push(lines[ii])\n      }\n\n      if (line.indexOf(\"#\") !== 0) {\n        hasVertex = true\n\n        // This is a point, let's try to read it.\n        var pointStrings = line.split(/\\s+/)\n        if (pointStrings.length !== 2) {\n          continue\n        }\n\n        thetaRhos.push([parseFloat(pointStrings[0]), parseFloat(pointStrings[1])])\n      }\n    }\n\n    props.vertices = this.convertToXY(thetaRhos)\n    callback(this, props)\n  }\n\n  convertToXY(thetaRhos) {\n    var vertices = []\n    var previous = undefined\n    var max_angle = Math.PI / 64.0\n    for (let ii = 0; ii < thetaRhos.length; ii++) {\n      var next = thetaRhos[ii]\n      if (previous) {\n        if (Math.abs(next[0] - previous[0]) < max_angle) {\n          // These sin, cos elements are inverted. I'm not sure why\n          vertices.push({\n                        x: previous[1] * Math.sin(previous[0]),\n                        y: previous[1] * Math.cos(previous[0])\n          })\n        } else {\n          // We need to do some interpolating.\n          let deltaAngle = next[0] - previous[0]\n          let rhoStep = max_angle / Math.abs(deltaAngle) * (next[1] - previous[1])\n          var rho = previous[1]\n          if (deltaAngle > 0.0) {\n            var emergency_break = 0\n            for (let angle = previous[0]; angle < next[0]; angle += max_angle, rho += rhoStep) {\n              vertices.push({\n                            x: rho * Math.sin(angle),\n                            y: rho * Math.cos(angle)\n              })\n              if (emergency_break++ > 100000) {\n                break\n              }\n            }\n          } else {\n            for (let angle = previous[0]; angle > next[0]; angle -= max_angle, rho += rhoStep) {\n              vertices.push({\n                            x: rho * Math.sin(angle),\n                            y: rho * Math.cos(angle)\n              })\n              if (emergency_break++ > 100000) {\n                break\n              }\n            }\n          }\n        }\n      }\n      previous = next\n    }\n    return vertices\n  }\n}\n","import Importer from './Importer'\nimport Toolpath from 'gcode-toolpath';\n\nexport default class GCodeImporter extends Importer {\n  constructor(fileName, text) {\n    super(fileName, text)\n    this.label = 'Gcode'\n  }\n\n  // calls callback, returning an object containing relevant properties\n  import(callback) {\n    let props = {\n      comments: [],\n      vertices: [],\n      fileName: this.fileName\n    }\n    let lines = this.text.split('\\n')\n\n    // This assumes the line is already trimmed and not empty.\n    // The paranthesis isn't perfect, since it usually has a match, but I don't think anyone will\n    // care. I think there are firmwares that do this same kind of hack.\n    const isComment = (line) => {\n      return (line.indexOf(\";\") === 0) || (line.indexOf('(') === 0)\n    }\n\n    const addVertex = (x, y) => {\n      props.vertices.push({x: x,y: y})\n    }\n\n    // Read the initial comments\n    for (let ii = 0; ii < lines.length; ii++) {\n      let line = lines[ii].trim()\n      if (line.length === 0) {\n        // blank lines\n        continue\n      }\n      if (isComment(line)) {\n        props.comments.push(lines[ii])\n      } else {\n        break\n      }\n    }\n\n    // GCode reader object. More info here:\n    // https://github.com/cncjs/gcode-toolpath/blob/master/README.md\n    const toolpath = new Toolpath({\n      // @param {object} modal The modal object.\n      // @param {object} v1 A 3D vector of the start point.\n      // @param {object} v2 A 3D vector of the end point.\n      addLine: (modal, v1, v2) => {\n        if (v1.x !== v2.x || v1.y !== v2.y) {\n          addVertex(v2.x, v2.y)\n        }\n      },\n      // @param {object} modal The modal object.\n      // @param {object} v1 A 3D vector of the start point.\n      // @param {object} v2 A 3D vector of the end point.\n      // @param {object} v0 A 3D vector of the fixed point.\n      addArcCurve: (modal, v1, v2, v0) => {\n        if (v1.x !== v2.x || v1.y !== v2.y) {\n          // We can't use traceCircle, we have to go a specific direction (not the shortest path).\n          let startTheta = Math.atan2(v1.y-v0.y, v1.x-v0.x)\n          let endTheta   = Math.atan2(v2.y-v0.y, v2.x-v0.x)\n          let deltaTheta = endTheta - startTheta\n          const radius   = Math.sqrt(Math.pow(v2.x-v0.x, 2.0) + Math.pow(v2.y-v0.y, 2.0))\n          let direction  = 1.0 // Positive, so anticlockwise.\n\n          // Clockwise\n          if (modal.motion === 'G2') {\n            if (deltaTheta > 0.0) {\n              endTheta -= 2.0*Math.PI\n              deltaTheta -= 2.0*Math.PI\n            }\n            direction = -1.0\n          } else if (modal.motion === 'G3') {\n            // Anti-clockwise\n            if (deltaTheta < 0.0) {\n              endTheta += 2.0*Math.PI\n              deltaTheta += 2.0*Math.PI\n            }\n          }\n\n          // What angle do we need to have a resolution of approx. 0.5mm?\n          const arcResolution = 0.5\n          const arcLength = Math.abs(deltaTheta) * radius\n          const thetaStep = deltaTheta * arcResolution/arcLength\n          for (let theta = startTheta;\n               direction * theta <= direction * endTheta;\n               theta += thetaStep) {\n            addVertex(v0.x + radius * Math.cos(theta), v0.y + radius * Math.sin(theta))\n          }\n          // Save the final point, in case our math didn't quite get there.\n          addVertex(v2.x, v2.y)\n        }\n      }\n    });\n\n    toolpath.loadFromString(this.text, (err, results) => {\n      callback(this, this.normalizeCoords(props))\n    })\n  }\n\n  normalizeCoords(props) {\n    const vertices = props.vertices\n    let minX = 1e9\n    let minY = 1e9\n    let maxX = -1e9\n    let maxY = -1e9\n\n    vertices.forEach( (vertex) => {\n      minX = Math.min(vertex.x, minX)\n      minY = Math.min(vertex.y, minY)\n      maxX = Math.max(vertex.x, maxX)\n      maxY = Math.max(vertex.y, maxY)\n    })\n\n    const offsetX = (maxX + minX)/2.0\n    const offsetY = (maxY + minY)/2.0\n    const scaleX = 1.0/(maxX - offsetX)\n    const scaleY = 1.0/(maxY - offsetY)\n\n    props.originalAspectRatio = scaleX/scaleY\n    props.vertices = vertices.map(vertex => {\n      return {\n        x: scaleX * (vertex.x - offsetX),\n        y: scaleY * (vertex.y - offsetY)\n      }\n    })\n\n    return props\n  }\n}\n","const importerOptions = {\n  zoom: {\n    title: 'Zoom',\n    min: 1\n  },\n  aspectRatio: {\n    title: 'Keep original aspect ratio',\n    type: 'checkbox',\n  },\n}\n\nexport default class Importer {\n  getOptions() {\n    return importerOptions\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Card,\n    Form,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport {\n  updateImporter,\n  toggleFileAspectRatio\n} from './importerSlice'\nimport './Uploader.scss'\nimport ReactGA from 'react-ga'\nimport ThetaRhoImporter from './ThetaRhoImporter'\nimport GCodeImporter from './GCodeImporter'\nimport Importer from '../../models/Importer'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    fileName: state.importer.fileName,\n    comments: state.importer.comments,\n    vertices: state.importer.vertices,\n    zoom: state.importer.zoom,\n    aspectRatio: state.importer.aspectRatio,\n    options: new Importer().getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    setZoom: (event) => {\n      dispatch(updateImporter({zoom: parseFloat(event.target.value)}))\n    },\n    toggleAspectRatio: (event) => {\n      dispatch(toggleFileAspectRatio())\n    },\n    onChange: (attrs) => {\n      dispatch(updateImporter(attrs))\n    },\n  }\n}\n\nclass Uploader extends Component {\n  onFileImported(importer, importerProps) {\n    this.props.onChange(importerProps)\n\n    this.endTime = performance.now()\n    ReactGA.timing({\n      category: 'PatternImport',\n      variable: 'read' + importer.label,\n      value: this.endTime - this.startTime // in milliseconds\n    })\n  }\n\n  onFileSelected(event) {\n    let file = event.target.files[0]\n    let reader = new FileReader()\n\n    reader.onload = (event) => {\n      this.startTime = performance.now()\n      var text = reader.result\n\n      let importer\n      if (file.name.toLowerCase().endsWith('.thr')) {\n        importer = new ThetaRhoImporter(file.name, text)\n      } else if (file.name.toLowerCase().endsWith('.gcode') || file.name.toLowerCase().endsWith('.nc')) {\n        importer = new GCodeImporter(file.name, text)\n      }\n\n      importer.import(this.onFileImported.bind(this))\n    }\n\n    reader.readAsText(file)\n  }\n\n  render() {\n    var commentsRender = this.props.comments.map((comment, index) => {\n      return <span key={index}>{comment}<br/></span>\n    })\n\n    return (\n      <div>\n        <Card className=\"p-3 pb-4\">\n          <Accordion className=\"mb-4\">\n            <Card>\n              <Card.Header as={Form.Label} htmlFor=\"fileUpload\" style={{ cursor: \"pointer\" }}>\n                <h3>Import</h3>\n                Imports a pattern from a .thr, .gcode, or .nc file.\n                <Form.Control\n                    id=\"fileUpload\"\n                    type=\"file\"\n                    accept=\".thr,.gcode,.nc\"\n                    onChange={this.onFileSelected.bind(this)}\n                    style={{ display: \"none\" }} />\n              </Card.Header>\n            </Card>\n          </Accordion>\n\n          <CheckboxOption\n            onChange={this.props.onChange}\n            options={this.props.options}\n            optionKey=\"aspectRatio\"\n            key=\"aspectRatio\"\n            index={1}\n            model={this.props} />\n\n          <InputOption\n            onChange={this.props.onChange}\n            options={this.props.options}\n            key=\"zoom\"\n            optionKey=\"zoom\"\n            index={2}\n            model={this.props} />\n\n          { this.props.fileName && <div id=\"importer-comments\" className=\"mt-4 p-3\">\n            Name: {this.props.fileName} <br />\n            Number of points: {this.props.vertices.length } <br />\n            Comments:\n            <div className=\"ml-3\">\n              { commentsRender }\n            </div>\n          </div>}\n        </Card>\n\n        <div className=\"p-4\">\n          <h3>Where to get .thr files</h3>\n          Sisyphus machines use theta rho (.thr) files. There is a large community sharing them.\n          <ul className=\"list-unstyled\">\n            <li><a href=\"https://reddit.com/u/markyland\">Markyland on Reddit</a></li>\n            <li><a href=\"https://github.com/Dithermaster/sisyphus/\">Dithermaster's github</a></li>\n            <li><a href=\"https://github.com/SlightlyLoony/JSisyphus\">JSisyphus by Slightly Loony</a></li>\n            <li><a href=\"https://reddit.com/r/SisyphusIndustries\">Sisyphus on Reddit</a></li>\n            <li><a href=\"https://sisyphus-industries.com/community/community-tracks\">Sisyphus Community</a></li>\n            <li><a href=\"http://thejuggler.net/sisyphus/\">The Juggler</a></li>\n          </ul>\n\n          <h4 className=\"mt-3\">Note about copyrights</h4>\n          <p>Be careful and respectful. Understand that the original author put their labor, intensity, and ideas into this art. The creators have a right to own it (and they have a copyright, even if it doesn't say so).</p>\n          <p>If you don't have permisson (a license) to use their art, then you shouldn't be. If you do have permission to use their art, then you should be thankful, and I'm sure they would appreciate you sending them a note of thanks. A picture of your table creating their shared art would probably make them smile.</p>\n          <p>Someone posting the .thr file to a forum or subreddit probably wants it to be shared, and drawing it on your home table is probably OK. Just be careful if you want to use them for something significant without explicit permission.</p>\n          <p>I am not a lawyer.</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Uploader)\n","const machineOptions = {\n  minX: {\n    title: 'Min X (mm)',\n  },\n  maxX: {\n    title: 'Max X (mm)',\n  },\n  minY: {\n    title: 'Min Y (mm)',\n  },\n  maxY: {\n    title: 'Max Y (mm)',\n  },\n  origin: {\n    title: 'Force origin'\n  },\n  maxRadius: {\n    title: 'Max radius (mm)'\n  },\n  minimizeMoves: {\n    title: 'Try to minimize perimeter moves',\n    type: 'checkbox'\n  },\n  polarEndPoint: {\n    title: 'End point'\n  },\n  polarStartPoint: {\n    title: 'Start point'\n  }\n}\n\nexport default class Machine {\n  getOptions() {\n    return machineOptions\n  }\n}\n","import { createSlice } from \"@reduxjs/toolkit\"\n\n// accommodate old and new local storage keys\nconst localMinX = parseFloat(localStorage.getItem('minX') || localStorage.getItem('machine_min_x'))\nconst localMaxX = parseFloat(localStorage.getItem('maxX') || localStorage.getItem('machine_max_x'))\nconst localMinY = parseFloat(localStorage.getItem('minY') || localStorage.getItem('machine_min_y'))\nconst localMaxY = parseFloat(localStorage.getItem('maxY') || localStorage.getItem('machine_max_y'))\nconst localMaxRadius = parseFloat(localStorage.getItem('maxRadius') || localStorage.getItem('machine_radius'))\n\nconst machineSlice = createSlice({\n  name: 'machine',\n  initialState: {\n    rectangular: undefined !== localStorage.getItem('machine_rect_active') ? localStorage.getItem('machine_rect_active') < 2 : true,\n    rectExpanded: false,\n    polarExpanded: false,\n    minX: localMinX || 0,\n    maxX: localMaxX || 500,\n    minY: localMinY || 0,\n    maxY: localMaxY || 500,\n    maxRadius: localMaxRadius || 250,\n    minimizeMoves: JSON.parse(localStorage.getItem('minimizeMoves')) || false,\n    rectOrigin: [],\n    polarStartPoint: 'none',\n    polarEndPoint: 'none'\n  },\n  reducers: {\n    updateMachine(state, action) {\n      Object.assign(state, action.payload)\n      Object.keys(action.payload).forEach(key => {\n        localStorage.setItem(key, action.payload[key])\n      })\n    },\n    toggleMachineRectExpanded(state, action) {\n      state.rectangular = true\n      state.rectExpanded = !state.rectExpanded\n      state.polarExpanded = false\n      localStorage.setItem('machine_rect_active', 1)\n    },\n    toggleMachinePolarExpanded(state, action) {\n      state.rectangular = false\n      state.rectExpanded = false\n      state.polarExpanded = !state.polarExpanded\n      localStorage.setItem('machine_rect_active', 2)\n    },\n    setMachineRectOrigin(state, action) {\n      let newValue = []\n      let value = action.payload\n\n      for (let i = 0; i < value.length ; i++) {\n        if (!state.rectOrigin.includes(value[i])) {\n          newValue.push(value[i])\n          break\n        }\n      }\n      state.rectOrigin = newValue\n    },\n    toggleMinimizeMoves(state, action) {\n      state.minimizeMoves = !state.minimizeMoves\n      localStorage.setItem('minimizeMoves', state.minimizeMoves)\n    },\n  }\n})\n\nexport const {\n  updateMachine,\n  toggleMachineRectExpanded,\n  toggleMachinePolarExpanded,\n  setMachineRectOrigin,\n  setMachineSize,\n  toggleMinimizeMoves,\n} = machineSlice.actions\n\nexport default machineSlice.reducer\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Card,\n    Col,\n    Form,\n    Row,\n    ToggleButton,\n    ToggleButtonGroup,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport Machine from '../../models/Machine'\nimport {\n  updateMachine,\n  toggleMinimizeMoves,\n  toggleMachineRectExpanded,\n  setMachineRectOrigin\n} from './machineSlice'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    expanded: state.machine.rectExpanded,\n    active:   state.machine.rectangular,\n    minX:    state.machine.minX,\n    maxX:    state.machine.maxX,\n    minY:    state.machine.minY,\n    maxY:    state.machine.maxY,\n    origin:   state.machine.rectOrigin,\n    minimizeMoves: state.machine.minimizeMoves,\n    options: new Machine().getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    activeCallback: (event) => {\n      dispatch(toggleMachineRectExpanded())\n    },\n    onChange: (attrs) => {\n      dispatch(updateMachine(attrs))\n    },\n    onOriginChange: (value) => {\n      dispatch(setMachineRectOrigin(value))\n    },\n    toggleMinimizeMoves: () => {\n      dispatch(toggleMinimizeMoves());\n    },\n  }\n}\n\nclass RectSettings extends Component {\n  render() {\n    var activeClassName = this.props.active ? 'active' : ''\n\n    return (\n      <Card className={`${activeClassName} overflow-auto`}>\n        <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.activeCallback}>\n          <h3>Rectangular machine</h3>\n          Rectangular machines like Zen XY\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey={0}>\n          <Card.Body>\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"minX\"\n              optionKey=\"minX\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"maxX\"\n              optionKey=\"maxX\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"minY\"\n              optionKey=\"minY\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"maxY\"\n              optionKey=\"maxY\"\n              index={0}\n              model={this.props} />\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"origin\">\n                  Force origin\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <ToggleButtonGroup id=\"origin-bar\" type=\"checkbox\" name=\"origin\" className=\"flex-wrap\" value={this.props.origin} onChange={this.props.onOriginChange}>\n                  <ToggleButton variant=\"light\" value={1} >upper left</ToggleButton>\n                  <ToggleButton variant=\"light\" value={2} >upper right</ToggleButton>\n                  <ToggleButton variant=\"light\" value={0} >lower left</ToggleButton>\n                  <ToggleButton variant=\"light\" value={3} >lower right</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n\n            <CheckboxOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              optionKey=\"minimizeMoves\"\n              key=\"minimizeMoves\"\n              index={0}\n              model={this.props} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RectSettings)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Col,\n    Row,\n    Form,\n    Card,\n    ToggleButton,\n    ToggleButtonGroup\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport Machine from '../../models/Machine'\nimport {\n  toggleMachinePolarExpanded,\n  updateMachine,\n  toggleMinimizeMoves\n} from './machineSlice'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    expanded: state.machine.polarExpanded,\n    active: !state.machine.rectangular,\n    maxRadius: state.machine.maxRadius,\n    startPoint: state.machine.polarStartPoint,\n    endPoint: state.machine.polarEndPoint,\n    minimizeMoves: state.machine.minimizeMoves,\n    options: new Machine().getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    activeCallback: (event) => {\n      dispatch(toggleMachinePolarExpanded())\n    },\n    onChange: (attrs) => {\n      dispatch(updateMachine(attrs))\n    },\n    onStartPointChange: (value) => {\n      dispatch(updateMachine({polarStartPoint: value}))\n    },\n    onEndPointChange: (value) => {\n      dispatch(updateMachine({polarEndPoint: value}))\n    },\n    toggleMinimizeMoves: () => {\n      dispatch(toggleMinimizeMoves())\n    },\n  }\n}\n\nclass PolarSettings extends Component {\n  render() {\n    var activeClassName = this.props.active ? 'active' : ''\n\n    return (\n      <Card className={`${activeClassName} overflow-auto`}>\n        <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.activeCallback}>\n          <h3>Polar machine</h3>\n          Polar machines like Sisyphus\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey={1}>\n          <Card.Body>\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"maxRadius\"\n              optionKey=\"maxRadius\"\n              index={0}\n              model={this.props} />\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"forceStart\">\n                  Start point\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <ToggleButtonGroup id=\"startPoint\" type=\"radio\" name=\"startPoint\" value={this.props.startPoint} onChange={this.props.onStartPointChange}>\n                  <ToggleButton variant=\"light\" value=\"none\">none</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"center\">center</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"perimeter\">perimeter</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"endPoint\">\n                  End point\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <ToggleButtonGroup id=\"endPoint\" type=\"radio\" name=\"endPoint\" value={this.props.endPoint} onChange={this.props.onEndPointChange}>\n                  <ToggleButton variant=\"light\" value=\"none\">none</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"center\">center</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"perimeter\">perimeter</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n\n            <CheckboxOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              optionKey=\"minimizeMoves\"\n              key=\"minimizeMoves\"\n              index={0}\n              model={this.props} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PolarSettings)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion\n} from 'react-bootstrap'\nimport RectSettings from './RectSettings'\nimport PolarSettings from './PolarSettings'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    rectangular: state.machine.rectangular,\n  }\n}\n\nclass MachineSettings extends Component {\n  render() {\n    return (\n      <div className=\"p-3\">\n        <Accordion defaultActiveKey={this.props.rectangular ? 0 : 1}>\n          <RectSettings />\n          <PolarSettings />\n        </Accordion>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, null)(MachineSettings)\n","import React, { Component } from 'react'\n\nclass Footer extends Component {\n  render () {\n    return (\n      <footer className=\"p-4\">\n        <div>\n          <h2>About</h2>\n          <p>Sandify turns your cold, empty-hearted, emotionless sand tables into cold, empty-hearted, emotionless sand table robots with enchanting patterns.</p>\n          <p>\n            Sandify is a labor of love, but if you'd like to support me financially,\n            I do have a <a href=\"https://github.com/sponsors/jeffeb3\">Donation system set up <b>with github matching donations</b></a>. Or just <a href=\"https://www.paypal.me/jeffeb3\">PayPal</a>.\n          </p>\n        </div>\n\n        <div>\n          <h2>Sand Machine</h2>\n          <p>Anything that uses gcode can be used with Sandify. But the machine this was designed for is the ZenXY from V1Engineering.com.</p>\n          <p>\n            <a href=\"https://docs.v1engineering.com/zenxy/\">ZenXY on V1Engineering.com</a>\n            <br />\n            <a href=\"https://www.thingiverse.com/thing:2477901\">ZenXY Thingiverse Page</a>\n          </p>\n          <p>\n            ZenXY was inspired by the awesome Sisyphus kinetic art table by <a href=\"https://sisyphus-industries.com/\">Sisyphus Industries</a>, which is also now supported.\n          </p>\n          <p>\n            Sandify was created by users in the\n            <a href=\"https://forum.v1engineering.com/t/does-this-count-as-a-build/6037\"> V1Engineering.com forum</a>.\n          </p>\n        </div>\n\n        <div>\n          <h2>Github</h2>\n          <p>Sandify is hosted on Github <a href=\"https://github.com/jeffeb3/sandify\">here</a>. Please post any problems, feature requests or comments in our <a href=\"https://github.com/jeffeb3/sandify/issues\">issue tracker</a>.</p>\n          <p>Sandify is a community project. We want and need developers. <a href=\"https://github.com/jeffeb3/sandify/wiki#developer-info\">Help Sandify</a>.</p>\n        </div>\n\n        <div>\n          <h2>License</h2>\n          <p>\n            Sandify is licensed under the MIT license.\n          </p>\n          <p>\n            Patterns that you create and gcode generated with Sandify are not covered\n            under the Sandify license. They are your work and your copyright. Read our <a href=\"https://raw.githubusercontent.com/jeffeb3/sandify/master/LICENSE\">license</a>.\n          </p>\n        </div>\n      </footer>\n    )\n  }\n}\n\nexport default Footer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    sandifyVersion: '0.2.2', // Also change the version in package.json.\n    input: 'shape',\n  },\n  reducers: {\n    chooseInput(state, action) {\n      state.input = action.payload\n    },\n  }\n})\n\nexport const {\n  chooseInput\n} = appSlice.actions\n\nexport default appSlice.reducer\n","import React, { Component } from 'react'\nimport {\n    Tab,\n    Tabs,\n} from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport ShapeList from '../shapes/ShapeList'\nimport Uploader from '../importer/Uploader'\nimport MachineSettings from '../machine/MachineSettings'\nimport Footer from './Footer'\nimport { chooseInput } from '../app/appSlice'\nimport ReactGA from 'react-ga'\n\nclass InputTabs extends Component {\n  handleSelect(key) {\n    ReactGA.event({\n      category: 'InputTabs',\n      action: 'handleSelect: ' + key,\n    })\n    this.props.dispatch(chooseInput(key))\n  }\n\n  render() {\n    return (\n       <Tabs defaultActiveKey=\"shapes\" onSelect={this.handleSelect.bind(this)} id=\"input-tabs\">\n         <Tab eventKey=\"shapes\" title=\"Shapes\" className=\"full-page-tab\">\n           <ShapeList />\n         </Tab>\n\n         <Tab eventKey=\"machine\" title=\"Machine\" className=\"full-page-tab\">\n           <MachineSettings />\n         </Tab>\n\n         <Tab eventKey=\"code\" title=\"Import\" className=\"full-page-tab\">\n           <Uploader />\n         </Tab>\n\n         <Tab eventKey=\"about\" title=\"About\" className=\"full-page-tab\">\n           <Footer />\n         </Tab>\n       </Tabs>\n    )\n  }\n}\n\nexport default connect()(InputTabs)\n","import { createSlice } from \"@reduxjs/toolkit\"\n\nconst previewSlice = createSlice({\n  name: 'preview',\n  initialState: {\n    canvasWidth: 600,\n    canvasHeight: 600,\n    sliderValue: 0.0\n  },\n  reducers: {\n    updatePreview(state, action) {\n      Object.assign(state, action.payload)\n    },\n    setPreviewSize(state, action) {\n      state.canvasHeight = action.payload\n      state.canvasWidth = action.payload\n    },\n  }\n})\n\nexport const {\n  updatePreview,\n  setPreviewSize,\n} = previewSlice.actions\n\nexport default previewSlice.reducer\n","import Victor from 'victor'\nimport Machine from './Machine'\nimport { distance } from '../../common/geometry'\n\nexport default class RectMachine extends Machine {\n  constructor(vertices, settings) {\n    super()\n    this.vertices = vertices\n    this.settings = settings\n    this.sizeX = Math.abs((settings.maxX - settings.minX) / 2.0)\n    this.sizeY = Math.abs((settings.maxY - settings.minY) / 2.0)\n  }\n\n  addEndpoints() {\n    if (this.settings.rectOrigin.length === 1) {\n      // OK, let's assign corners indices:\n      // [1]   [2]\n      //\n      //\n      // [0]   [3]\n      const corner = this.settings.rectOrigin[0]\n      const corners = [\n        new Victor(-this.sizeX, -this.sizeY),\n        new Victor(-this.sizeX, this.sizeY),\n        new Victor(this.sizeX, this.sizeY),\n        new Victor(this.sizeX, -this.sizeY)\n      ]\n\n      const first = this.vertices[0]\n      const last = this.vertices[this.vertices.length-1]\n      const maxRadius = Math.sqrt(Math.pow(2.0*this.sizeX, 2.0) + Math.pow(2.0*this.sizeY, 2.0)) / 2.0\n      let scale, outPoint\n\n      if (first.magnitude() <= last.magnitude()) {\n        // It's going outward\n        scale = maxRadius / last.magnitude()\n        outPoint = last\n      } else {\n        scale = maxRadius / first.magnitude()\n        outPoint = first\n      }\n\n      let clipped = this.clipLine(\n        outPoint,\n        Victor.fromObject(outPoint).multiply(new Victor(scale, scale))\n      )\n      const newPoint = clipped[clipped.length - 1]\n      if (outPoint === last) {\n        this.vertices = [this.vertices, this.tracePerimeter(newPoint, corners[corner], true)].flat()\n      } else {\n        this.vertices = [this.tracePerimeter(corners[corner], newPoint, true), this.vertices].flat()\n      }\n    }\n\n    return this\n  }\n\n  // Returns the distance along the perimeter between two points\n  perimeterDistance(v1, v2) {\n    return this.distance(this.tracePerimeter(v1, v2, true))\n  }\n\n  // Returns whether a given path lies on the perimeter of the rectangle\n  onPerimeter(v1, v2, delta=.0001) {\n    const dx = Math.abs(Math.abs(v1.x) - this.sizeX)\n    const dy = Math.abs(Math.abs(v1.y) - this.sizeY)\n    const rDx = Math.abs(v1.x - v2.x)\n    const rDy = Math.abs(v1.y - v2.y)\n\n    return (rDx < delta && dx < delta) || (rDy < delta && dy < delta)\n  }\n\n  // Given two perimeter points, traces the shortest valid path between them (stays on\n  // perimeter). Returns a list of intermediate points on that path (if any).\n  // On further consideration, this could be redone using Dijsktra's algorithm, I believe,\n  // but this works and is, I believe, reasonably efficient.\n  tracePerimeter(p1, p2, includeOriginalPoints=false) {\n    let points\n\n    if ((p1.x === p2.x && Math.abs(p1.x) === this.sizeX) || (p1.y === p2.y && (Math.abs(p1.y) === this.sizeY))) {\n      // on the same line; no connecting points needed\n      points = []\n    } else {\n      // horizontal or vertical orientation\n      let o1 = Math.abs(p1.x) === this.sizeX ? 'v' : 'h'\n      let o2 = Math.abs(p2.x) === this.sizeX ? 'v' : 'h'\n\n      if (o1 !== o2) {\n        // connects via a single corner\n        points = (o1 === 'h') ?\n          [new Victor(p2.x, p1.y)] :\n          [new Victor(p1.x, p2.y)]\n      } else {\n        // connects via two corners; find the shortest way around\n        if (o1 === 'h') {\n          let d1 = -2*this.sizeX - p1.x - p2.x\n          let d2 = 2*this.sizeX - p1.x - p2.x\n          let xSign = Math.abs(d1) > Math.abs(d2) ? 1 : -1\n\n          points = [\n            new Victor(Math.sign(xSign)*this.sizeX, Math.sign(p1.y)*this.sizeY),\n            new Victor(Math.sign(xSign)*this.sizeX, -Math.sign(p1.y)*this.sizeY)\n          ]\n        } else {\n          let d1 = -2*this.sizeY - p1.y - p2.y\n          let d2 = 2*this.sizeY - p1.y - p2.y\n          let ySign = Math.abs(d1) > Math.abs(d2) ? 1 : -1\n\n          points = [\n            new Victor(Math.sign(p1.x)*this.sizeX, Math.sign(ySign)*this.sizeY),\n            new Victor(-Math.sign(p1.x)*this.sizeX, Math.sign(ySign)*this.sizeY),\n          ]\n        }\n      }\n    }\n\n    if (includeOriginalPoints) {\n      points.unshift(p1)\n      points.push(p2)\n    }\n\n    return points\n  }\n\n  // Finds the nearest vertex that is in the bounds. This will change the shape. i.e. this\n  // doesn't care about the line segment, only about the point.\n  nearestVertex(vertex) {\n    return new Victor(\n      Math.min(this.sizeX, Math.max(-this.sizeX, vertex.x)),\n      Math.min(this.sizeY, Math.max(-this.sizeY, vertex.y))\n    )\n  }\n\n  // The guts of logic for this limits enforcer. It will take a single line (defined by\n  // start and end) and if the line goes out of bounds, returns the vertices around the\n  // outside edge to follow around without messing up the shape of the vertices.\n  clipLine(lineStart, lineEnd) {\n    var quadrantStart = this.pointLocation(lineStart)\n    var quadrantEnd = this.pointLocation(lineEnd)\n\n    if (quadrantStart === 0b0000 && quadrantEnd === 0b0000) {\n      // The line is inside the boundaries\n      return [lineStart, lineEnd]\n    }\n\n    if (quadrantStart === quadrantEnd) {\n      // We are in the same box, and we are out of bounds.\n      return [this.nearestVertex(lineStart), this.nearestVertex(lineEnd)]\n    }\n\n    if (quadrantStart & quadrantEnd) {\n      // These points are all on one side of the box.\n      return [this.nearestVertex(lineStart), this.nearestVertex(lineEnd)]\n    }\n\n    if (quadrantStart === 0b000) {\n      // We are exiting the box. Return the start, the intersection with the boundary, and the closest\n      // boundary point to the exited point.\n      var line = [lineStart]\n      line.push(this.boundPoint(lineStart, lineEnd))\n      line.push(this.nearestVertex(lineEnd))\n      return line\n    }\n\n    if (quadrantEnd === 0b000) {\n      // We are re-entering the box.\n      return [this.boundPoint(lineEnd, lineStart), lineEnd]\n    }\n\n    // We have reached a terrible place, where both points are oob, but it might intersect with the\n    // work area. First, define the boundaries as lines.\n    const sides = [\n      // left\n      [Victor(-this.sizeX, -this.sizeY), new Victor(-this.sizeX, this.sizeY)],\n      // right\n      [new Victor(this.sizeX, -this.sizeY), new Victor(this.sizeX, this.sizeY)],\n      // bottom\n      [new Victor(-this.sizeX, -this.sizeY), new Victor(this.sizeX, -this.sizeY)],\n      // top\n      [new Victor(-this.sizeX, this.sizeY), new Victor(this.sizeX, this.sizeY)],\n    ]\n\n    // Count up the number of boundary lines intersect with our line segment.\n    var intersections = []\n    for (var s=0; s<sides.length; s++) {\n      var intPoint = this.intersection(lineStart,\n                                   lineEnd,\n                                   sides[s][0],\n                                   sides[s][1])\n      if (intPoint) {\n        intersections.push(new Victor(intPoint.x, intPoint.y))\n      }\n    }\n\n    if (intersections.length !== 0) {\n      if (intersections.length !== 2) {\n        // We should never get here. How would we have something other than 2 or 0 intersections with\n        // a box?\n        console.log(intersections)\n        throw Error(\"Software Geometry Error\")\n      }\n\n      // The intersections are tested in some normal order, but the line could be going through them\n      // in any direction. This check will flip the intersections if they are reversed somehow.\n      if (Victor.fromObject(intersections[0]).subtract(lineStart).lengthSq() >\n          Victor.fromObject(intersections[1]).subtract(lineStart).lengthSq()) {\n        var temp = intersections[0]\n        intersections[0] = intersections[1]\n        intersections[1] = temp\n      }\n\n      return [...intersections, this.nearestVertex(lineEnd)]\n    }\n\n    // Damn. We got here because we have a start and end that are failing different boundary checks,\n    // and the line segment doesn't intersect the box. We have to crawl around the outside of the\n    // box until we reach the other point.\n    // Here, I'm going to split this line into two parts, and send each half line segment back\n    // through the clipLine algorithm. Eventually, that should result in only one of the other cases.\n    var midpoint = Victor.fromObject(lineStart).add(lineEnd).multiply(new Victor(0.5, 0.5))\n\n    // recurse, and find smaller segments until we don't end up in this place again.\n    return [...this.clipLine(lineStart, midpoint),\n            ...this.clipLine(midpoint, lineEnd)]\n  }\n\n  // Intersect the line with the boundary, and return the point exactly on the boundary.\n  // This will keep the shape. i.e. It will follow the line segment, and return the point on that line\n  // segment.\n  boundPoint(good, bad) {\n    const dx = good.x - bad.x\n    const dy = good.y - bad.y\n    const fixed = new Victor(bad.x, bad.y)\n    let distance = 0\n\n    if (bad.x < -this.sizeX || bad.x > this.sizeX) {\n      if (bad.x < -this.sizeX) {\n        // we are leaving the left\n        fixed.x = -this.sizeX\n      } else {\n        // we are leaving the right\n        fixed.x = this.sizeX\n      }\n\n      distance = (fixed.x - good.x) / dx\n      fixed.y = good.y + distance * dy\n\n      // We fixed x, but y might have the same problem, so we'll rerun this, with different points.\n      return this.boundPoint(good, fixed)\n    }\n\n    if (bad.y < -this.sizeY || bad.y > this.sizeY) {\n      if (bad.y < -this.sizeY) {\n        // we are leaving the bottom\n        fixed.y = -this.sizeY\n      } else {\n        // we are leaving the top\n        fixed.y = this.sizeY\n      }\n\n      distance = (fixed.y - good.y) / dy\n      fixed.x = good.x + distance * dx\n    }\n\n    return fixed\n  }\n\n  // Returns the distance walked from the first vertex to the last vertex.\n  distance(vertices) {\n    let d = 0\n    for(let i=0; i<vertices.length; i++) {\n      if (i > 0) d = d + distance(vertices[i], vertices[i-1])\n    }\n\n    return d\n  }\n\n  // Determines which of 8 neighbor areas the point is in:\n  //   https://stackoverflow.com/questions/3746274/line-intersection-with-aabb-rectangle\n  //           |          |\n  //   0b1001  |  0b0001  |  0b0101\n  //           |          |\n  // ------------------------------ y_max\n  //           |          |\n  //   0b1000  |  0b0000  |  0b0100\n  //           |          |\n  // ------------------------------ y_min\n  //           |          |\n  //   0b1010  |  0b0010  |  0b0110\n  //           |          |\n  //         x_min      x_max\n  //\n  pointLocation(point) {\n    let location = 0b0\n\n    if (point.x < -this.sizeX) {\n      location += 0b1000\n    } else if (point.x > this.sizeX) {\n      location += 0b0100\n    }\n\n    if (point.y < -this.sizeY) {\n      location += 0b0001\n    } else if (point.y > this.sizeY) {\n      location += 0b0010\n    }\n\n    return location\n  }\n\n  // Determines intersection with one of the sides.\n  intersection(lineStart, lineEnd, sideStart, sideEnd) {\n    let line = lineEnd.clone().subtract(lineStart)\n    let side = sideEnd.clone().subtract(sideStart)\n    let lineCrossSidePerp = line.x * side.y - line.y * side.x\n\n    // if line Cross side === 0, it means the lines are parallel so have infinite intersection points\n    if (lineCrossSidePerp === 0) {\n      return null\n    }\n\n    const diff = sideStart.clone().subtract(lineStart)\n    let t = (diff.x * side.y - diff.y * side.x) / lineCrossSidePerp\n    if (t < 0 || t >= 1) {\n      return null\n    }\n\n    const u = (diff.x * line.y - diff.y * line.x) / lineCrossSidePerp\n    if (u < 0 || u >= 1) {\n      return null\n    }\n\n    return lineStart.clone().add(line.clone().multiply(new Victor(t, t)))\n  }\n}\n","import { distance } from '../../common/geometry'\nimport PolarMachine from './PolarMachine'\nimport RectMachine from './RectMachine'\nimport Victor from 'victor'\nimport ReactGA from 'react-ga'\nimport throttle from 'lodash/throttle'\n\n// Transform functions\nfunction rotate(vertex, angleDeg) {\n  const angle = Math.PI / 180.0 * angleDeg\n  return new Victor(\n   vertex.x * Math.cos(angle) - vertex.y * Math.sin(angle),\n   vertex.x * Math.sin(angle) + vertex.y * Math.cos(angle)\n  )\n}\n\nfunction scale(vertex, scalePerc) {\n  const scale = scalePerc / 100.0\n  return new Victor(\n    vertex.x * scale,\n    vertex.y * scale\n  )\n}\n\nfunction offset(vertex, offsetX, offsetY) {\n  return new Victor(\n    vertex.x + offsetX,\n    vertex.y + offsetY\n  )\n}\n\nfunction track(vertex, data, loopIndex) {\n  const angle = data.trackLength * loopIndex / 16 * 2.0 * Math.PI\n  let radius = 1.0\n\n  if (data.trackGrowEnabled) {\n    radius = 1.0 + loopIndex / 10.0 * data.trackGrow / 100.0\n  }\n  return new Victor(\n    vertex.x + radius * data.trackValue * Math.cos(angle),\n    vertex.y + radius * data.trackValue * Math.sin(angle)\n  )\n}\n\nexport const transformShape = (data, vertex, amount, trackIndex=0, numLoops) => {\n  numLoops = numLoops || data.numLoops\n  let transformedVertex = vertex\n\n  if (data.repeatEnabled && data.growEnabled) {\n    transformedVertex = scale(transformedVertex, 100.0 + (data.growValue * amount))\n  }\n\n  transformedVertex = offset(transformedVertex, data.offsetX || 0, data.offsetY || 0)\n\n  if (data.repeatEnabled && data.spinEnabled) {\n    const loopPeriod = numLoops / (parseInt(data.spinSwitchbacks) + 1)\n    const stage = amount/loopPeriod\n    const direction = (stage % 2 < 1 ? 1.0 : -1.0)\n    var spinAmount = direction * (amount % loopPeriod) * data.spinValue\n\n    // Add in the amount it goes positive to the negatives, so they start at the same place.\n    if (direction < 0.0) {\n      spinAmount += loopPeriod * data.spinValue\n    }\n    transformedVertex = rotate(transformedVertex, spinAmount)\n  }\n\n  if (data.repeatEnabled && data.trackEnabled) {\n    transformedVertex = track(transformedVertex, data, trackIndex)\n  }\n\n  return transformedVertex\n}\n\nfunction buildTrackLoop(vertices, transform, i, t) {\n  const numTrackLoops = transform.repeatEnabled ? transform.trackNumLoops : 1\n  const nextTrackVertex = transformShape(transform, vertices[0], 0, i + 1, numTrackLoops)\n  const backtrack = numTrackLoops > 1 && t === numTrackLoops - 1\n  let numVertices = vertices.length\n  let trackVertices = []\n  let trackDistances = []\n\n  for (var j=0; j<numVertices; j++) {\n    const amount = transform.transformMethod === 'smear' ? i + t + j/vertices.length : i + t\n    const trackVertex = transformShape(transform, vertices[j], amount, i, numTrackLoops)\n    trackVertices.push(trackVertex)\n\n    if (backtrack) {\n      trackDistances.push(distance(nextTrackVertex, trackVertex))\n    }\n  }\n\n  // backtrack to the vertex with the shortest distance to the first vertex in\n  // the next track loop; this minimizes the amount our shape draws over the\n  // previous shape, which is not visually appealing.\n  if (backtrack) {\n    let minIdx = 0\n    let minD = Number.MAX_SAFE_INTEGER\n\n    trackDistances.forEach((d, idx) => {\n      if (d <= minD) {\n        minD = d\n        minIdx = idx\n      }\n    })\n\n    if (minIdx !== 0) {\n      trackVertices = trackVertices.concat(trackVertices.slice(minIdx, trackVertices.length-1).reverse())\n    }\n  }\n\n  return trackVertices\n}\n\n// ensure vertices do not exceed machine boundary limits, and endpoints as needed\nexport const polishVertices = (vertices, machine) => {\n  vertices = vertices.map(vertex => Victor.fromObject(vertex))\n  const machineClass = machine.rectangular ? RectMachine : PolarMachine\n\n  if (vertices.length > 0) {\n    vertices = new machineClass(vertices, machine).polish().vertices\n  }\n\n  return vertices\n}\n\nexport const scaleImportedVertices = (importer, machine) => {\n  var x_scale = (machine.maxX - machine.minX)/2.0 * 0.01 * importer.zoom\n  var y_scale = (machine.maxY - machine.minY)/2.0 * 0.01 * importer.zoom\n\n  if (!machine.rectangular) {\n    x_scale = y_scale = machine.maxRadius * 0.01 * importer.zoom\n  }\n\n  if (importer.aspectRatio) {\n    const machine_aspect_ratio = y_scale / x_scale\n    if (importer.originalAspectRatio > machine_aspect_ratio) {\n      x_scale = x_scale / importer.originalAspectRatio * machine_aspect_ratio\n    } else {\n      y_scale = y_scale * importer.originalAspectRatio / machine_aspect_ratio\n    }\n  }\n\n  return importer.vertices.map( (vertex) => {\n    return {...vertex,\n      x: vertex.x * x_scale,\n      y: vertex.y * y_scale,\n    }\n  })\n}\n\nfunction reportTiming(time) {\n  time = Math.max(time, 0.01)\n  ReactGA.timing({\n    category: 'Compute',\n    variable: 'transformShapes',\n    value: time, // in milliseconds\n  });\n}\n\nconst throttledReportTiming = throttle(reportTiming, 1000, {trailing: true })\n\nexport const transformShapes = (vertices, transform) => {\n  const startTime = performance.now()\n  const numLoops = transform.repeatEnabled ? transform.numLoops : 1\n  const numTrackLoops = transform.repeatEnabled ? transform.trackNumLoops : 1\n  let outputVertices = []\n\n  let scaledVertices = vertices.map(vertex => {\n    return scale(vertex, 100.0 * transform.startingSize)\n  })\n\n  if (transform.transformMethod === 'smear' && transform.repeatEnabled) {\n    // remove last vertex; we don't want to return to our starting point when completing the shape\n    scaledVertices.pop()\n  }\n\n  if (transform.trackEnabled && numTrackLoops > 1) {\n    for (var i=0; i<numLoops; i++) {\n      for (var t=0; t<numTrackLoops; t++) {\n        outputVertices = outputVertices.concat(buildTrackLoop(scaledVertices, transform, i, t))\n      }\n    }\n  } else {\n    for (i=0; i<numLoops; i++) {\n      for (var j=0; j<scaledVertices.length; j++) {\n        let amount = transform.transformMethod === 'smear' ? i + j/scaledVertices.length : i\n        outputVertices.push(transformShape(transform, scaledVertices[j], amount, amount))\n      }\n    }\n  }\n\n  const endTime = performance.now()\n  throttledReportTiming(endTime - startTime)\n  return outputVertices\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\n// Determine default file type; this is a little fussy because we want to ensure\n// that if the user has a rectangular table, but somehow wants to export theta\n// rho (or vice versa), we'll save that setting.\nlet fileType\nif (localStorage.getItem('export_fileType')) {\n  fileType = localStorage.getItem('export_fileType')\n} else if (localStorage.getItem('machine_rect_active')) {\n  fileType = localStorage.getItem('machine_rect_active') ? 'GCode (.gcode)' : 'Theta Rho (.thr)'\n} else {\n  fileType = 'GCode (.gcode)'\n}\n\nconst exporterSlice = createSlice({\n  name: 'exporter',\n  initialState: {\n    fileName: 'sandify',\n    fileType: fileType,\n    pre: localStorage.getItem('export_pre') ? localStorage.getItem('export_pre') : '',\n    post: localStorage.getItem('export_post') ? localStorage.getItem('export_post') : '',\n    reverse: false,\n    show: false\n  },\n  reducers: {\n    updateExporter(state, action) {\n      Object.assign(state, action.payload)\n      Object.keys(action.payload).forEach(key => {\n        localStorage.setItem(\"export_\" + key, action.payload[key])\n      })\n    },\n  }\n})\n\nexport const {\n  updateExporter\n} = exporterSlice.actions\n\nexport default exporterSlice.reducer\n","import LRUCache from 'lru-cache'\nimport { createSelector } from 'reselect'\nimport {\n  transformShapes,\n  transformShape,\n  polishVertices,\n  scaleImportedVertices\n} from './computer'\nimport { getShape } from '../shapes/selectors'\n\nconst cache = new LRUCache({\n  length: (n, key) => { return n.length },\n  max: 500000\n})\n\nconst getCacheKey = (state) => {\n  return JSON.stringify(state)\n}\n\nconst getApp = state => state.app\nconst getShapes = state => state.shapes\nconst getTransforms = state => state.transforms\nconst getCurrentShape = state => state.shapes.byId[state.shapes.currentId]\nconst getTransform = state => state.transforms.byId[state.shapes.currentId]\nconst getImporter = state => state.importer\nconst getMachine = state => state.machine\n\n// by returning null for shapes which can change size, this selector will ensure\n// transformed vertices are not redrawn when machine settings change\nconst getTransformMachine = state => getTransform(state).canChangeSize ? null : state.machine\n\n// requires only shape, and in the case of erasers, machine state\nexport const getShapedVertices = createSelector(\n  [\n      getCurrentShape,\n      getTransformMachine\n  ],\n  (shape, machine) => {\n    const state = {\n      shape: shape,\n      machine: machine\n    }\n    const metashape = getShape(shape)\n    if (shape.shouldCache) {\n      const key = getCacheKey(state)\n      let vertices = cache.get(key)\n\n      if (!vertices) {\n        vertices = metashape.getVertices(state)\n        cache.set(key, vertices)\n        // for debugging purposes\n        // console.log('caching shape...' + cache.length + ' ' + cache.itemCount)\n      }\n\n      return vertices\n    } else {\n      return metashape.getVertices(state)\n    }\n  }\n)\n\n// requires shape and transform state\nexport const getTransformedVertices = createSelector(\n  [\n      getShapedVertices,\n      getTransform\n  ],\n  (vertices, transform) => {\n    return transformShapes(vertices, transform)\n  }\n)\n\n// requires shape, transform, and machine state\nexport const getComputedVertices = createSelector(\n  [\n      getTransformedVertices,\n      getMachine\n  ],\n  (vertices, machine) => {\n    return polishVertices(vertices, machine)\n  }\n)\n\n// requires importer and machine state\nexport const getImportedVertices = createSelector(\n  [\n    getImporter,\n    getMachine\n  ],\n  (importer, machine) => {\n    let vertices = scaleImportedVertices(importer, machine)\n    return polishVertices(vertices, machine)\n  }\n)\n\n// top-level vertex selector; makes use of Russian-doll cached selectors that are\n// only recalculated when their required states change.\nexport const getVertices = createSelector(\n  [\n      getApp,\n      getShapes,\n      getTransforms,\n      getImporter,\n      getMachine\n  ],\n  (app, shapes, transforms, importer, machine) => {\n    const state = {\n      app: app,\n      shapes: shapes,\n      transforms: transforms,\n      importer: importer,\n      machine: machine\n    }\n\n    const hasImported = (state.app.input === 'code' || state.importer.fileName)\n    if (state.app.input === 'shapes' || !hasImported) {\n      return getComputedVertices(state)\n    } else {\n      return getImportedVertices(state)\n    }\n  }\n)\n\nexport const getVerticesStats = createSelector(\n  [\n      getVertices\n  ],\n  (vertices) => {\n    let distance = 0.0\n    let previous = null\n\n    vertices.forEach( (vertex) => {\n      if (previous) {\n        distance += Math.sqrt(Math.pow(vertex.x - previous.x, 2.0) +\n                              Math.pow(vertex.y - previous.y, 2.0))\n      }\n      previous = vertex\n    })\n\n    return {\n      numPoints: vertices.length,\n      distance: Math.floor(distance)\n    }\n  }\n)\n\nexport const getTrackVertices = createSelector(\n  [\n    getTransform\n  ],\n  (transform) => {\n    const numLoops = transform.numLoops\n    var trackVertices = []\n\n    for (var i=0; i<numLoops; i++) {\n      if (transform.trackEnabled) {\n        trackVertices.push(transformShape(transform, {x: 0.0, y: 0.0}, i, i))\n      }\n    }\n\n    return trackVertices\n  }\n)\n","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport { connect } from 'react-redux'\nimport Victor from 'victor'\nimport { setPreviewSize } from './previewSlice'\nimport { getVertices, getTrackVertices } from '../machine/selectors'\nimport throttle from 'lodash/throttle'\nimport Color from 'color'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    use_rect: state.machine.rectangular,\n    minX: state.machine.minX,\n    maxX: state.machine.maxX,\n    minY: state.machine.minY,\n    maxY: state.machine.maxY,\n    maxRadius: state.machine.maxRadius,\n    canvasWidth: state.preview.canvasWidth,\n    canvasHeight: state.preview.canvasHeight,\n    vertices: getVertices(state),\n    sliderValue: state.preview.sliderValue,\n    showTrack: state.app.input === 'shape',\n    trackVertices: getTrackVertices(state),\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onResize: (size) => {\n      dispatch(setPreviewSize(size))\n    },\n  }\n}\n\n// Contains the preview window, and any parameters for the machine.\nclass PreviewWindow extends Component {\n  componentDidMount() {\n    const canvas = ReactDOM.findDOMNode(this)\n    const context = canvas.getContext('2d')\n    const bigBox = document.getElementById(\"preview-wrapper\")\n\n    this.throttledResize = throttle(this.resize, 200, {trailing: true}).bind(this)\n\n    window.addEventListener('resize', () => { this.throttledResize(canvas, bigBox) }, false)\n    setTimeout(() => {\n      this.visible = true\n      this.resize(canvas, bigBox)\n    }, 250)\n    this.paint(context)\n  }\n\n  componentDidUpdate() {\n    var canvas = ReactDOM.findDOMNode(this)\n    var context = canvas.getContext('2d')\n    context.clearRect(0, 0, this.props.canvasWidth, this.props.canvasHeight)\n    var bigBox = document.getElementById(\"preview-wrapper\")\n\n    this.resize(canvas, bigBox)\n  }\n\n  // in mm means in units of mm, but 0,0 is the center, not the lower corner or something.\n  mmToPixelsScale() {\n    var machine_x = 1\n    var machine_y = 1\n    if (this.props.use_rect) {\n      machine_x = this.props.maxX - this.props.minX\n      machine_y = this.props.maxY - this.props.minY\n    } else {\n      machine_x = this.props.maxRadius * 2.0\n      machine_y = machine_x\n    }\n\n    var scale_x = this.props.canvasWidth / machine_x\n    var scale_y = this.props.canvasHeight / machine_y\n    // Keep it square.\n    return Math.min(scale_x, scale_y) * 0.95\n  }\n\n  mmToPixels(vertex) {\n    var min_scale = this.mmToPixelsScale()\n\n    var x = vertex.x * min_scale + this.props.canvasWidth/2.0\n    // Y for pixels starts at the top, and goes down.\n    var y = -vertex.y * min_scale + this.props.canvasHeight/2.0\n\n      return new Victor(x, y)\n  }\n\n  moveTo_mm(context, vertex) {\n    var in_mm = this.mmToPixels(vertex)\n    context.moveTo(in_mm.x, in_mm.y)\n  }\n\n  lineTo_mm(context, vertex) {\n    var in_mm = this.mmToPixels(vertex)\n    context.lineTo(in_mm.x, in_mm.y)\n  }\n\n  dot_mm(context, vertex) {\n    var in_mm = this.mmToPixels(vertex)\n    context.arc(in_mm.x, in_mm.y, Math.max(4.0, this.mmToPixelsScale() * 1.5), 0, 2 * Math.PI, true)\n    context.fillStyle = context.strokeStyle\n    context.fill()\n  }\n\n  sliderVertexRange(vertices, sliderValue) {\n    const slide_size = 10.0\n    if (sliderValue === 0) {\n      return [0, vertices.length - 1]\n    }\n\n    // Let's start by just assuming we want a slide_size sized window, as a percentage of the whole\n    // thing.\n    const begin_fraction = sliderValue / 100.0\n    const end_fraction = (slide_size + sliderValue) / 100.0\n    let begin_vertex = Math.round(vertices.length * begin_fraction)\n    let end_vertex = Math.round(vertices.length * end_fraction)\n\n    // never return less than two vertices; this keeps the preview slider smooth even when\n    // there are just a few vertices\n    if (begin_vertex === end_vertex) {\n      if (begin_vertex > 1) begin_vertex = begin_vertex - 2\n    } else if (begin_vertex === end_vertex - 1) {\n      if (begin_vertex > 0) begin_vertex = begin_vertex - 1\n    }\n\n    return [begin_vertex, end_vertex]\n  }\n\n  paint(context) {\n    context.save()\n\n    // Draw the bounds of the machine\n    context.beginPath()\n    context.lineWidth = \"1\"\n    context.strokeStyle = \"lightblue\"\n    if (this.props.use_rect) {\n      this.moveTo_mm(context, new Victor((this.props.minX - this.props.maxX)/2.0, (this.props.minY - this.props.maxY)/2.0))\n      this.lineTo_mm(context, new Victor((this.props.maxX - this.props.minX)/2.0, (this.props.minY - this.props.maxY)/2.0))\n      this.lineTo_mm(context, new Victor((this.props.maxX - this.props.minX)/2.0, (this.props.maxY - this.props.minY)/2.0))\n      this.lineTo_mm(context, new Victor((this.props.minX - this.props.maxX)/2.0, (this.props.maxY - this.props.minY)/2.0))\n      this.lineTo_mm(context, new Victor((this.props.minX - this.props.maxX)/2.0, (this.props.minY - this.props.maxY)/2.0))\n    } else {\n      this.moveTo_mm(context, new Victor(this.props.maxRadius, 0.0))\n      let resolution = 128.0\n      for (let i=0; i<=resolution; i++) {\n        let angle = Math.PI * 2.0 / resolution * i\n        this.lineTo_mm(context, new Victor(this.props.maxRadius * Math.cos(angle),\n                                       this.props.maxRadius * Math.sin(angle)))\n      }\n    }\n    context.stroke()\n\n    if (this.props.vertices && this.props.vertices.length > 0) {\n      let sliderRange = this.sliderVertexRange(this.props.vertices, this.props.sliderValue)\n      let drawing_vertices = this.props.vertices.slice(sliderRange[0], sliderRange[1] + 1)\n\n      // Draw the background vertices\n      if (this.props.sliderValue !== 0) {\n        context.beginPath()\n        context.lineWidth = this.mmToPixelsScale()\n        context.strokeStyle = Color('#6E6E00')\n        this.moveTo_mm(context, this.props.vertices[0])\n\n        for (let i=0; i<this.props.vertices.length; i++) {\n          if (i === sliderRange[1]-1) {\n            context.stroke()\n            context.beginPath()\n            context.strokeStyle = \"rgba(204, 204, 204, 0.35)\"\n          }\n          this.lineTo_mm(context, this.props.vertices[i])\n        }\n        context.stroke()\n      }\n\n      if (this.props.trackVertices && this.props.trackVertices.length > 0 && this.props.showTrack) {\n        // Draw the track vertices\n        context.beginPath()\n        context.lineWidth = 6.0\n        context.strokeStyle = \"green\"\n        this.moveTo_mm(context, this.props.trackVertices[0])\n        for (let i=0; i<this.props.trackVertices.length; i++) {\n          this.lineTo_mm(context, this.props.trackVertices[i])\n        }\n        context.stroke()\n      }\n\n      if (drawing_vertices.length > 0) {\n        // Draw the slider path vertices\n        var startColor = Color('#6E6E00')\n        const colorStep = 200.0 / drawing_vertices.length / 100\n\n        context.beginPath()\n        context.lineWidth = this.mmToPixelsScale()\n        this.moveTo_mm(context, drawing_vertices[0])\n        context.stroke()\n\n        for (let i=1; i<drawing_vertices.length; i++) {\n          const strokeColor = this.props.sliderValue !== 0 ? startColor.lighten(colorStep * i).hex() : 'yellow'\n\n          context.beginPath()\n          context.strokeStyle = strokeColor\n          context.lineWidth = this.mmToPixelsScale()\n          this.moveTo_mm(context, drawing_vertices[i-1])\n          this.lineTo_mm(context, drawing_vertices[i])\n          context.stroke()\n        }\n      }\n\n      // Draw the start and end points\n      context.beginPath()\n      context.lineWidth = 4.0\n      context.strokeStyle = \"green\"\n      this.dot_mm(context, this.props.vertices[0])\n      context.stroke()\n      context.beginPath()\n      context.lineWidth = 4.0\n      context.strokeStyle = \"red\"\n      this.dot_mm(context, this.props.vertices[this.props.vertices.length-1])\n      context.stroke()\n\n      // Draw a slider path end point if sliding\n      if (drawing_vertices.length > 0 && this.props.sliderValue !== 0) {\n        const sliderEndPoint = drawing_vertices[drawing_vertices.length - 1]\n\n        context.beginPath()\n        context.strokeStyle = \"yellow\"\n        context.lineWidth = 6.0\n        this.dot_mm(context, sliderEndPoint)\n\n        // START: uncomment these lines to show slider end point coordinates\n        // context.font = \"20px Arial\"\n        // context.fillText('(' + sliderEndPoint.x.toFixed(2) + ', ' + sliderEndPoint.y.toFixed(2) + ')', 10, 50)\n        // END\n        context.stroke()\n      }\n    }\n\n    context.restore()\n  }\n\n  resize(canvas, bigBox) {\n    const width = parseInt(getComputedStyle(bigBox).getPropertyValue('width'))\n    const height = parseInt(getComputedStyle(bigBox).getPropertyValue('height'))\n    const size = Math.max(Math.min(width, height))\n\n    if (this.props.canvasWidth !== size) {\n      this.props.onResize(size)\n    }\n\n    var context = canvas.getContext('2d')\n    this.paint(context)\n  }\n\n  render() {\n    const {canvasWidth, canvasHeight} = this.props\n    const visibilityClass = `preview-canvas ${this.visible ? 'd-inline' : 'd-none'}`\n\n    return (\n      <canvas\n        className={visibilityClass}\n        height={canvasHeight}\n        width={canvasWidth} />\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(PreviewWindow)\n","export default class Exporter {\n  constructor(props) {\n    this.props = props\n    this.lines = []\n  }\n\n  export() {\n    this.lines = this.lines.concat(this.props.comments)\n\n    this.startComments()\n    this.line()\n    this.keyValueLine('File name', \"'\" + this.props.fileName + \"'\")\n    this.line()\n    this.line('BEGIN PRE')\n    this.endComments()\n    this.line(this.props.pre, this.props.pre !== '')\n    this.startComments()\n    this.line('END PRE')\n    this.endComments()\n\n    let vertices = this.props.vertices\n    if (this.props.reverse) {\n      vertices = vertices.reverse()\n    }\n\n    this.exportCode(vertices)\n    this.line()\n\n    this.startComments()\n    this.line('BEGIN POST')\n    this.endComments()\n    this.line(this.props.post, this.props.post !== '')\n    this.startComments()\n    this.line('END POST')\n\n    return this.lines\n  }\n\n  line(content='', add=true) {\n    if (add) {\n      let padding = ''\n      if (this.commenting) {\n        padding = this.commentChar + ' '\n        for (let i=0; i<this.indentLevel; i++) {\n          padding += '  '\n        }\n      }\n      this.lines.push(padding + content)\n    }\n  }\n\n  keyValueLine(key, value, add=true) {\n    this.line(key + ': ' + value, add)\n  }\n\n  optionLine(metamodel, instance, option, add=true) {\n    this.line(metamodel.getOptions()[option].title + ': ' + instance[option], add)\n  }\n\n  optionLines(metamodel, instance, options, add=true) {\n    options.forEach(option => {\n      this.optionLine(metamodel, instance, option, add)\n    })\n  }\n\n  indent() {\n    this.indentLevel++\n  }\n\n  dedent() {\n    this.indentLevel--\n  }\n\n  startComments() {\n    this.commenting = true\n  }\n\n  endComments() {\n    this.commenting = false\n  }\n}\n","import { getShape } from '../shapes/selectors'\nimport Machine from '../../models/Machine'\nimport Transform from '../../models/Transform'\nimport Exporter from './Exporter'\n\nexport default class CommentExporter extends Exporter {\n  constructor(props, commentChar=';') {\n    super(props)\n    this.indentLevel = 0\n    this.commentChar = commentChar\n    this.startComments()\n  }\n\n  export() {\n    const state = this.props\n    const machine = new Machine()\n    const transform = new Transform()\n    let instance = state.machine\n\n    this.line('Created by Sandify')\n    this.line('https://sandify.org')\n    this.keyValueLine('Version', state.app.sandifyVersion)\n    this.line()\n\n    this.keyValueLine('Machine type', state.machine.rectangular ? 'Rectangular' : 'Polar')\n    this.indent()\n    this.optionLines(machine, instance, ['minX', 'maxX', 'minY', 'maxY'], state.machine.rectangular)\n    this.optionLines(machine, instance,  ['maxRadius', 'polarStartPoint', 'polarEndPoint'], !state.machine.rectangular)\n    this.dedent()\n\n    this.keyValueLine('Content type', state.app.input)\n    this.indent()\n\n    switch (state.app.input) {\n      case 'shape': // shapes\n        instance = state.shapes.byId[state.shapes.currentId]\n        const shape = getShape(instance)\n        const options = shape.getOptions()\n\n        this.keyValueLine('Selected Shape', shape.name)\n        this.optionLines(shape, instance, Object.keys(options))\n        this.optionLines(transform, state.transform, ['offsetX', 'offsetY'])\n        this.optionLines(transform, state.transform, ['numLoops', 'transformMethod', 'spinEnabled'], state.transform.repeatEnabled)\n        this.indent()\n        this.optionLines(transform, state.transform, ['spinValue', 'spinSwitchbacks'], state.transform.repeatEnabled && state.transform.spinEnabled)\n        this.dedent()\n        this.optionLine(transform, state.transform, 'growEnabled', state.transform.repeatEnabled)\n        this.indent()\n        this.optionLine(transform, state.transform, 'growValue', state.transform.repeatEnabled && state.transform.growEnabled)\n        this.dedent()\n        this.optionLine(transform, state.transform, 'trackEnabled', state.transform.repeatEnabled)\n        this.indent()\n        this.optionLines(transform, state.transform, ['trackValue', 'trackLength', 'trackNumLoops'], state.transform.repeatEnabled && state.transform.trackEnabled)\n        this.optionLine(transform, state.transform, 'trackGrowEnabled', state.transform.repeatEnabled && state.transform.trackEnabled)\n        this.indent()\n        this.optionLine(transform, state.transform, 'trackGrow', state.transform.repeatEnabled && state.transform.trackGrowEnabled)\n        this.dedent()\n        this.dedent()\n        break\n\n      case 'code':\n        this.keyValueLine('Input file', state.importer.fileName)\n        this.keyValueLine('Zoom', state.importer.zoom)\n        this.keyValueLine('Aspect ratio', state.importer.aspectRatio)\n        break\n\n      default:\n        break\n    }\n\n    this.dedent()\n    this.keyValueLine('Path reversed', state.exporter.reverse)\n    return this.lines\n  }\n}\n","import { createSelector } from 'reselect'\nimport CommentExporter from './CommentExporter'\n\nconst getApp = state => state.app\nconst getShapes = state => state.shapes\nconst getTransforms = state => state.transforms\nconst getImporter = state => state.importer\nconst getExporter = state => state.exporter\nconst getMachine = state => state.machine\n\nexport const getComments = createSelector(\n  [\n      getApp,\n      getShapes,\n      getTransforms,\n      getImporter,\n      getExporter,\n      getMachine,\n  ],\n  (app, shapes, transforms, importer, exporter, machine) => {\n    const state = {\n      app: app,\n      shapes: shapes,\n      shape: shapes.byId[shapes.currentId],\n      transforms: transforms,\n      transform: transforms.byId[shapes.currentId],\n      importer: importer,\n      exporter: exporter,\n      machine: machine\n    }\n\n    const commentChar = state.exporter.fileType === 'GCode (.gcode)' ? ';' : '#'\n    return new CommentExporter(state, commentChar).export()\n  }\n)\n","import Victor from 'victor'\nimport Exporter from './Exporter'\n\nfunction thetarho(vertex) {\n  return '' + vertex.x.toFixed(5) + ' ' + vertex.y.toFixed(5)\n}\n\nexport default class ThetaRhoExporter extends Exporter {\n  constructor(props) {\n    super(props)\n    this.fileExtension = '.thr'\n    this.label = 'ThetaRho'\n    this.commentChar = '#'\n  }\n\n  // adds lines mapping given vertices to the theta rho format\n  exportCode(vertices) {\n    // First, downsample larger lines into smaller ones.\n    const maxLength = 2.0\n    let subsampledVertices = []\n    let previous = undefined\n    let next\n\n    for (next = 0; next < vertices.length; next++) {\n      if (previous !== undefined) {\n        const start = Victor.fromObject(vertices[previous])\n        const end = Victor.fromObject(vertices[next])\n\n        const delta = end.clone().subtract(start)\n        const deltaSegment = end.clone().subtract(start).normalize().multiply(Victor(maxLength, maxLength))\n\n        // This loads up (start, end].\n        for (let step = 0; step < (delta.magnitude() / maxLength) ; step++) {\n          subsampledVertices.push(\n            new Victor(start.x + step * deltaSegment.x,\n                       start.y + step * deltaSegment.y))\n        }\n\n      }\n      previous = next\n    }\n\n    // Add in the end.\n    if (previous !== undefined) {\n      subsampledVertices.push(vertices[vertices.length - 1])\n    }\n\n    // Convert to Theta, Rho\n    let trVertices = []\n    let previousTheta = 0\n    let previousRawTheta = 0\n\n    for (next = 0; next < subsampledVertices.length; ++next) {\n      // Normalize the radius\n      const rho = Victor.fromObject(subsampledVertices[next]).magnitude() / this.props.maxRadius\n\n      // What is the basic theta for this point?\n      let rawTheta = Math.atan2(subsampledVertices[next].x,\n                                subsampledVertices[next].y)\n      // Convert to [0,2pi]\n      rawTheta = (rawTheta + 2.0 * Math.PI) % (2.0 * Math.PI)\n\n      // Compute the difference to the last point.\n      let deltaTheta = rawTheta - previousRawTheta\n\n      // Convert to [-pi,pi]\n      if (deltaTheta < -Math.PI) {\n        deltaTheta += 2.0 * Math.PI\n      }\n      if (deltaTheta > Math.PI) {\n        deltaTheta -= 2.0 * Math.PI\n      }\n\n      const theta = previousTheta + deltaTheta\n      previousRawTheta = rawTheta\n      previousTheta = theta\n      trVertices.push(new Victor(theta, rho))\n    }\n\n    trVertices.map(thetarho).forEach(line => this.line(line))\n  }\n}\n","import Exporter from './Exporter'\n\nexport default class GCodeExporter extends Exporter {\n  constructor(props) {\n    super(props)\n    this.fileExtension = '.gcode'\n    this.label = 'Gcode'\n    this.commentChar = ';'\n  }\n\n  exportCode(vertices) {\n    var centeredVertices = vertices.map( (vertex) => {\n      return {\n        ...vertex,\n        x: vertex.x + this.props.offsetX,\n        y: vertex.y + this.props.offsetY,\n      }\n    })\n\n    centeredVertices.map(this.gcode).forEach(line => this.line(line))\n  }\n\n  gcode(vertex) {\n    let command = 'G01' +\n      ' X' + vertex.x.toFixed(3) +\n      ' Y' + vertex.y.toFixed(3)\n    return command\n  }\n}\n","const exporterOptions = {\n  fileName: {\n    title: 'File name',\n    type: 'string'\n  },\n  fileType: {\n    title: 'Export as',\n    type: 'dropdown',\n    choices: ['GCode (.gcode)', 'Theta Rho (.thr)']\n  },\n  post: {\n    title: 'Program end code',\n    type: 'textarea'\n  },\n  pre: {\n    title: 'Program start code',\n    type: 'textarea'\n  },\n  reverse: {\n    title: 'Reverse path in the code',\n  },\n}\n\nexport default class Exporter {\n  getOptions() {\n    return exporterOptions\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  Button,\n  Modal\n} from 'react-bootstrap'\nimport DropdownOption from '../../components/DropdownOption'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport { updateExporter } from './exporterSlice'\nimport { getComments } from './selectors'\nimport { getVertices } from '../machine/selectors'\nimport ReactGA from 'react-ga'\nimport ThetaRhoExporter from './ThetaRhoExporter'\nimport GCodeExporter from './GCodeExporter'\nimport Exporter from '../../models/Exporter'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    reverse: state.exporter.reverse,\n    show: state.exporter.show,\n    vertices: getVertices(state),\n    comments: getComments(state),\n    input: state.app.input,\n    shape: state.shapes.currentId,\n    offsetX: (state.machine.minX + state.machine.maxX) / 2.0,\n    offsetY: (state.machine.minY + state.machine.maxY) / 2.0,\n    maxRadius: state.machine.maxRadius,\n    fileName: state.exporter.fileName,\n    fileType: state.exporter.fileType,\n    pre: state.exporter.pre,\n    post: state.exporter.post,\n    options: new Exporter().getOptions()\n  }\n}\n\nconst exporters = {\n  'GCode (.gcode)': GCodeExporter,\n  'Theta Rho (.thr)': ThetaRhoExporter\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    open: () => {\n      dispatch(updateExporter({show: true}))\n    },\n    close: () => {\n      dispatch(updateExporter({show: false}))\n    },\n    onChange: (attrs) => {\n      dispatch(updateExporter(attrs))\n    },\n  }\n}\n\nclass Downloader extends Component {\n  // Record this event to google analytics.\n  gaRecord(fileType) {\n    let savedCode = 'Saved: ' + this.props.input\n    if (this.props.input === 'shape' || this.props.input === 'Shape') {\n      savedCode = savedCode + ': ' + this.props.shape\n    }\n    ReactGA.event({\n      category: fileType,\n      action: savedCode,\n    })\n  }\n\n  download() {\n    let exporter = new exporters[this.props.fileType](this.props)\n    let startTime = performance.now()\n    let fileName = this.props.fileName\n\n    exporter.export()\n\n    if (!fileName.includes('.')) {\n      fileName += exporter.fileExtension\n    }\n\n    this.gaRecord(exporter.label)\n    this.downloadFile(fileName, exporter.lines.join(\"\\n\"))\n    this.props.close()\n\n    let endTime = performance.now()\n    ReactGA.timing({\n      category: exporter.label,\n      variable: 'Save Code',\n      value: endTime - startTime, // in milliseconds\n    })\n  }\n\n  // Helper function to take a string and make the user download a text file with that text as the\n  // content. I don't really understand this, but I took it from here, and it seems to work:\n  // https://stackoverflow.com/a/18197511\n  downloadFile(fileName, text) {\n    let link = document.createElement('a')\n    link.download = fileName\n\n    let blob = new Blob([text],{type: 'text/plain;charset=utf-8'})\n\n    // Windows Edge fix\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      window.navigator.msSaveOrOpenBlob(blob, fileName)\n    } else {\n      link.href = URL.createObjectURL(blob)\n      if (document.createEvent) {\n        var event = document.createEvent('MouseEvents')\n        event.initEvent('click', true, true)\n        link.dispatchEvent(event)\n      } else {\n        link.click()\n      }\n      URL.revokeObjectURL(link.href)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Button className=\"ml-2 mr-3\" variant=\"primary\" onClick={this.props.open}>Export</Button>\n        <Modal show={this.props.show} onHide={this.props.close}>\n          <Modal.Header closeButton>\n            <Modal.Title>Export to a file</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <DropdownOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              optionKey=\"fileType\"\n              key=\"fileType\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"fileName\"\n              optionKey=\"fileName\"\n              index={1}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"pre\"\n              optionKey=\"pre\"\n              index={2}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"post\"\n              optionKey=\"post\"\n              index={3}\n              model={this.props} />\n\n            <CheckboxOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              optionKey=\"reverse\"\n              key=\"reverse\"\n              index={4}\n              model={this.props} />\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button id=\"code-close\" variant=\"link\" onClick={this.props.close}>Close</Button>\n            <Button id=\"code-download\" variant=\"primary\" onClick={this.download.bind(this)}>Download</Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Downloader)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Slider from 'rc-slider'\nimport 'rc-slider/assets/index.css'\nimport PreviewWindow from './PreviewWindow'\nimport Downloader from '../exporter/Downloader'\nimport { updatePreview } from './previewSlice'\nimport { getVerticesStats } from '../machine/selectors'\nimport './MachinePreview.scss'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    sliderValue: state.preview.sliderValue,\n    verticesStats: getVerticesStats(state),\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onSlider: (value) => {\n      dispatch(updatePreview({sliderValue: value}))\n    },\n  }\n}\n\nclass MachinePreview extends Component {\n  render() {\n    return (\n      <div className=\"machine-preview d-flex flex-grow-1 flex-column\" id=\"machine-preview\">\n        <div className=\"flex-grow-1 d-flex flex-column\">\n          <div id=\"preview-wrapper\" className=\"preview-wrapper overflow-hidden d-flex align-items-center\">\n            <PreviewWindow />\n          </div>\n\n          <div className=\"mt-auto pt-2 bg-white d-flex align-items-center\">\n            <div className=\"flex-grow-1\">\n              <div className=\"mx-2\">\n                Points: {this.props.verticesStats.numPoints}, Distance: {this.props.verticesStats.distance}\n              </div>\n\n              <div className=\"p-3\">\n                  <Slider\n                    value={this.props.sliderValue}\n                    step={0.1}\n                    min={0.0}\n                    max={100.0}\n                    onChange={this.props.onSlider}\n                  />\n              </div>\n            </div>\n            <Downloader />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MachinePreview)\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\"\nimport { combineReducers } from 'redux'\nimport appReducer from './appSlice'\nimport importerReducer from '../importer/importerSlice'\nimport machineReducer from '../machine/machineSlice'\nimport exporterReducer from '../exporter/exporterSlice'\nimport previewReducer from '../preview/previewSlice'\nimport shapesReducer from '../shapes/shapesSlice'\nimport transformsReducer from '../transforms/transformsSlice'\nimport { registeredShapes } from '../../common/registeredShapes'\nimport { loadState, saveState } from '../../common/localStorage'\nimport { addShape, setCurrentShape, updateShape } from '../shapes/shapesSlice'\nimport { addTransform, updateTransform } from '../transforms/transformsSlice'\n\nconst customizedMiddleware = getDefaultMiddleware({\n  immutableCheck: {\n    ignoredPaths: ['importer.vertices']\n  },\n  serializableCheck: {\n    ignoredPaths: ['importer.vertices']\n  }\n})\n\nconst store = configureStore({\n  reducer: combineReducers({\n    app: appReducer,\n    shapes: shapesReducer,\n    transforms: transformsReducer,\n    importer: importerReducer,\n    exporter: exporterReducer,\n    machine: machineReducer,\n    preview: previewReducer\n  }),\n  middleware: customizedMiddleware\n})\n\n// preload shapes into store\nObject.keys(registeredShapes).forEach(key => {\n  const shape = registeredShapes[key]\n  const state = shape.getInitialState()\n  const tState = shape.getInitialTransformState()\n\n  state.id = key\n  state.name = shape.name\n\n  store.dispatch(addShape(state))\n  store.dispatch(addTransform({\n    ...{id: state.id },\n    ...tState,\n  }))\n})\n\n// set to true when running locally if you want to preserve your shape\n// settings across page loads; don't forget to toggle false when done testing!\nconst persistState = false\nif (persistState) {\n  // override default values with saved ones\n  const persistedState = loadState()\n\n  if (persistedState) {\n    Object.keys(persistedState.shapes.byId).forEach((key) => {\n      let shape = persistedState.shapes.byId[key]\n      shape.id = key\n      store.dispatch(updateShape(shape))\n    })\n\n    Object.keys(persistedState.transforms.byId).forEach((key) => {\n      let transform = persistedState.transforms.byId[key]\n      transform.id = key\n      store.dispatch(updateTransform(transform))\n    })\n  }\n}\n\nconst storedShape = localStorage.getItem('currentShape')\nconst currentShape = storedShape && registeredShapes[storedShape] ? storedShape : 'polygon'\nstore.dispatch(setCurrentShape(currentShape))\n\nif (persistState) {\n  store.subscribe(() => {\n    const state = store.getState()\n\n    saveState({\n      shapes: state.shapes,\n      transforms: state.transforms\n    })\n  })\n}\n\nexport default store\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Row\n} from 'react-bootstrap'\nimport { Provider } from 'react-redux'\nimport Header from './Header'\nimport InputTabs from './InputTabs'\nimport MachinePreview from '../preview/MachinePreview'\nimport store from './store'\nimport './App.scss'\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Header />\n\n          <main>\n            <Row className=\"no-gutters\">\n              <Col className=\"full-page d-flex flex-column\">\n                <MachinePreview />\n              </Col>\n\n              <div id=\"sidebar\">\n                <InputTabs />\n              </div>\n            </Row>\n          </main>\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './features/app/reactGA'\nimport App from './features/app/App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}