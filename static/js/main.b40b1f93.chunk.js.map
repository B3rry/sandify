{"version":3,"sources":["features/app/logo.svg","features/app/reactGA.js","features/app/Header.js","features/shapes/shapesSlice.js","components/InputOption.js","components/DropdownOption.js","components/CheckboxOption.js","models/Transform.js","features/transforms/transformsSlice.js","models/Shape.js","models/Circle.js","common/util.js","models/Epicycloid.js","models/fractal_spirograph/Orbit.js","models/fractal_spirograph/FractalSpirograph.js","models/Heart.js","models/Hypocycloid.js","models/input_text/raysol_cursive.js","models/input_text/raysol_sanserif.js","models/input_text/Fonts.js","common/geometry.js","features/machine/Machine.js","features/machine/PolarMachine.js","models/input_text/InputText.js","common/lindenmayer.js","models/lsystem/subtypes.js","models/lsystem/LSystem.js","models/Polygon.js","models/Reuleaux.js","models/Rose.js","models/space_filler/subtypes.js","models/space_filler/SpaceFiller.js","models/Star.js","common/PriorityQueue.js","common/Graph.js","models/tessellation_twist/TessellationTwist.js","common/eulerianTrail.js","models/v1_engineering/Vicious1Vertices.js","models/v1_engineering/V1Engineering.js","models/Wiper.js","common/registeredShapes.js","features/shapes/selectors.js","features/transforms/ScaleTransform.js","features/transforms/RotationTransform.js","features/transforms/TrackTransform.js","features/transforms/Transforms.js","features/shapes/Shape.js","features/shapes/ShapeList.js","features/importer/importerSlice.js","features/importer/Importer.js","features/importer/ThetaRhoImporter.js","features/importer/GCodeImporter.js","models/Importer.js","features/importer/Uploader.js","models/Machine.js","features/machine/machineSlice.js","features/machine/RectSettings.js","features/machine/PolarSettings.js","features/machine/MachineSettings.js","features/app/Footer.js","features/app/appSlice.js","features/app/InputTabs.js","features/preview/previewSlice.js","features/machine/RectMachine.js","features/machine/computer.js","features/exporter/exporterSlice.js","features/machine/selectors.js","features/preview/PreviewShape.js","features/preview/PreviewWindow.js","features/exporter/Exporter.js","features/exporter/CommentExporter.js","features/exporter/selectors.js","features/exporter/ThetaRhoExporter.js","features/exporter/GCodeExporter.js","features/exporter/SvgExporter.js","models/Exporter.js","features/exporter/Downloader.js","features/preview/MachinePreview.js","features/app/store.js","features/app/App.js","index.js"],"names":["module","exports","ReactGA","initialize","debug","pageview","window","location","pathname","search","Header","className","src","logo","alt","Component","shapesSlice","createSlice","name","initialState","currentId","selectedId","byId","allIds","reducers","addShape","state","action","shape","payload","id","push","setCurrentShape","event","category","localStorage","setItem","updateShape","actions","InputOption","props","delayedSet","debounce","value","key","onChange","attrs","option","this","options","optionKey","model","optionType","type","minimum","min","parseFloat","maximum","max","visible","undefined","isVisible","Row","Col","sm","Form","Label","htmlFor","title","Control","as","step","isNaN","target","delayKey","DropdownOption","currentChoice","index","label","choice","choices","map","CheckboxOption","checked","transformOptions","startingSize","canChangeSize","offsetX","offsetY","rotation","numLoops","transformMethod","growEnabled","growValue","growMethod","growMathInput","growMath","spinEnabled","spinValue","spinMethod","spinMathInput","spinMath","spinSwitchbacks","trackEnabled","trackGrowEnabled","trackValue","trackNumLoops","trackLength","trackGrow","Transform","repeatEnabled","transformsSlice","addTransform","transform","meta","getInitialState","updateTransform","toggleRepeat","toggleGrow","toggleSpin","toggleTrack","toggleTrackGrow","shapeOptions","Shape","cache","canTransform","selectGroup","shouldCache","circleLobes","Circle","points","i","angle","Math","PI","Victor","cos","sin","roundP","n","p","round","Number","EPSILON","pow","reduce","numerator","denominator","gcd","a","b","epicycloidA","epicycloidB","Epicycloid","link","parseInt","reduced","rotations","isInteger","scale","multiply","x","y","Orbit","r","level","settings","parent","child","sign","alternateRotation","speed","velocity","resolution","newr","relativeSize","newx","newy","rsum","fractalSpirographVelocity","fractalSpirographResolution","fractalSpirographNumCircles","fractalSpirographRelativeSize","fractalSpirographAlternateRotation","FractalSpirograph","linkText","end","numCircles","sun","next","addChild","j","update","Heart","hypocycloidA","hypocycloidB","Star","raysol_cursive","raysol_sanserif","billsey","curve","Array","keys","billseyConverter","vertices","newVertices","prevPoint","forEach","vertex","width","abs","height","concat","cv","reverse","maxX","raysolConverter","MonospaceFont","ch","upper","toUpperCase","hasOwnProperty","CursiveFont","distance","v1","v2","sqrt","point","atan2","onSegment","start","resizeVertices","sizeX","sizeY","size","bounds","length","loX","hiX","loY","hiY","findBounds","scaledBounds","deltaX","deltaY","clone","add","vertexRoundP","v","rotate","angleDeg","scalePerc","offset","Machine","enforceLimits","cleanVertices","limitPrecision","optimizePerimeter","addEndpoints","previous","nearestVertex","line","clipLine","pt","segments","stripExtraPerimeterVertices","minimizeMoves","minimizePerimeterMoves","connectedVertices","current","prev","tracePerimeter","flat","segment","perimeter","curr","onPerimeter","currentIndex","lastSegment","walked","shift","pop","minDist","MAX_SAFE_INTEGER","dist","perimeterDistance","splice","traceCircle","startAngle","endAngle","deltaAngle","tracePoints","PolarMachine","maxRadius","polarStartPoint","unshift","first","magnitude","startPoint","fromObject","polarEndPoint","last","endPoint","delta","rm","r1","r2","d","radStart","radEnd","intersections","getIntersections","intersection","on","otherPoint","point1","direction","subtract","normalize","t","distanceToLine","dt","point2","inputText","inputFont","rotateDir","getMaxX","InputText","prevLetter","lines","chi","nextLetter","vi","textPoints","connectorPoints","widthOffset","lastTheta","rPerY","thetaCenter","rOffset","maxY","rOffsetPerLine","thetaPerX","endTheta","onSubtypeChange","subtype","changes","maxIterations","minIterations","iterations","onMinIterations","onMaxIterations","lsystem","config","output","input","axiom","char","rules","lsystemDraw","side","lsystemPath","instructions","currVertices","startingAngle","returnPaths","slice","draw","includes","returnPath","revChar","subtypes","F","W","X","Y","Z","A","B","6","7","8","9","Object","LSystem","polygonSides","roundCorners","roundFraction","Polygon","numberOfPoints","beta","alpha","angleStart","angleEnd","numberOfLinePoints","getLineVertices","arcAngle","reuleauxSides","Reuleaux","corners","coverageAngle","halfCoverageAngle","c","corn","roseN","roseD","Rose","thetaClose","theta","iterationsGrow","L","R","SpaceFiller","machine","rectangular","minX","minY","starRatio","star_scale","PriorityQueue","collection","element","isEmpty","added","mix","s","u","result","Graph","nodeMap","nodeKeys","Set","adjacencyList","edgeMap","edgeKeys","clearCachedPaths","node","toString","has","node1","node2","weight","node1Key","node2Key","edgeKey","sort","ekey1","ekey2","startNode","endNode","shortest","getCachedShortestPath","times","backtrace","pq","nodes","Infinity","enqueue","currentNode","dequeue","neighbor","time","path","lastStep","cacheShortestPath","cachedPaths","getPairedKey","vecTriangle","vecSquare","getEdges","edges","count","da","db","dc","ab","ac","bc","ap","bp","cp","tessellationTwistNumSides","tessellationTwistIterations","tessellationTwistRotate","TessellationTwist","numSides","angle2","tessellation","sides","getShapeVertices","graph","edge","addNode","addEdge","prevKey","trail","g","edgePointer","edgeUsed","idReverse","idCount","getId","pushEdge","deg","inDeg","outDeg","directed","check","oddVertex","odd","checkDirected","checkUndirected","dfs","to","eulerianTrail","values","walkedVertices","walkedEdges","missingEdges","from","filter","hash","split","hasEdge","dijkstraShortestPath","missingVertex","Vicious1Vertices","V1Engineering","wiperType","wiperSize","wiperAngleDeg","outOfBounds","boundPoint","good","bad","size_x","size_y","dx","dy","fixed","nearEnough","linearVertices","outputVertices","startLocation","cosa","sina","orig_delta_w","orig_delta_h","temp","delta_w","delta_h","endLocation","nextWidthPoint","nextHeightPoint","emergency_break","corner","Wiper","halfHeight","halfWidth","emergencyBreak","radius","radiusPerAngle","spiralVertices","registeredShapes","polygon","star","circle","heart","reuleaux","epicycloid","hypocycloid","Hypocycloid","rose","v1Engineering","fractal_spirograph","tessellation_twist","wiper","space_filler","getShapes","shapes","getCurrentShapeId","getShapesSelector","createSelector","getCurrentShapeSelector","getCurrentTransformSelector","transforms","getShape","ScaleTransform","activeClassName","active","activeKey","Accordion","defaultActiveKey","Card","Toggle","eventKey","onClick","onGrow","Collapse","Body","ToggleButtonGroup","onGrowMethodChange","ToggleButton","variant","connect","ownProps","getOptions","dispatch","RotationTransform","onSpin","onSpinMethodChange","TrackTransform","activeGrowClassName","activeGrow","activeGrowKey","onTrack","onTrackGrow","Transforms","onRepeat","ontransformMethodChange","optionsRender","optionsListRender","entries","linkRender","rel","href","Button","onRestoreDefaults","metashape","getShapeById","metatransform","tAttrs","getInitialTransformState","customStyles","control","base","minHeight","ShapeList","groupOptions","optionLabel","found","group","newOptions","selectedOption","currentShape","styles","maxMenuHeight","selected","importerSlice","fileName","comments","zoom","originalAspectRatio","aspectRatio","updateImporter","assign","toggleFileAspectRatio","Importer","text","ThetaRhoImporter","callback","hasVertex","thetaRhos","ii","trim","indexOf","pointStrings","convertToXY","max_angle","rhoStep","rho","GCodeImporter","isComment","addVertex","Toolpath","addLine","modal","addArcCurve","v0","startTheta","deltaTheta","motion","thetaStep","loadFromString","err","results","normalizeCoords","scaleX","scaleY","importerOptions","Uploader","importer","importerProps","endTime","performance","now","timing","variable","startTime","file","files","reader","FileReader","onload","toLowerCase","endsWith","import","onFileImported","bind","readAsText","commentsRender","comment","style","cursor","accept","onFileSelected","display","setZoom","toggleAspectRatio","machineOptions","origin","localMinX","getItem","localMaxX","localMinY","localMaxY","localMaxRadius","machineSlice","rectExpanded","polarExpanded","JSON","parse","rectOrigin","updateMachine","toggleMachineRectExpanded","toggleMachinePolarExpanded","setMachineRectOrigin","newValue","toggleMinimizeMoves","setMachineSize","RectSettings","activeCallback","onOriginChange","expanded","PolarSettings","onStartPointChange","onEndPointChange","MachineSettings","Footer","appSlice","sandifyVersion","chooseInput","InputTabs","Tabs","onSelect","handleSelect","Tab","previewSlice","canvasWidth","canvasHeight","sliderValue","dragging","updatePreview","setPreviewSize","RectMachine","outPoint","clipped","newPoint","rDx","rDy","p1","p2","includeOriginalPoints","o1","o2","d1","d2","xSign","ySign","lineStart","lineEnd","quadrantStart","pointLocation","quadrantEnd","intPoint","console","log","Error","lengthSq","midpoint","sideStart","sideEnd","lineCrossSidePerp","diff","track","data","loopIndex","transformShape","amount","trackIndex","transformedVertex","growAmount","evaluate","spinAmount","loopPeriod","stage","rotateDeg","addX","addY","buildTrackLoop","numTrackLoops","nextTrackVertex","backtrack","numVertices","trackVertices","trackDistances","trackVertex","minIdx","minD","idx","polishVertices","machineClass","polish","fileType","throttledReportTiming","throttle","trailing","LRUCache","getApp","app","getTransforms","getTransform","getImporter","getMachine","getDragging","preview","getShapedVertices","stringify","getCacheKey","get","getVertices","set","getTransformedVertices","scaledVertices","transformShapes","getComputedVertices","getImportedVertices","x_scale","y_scale","machine_aspect_ratio","scaleImportedVertices","hasImported","getVerticesStats","numPoints","floor","getPreviewVertices","konvaDelta","getPreviewTrackVertices","mapStateToProps","use_rect","showTrack","PreviewShape","useSelector","useDispatch","konvaSize","isSelected","mmToPixels","moveTo_mm","context","in_mm","moveTo","lineTo_mm","lineTo","dot_mm","arc","fillStyle","strokeStyle","fill","onPreviewChange","shapeRef","React","createRef","trRef","useEffect","getLayer","batchDraw","Fragment","draggable","onTap","ref","strokeWidth","sceneFunc","sliderRange","begin_fraction","end_fraction","begin_vertex","end_vertex","sliderVertexRange","drawing_vertices","beginPath","lineWidth","Color","stroke","startColor","colorStep","strokeColor","lighten","hex","sliderEndPoint","fillStrokeShape","hitFunc","onDragStart","e","onDragEnd","onTransformStart","onTransformEnd","centeredScaling","resizeEnabled","rotationSnaps","enabledAnchors","PreviewWindow","wrapper","document","getElementById","throttledResize","resize","addEventListener","setTimeout","getComputedStyle","getPropertyValue","onResize","relativeScale","visibilityClass","checkDeselect","clipCircle","ctx","clipRect","rect","scaleByWheel","newSize","Consumer","store","onMouseDown","onTouchStart","onWheel","evt","preventDefault","onTransformChange","clipFunc","exporterSlice","pre","post","show","updateExporter","Exporter","header","startComments","keyValueLine","endComments","exportCode","footer","content","padding","commenting","commentChar","indentLevel","metamodel","instance","optionLine","CommentExporter","indent","optionLines","dedent","exporter","getComments","export","thetarho","toFixed","ThetaRhoExporter","fileExtension","subsampledVertices","deltaSegment","trVertices","previousTheta","previousRawTheta","rawTheta","GCodeExporter","gcode","SvgExporter","centeredVertices","svg","firstPoint","exporterOptions","exporters","Downloader","savedCode","gaRecord","downloadFile","join","close","createElement","download","blob","Blob","navigator","msSaveOrOpenBlob","URL","createObjectURL","createEvent","initEvent","dispatchEvent","click","revokeObjectURL","open","Modal","onHide","closeButton","Title","MachinePreview","verticesStats","onSlider","customizedMiddleware","getDefaultMiddleware","immutableCheck","ignoredPaths","serializableCheck","configureStore","reducer","combineReducers","appReducer","shapesReducer","transformsReducer","importerReducer","exporterReducer","machineReducer","previewReducer","middleware","tState","storedShape","App","ReactDOM","render"],"mappings":"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CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,IAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,IAAQ,CAAC,KAAM,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,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AM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,KAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,KAAQ,CAAC,MAAM,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,OA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O,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAA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AO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAChtC,EAAM,CAAE,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OACh4B,EAAM,CAAE,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OAChhC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC90B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC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Q,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OACjtD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OAC3gC,KAAO,CAAE,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjrC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC9iC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OACjiD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAA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O,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjjC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjtB,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,OACjj+C,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACj0C,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,OAChc,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,IAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,IAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,IAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACjpC,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OACviC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ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AAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAC10B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACz1C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACxjC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,EAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,EAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OAC1zC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OACt8C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OACllC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,GAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OAC7oC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACz7B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAC72B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,GAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,GAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,GAAQ,CAAC,KAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,OAAO,GAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC9qB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAO,GAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC/jC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC7xB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OAC7/B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC7kC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACz6B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACnlC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OACtoC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC10C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,GAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAO,GAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,GAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAO,GAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC91B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,GAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,GAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,GAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,GAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,GAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,OAAO,GAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACrmC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,GAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,GAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,GAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC9f,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,GAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,GAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,GAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC91B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,GAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,MAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,GAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC3oB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACzqB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACtgC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACnwB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACt/B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OAC1yB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACrnC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACzoC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACzvB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OAC/W,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,GAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC/7B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OAC50B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OAC7nB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAM,KAAQ,CAAC,MAAM,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OACp0B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OAC1b,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACv0B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACz+B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,OAAO,OAAQ,CAAC,OAAO,OAAQ,CAAC,OAAO,OAAQ,CAAC,OAAO,OAAQ,CAAC,OAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OACztC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAChuB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MA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,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OAC7wB,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAChY,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OACrpD,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAA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O,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,YAAc,cACzB,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,aAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,gBAC3B,IAAIA,KAAO,cAAgB,gBAC3B,IAAIA,KAAO,cAAgB,gBAC3B,IAAIA,KAAO,aAAe,gBAC1B,IAAIA,KAAO,cAAgB,kBAC3B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,aAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,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","file":"static/js/main.b40b1f93.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a6ab37e6.svg\";","import ReactGA from 'react-ga'\n\nReactGA.initialize('UA-126702426-1', {\n  debug: false // Set to true to see debug info in the console\n})\nReactGA.pageview(window.location.pathname + window.location.search)\n","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './Header.scss'\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <img src={logo} className=\"app-logo mr-2\" alt=\"logo\" />\n          <h1 className=\"d-inline m-0\">sandify</h1>\n          <p className=\"ml-4 d-none d-lg-block\">create patterns for robots that draw in sand with ball bearings</p>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default Header\n","import { createSlice } from '@reduxjs/toolkit'\nimport ReactGA from 'react-ga'\n\nconst shapesSlice = createSlice({\n  name: 'shape',\n  initialState: {\n    currentId: null,\n    selectedId: null,\n    byId: {},\n    allIds: []\n  },\n  reducers: {\n    addShape(state, action) {\n      let shape = { ...action.payload }\n      state.byId[shape.id] = shape\n      state.allIds.push(shape.id)\n    },\n    setCurrentShape(state, action) {\n      state.currentId = action.payload\n      state.selectedId = action.payload\n      ReactGA.event({\n        category: 'Shapes',\n        action: 'setCurrentShape: ' + action.payload,\n      })\n      localStorage.setItem('currentShape', state.currentId)\n    },\n    updateShape(state, action) {\n      const shape = action.payload\n      state.byId[shape.id] = {...state.byId[shape.id], ...shape}\n    }\n  }\n})\n\nexport const {\n  addShape,\n  setCurrentShape,\n  updateShape\n} = shapesSlice.actions\n\nexport default shapesSlice.reducer\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Form,\n  Row\n} from 'react-bootstrap'\nimport debounce from 'lodash/debounce'\n\nclass InputOption extends Component {\n  constructor(props) {\n    super(props);\n    this.delayedSet = debounce( (value, key, onChange) => {\n      let attrs = {}\n      attrs[key] = value\n      onChange(attrs)\n    }, 1500)\n  }\n\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n    const optionType = option.type || 'number'\n    const minimum = (typeof option.min === 'function') ? option.min(model) : parseFloat(option.min)\n    const maximum = (typeof option.max === 'function') ? option.max(model) : parseFloat(option.max)\n    const visible = option.isVisible === undefined ? true : option.isVisible(model)\n\n    return (\n      <Row className={\"align-items-center pb-1 \" + (visible ? null : ' d-none')}>\n        <Col sm={5}>\n        <Form.Label htmlFor=\"options-step\">\n          {option.title}\n        </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Form.Control\n            id=\"options-step\"\n            as={optionType===\"textarea\" ? \"textarea\" : \"input\"}\n            type={optionType}\n            step={option.step ? option.step : 1}\n            min={!isNaN(minimum) ? minimum : ''}\n            max={!isNaN(maximum) ? maximum : ''}\n            value={model[this.props.optionKey]}\n            onChange={(event) => {\n              let attrs = {}\n              let value = event.target.value\n\n              if (optionType === 'number') {\n                value = value === '' ? '' : parseFloat(value)\n              }\n\n              attrs[this.props.optionKey] = value\n              if (option.onChange !== undefined) {\n                attrs = option.onChange(attrs, model)\n              }\n              this.props.onChange(attrs)\n              if (this.props.delayKey !== undefined) {\n                this.delayedSet(value, this.props.delayKey, this.props.onChange)\n              }\n            }}\n            />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default InputOption\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Form,\n  Row\n} from 'react-bootstrap'\nimport Select from 'react-select'\n\nclass DropdownOption extends Component {\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n    const currentChoice = model[this.props.optionKey]\n\n    return (\n      <Row className=\"align-items-center pb-2\" key={this.props.index}>\n        <Col sm={5}>\n          <Form.Label htmlFor=\"options-dropdown\">\n            {option.title}\n          </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Select\n            value={{value: currentChoice, label: currentChoice}}\n            onChange={(choice) => {\n              const value = choice.value\n              let attrs = {}\n              attrs[this.props.optionKey] = value\n\n              if (option.onChange !== undefined) {\n                attrs = option.onChange(attrs, model)\n              }\n\n              this.props.onChange(attrs)\n            }}\n            options={option.choices.map((choice) => {\n              return { value: choice, label: choice}\n            })}\n            />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default DropdownOption\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Row,\n  Form,\n} from 'react-bootstrap'\nimport Switch from 'react-switch'\n\nclass CheckboxOption extends Component {\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n\n    return (\n      <Row className=\"align-items-center pb-2\">\n        <Col sm={5}>\n        <Form.Label htmlFor=\"options-step\">\n          {option.title}\n        </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Switch\n            checked={model[this.props.optionKey]}\n            onChange={(checked) => {\n              let attrs = {}\n              attrs[this.props.optionKey] = checked\n\n              if (option.onChange !== undefined) {\n                attrs = option.onChange(attrs, model)\n              }\n\n              this.props.onChange(attrs)\n            }} />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default CheckboxOption\n","const transformOptions = {\n  startingSize: {\n    title: 'Starting size',\n    min: 1,\n    isVisible: (state) => { return state.canChangeSize },\n  },\n  offsetX: {\n    title: 'X offset',\n  },\n  offsetY: {\n    title: 'Y offset',\n  },\n  rotation: {\n    title: 'Rotate (degrees)'\n  },\n  numLoops: {\n    title: 'Number of loops',\n    min: 1\n  },\n  transformMethod: {\n    title: 'When transforming shape',\n    type: 'dropdown',\n    choices: ['smear', 'intact'],\n  },\n  growEnabled: {\n    title: 'Grow'\n  },\n  growValue: {\n    title: 'Scale (+/-)',\n  },\n  growMethod: {\n    title: 'Scale by',\n    type: 'dropdown',\n    choices: ['constant', 'function']\n  },\n  growMathInput: {\n    title: 'Scale function (i)',\n    type: 'text',\n    isVisible: state => { return state.growMethod === 'function' },\n  },\n  growMath: {\n  },\n  spinEnabled: {\n    title: 'Spin',\n    isVisible: state => { return state.growMethod === 'constant'},\n  },\n  spinValue: {\n    title: 'Spin (+/-)',\n    step: 0.1,\n  },\n  spinMethod: {\n    title: 'Spin by',\n    type: 'dropdown',\n    choices: ['constant', 'function']\n  },\n  spinMathInput: {\n    title: 'Spin function (i)',\n    type: 'text',\n    isVisible: state => { return state.spinMethod === 'function' },\n  },\n  spinMath: {\n  },\n  spinSwitchbacks: {\n    title: 'Switchbacks',\n    isVisible: state => { return state.spinMethod === 'constant'},\n  },\n  trackEnabled: {\n    title: 'Track'\n  },\n  trackGrowEnabled: {\n    title: 'Track grow'\n  },\n  trackValue: {\n    title: 'Track size',\n  },\n  trackNumLoops: {\n    title: 'Number of loops at each track position',\n    min: 1\n  },\n  trackLength: {\n    title: 'Track length',\n    step: 0.05\n  },\n  trackGrow: {\n    title: 'Scale step (+/-)',\n  },\n}\n\nexport default class Transform {\n  getInitialState() {\n    return {\n      startingSize: 10,\n      offsetX: 0.0,\n      offsetY: 0.0,\n      rotation: 0,\n      numLoops: 10,\n      transformMethod: 'smear',\n      repeatEnabled: true,\n      growMethod: 'constant',\n      growMathInput: 'i+cos(i/2)',\n      growMath: 'i+cos(i/2)',\n      growEnabled: true,\n      growValue: 100,\n      spinMethod: 'constant',\n      spinMathInput: '10*sin(i/4)',\n      spinMath: '10*sin(i/4)',\n      spinEnabled: false,\n      spinValue: 2,\n      spinSwitchbacks: 0,\n      trackEnabled: false,\n      trackGrowEnabled: false,\n      trackValue: 10,\n      trackLength: 0.2,\n      trackNumLoops: 1,\n      trackGrow: 50.0\n    }\n  }\n\n  getOptions() {\n    return transformOptions\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport Transform from '../../models/Transform'\n\nconst transformsSlice = createSlice({\n  name: 'transforms',\n  initialState: {\n    byId: {},\n    allIds: []\n  },\n  reducers: {\n    addTransform(state, action) {\n      const transform = action.payload\n      const meta = new Transform()\n      state.byId[transform.id] = {...meta.getInitialState(), ...transform}\n      state.allIds.push(transform.id)\n    },\n    updateTransform(state, action) {\n      const transform = action.payload\n      state.byId[transform.id] = {...state.byId[transform.id], ...transform}\n    },\n    toggleRepeat(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].repeatEnabled = !state.byId[transform.id].repeatEnabled\n    },\n    toggleGrow(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].growEnabled = !state.byId[transform.id].growEnabled\n    },\n    toggleSpin(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].spinEnabled = !state.byId[transform.id].spinEnabled\n    },\n    toggleTrack(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].trackEnabled = !state.byId[transform.id].trackEnabled\n    },\n    toggleTrackGrow(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].trackGrowEnabled = !state.byId[transform.id].trackGrowEnabled\n    },\n  }\n})\n\nexport const {\n  addTransform,\n  updateTransform,\n  toggleRepeat,\n  toggleSpin,\n  toggleGrow,\n  toggleTrack,\n  toggleTrackGrow,\n} = transformsSlice.actions\n\nexport default transformsSlice.reducer\n","export const shapeOptions = {}\n\nexport default class Shape {\n  constructor(name) {\n    this.name = name\n    this.cache = []\n  }\n\n  getInitialState() {\n    return {\n      repeatEnabled: true,\n      canTransform: true,\n      selectGroup: 'Shapes',\n      shouldCache: true,\n    }\n  }\n\n  getInitialTransformState() {\n    return {\n      startingSize: 10,\n      canChangeSize: true,\n    }\n  }\n\n  getOptions() {\n    return shapeOptions\n  }\n\n  getVertices(state) {\n    return []\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    circleLobes: {\n      title: 'Number of lobes',\n      min: 1\n    }\n  }\n}\n\nexport default class Circle extends Shape {\n  constructor() {\n    super('Circle')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'circle',\n        circleLobes: 1\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<=128; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      points.push(new Victor(Math.cos(angle), Math.sin(state.shape.circleLobes * angle)/state.shape.circleLobes))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export const difference = (a, b) => {\n  return new Set(\n    [\n      ...[...a].filter(x => !b.has(x)),\n      ...[...b].filter(x => !a.has(x))\n    ]\n  )\n}\n\n// round a given number n to p number of digits\nexport const roundP = (n, p) => {\n  return Math.round((n + Number.EPSILON) * Math.pow(10, p)) / Math.pow(10, p)\n}\n\n// https://stackoverflow.com/a/4652513\nexport const reduce = (numerator, denominator) => {\n  let gcd = (a,b) => {\n    return b ? gcd(b, a%b) : a;\n  }\n\n  gcd = gcd(numerator, denominator)\n  return [numerator/gcd, denominator/gcd]\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\nimport { reduce } from '../common/util'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    epicycloidA: {\n      title: \"Large circle radius\",\n      min: 1\n    },\n    epicycloidB: {\n      title: \"Small circle radius\",\n      min: 1\n    },\n  }\n}\n\nexport default class Epicycloid extends Shape {\n  constructor() {\n    super('Clover')\n    this.link = 'http://mathworld.wolfram.com/Epicycloid.html'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'epicycloid',\n        epicycloidA: 4,\n        epicycloidB: 1\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = parseInt(state.shape.epicycloidA)\n    let b = parseInt(state.shape.epicycloidB)\n    let reduced = reduce(a, b)\n    a = reduced[0]\n    b = reduced[1]\n    let rotations = Number.isInteger(a/b) ? 1 : b\n    let scale = 1/(a + 2*b)\n\n    for (let i=0; i<128*rotations; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      points.push(\n        new Victor(\n          (a + b) * Math.cos(angle) - b * Math.cos(((a + b) / b) * angle),\n          (a + b) * Math.sin(angle) - b * Math.sin(((a + b) / b) * angle)\n        ).multiply({x: scale, y: scale})\n      )\n    }\n\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export default class Orbit {\n  constructor(x, y, r, level, settings, parent) {\n    this.x = x\n    this.y = y\n    this.r = r\n    this.child = null\n    this.angle = Math.PI/2\n    this.level = level\n    this.settings = settings\n\n    let sign = this.settings.alternateRotation ? -1 : 1\n    this.speed = Math.pow(settings.velocity * sign, this.level - 1) * Math.PI / 180 / settings.resolution\n    this.parent = parent\n  }\n\n  addChild() {\n    let newr = this.r / this.settings.relativeSize\n    let newx = this.x + this.r + newr\n    let newy = this.y\n    this.child = new Orbit(newx, newy, newr, this.level + 1, this.settings, this)\n    return this.child\n  }\n\n  update() {\n    if (this.parent) {\n      this.angle += this.speed\n\n      let rsum = this.r + this.parent.r\n      this.x = this.parent.x + rsum * Math.cos(this.angle)\n      this.y = this.parent.y + rsum * Math.sin(this.angle)\n    }\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from '../Shape'\nimport Orbit from './Orbit'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    fractalSpirographVelocity: {\n      title: 'Velocity',\n      min: 2\n    },\n    fractalSpirographResolution: {\n      title: 'Resolution',\n      min: 1\n    },\n    fractalSpirographNumCircles: {\n      title: 'Number of circles',\n      min: 1,\n      max: 6\n    },\n    fractalSpirographRelativeSize: {\n      title: 'Relative size (parent to child circle)',\n      min: 2,\n      max: 6\n    },\n    fractalSpirographAlternateRotation: {\n      title: 'Alternate rotation direction',\n      type: 'checkbox'\n    },\n  }\n}\n\n// Inspired/adapted from https://thecodingtrain.com/CodingChallenges/061-fractal-spirograph\nexport default class FractalSpirograph extends Shape {\n  constructor() {\n    super('Fractal Spirograph')\n    this.link = 'https://benice-equation.blogspot.com/2012/01/fractal-spirograph.html'\n    this.linkText = 'Fun math art (pictures) - benice equation'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'fractal_spirograph',\n        fractalSpirographVelocity: 8,\n        fractalSpirographResolution: 2,\n        fractalSpirographNumCircles: 5,\n        fractalSpirographRelativeSize: 3,\n        fractalSpirographAlternateRotation: true,\n      }\n    }\n  }\n\n  getInitialTransformState() {\n    return {\n      ...super.getInitialTransformState(),\n      ...{\n        startingSize: 54,\n        repeatEnabled: false,\n      }\n    }\n  }\n\n  getVertices(state) {\n    let resolution = parseInt(state.shape.fractalSpirographResolution)\n    let settings = {\n      resolution: resolution,\n      velocity: parseInt(state.shape.fractalSpirographVelocity),\n      numCircles: parseInt(state.shape.fractalSpirographNumCircles),\n      relativeSize: parseInt(state.shape.fractalSpirographRelativeSize),\n      alternateRotation: state.shape.fractalSpirographAlternateRotation\n    }\n\n    let sun = new Orbit(0, 0, 1, 0, settings)\n    let next = sun\n    let end\n    let points = []\n\n    for (var i=0; i<settings.numCircles; i++) {\n      next = next.addChild()\n    }\n    end = next\n\n    for (let i=0; i<resolution; i++) {\n      for (let j=0; j<361; j++) {\n        let next = sun\n\n        while (next != null) {\n          next.update()\n          next = next.child\n        }\n\n        points.push(new Victor(end.x, end.y))\n      }\n    }\n\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape from './Shape'\n\nexport default class Heart extends Shape {\n  constructor() {\n    super('Heart')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'heart',\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<128; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      let scale = 0.9\n      // heart equation from: http://mathworld.wolfram.com/HeartCurve.html\n      points.push(new Victor(scale * 1.0 * Math.pow(Math.sin(angle), 3),\n                         scale * (13.0/16.0 * Math.cos(angle) +\n                                    -5.0/16.0 * Math.cos(2.0 * angle) +\n                                    -2.0/16.0 * Math.cos(3.0 * angle) +\n                                    -1.0/16.0 * Math.cos(4.0 * angle))))\n    }\n    return points\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\nimport { reduce } from '../common/util'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    hypocycloidA: {\n      title: 'Large circle radius',\n      min: 1\n    },\n    hypocycloidB: {\n      title: 'Small circle radius',\n      min: 1\n    },\n  }\n}\n\nexport default class Star extends Shape {\n  constructor() {\n    super('Web')\n    this.link = 'http://mathworld.wolfram.com/Hypocycloid.html'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'hypocycloid',\n        hypocycloidA: 6,\n        hypocycloidB: 1\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = parseInt(state.shape.hypocycloidA)\n    let b = parseInt(state.shape.hypocycloidB)\n    let reduced = reduce(a, b)\n    a = reduced[0]\n    b = reduced[1]\n    let rotations = Number.isInteger(a/b) ? 1 : b\n    let scale = b < a ? 1/a : 1/(2*(b - a/2))\n\n    for (let i=0; i<128*rotations; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      points.push(\n        new Victor(\n          (a - b) * Math.cos(angle) + b * Math.cos(((a - b) / b) * angle),\n          (a - b) * Math.sin(angle) - b * Math.sin(((a - b) / b) * angle)\n        ).multiply({x: scale, y: scale})\n      )\n    }\n\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export let raysol_cursive = {\n  ' ' : [ [0.000,-0.786], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786],  ],\n  '0' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.549,-0.786], [0.570,-0.779], [0.641,-0.741], [0.729,-0.673], [0.754,-0.642], [0.799,-0.548], [0.833,-0.422], [0.833,-0.317], [0.833,-0.211], [0.833,-0.106], [0.833,-0.001], [0.833,0.105], [0.833,0.210], [0.833,0.315], [0.833,0.421], [0.833,0.531], [0.810,0.599], [0.779,0.645], [0.749,0.690], [0.711,0.738], [0.629,0.786], [0.570,0.786], [0.513,0.786], [0.442,0.738], [0.374,0.690], [0.340,0.645], [0.315,0.599], [0.289,0.531], [0.289,0.422], [0.289,0.313], [0.289,0.204], [0.289,0.095], [0.289,-0.014], [0.289,-0.123], [0.289,-0.232], [0.289,-0.341], [0.289,-0.450], [0.315,-0.559], [0.351,-0.655], [0.388,-0.701], [0.449,-0.742], [0.489,-0.762], [0.549,-0.786], [0.655,-0.786], [0.731,-0.786], [0.816,-0.786], [0.901,-0.786], [0.986,-0.786], [1.071,-0.786], [1.156,-0.786],  ],\n  '1' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.629], [0.340,-0.472], [0.340,-0.315], [0.340,-0.157], [0.340,-0.000], [0.340,0.157], [0.340,0.314], [0.340,0.472], [0.340,0.629], [0.340,0.786], [0.340,0.629], [0.340,0.472], [0.340,0.314], [0.340,0.157], [0.340,-0.000], [0.340,-0.157], [0.340,-0.315], [0.340,-0.472], [0.340,-0.629], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786],  ],\n  '2' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.702], [0.442,-0.537], [0.544,-0.330], [0.624,-0.174], [0.660,0.032], [0.687,0.212], [0.698,0.295], [0.708,0.427], [0.714,0.514], [0.708,0.595], [0.690,0.659], [0.677,0.702], [0.663,0.726], [0.629,0.752], [0.587,0.769], [0.544,0.760], [0.493,0.744], [0.442,0.727], [0.374,0.701], [0.306,0.625], [0.247,0.574], [0.306,0.625], [0.374,0.701], [0.442,0.727], [0.493,0.744], [0.544,0.760], [0.587,0.769], [0.629,0.752], [0.663,0.726], [0.677,0.702], [0.690,0.659], [0.708,0.595], [0.714,0.514], [0.708,0.427], [0.698,0.295], [0.687,0.212], [0.660,0.032], [0.624,-0.174], [0.544,-0.330], [0.442,-0.537], [0.340,-0.702], [0.425,-0.701], [0.544,-0.633], [0.612,-0.599], [0.680,-0.574], [0.765,-0.591], [0.850,-0.616], [0.935,-0.667], [1.020,-0.744], [1.105,-0.786],  ],\n  '3' : [ [0.085,-0.786], [0.170,-0.786], [0.272,-0.786], [0.330,-0.786], [0.405,-0.786], [0.442,-0.786], [0.493,-0.772], [0.559,-0.752], [0.612,-0.718], [0.648,-0.683], [0.677,-0.653], [0.707,-0.618], [0.731,-0.548], [0.764,-0.473], [0.782,-0.396], [0.784,-0.312], [0.775,-0.241], [0.765,-0.181], [0.751,-0.123], [0.700,-0.029], [0.620,0.021], [0.544,0.038], [0.425,0.056], [0.557,0.087], [0.586,0.111], [0.640,0.165], [0.697,0.234], [0.734,0.337], [0.749,0.431], [0.741,0.516], [0.726,0.600], [0.712,0.659], [0.672,0.740], [0.641,0.777], [0.586,0.786], [0.537,0.777], [0.485,0.769], [0.412,0.744], [0.331,0.710], [0.412,0.744], [0.485,0.769], [0.537,0.777], [0.586,0.786], [0.641,0.777], [0.672,0.740], [0.712,0.659], [0.726,0.600], [0.741,0.516], [0.749,0.431], [0.734,0.337], [0.697,0.234], [0.640,0.165], [0.586,0.111], [0.557,0.087], [0.484,0.056], [0.544,0.038], [0.620,0.021], [0.700,-0.029], [0.751,-0.123], [0.765,-0.181], [0.775,-0.241], [0.784,-0.312], [0.782,-0.396], [0.764,-0.473], [0.731,-0.548], [0.707,-0.618], [0.677,-0.653], [0.648,-0.683], [0.612,-0.718], [0.559,-0.752], [0.493,-0.772], [0.425,-0.761], [0.357,-0.744], [0.289,-0.718], [0.221,-0.616], [0.289,-0.718], [0.357,-0.744], [0.425,-0.761], [0.493,-0.772], [0.559,-0.752], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  '4' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.765,-0.629], [0.765,-0.472], [0.765,-0.315], [0.765,-0.157], [0.765,-0.000], [0.765,0.157], [0.765,0.314], [0.765,0.472], [0.765,0.629], [0.765,0.786], [0.680,0.655], [0.595,0.524], [0.510,0.393], [0.425,0.262], [0.340,0.131], [0.255,-0.000], [0.356,-0.000], [0.457,-0.000], [0.558,-0.000], [0.659,-0.000], [0.760,-0.000], [0.861,-0.000], [0.962,-0.000], [1.062,-0.000], [1.139,-0.000], [1.062,-0.000], [0.962,-0.000], [0.861,-0.000], [0.760,-0.000], [0.765,-0.157], [0.765,-0.315], [0.765,-0.472], [0.765,-0.629], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786],  ],\n  '5' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.438,-0.786], [0.520,-0.786], [0.607,-0.786], [0.659,-0.783], [0.730,-0.749], [0.796,-0.698], [0.853,-0.612], [0.884,-0.497], [0.892,-0.319], [0.887,-0.167], [0.850,-0.064], [0.795,0.038], [0.744,0.100], [0.680,0.122], [0.608,0.144], [0.540,0.123], [0.441,0.081], [0.378,0.043], [0.302,-0.014], [0.302,0.145], [0.302,0.303], [0.302,0.461], [0.302,0.619], [0.302,0.727], [0.359,0.727], [0.415,0.727], [0.471,0.727], [0.528,0.727], [0.584,0.727], [0.640,0.727], [0.731,0.727], [0.850,0.727], [0.731,0.727], [0.640,0.727], [0.584,0.727], [0.528,0.727], [0.471,0.727], [0.415,0.727], [0.359,0.727], [0.302,0.727], [0.302,0.619], [0.302,0.461], [0.302,0.303], [0.302,0.145], [0.302,-0.014], [0.378,0.043], [0.441,0.081], [0.540,0.123], [0.608,0.144], [0.680,0.122], [0.744,0.100], [0.795,0.038], [0.850,-0.064], [0.887,-0.167], [0.892,-0.319], [0.884,-0.497], [0.853,-0.612], [0.796,-0.698], [0.730,-0.749], [0.659,-0.783], [0.607,-0.786], [0.520,-0.786], [0.425,-0.752], [0.357,-0.701], [0.289,-0.616], [0.238,-0.531], [0.187,-0.489], [0.153,-0.472], [0.187,-0.489], [0.238,-0.531], [0.289,-0.616], [0.357,-0.701], [0.425,-0.752], [0.520,-0.786], [0.607,-0.786], [0.659,-0.786], [0.816,-0.786], [0.901,-0.786], [0.986,-0.786], [1.071,-0.786], [1.156,-0.786], [1.241,-0.786], [1.326,-0.786],  ],\n  '6' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.449,-0.742], [0.489,-0.762], [0.549,-0.786], [0.655,-0.779], [0.726,-0.741], [0.814,-0.673], [0.839,-0.642], [0.866,-0.607], [0.924,-0.422], [0.926,-0.323], [0.911,-0.213], [0.895,-0.168], [0.864,-0.099], [0.834,-0.053], [0.796,-0.005], [0.720,0.034], [0.619,0.042], [0.557,0.034], [0.513,0.025], [0.453,-0.002], [0.332,-0.071], [0.373,0.033], [0.414,0.137], [0.455,0.241], [0.496,0.345], [0.538,0.449], [0.579,0.553], [0.620,0.657], [0.661,0.761], [0.620,0.657], [0.579,0.553], [0.538,0.449], [0.496,0.345], [0.455,0.241], [0.414,0.137], [0.373,0.033], [0.332,-0.071], [0.276,-0.200], [0.263,-0.274], [0.255,-0.347], [0.274,-0.489], [0.306,-0.559], [0.351,-0.655], [0.391,-0.701], [0.489,-0.762], [0.549,-0.786], [0.655,-0.779], [0.731,-0.786], [0.816,-0.786], [0.901,-0.786], [0.986,-0.786], [1.071,-0.786], [1.156,-0.786],  ],\n  '7' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.391,-0.629], [0.442,-0.472], [0.493,-0.315], [0.544,-0.157], [0.595,-0.000], [0.646,0.157], [0.697,0.314], [0.748,0.472], [0.799,0.629], [0.850,0.786], [0.776,0.786], [0.701,0.786], [0.627,0.786], [0.552,0.786], [0.478,0.786], [0.404,0.786], [0.329,0.786], [0.255,0.786], [0.329,0.786], [0.404,0.786], [0.478,0.786], [0.552,0.786], [0.627,0.786], [0.701,0.786], [0.776,0.786], [0.850,0.786], [0.799,0.629], [0.748,0.472], [0.697,0.314], [0.646,0.157], [0.595,-0.000], [0.544,-0.157], [0.493,-0.315], [0.442,-0.472], [0.391,-0.629], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '8' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.556,-0.784], [0.618,-0.786], [0.695,-0.763], [0.756,-0.733], [0.795,-0.664], [0.853,-0.560], [0.878,-0.429], [0.870,-0.334], [0.846,-0.267], [0.797,-0.132], [0.740,-0.033], [0.674,0.065], [0.643,0.098], [0.611,0.132], [0.561,0.166], [0.527,0.200], [0.493,0.247], [0.459,0.293], [0.425,0.361], [0.391,0.446], [0.408,0.545], [0.459,0.644], [0.510,0.701], [0.570,0.734], [0.643,0.760], [0.716,0.734], [0.777,0.701], [0.828,0.644], [0.879,0.545], [0.896,0.446], [0.862,0.361], [0.828,0.293], [0.794,0.247], [0.760,0.200], [0.726,0.166], [0.676,0.132], [0.579,0.098], [0.548,0.065], [0.481,-0.033], [0.425,-0.132], [0.376,-0.267], [0.352,-0.334], [0.344,-0.429], [0.369,-0.560], [0.427,-0.664], [0.466,-0.733], [0.527,-0.763], [0.603,-0.786], [0.666,-0.784], [0.695,-0.763], [0.756,-0.733], [0.795,-0.664], [0.853,-0.560], [0.878,-0.429], [0.870,-0.334], [0.846,-0.267], [0.797,-0.132], [0.740,-0.033], [0.797,-0.132], [0.846,-0.267], [0.870,-0.334], [0.878,-0.429], [0.853,-0.560], [0.795,-0.664], [0.756,-0.733], [0.695,-0.763], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '9' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.714,-0.786], [0.717,-0.612], [0.717,-0.455], [0.717,-0.297], [0.717,-0.139], [0.717,0.019], [0.717,0.177], [0.717,0.335], [0.717,0.493], [0.717,0.650], [0.717,0.786], [0.648,0.786], [0.521,0.786], [0.415,0.744], [0.340,0.659], [0.306,0.523], [0.292,0.364], [0.299,0.230], [0.317,0.147], [0.339,0.086], [0.387,-0.030], [0.442,-0.063], [0.509,-0.055], [0.558,-0.030], [0.618,-0.004], [0.663,0.013], [0.717,0.019], [0.717,-0.139], [0.717,-0.297], [0.717,-0.455], [0.717,-0.612], [0.714,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  'A' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.459,-0.781], [0.534,-0.759], [0.623,-0.711], [0.715,-0.601], [0.793,-0.507], [0.715,-0.601], [0.623,-0.711], [0.534,-0.759], [0.459,-0.781], [0.383,-0.743], [0.308,-0.661], [0.250,-0.586], [0.206,-0.475], [0.173,-0.322], [0.170,-0.191], [0.187,-0.003], [0.227,0.147], [0.284,0.286], [0.339,0.375], [0.435,0.509], [0.521,0.596], [0.637,0.685], [0.790,0.761], [0.865,0.786], [0.863,0.706], [0.861,0.583], [0.859,0.460], [0.857,0.337], [0.855,0.213], [0.853,0.090], [0.851,-0.033], [0.849,-0.156], [0.848,-0.280], [0.846,-0.403], [0.847,-0.466], [0.868,-0.563], [0.954,-0.635], [1.033,-0.701], [1.109,-0.744], [1.213,-0.786],  ],\n  'B' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.255,-0.629], [0.255,-0.471], [0.255,-0.313], [0.255,-0.155], [0.255,0.002], [0.255,0.160], [0.255,0.318], [0.255,0.476], [0.255,0.633], [0.281,0.659], [0.327,0.701], [0.380,0.744], [0.445,0.773], [0.501,0.777], [0.552,0.777], [0.589,0.761], [0.646,0.726], [0.699,0.680], [0.733,0.630], [0.764,0.556], [0.761,0.455], [0.748,0.389], [0.723,0.285], [0.689,0.191], [0.621,0.106], [0.517,0.064], [0.476,0.064], [0.517,0.064], [0.596,0.025], [0.650,-0.037], [0.680,-0.062], [0.748,-0.148], [0.791,-0.248], [0.809,-0.312], [0.814,-0.452], [0.811,-0.490], [0.796,-0.566], [0.780,-0.620], [0.697,-0.718], [0.622,-0.762], [0.572,-0.786], [0.476,-0.786], [0.374,-0.786], [0.255,-0.786], [0.374,-0.786], [0.476,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  'C' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.752], [0.459,-0.693], [0.397,-0.605], [0.357,-0.548], [0.332,-0.452], [0.306,-0.327], [0.298,-0.208], [0.298,-0.106], [0.298,0.016], [0.318,0.183], [0.338,0.310], [0.385,0.442], [0.462,0.585], [0.548,0.675], [0.652,0.746], [0.776,0.786], [0.872,0.767], [0.963,0.643], [1.019,0.491], [1.040,0.351], [1.019,0.491], [0.963,0.643], [0.872,0.767], [0.776,0.786], [0.652,0.746], [0.548,0.675], [0.462,0.585], [0.385,0.442], [0.338,0.310], [0.318,0.183], [0.298,0.016], [0.298,-0.106], [0.298,-0.208], [0.306,-0.327], [0.332,-0.452], [0.397,-0.605], [0.459,-0.693], [0.544,-0.748], [0.682,-0.786], [0.777,-0.786], [0.850,-0.786], [0.884,-0.786], [0.953,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786],  ],\n  'D' : [ [0.123,-0.786], [0.213,-0.786], [0.321,-0.786], [0.401,-0.786], [0.465,-0.786], [0.544,-0.786], [0.639,-0.786], [0.772,-0.764], [0.918,-0.711], [0.955,-0.676], [1.020,-0.592], [1.072,-0.460], [1.090,-0.357], [1.104,-0.199], [1.103,-0.111], [1.082,0.035], [1.062,0.183], [1.037,0.271], [1.009,0.356], [0.982,0.435], [0.899,0.546], [0.816,0.633], [0.748,0.684], [0.646,0.741], [0.566,0.766], [0.496,0.761], [0.425,0.733], [0.425,0.604], [0.425,0.526], [0.425,0.343], [0.425,0.149], [0.425,-0.030], [0.425,-0.156], [0.425,-0.442], [0.425,-0.544], [0.425,-0.701], [0.465,-0.786], [0.544,-0.786], [0.639,-0.786], [0.748,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786],  ],\n  'E' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.701], [0.381,-0.614], [0.317,-0.487], [0.277,-0.361], [0.274,-0.221], [0.309,-0.157], [0.356,-0.115], [0.405,-0.072], [0.493,-0.030], [0.563,0.006], [0.629,0.027], [0.714,0.027], [0.629,0.027], [0.570,0.064], [0.509,0.120], [0.474,0.143], [0.386,0.229], [0.331,0.313], [0.291,0.438], [0.293,0.552], [0.320,0.660], [0.383,0.743], [0.478,0.786], [0.564,0.786], [0.629,0.786], [0.675,0.786], [0.723,0.786], [0.799,0.786], [0.723,0.786], [0.675,0.786], [0.629,0.786], [0.564,0.786], [0.478,0.786], [0.383,0.743], [0.320,0.660], [0.293,0.552], [0.291,0.438], [0.331,0.313], [0.386,0.229], [0.474,0.143], [0.509,0.120], [0.570,0.064], [0.629,0.027], [0.714,0.027], [0.629,0.027], [0.563,0.006], [0.493,-0.030], [0.405,-0.072], [0.356,-0.115], [0.309,-0.157], [0.274,-0.221], [0.277,-0.361], [0.317,-0.487], [0.381,-0.614], [0.443,-0.698], [0.500,-0.735], [0.583,-0.769], [0.695,-0.781], [0.786,-0.780], [0.864,-0.780], [0.935,-0.779],  ],\n  'F' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.578,-0.786], [0.663,-0.786], [0.724,-0.767], [0.792,-0.699], [0.852,-0.558], [0.853,-0.440], [0.854,-0.321], [0.855,-0.203], [0.856,-0.085], [0.857,0.034], [0.858,0.152], [0.859,0.270], [0.860,0.389], [0.861,0.507], [0.863,0.625], [0.969,0.608], [1.076,0.588], [1.173,0.616], [1.282,0.654], [1.394,0.701], [1.282,0.654], [1.173,0.616], [1.076,0.588], [0.969,0.608], [0.863,0.625], [0.763,0.663], [0.633,0.713], [0.466,0.713], [0.317,0.628], [0.247,0.404], [0.317,0.628], [0.466,0.713], [0.633,0.713], [0.763,0.663], [0.863,0.625], [0.861,0.507], [0.860,0.389], [0.859,0.270], [0.858,0.152], [0.857,0.034], [0.742,0.037], [0.631,0.054], [0.442,0.071], [0.631,0.054], [0.742,0.037], [0.857,0.034], [0.960,0.035], [1.075,0.043], [1.224,0.052], [1.075,0.043], [0.960,0.035], [0.857,0.034], [0.856,-0.085], [0.855,-0.203], [0.854,-0.321], [0.854,-0.395], [0.850,-0.506], [0.852,-0.558], [0.833,-0.650], [0.773,-0.713], [0.663,-0.769], [0.591,-0.766], [0.564,-0.774], [0.537,-0.774], [0.501,-0.766], [0.452,-0.701], [0.420,-0.650], [0.413,-0.583], [0.422,-0.519], [0.474,-0.465], [0.511,-0.442], [0.573,-0.438], [0.653,-0.442], [0.740,-0.496], [0.866,-0.616], [0.927,-0.687], [1.035,-0.756], [1.079,-0.803], [1.211,-0.837], [1.310,-0.829], [1.406,-0.820], [1.491,-0.786],  ],\n  'G' : [ [0.085,-0.786], [0.171,-0.761], [0.245,-0.712], [0.316,-0.660], [0.389,-0.609], [0.489,-0.507], [0.573,-0.398], [0.610,-0.341], [0.658,-0.254], [0.708,-0.125], [0.757,0.004], [0.782,0.082], [0.819,0.177], [0.837,0.274], [0.857,0.392], [0.880,0.508], [0.884,0.597], [0.881,0.711], [0.842,0.799], [0.762,0.772], [0.720,0.745], [0.697,0.705], [0.640,0.590], [0.631,0.560], [0.612,0.445], [0.607,0.395], [0.628,0.243], [0.653,0.178], [0.695,0.088], [0.834,-0.031], [0.931,-0.028], [1.047,0.038], [1.117,0.106], [1.179,0.236], [1.262,0.405], [1.246,0.225], [1.209,-0.096], [1.181,-0.235], [1.140,-0.389], [1.103,-0.495], [1.032,-0.625], [0.956,-0.707], [0.865,-0.758], [0.770,-0.787], [0.681,-0.782], [0.598,-0.762], [0.500,-0.710], [0.455,-0.632], [0.427,-0.556], [0.380,-0.481], [0.324,-0.330], [0.465,-0.389], [0.637,-0.468], [0.784,-0.548], [0.909,-0.586], [1.032,-0.625], [1.141,-0.663], [1.245,-0.677], [1.351,-0.699], [1.489,-0.744], [1.611,-0.786],  ],\n  'H' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.496,-0.786], [0.496,-0.609], [0.496,-0.479], [0.496,-0.348], [0.496,-0.217], [0.496,-0.086], [0.496,0.044], [0.496,0.175], [0.496,0.306], [0.496,0.404], [0.496,0.508], [0.476,0.604], [0.453,0.687], [0.391,0.744], [0.272,0.786], [0.391,0.744], [0.453,0.687], [0.476,0.604], [0.496,0.508], [0.496,0.404], [0.496,0.306], [0.496,0.175], [0.496,0.044], [0.635,0.071], [0.774,0.097], [0.913,0.123], [1.051,0.149], [1.105,0.175], [1.105,0.306], [1.105,0.404], [1.105,0.508], [1.105,0.616], [1.122,0.701], [1.165,0.760], [1.275,0.786], [1.165,0.760], [1.122,0.701], [1.105,0.616], [1.105,0.508], [1.105,0.404], [1.105,0.306], [1.105,0.175], [1.105,0.044], [1.105,-0.086], [1.105,-0.217], [1.105,-0.348], [1.105,-0.479], [1.105,-0.609], [1.139,-0.701], [1.190,-0.761], [1.275,-0.778], [1.360,-0.786], [1.445,-0.786], [1.530,-0.786],  ],\n  'I' : [ [0.085,-0.786], [0.170,-0.786], [0.289,-0.786], [0.425,-0.786], [0.515,-0.773], [0.596,-0.794], [0.685,-0.801], [0.782,-0.773], [0.838,-0.602], [0.914,-0.473], [0.876,-0.349], [0.832,-0.152], [0.789,0.006], [0.773,0.196], [0.765,0.298], [0.773,0.517], [0.799,0.650], [0.833,0.740], [0.884,0.802], [1.020,0.804], [1.071,0.800], [1.120,0.702], [1.151,0.628], [1.189,0.387], [1.198,0.208], [1.180,-0.065], [1.165,-0.166], [1.100,-0.403], [1.046,-0.509], [1.007,-0.577], [0.899,-0.681], [0.782,-0.773], [0.685,-0.801], [0.596,-0.794], [0.515,-0.773], [0.420,-0.719], [0.381,-0.640], [0.357,-0.564], [0.317,-0.488], [0.271,-0.336], [0.408,-0.397], [0.574,-0.479], [0.716,-0.562], [0.838,-0.602], [0.958,-0.643], [1.064,-0.683], [1.168,-0.699], [1.271,-0.722], [1.408,-0.761], [1.529,-0.786],  ],\n  'J' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.457,-0.733], [0.593,-0.715], [0.428,-0.508], [0.343,-0.336], [0.301,-0.096], [0.292,0.057], [0.286,0.286], [0.316,0.532], [0.382,0.703], [0.439,0.754], [0.506,0.780], [0.591,0.790], [0.690,0.782], [0.734,0.739], [0.789,0.616], [0.802,0.553], [0.814,0.386], [0.818,0.209], [0.808,-0.059], [0.799,-0.253], [0.787,-0.441], [0.780,-0.614], [0.767,-0.807], [0.752,-0.952], [0.760,-1.127], [0.737,-1.292], [0.712,-1.438], [0.661,-1.505], [0.604,-1.531], [0.426,-1.533], [0.365,-1.508], [0.310,-1.439], [0.298,-1.296], [0.310,-1.143], [0.346,-0.955], [0.397,-0.844], [0.457,-0.733], [0.588,-0.715], [0.675,-0.731], [0.762,-0.748], [0.849,-0.764], [0.935,-0.780], [1.021,-0.779], [1.106,-0.779], [1.188,-0.786],  ],\n  'K' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.540,-0.627], [0.551,-0.494], [0.562,-0.360], [0.574,-0.227], [0.585,-0.094], [0.596,0.040], [0.580,0.158], [0.563,0.276], [0.547,0.393], [0.530,0.511], [0.514,0.629], [0.497,0.747], [0.442,0.744], [0.382,0.736], [0.317,0.679], [0.268,0.607], [0.223,0.532], [0.268,0.607], [0.317,0.679], [0.382,0.736], [0.442,0.744], [0.497,0.747], [0.514,0.629], [0.530,0.511], [0.547,0.393], [0.563,0.276], [0.580,0.158], [0.596,0.040], [0.689,0.087], [0.752,0.165], [0.815,0.242], [0.878,0.320], [0.941,0.397], [1.004,0.475], [1.067,0.553], [1.130,0.630], [1.149,0.740], [1.130,0.630], [1.067,0.553], [1.004,0.475], [0.941,0.397], [0.878,0.320], [0.815,0.242], [0.752,0.165], [0.689,0.087], [0.626,0.010], [0.675,-0.067], [0.725,-0.143], [0.775,-0.219], [0.825,-0.295], [0.875,-0.371], [0.925,-0.448], [0.974,-0.524], [1.024,-0.600], [1.074,-0.676], [1.124,-0.761], [1.220,-0.786], [1.299,-0.786], [1.363,-0.786], [1.442,-0.786], [1.526,-0.786],  ],\n  'L' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.323,-0.778], [0.370,-0.766], [0.406,-0.774], [0.433,-0.774], [0.460,-0.766], [0.520,-0.743], [0.558,-0.713], [0.629,-0.650], [0.681,-0.570], [0.717,-0.506], [0.723,-0.395], [0.739,-0.305], [0.748,-0.179], [0.751,-0.045], [0.743,0.148], [0.741,0.224], [0.757,0.263], [0.749,0.353], [0.776,0.537], [0.788,0.600], [0.824,0.711], [0.872,0.783], [0.894,0.827], [0.968,0.850], [1.027,0.795], [1.061,0.723], [1.082,0.596], [1.071,0.517], [1.050,0.464], [0.971,0.366], [0.940,0.343], [0.848,0.288], [0.808,0.275], [0.660,0.257], [0.624,0.259], [0.500,0.288], [0.386,0.343], [0.285,0.410], [0.386,0.343], [0.500,0.288], [0.624,0.259], [0.660,0.257], [0.808,0.275], [0.848,0.288], [0.940,0.343], [0.971,0.366], [1.050,0.464], [1.071,0.517], [1.082,0.596], [1.061,0.723], [1.027,0.795], [0.968,0.850], [0.894,0.827], [0.872,0.783], [0.824,0.711], [0.788,0.600], [0.776,0.537], [0.749,0.353], [0.757,0.263], [0.741,0.224], [0.743,0.148], [0.751,-0.045], [0.748,-0.179], [0.739,-0.305], [0.723,-0.395], [0.717,-0.506], [0.681,-0.570], [0.629,-0.650], [0.558,-0.713], [0.520,-0.743], [0.460,-0.766], [0.433,-0.774], [0.406,-0.774], [0.370,-0.766], [0.320,-0.701], [0.289,-0.650], [0.282,-0.583], [0.291,-0.519], [0.343,-0.465], [0.379,-0.442], [0.442,-0.438], [0.521,-0.442], [0.609,-0.496], [0.734,-0.616], [0.796,-0.687], [0.904,-0.756], [0.948,-0.786], [1.080,-0.786], [1.179,-0.786], [1.275,-0.786], [1.360,-0.786],  ],\n  'M' : [ [0.085,-0.786], [0.213,-0.786], [0.340,-0.786], [0.468,-0.786], [0.583,-0.736], [0.593,-0.622], [0.603,-0.507], [0.613,-0.393], [0.623,-0.278], [0.633,-0.164], [0.643,-0.049], [0.653,0.065], [0.663,0.180], [0.673,0.294], [0.683,0.409], [0.655,0.534], [0.628,0.634], [0.592,0.749], [0.500,0.795], [0.412,0.754], [0.321,0.685], [0.238,0.576], [0.321,0.685], [0.412,0.754], [0.500,0.795], [0.592,0.749], [0.628,0.634], [0.655,0.534], [0.683,0.409], [0.673,0.294], [0.663,0.180], [0.653,0.065], [0.643,-0.049], [0.633,-0.164], [0.623,-0.278], [0.613,-0.393], [0.603,-0.507], [0.593,-0.622], [0.583,-0.736], [0.593,-0.622], [0.603,-0.507], [0.613,-0.393], [0.623,-0.278], [0.633,-0.164], [0.643,-0.049], [0.653,0.065], [0.663,0.180], [0.673,0.294], [0.683,0.409], [0.727,0.575], [0.800,0.719], [0.921,0.793], [1.057,0.807], [1.122,0.730], [1.162,0.644], [1.188,0.569], [1.233,0.406], [1.223,0.292], [1.214,0.178], [1.205,0.063], [1.196,-0.051], [1.187,-0.166], [1.177,-0.280], [1.168,-0.394], [1.159,-0.509], [1.150,-0.623], [1.140,-0.737], [1.150,-0.623], [1.159,-0.509], [1.168,-0.394], [1.177,-0.280], [1.187,-0.166], [1.196,-0.051], [1.205,0.063], [1.214,0.178], [1.223,0.292], [1.233,0.406], [1.281,0.599], [1.354,0.743], [1.398,0.797], [1.480,0.835], [1.620,0.831], [1.673,0.767], [1.711,0.694], [1.737,0.619], [1.750,0.543], [1.747,0.420], [1.743,0.297], [1.740,0.174], [1.737,0.051], [1.733,-0.072], [1.730,-0.195], [1.726,-0.318], [1.723,-0.441], [1.719,-0.564], [1.716,-0.687], [1.815,-0.746], [1.921,-0.786], [2.001,-0.786], [2.085,-0.786], [2.186,-0.786],  ],\n  'N' : [ [0.128,-0.786], [0.255,-0.786], [0.425,-0.786], [0.568,-0.765], [0.577,-0.710], [0.580,-0.603], [0.584,-0.497], [0.587,-0.390], [0.590,-0.283], [0.593,-0.177], [0.597,-0.070], [0.600,0.037], [0.603,0.143], [0.607,0.250], [0.610,0.357], [0.582,0.537], [0.557,0.637], [0.528,0.747], [0.471,0.804], [0.406,0.800], [0.333,0.745], [0.282,0.665], [0.234,0.577], [0.282,0.665], [0.333,0.745], [0.406,0.800], [0.471,0.804], [0.528,0.747], [0.557,0.637], [0.582,0.537], [0.610,0.357], [0.607,0.250], [0.603,0.143], [0.600,0.037], [0.597,-0.070], [0.593,-0.177], [0.590,-0.283], [0.587,-0.390], [0.584,-0.497], [0.580,-0.603], [0.577,-0.710], [0.568,-0.765], [0.577,-0.710], [0.580,-0.603], [0.584,-0.497], [0.587,-0.390], [0.590,-0.283], [0.593,-0.177], [0.597,-0.070], [0.600,0.037], [0.603,0.143], [0.607,0.250], [0.610,0.357], [0.635,0.471], [0.659,0.604], [0.712,0.723], [0.759,0.795], [0.841,0.825], [0.947,0.826], [1.010,0.775], [1.078,0.692], [1.108,0.617], [1.130,0.465], [1.141,0.300], [1.141,0.199], [1.140,0.099], [1.139,-0.001], [1.138,-0.101], [1.137,-0.201], [1.136,-0.302], [1.136,-0.402], [1.135,-0.502], [1.134,-0.602], [1.133,-0.703], [1.197,-0.754], [1.234,-0.786], [1.306,-0.786], [1.355,-0.786], [1.420,-0.786], [1.505,-0.786],  ],\n  'O' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.565,-0.770], [0.621,-0.775], [0.714,-0.769], [0.806,-0.733], [0.867,-0.701], [0.912,-0.644], [0.959,-0.587], [1.028,-0.429], [1.061,-0.246], [1.067,-0.145], [1.065,0.024], [1.046,0.265], [1.037,0.379], [0.986,0.518], [0.918,0.668], [0.782,0.786], [0.714,0.786], [0.649,0.760], [0.572,0.699], [0.502,0.656], [0.435,0.572], [0.380,0.494], [0.332,0.378], [0.295,0.296], [0.271,0.169], [0.255,0.064], [0.255,-0.026], [0.255,-0.106], [0.266,-0.206], [0.307,-0.371], [0.340,-0.446], [0.373,-0.519], [0.417,-0.592], [0.451,-0.668], [0.509,-0.727], [0.565,-0.770], [0.621,-0.775], [0.714,-0.769], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786],  ],\n  'P' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.786], [0.289,-0.786], [0.289,-0.641], [0.289,-0.495], [0.289,-0.349], [0.289,-0.204], [0.289,-0.058], [0.314,-0.055], [0.410,-0.085], [0.476,-0.099], [0.603,-0.071], [0.676,-0.039], [0.777,0.051], [0.800,0.075], [0.856,0.217], [0.862,0.248], [0.866,0.337], [0.862,0.388], [0.856,0.463], [0.829,0.525], [0.776,0.636], [0.749,0.673], [0.688,0.748], [0.655,0.772], [0.603,0.786], [0.561,0.786], [0.493,0.769], [0.439,0.737], [0.400,0.701], [0.354,0.651], [0.323,0.599], [0.289,0.525], [0.289,0.379], [0.289,0.234], [0.289,0.088], [0.289,-0.058], [0.289,-0.204], [0.289,-0.349], [0.289,-0.495], [0.289,-0.641], [0.289,-0.786], [0.374,-0.786], [0.459,-0.786], [0.544,-0.786], [0.629,-0.786], [0.714,-0.786], [0.799,-0.786], [0.884,-0.786], [0.969,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  'Q' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.621,-0.786], [0.565,-0.770], [0.509,-0.727], [0.451,-0.668], [0.417,-0.592], [0.373,-0.519], [0.340,-0.446], [0.307,-0.371], [0.266,-0.206], [0.255,-0.106], [0.255,-0.026], [0.255,0.064], [0.271,0.169], [0.295,0.296], [0.332,0.378], [0.380,0.494], [0.435,0.572], [0.502,0.656], [0.572,0.710], [0.649,0.760], [0.714,0.786], [0.816,0.777], [0.918,0.668], [0.986,0.518], [1.037,0.379], [1.062,0.191], [1.065,0.024], [1.067,-0.145], [1.061,-0.246], [1.028,-0.429], [0.959,-0.587], [0.912,-0.644], [0.867,-0.701], [0.806,-0.733], [0.714,-0.769], [0.621,-0.786], [0.565,-0.770], [0.509,-0.727], [0.451,-0.668], [0.417,-0.592], [0.443,-0.531], [0.479,-0.481], [0.550,-0.430], [0.674,-0.430], [0.773,-0.472], [0.860,-0.532], [0.914,-0.595], [1.011,-0.667], [1.092,-0.732], [1.182,-0.786], [1.260,-0.786], [1.351,-0.786],  ],\n  'R' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.323,-0.786], [0.408,-0.786], [0.408,-0.640], [0.408,-0.494], [0.408,-0.348], [0.408,-0.201], [0.408,-0.055], [0.408,0.091], [0.408,0.237], [0.408,0.384], [0.408,0.530], [0.408,0.727], [0.480,0.744], [0.552,0.744], [0.648,0.744], [0.731,0.744], [0.816,0.744], [0.895,0.703], [0.966,0.616], [1.005,0.544], [1.026,0.494], [1.054,0.378], [1.051,0.276], [1.036,0.191], [0.998,0.132], [0.940,0.069], [0.850,0.004], [0.738,-0.016], [0.629,-0.030], [0.561,-0.034], [0.509,-0.037], [0.433,-0.032], [0.450,-0.091], [0.527,-0.191], [0.595,-0.319], [0.655,-0.400], [0.681,-0.437], [0.719,-0.487], [0.757,-0.536], [0.795,-0.585], [0.850,-0.650], [0.892,-0.710], [0.932,-0.769], [0.969,-0.803], [1.008,-0.820], [1.082,-0.829], [1.131,-0.820], [1.190,-0.786], [1.275,-0.786],  ],\n  'S' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.761], [0.306,-0.718], [0.357,-0.676], [0.391,-0.599], [0.433,-0.497], [0.493,-0.327], [0.544,-0.191], [0.620,-0.064], [0.689,0.064], [0.790,0.154], [0.833,0.234], [0.876,0.335], [0.909,0.429], [0.919,0.520], [0.922,0.614], [0.905,0.690], [0.871,0.749], [0.825,0.777], [0.739,0.786], [0.654,0.777], [0.584,0.760], [0.549,0.734], [0.525,0.681], [0.514,0.605], [0.507,0.548], [0.509,0.463], [0.517,0.404], [0.544,0.306], [0.587,0.174], [0.689,0.064], [0.790,-0.021], [0.872,-0.190], [0.944,-0.302], [0.918,-0.440], [0.884,-0.506], [0.850,-0.574], [0.765,-0.684], [0.680,-0.748], [0.579,-0.761], [0.519,-0.766], [0.476,-0.774], [0.425,-0.774], [0.344,-0.766], [0.298,-0.718], [0.264,-0.650], [0.256,-0.583], [0.265,-0.519], [0.313,-0.465], [0.354,-0.442], [0.423,-0.429], [0.501,-0.429], [0.581,-0.442], [0.669,-0.496], [0.794,-0.616], [0.855,-0.687], [0.963,-0.756], [1.046,-0.803], [1.140,-0.837], [1.239,-0.829], [1.335,-0.786],  ],\n  'T' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.440,-0.786], [0.514,-0.786], [0.578,-0.769], [0.621,-0.750], [0.683,-0.702], [0.717,-0.659], [0.759,-0.567], [0.790,-0.489], [0.809,-0.361], [0.820,-0.229], [0.830,-0.097], [0.840,0.035], [0.851,0.168], [0.861,0.300], [0.871,0.432], [0.882,0.564], [0.882,0.697], [0.920,0.681], [0.986,0.659], [1.052,0.655], [1.123,0.659], [1.188,0.681], [1.275,0.718], [1.394,0.759], [1.275,0.718], [1.188,0.681], [1.123,0.659], [1.052,0.655], [0.986,0.659], [0.920,0.681], [0.882,0.697], [0.785,0.730], [0.731,0.747], [0.679,0.762], [0.595,0.769], [0.471,0.728], [0.340,0.652], [0.471,0.728], [0.595,0.769], [0.679,0.762], [0.731,0.747], [0.785,0.730], [0.882,0.697], [0.882,0.564], [0.871,0.432], [0.861,0.300], [0.851,0.168], [0.840,0.035], [0.830,-0.097], [0.820,-0.229], [0.809,-0.361], [0.790,-0.489], [0.579,-0.761], [0.519,-0.766], [0.476,-0.774], [0.425,-0.774], [0.344,-0.766], [0.298,-0.718], [0.264,-0.650], [0.256,-0.583], [0.265,-0.519], [0.313,-0.465], [0.354,-0.442], [0.423,-0.429], [0.501,-0.429], [0.581,-0.442], [0.669,-0.496], [0.794,-0.616], [0.855,-0.687], [0.963,-0.756], [1.046,-0.803], [1.140,-0.837], [1.239,-0.829], [1.335,-0.820], [1.419,-0.803], [1.504,-0.786], [1.589,-0.786],  ],\n  'U' : [ [0.085,-0.786], [0.170,-0.785], [0.255,-0.783], [0.340,-0.781], [0.421,-0.745], [0.502,-0.709], [0.549,-0.661], [0.521,-0.621], [0.492,-0.535], [0.487,-0.355], [0.503,-0.237], [0.518,-0.119], [0.534,-0.001], [0.549,0.117], [0.565,0.234], [0.581,0.352], [0.596,0.470], [0.612,0.588], [0.594,0.643], [0.539,0.730], [0.499,0.755], [0.403,0.729], [0.349,0.658], [0.289,0.554], [0.252,0.493], [0.195,0.440], [0.252,0.493], [0.289,0.554], [0.349,0.658], [0.403,0.729], [0.499,0.755], [0.539,0.730], [0.594,0.643], [0.612,0.588], [0.596,0.470], [0.581,0.352], [0.565,0.234], [0.549,0.117], [0.534,-0.001], [0.518,-0.119], [0.503,-0.237], [0.487,-0.355], [0.492,-0.535], [0.521,-0.621], [0.549,-0.661], [0.591,-0.715], [0.678,-0.759], [0.764,-0.770], [0.837,-0.738], [0.902,-0.687], [0.936,-0.651], [0.967,-0.594], [1.005,-0.551], [1.061,-0.494], [1.073,-0.316], [1.088,-0.195], [1.103,-0.073], [1.117,0.049], [1.132,0.170], [1.147,0.292], [1.162,0.413], [1.177,0.535], [1.192,0.657], [1.217,0.817], [1.192,0.657], [1.177,0.535], [1.162,0.413], [1.147,0.292], [1.132,0.170], [1.117,0.049], [1.103,-0.073], [1.088,-0.195], [1.073,-0.316], [1.066,-0.418], [1.061,-0.494], [1.073,-0.609], [1.096,-0.659], [1.126,-0.710], [1.202,-0.752], [1.275,-0.761], [1.357,-0.786], [1.442,-0.786], [1.530,-0.786],  ],\n  'V' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.778], [0.425,-0.769], [0.510,-0.744], [0.595,-0.718], [0.646,-0.659], [0.682,-0.590], [0.717,-0.650], [0.751,-0.689], [0.790,-0.735], [0.867,-0.786], [0.969,-0.761], [1.022,-0.716], [1.085,-0.571], [1.118,-0.425], [1.135,-0.300], [1.152,-0.175], [1.169,-0.049], [1.186,0.076], [1.202,0.202], [1.219,0.327], [1.236,0.452], [1.253,0.578], [1.270,0.703], [1.287,0.786], [1.343,0.744], [1.420,0.688], [1.486,0.674], [1.543,0.699], [1.615,0.735], [1.543,0.699], [1.486,0.674], [1.420,0.688], [1.343,0.744], [1.287,0.786], [1.270,0.703], [1.253,0.578], [1.236,0.452], [1.219,0.327], [1.202,0.202], [1.186,0.076], [1.169,-0.049], [1.152,-0.175], [1.135,-0.300], [1.118,-0.425], [1.085,-0.571], [1.022,-0.716], [0.969,-0.761], [0.867,-0.786], [0.790,-0.735], [0.751,-0.689], [0.717,-0.650], [0.682,-0.590], [0.642,-0.426], [0.642,-0.262], [0.642,-0.097], [0.642,0.067], [0.642,0.231], [0.642,0.395], [0.626,0.588], [0.592,0.664], [0.552,0.735], [0.505,0.786], [0.459,0.760], [0.414,0.718], [0.371,0.667], [0.323,0.621], [0.255,0.542], [0.323,0.621], [0.371,0.667], [0.414,0.718], [0.459,0.760], [0.505,0.786], [0.552,0.735], [0.592,0.664], [0.626,0.588], [0.642,0.395], [0.642,0.231], [0.642,0.067], [0.642,-0.097], [0.642,-0.262], [0.642,-0.426], [0.682,-0.590], [0.717,-0.650], [0.751,-0.689], [0.790,-0.735], [0.867,-0.786], [0.969,-0.761], [1.022,-0.716], [1.105,-0.752], [1.190,-0.769], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786], [1.530,-0.786], [1.615,-0.786], [1.700,-0.786], [1.785,-0.786],  ],\n  'W' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.552,-0.739], [0.516,-0.647], [0.487,-0.569], [0.458,-0.430], [0.454,-0.354], [0.450,-0.252], [0.456,-0.096], [0.463,0.061], [0.469,0.218], [0.475,0.374], [0.481,0.531], [0.478,0.660], [0.459,0.724], [0.413,0.803], [0.357,0.775], [0.306,0.659], [0.238,0.531], [0.306,0.659], [0.357,0.775], [0.413,0.803], [0.459,0.724], [0.478,0.660], [0.481,0.531], [0.475,0.374], [0.469,0.218], [0.463,0.061], [0.456,-0.096], [0.450,-0.252], [0.454,-0.354], [0.458,-0.430], [0.487,-0.569], [0.516,-0.647], [0.552,-0.739], [0.599,-0.760], [0.652,-0.766], [0.726,-0.753], [0.788,-0.724], [0.856,-0.681], [0.912,-0.581], [0.949,-0.494], [0.987,-0.275], [0.990,-0.164], [0.993,-0.052], [0.996,0.060], [0.999,0.172], [1.002,0.283], [1.005,0.395], [1.008,0.507], [1.011,0.619], [1.014,0.730], [1.018,0.786], [1.014,0.730], [1.011,0.619], [1.008,0.507], [1.005,0.395], [1.002,0.283], [0.999,0.172], [0.996,0.060], [0.993,-0.052], [0.990,-0.164], [0.987,-0.275], [0.990,-0.543], [1.025,-0.644], [1.080,-0.695], [1.158,-0.761], [1.249,-0.761], [1.335,-0.718], [1.401,-0.672], [1.437,-0.622], [1.446,-0.474], [1.455,-0.326], [1.464,-0.179], [1.473,-0.031], [1.482,0.117], [1.491,0.265], [1.500,0.413], [1.509,0.561], [1.518,0.708], [1.527,0.786], [1.518,0.708], [1.509,0.561], [1.500,0.413], [1.491,0.265], [1.482,0.117], [1.473,-0.031], [1.464,-0.179], [1.455,-0.326], [1.446,-0.474], [1.437,-0.622], [1.514,-0.678], [1.602,-0.718], [1.688,-0.752], [1.774,-0.786], [1.861,-0.786], [1.945,-0.786],  ],\n  'X' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.321,-0.682], [0.388,-0.578], [0.454,-0.473], [0.520,-0.369], [0.586,-0.264], [0.653,-0.160], [0.719,-0.055], [0.785,0.049], [0.852,0.154], [0.918,0.258], [0.984,0.363], [1.050,0.467], [1.117,0.572], [1.183,0.676], [1.249,0.781], [1.183,0.676], [1.117,0.572], [1.050,0.467], [0.984,0.363], [0.918,0.258], [0.852,0.154], [0.781,0.144], [0.761,0.265], [0.741,0.387], [0.721,0.508], [0.701,0.629], [0.637,0.768], [0.512,0.730], [0.425,0.642], [0.370,0.577], [0.308,0.475], [0.370,0.577], [0.425,0.642], [0.512,0.730], [0.637,0.768], [0.701,0.629], [0.721,0.508], [0.741,0.387], [0.761,0.265], [0.781,0.144], [0.801,0.023], [0.821,-0.099], [0.841,-0.220], [0.861,-0.341], [0.881,-0.463], [0.901,-0.584], [0.947,-0.685], [0.984,-0.782], [1.037,-0.786], [1.036,-0.786], [1.117,-0.786], [1.214,-0.786], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786],  ],\n  'Y' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.365,-0.701], [0.387,-0.581], [0.375,-0.466], [0.383,-0.340], [0.404,-0.134], [0.426,0.071], [0.447,0.276], [0.468,0.481], [0.473,0.634], [0.445,0.749], [0.410,0.786], [0.340,0.777], [0.255,0.752], [0.340,0.777], [0.410,0.786], [0.445,0.749], [0.473,0.634], [0.468,0.481], [0.447,0.276], [0.426,0.071], [0.404,-0.134], [0.383,-0.340], [0.375,-0.466], [0.387,-0.581], [0.423,-0.684], [0.467,-0.750], [0.521,-0.756], [0.573,-0.733], [0.628,-0.686], [0.685,-0.624], [0.731,-0.548], [0.790,-0.489], [0.866,-0.430], [0.886,-0.303], [0.906,-0.176], [0.927,-0.050], [0.947,0.077], [0.968,0.204], [0.988,0.331], [1.009,0.458], [1.029,0.585], [1.050,0.701], [1.070,0.786], [1.050,0.701], [1.029,0.585], [1.009,0.458], [0.988,0.331], [0.968,0.204], [0.947,0.077], [0.927,-0.050], [0.906,-0.176], [0.886,-0.303], [0.866,-0.430], [0.847,-0.571], [0.829,-0.712], [0.810,-0.852], [0.792,-0.993], [0.773,-1.134], [0.755,-1.275], [0.724,-1.403], [0.679,-1.484], [0.620,-1.509], [0.562,-1.522], [0.476,-1.534], [0.408,-1.484], [0.376,-1.419], [0.367,-1.306], [0.392,-1.217], [0.442,-1.109], [0.510,-0.999], [0.570,-0.891], [0.626,-0.833], [0.714,-0.786], [0.782,-0.786], [0.833,-0.786], [0.929,-0.786], [0.986,-0.786], [1.054,-0.786], [1.139,-0.786], [1.224,-0.786],  ],\n  'Z' : [ [0.085,-0.786], [0.170,-0.786], [0.245,-0.786], [0.323,-0.701], [0.395,-0.577], [0.488,-0.462], [0.626,-0.240], [0.699,-0.091], [0.750,0.051], [0.784,0.192], [0.797,0.370], [0.762,0.534], [0.748,0.571], [0.701,0.657], [0.628,0.747], [0.561,0.752], [0.446,0.715], [0.342,0.625], [0.314,0.592], [0.255,0.530], [0.314,0.592], [0.342,0.625], [0.446,0.715], [0.561,0.752], [0.628,0.747], [0.701,0.657], [0.748,0.571], [0.762,0.534], [0.797,0.370], [0.784,0.192], [0.750,0.051], [0.699,-0.091], [0.626,-0.240], [0.488,-0.462], [0.395,-0.577], [0.323,-0.701], [0.384,-0.684], [0.417,-0.665], [0.532,-0.661], [0.562,-0.686], [0.666,-0.950], [0.652,-1.118], [0.645,-1.167], [0.586,-1.385], [0.570,-1.429], [0.499,-1.570], [0.379,-1.580], [0.305,-1.560], [0.274,-1.523], [0.251,-1.475], [0.234,-1.358], [0.247,-1.211], [0.311,-1.087], [0.375,-0.970], [0.442,-0.871], [0.502,-0.799], [0.595,-0.761], [0.646,-0.769], [0.714,-0.786], [0.792,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  'a' : [ [0.085,-0.718], [0.146,-0.557], [0.146,-0.500], [0.153,-0.455], [0.180,-0.395], [0.204,-0.353], [0.219,-0.319], [0.246,-0.276], [0.272,-0.234], [0.298,-0.191], [0.333,-0.157], [0.379,-0.132], [0.432,-0.098], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.561,-0.718], [0.501,-0.773], [0.425,-0.801], [0.357,-0.820], [0.279,-0.801], [0.230,-0.754], [0.213,-0.731], [0.184,-0.681], [0.151,-0.616], [0.146,-0.557], [0.146,-0.500], [0.153,-0.455], [0.180,-0.395], [0.204,-0.353], [0.219,-0.319], [0.246,-0.276], [0.272,-0.234], [0.298,-0.191], [0.333,-0.157], [0.379,-0.132], [0.432,-0.098], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.678,-0.744], [0.729,-0.801], [0.781,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  'b' : [ [0.043,-0.786], [0.085,-0.761], [0.128,-0.727], [0.170,-0.693], [0.199,-0.667], [0.227,-0.625], [0.256,-0.574], [0.285,-0.497], [0.313,-0.429], [0.342,-0.361], [0.371,-0.268], [0.399,-0.191], [0.428,-0.106], [0.457,-0.004], [0.485,0.064], [0.514,0.140], [0.543,0.241], [0.571,0.320], [0.587,0.399], [0.588,0.510], [0.572,0.602], [0.529,0.674], [0.473,0.743], [0.432,0.750], [0.397,0.739], [0.367,0.724], [0.343,0.686], [0.323,0.627], [0.318,0.497], [0.316,0.368], [0.315,0.238], [0.313,0.108], [0.316,-0.022], [0.318,-0.152], [0.320,-0.282], [0.321,-0.412], [0.323,-0.542], [0.333,-0.672], [0.352,-0.718], [0.381,-0.771], [0.412,-0.786], [0.463,-0.786], [0.500,-0.782], [0.537,-0.764], [0.564,-0.746], [0.590,-0.688], [0.604,-0.634], [0.622,-0.573], [0.636,-0.514], [0.655,-0.446], [0.662,-0.377], [0.670,-0.293], [0.672,-0.200], [0.674,-0.112], [0.743,-0.140], [0.790,-0.157], [0.842,-0.149],  ],\n  'c' : [ [0.034,-0.769], [0.051,-0.735], [0.076,-0.676], [0.097,-0.599], [0.113,-0.565], [0.136,-0.514], [0.163,-0.446], [0.210,-0.344], [0.246,-0.268], [0.272,-0.222], [0.296,-0.191], [0.329,-0.152], [0.360,-0.123], [0.396,-0.094], [0.442,-0.081], [0.485,-0.072], [0.529,-0.064], [0.595,-0.064], [0.646,-0.106], [0.680,-0.191], [0.646,-0.106], [0.595,-0.064], [0.529,-0.064], [0.485,-0.072], [0.442,-0.081], [0.396,-0.094], [0.360,-0.123], [0.329,-0.152], [0.296,-0.191], [0.272,-0.222], [0.246,-0.268], [0.199,-0.407], [0.199,-0.497], [0.202,-0.565], [0.220,-0.657], [0.246,-0.708], [0.263,-0.731], [0.279,-0.754], [0.306,-0.795], [0.355,-0.829], [0.446,-0.846], [0.561,-0.829], [0.637,-0.820], [0.697,-0.812], [0.765,-0.803], [0.850,-0.795], [0.935,-0.786],  ],\n  'd' : [ [0.085,-0.786], [0.136,-0.769], [0.181,-0.701], [0.238,-0.616], [0.279,-0.557], [0.282,-0.500], [0.289,-0.455], [0.298,-0.395], [0.313,-0.319], [0.333,-0.242], [0.357,-0.191], [0.425,-0.123], [0.469,-0.089], [0.515,-0.072], [0.629,-0.043], [0.697,-0.036], [0.782,-0.036], [0.697,-0.036], [0.629,-0.043], [0.515,-0.072], [0.469,-0.089], [0.425,-0.123], [0.357,-0.191], [0.333,-0.242], [0.313,-0.319], [0.298,-0.395], [0.289,-0.455], [0.282,-0.500], [0.279,-0.557], [0.287,-0.616], [0.320,-0.681], [0.366,-0.754], [0.415,-0.801], [0.459,-0.810], [0.510,-0.808], [0.561,-0.801], [0.637,-0.773], [0.697,-0.718], [0.799,-0.650], [0.867,-0.639], [0.867,-0.592], [0.867,-0.489], [0.867,-0.404], [0.867,-0.293], [0.867,-0.149], [0.867,0.064], [0.867,0.234], [0.867,0.404], [0.867,0.574], [0.867,0.744], [0.867,0.574], [0.867,0.404], [0.867,0.234], [0.867,0.064], [0.867,-0.149], [0.867,-0.293], [0.867,-0.404], [0.867,-0.489], [0.867,-0.592], [0.867,-0.639], [0.875,-0.701], [0.899,-0.744], [0.950,-0.801], [1.002,-0.824], [1.068,-0.815], [1.122,-0.812], [1.190,-0.786],  ],\n  'e' : [ [0.085,-0.786], [0.170,-0.786], [0.290,-0.744], [0.378,-0.693], [0.459,-0.659], [0.503,-0.616], [0.537,-0.548], [0.561,-0.497], [0.571,-0.446], [0.576,-0.404], [0.579,-0.336], [0.576,-0.276], [0.568,-0.229], [0.559,-0.191], [0.551,-0.160], [0.534,-0.106], [0.517,-0.072], [0.486,-0.047], [0.444,-0.030], [0.401,-0.021], [0.359,-0.030], [0.316,-0.047], [0.286,-0.072], [0.269,-0.106], [0.252,-0.160], [0.243,-0.191], [0.235,-0.229], [0.226,-0.276], [0.223,-0.336], [0.226,-0.404], [0.231,-0.446], [0.241,-0.497], [0.265,-0.548], [0.299,-0.616], [0.342,-0.659], [0.422,-0.701], [0.510,-0.744], [0.605,-0.761], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786],  ],\n  'f' : [ [0.043,-0.786], [0.076,-0.779], [0.107,-0.773], [0.145,-0.744], [0.192,-0.710], [0.225,-0.684], [0.264,-0.667], [0.321,-0.642], [0.374,-0.592], [0.425,-0.548], [0.451,-0.446], [0.468,-0.361], [0.485,-0.276], [0.501,-0.191], [0.518,-0.106], [0.535,-0.038], [0.552,0.047], [0.565,0.131], [0.582,0.212], [0.605,0.299], [0.619,0.402], [0.632,0.506], [0.614,0.607], [0.578,0.667], [0.535,0.680], [0.485,0.684], [0.425,0.671], [0.374,0.652], [0.329,0.619], [0.298,0.531], [0.294,0.428], [0.292,0.299], [0.294,0.169], [0.296,-0.000], [0.296,-0.172], [0.296,-0.276], [0.298,-0.385], [0.297,-0.489], [0.296,-0.598], [0.295,-0.710], [0.295,-0.829], [0.292,-0.931], [0.289,-1.041], [0.286,-1.126], [0.281,-1.254], [0.281,-1.356], [0.279,-1.466], [0.272,-1.602], [0.323,-1.602], [0.374,-1.601], [0.423,-1.594], [0.474,-1.551], [0.510,-1.509], [0.542,-1.466], [0.550,-1.381], [0.542,-1.296], [0.533,-1.211], [0.522,-1.126], [0.508,-1.041], [0.491,-0.956], [0.468,-0.888], [0.442,-0.846], [0.383,-0.752], [0.420,-0.769], [0.468,-0.803], [0.510,-0.829], [0.567,-0.812], [0.639,-0.803], [0.723,-0.795], [0.807,-0.786], [0.892,-0.786],  ],\n  'g' : [ [0.033,-0.778], [0.067,-0.761], [0.117,-0.727], [0.145,-0.706], [0.204,-0.662], [0.238,-0.633], [0.284,-0.592], [0.317,-0.557], [0.350,-0.506], [0.384,-0.458], [0.400,-0.430], [0.434,-0.384], [0.467,-0.337], [0.500,-0.291], [0.527,-0.251], [0.559,-0.217], [0.601,-0.175], [0.633,-0.149], [0.678,-0.132], [0.729,-0.115], [0.780,-0.098], [0.831,-0.086], [0.883,-0.089], [0.901,-0.123], [0.898,-0.191], [0.894,-0.259], [0.891,-0.327], [0.887,-0.395], [0.884,-0.463], [0.881,-0.531], [0.877,-0.599], [0.874,-0.667], [0.870,-0.735], [0.816,-0.761], [0.763,-0.786], [0.678,-0.812], [0.610,-0.824], [0.527,-0.812], [0.457,-0.786], [0.400,-0.754], [0.355,-0.676], [0.334,-0.592], [0.317,-0.557], [0.350,-0.506], [0.384,-0.458], [0.400,-0.430], [0.434,-0.384], [0.467,-0.337], [0.500,-0.291], [0.527,-0.251], [0.559,-0.217], [0.601,-0.175], [0.633,-0.149], [0.678,-0.132], [0.729,-0.115], [0.780,-0.098], [0.831,-0.086], [0.883,-0.089], [0.901,-0.123], [0.898,-0.191], [0.894,-0.259], [0.891,-0.327], [0.887,-0.395], [0.884,-0.463], [0.881,-0.531], [0.877,-0.599], [0.874,-0.667], [0.870,-0.735], [0.867,-0.803], [0.864,-0.871], [0.860,-0.939], [0.857,-1.007], [0.853,-1.075], [0.850,-1.143], [0.847,-1.211], [0.843,-1.279], [0.840,-1.347], [0.836,-1.415], [0.833,-1.484], [0.830,-1.551], [0.826,-1.619], [0.765,-1.615], [0.697,-1.608], [0.646,-1.598], [0.595,-1.568], [0.544,-1.526], [0.493,-1.466], [0.459,-1.398], [0.442,-1.347], [0.425,-1.279], [0.433,-1.228], [0.459,-1.186], [0.500,-1.125], [0.530,-1.084], [0.567,-1.041], [0.627,-0.990], [0.695,-0.948], [0.746,-0.914], [0.800,-0.871], [0.873,-0.829], [0.949,-0.820], [1.037,-0.812], [1.105,-0.803], [1.190,-0.786],  ],\n  'h' : [ [0.046,-0.710], [0.072,-0.666], [0.110,-0.611], [0.134,-0.564], [0.169,-0.515], [0.197,-0.467], [0.221,-0.419], [0.250,-0.374], [0.277,-0.327], [0.303,-0.276], [0.326,-0.242], [0.349,-0.200], [0.383,-0.155], [0.432,-0.083], [0.483,-0.038], [0.508,0.013], [0.549,0.064], [0.575,0.131], [0.602,0.202], [0.617,0.249], [0.641,0.297], [0.651,0.370], [0.660,0.438], [0.662,0.523], [0.651,0.616], [0.641,0.693], [0.599,0.742], [0.542,0.769], [0.483,0.769], [0.406,0.738], [0.355,0.702], [0.321,0.636], [0.295,0.511], [0.295,0.425], [0.295,0.339], [0.295,0.227], [0.295,0.114], [0.295,0.001], [0.295,-0.111], [0.295,-0.224], [0.295,-0.336], [0.295,-0.449], [0.295,-0.561], [0.295,-0.674], [0.295,-0.786], [0.299,-0.674], [0.302,-0.561], [0.329,-0.514], [0.368,-0.447], [0.392,-0.386], [0.420,-0.307], [0.447,-0.255], [0.475,-0.185], [0.507,-0.149], [0.564,-0.132], [0.625,-0.123], [0.678,-0.132], [0.743,-0.166], [0.767,-0.229], [0.760,-0.307], [0.755,-0.375], [0.748,-0.453], [0.748,-0.533], [0.761,-0.623], [0.786,-0.717], [0.845,-0.766], [0.920,-0.794], [1.005,-0.786],  ],\n  'i' : [ [0.085,-0.791], [0.173,-0.803], [0.256,-0.811], [0.289,-0.765], [0.316,-0.712], [0.331,-0.635], [0.333,-0.550], [0.335,-0.508], [0.341,-0.431], [0.346,-0.372], [0.352,-0.287], [0.352,-0.202], [0.354,-0.143], [0.357,-0.032], [0.357,-0.143], [0.358,-0.202], [0.356,-0.287], [0.360,-0.372], [0.364,-0.432], [0.368,-0.508], [0.369,-0.551], [0.370,-0.636], [0.384,-0.712], [0.409,-0.765], [0.441,-0.811], [0.518,-0.829], [0.585,-0.795], [0.677,-0.786],  ],\n  'j' : [ [0.042,-0.761], [0.098,-0.734], [0.131,-0.693], [0.159,-0.658], [0.188,-0.613], [0.199,-0.589], [0.225,-0.548], [0.250,-0.516], [0.272,-0.468], [0.295,-0.420], [0.317,-0.360], [0.334,-0.299], [0.343,-0.264], [0.360,-0.195], [0.373,-0.100], [0.383,-0.049], [0.383,-0.099], [0.383,-0.167], [0.383,-0.276], [0.383,-0.395], [0.383,-0.513], [0.383,-0.632], [0.383,-0.751], [0.383,-0.869], [0.383,-0.988], [0.383,-1.107], [0.383,-1.225], [0.383,-1.344], [0.368,-1.405], [0.349,-1.466], [0.326,-1.514], [0.296,-1.530], [0.255,-1.534], [0.218,-1.518], [0.196,-1.496], [0.172,-1.406], [0.162,-1.296], [0.159,-1.211], [0.173,-1.126], [0.196,-1.053], [0.218,-1.005], [0.241,-0.957], [0.263,-0.909], [0.286,-0.861], [0.301,-0.837], [0.328,-0.808], [0.356,-0.780], [0.384,-0.753], [0.408,-0.742], [0.439,-0.734], [0.473,-0.733], [0.509,-0.750], [0.552,-0.767], [0.595,-0.786],  ],\n  'k' : [ [0.043,-0.744], [0.076,-0.701], [0.106,-0.659], [0.136,-0.616], [0.170,-0.548], [0.206,-0.500], [0.239,-0.453], [0.272,-0.407], [0.298,-0.384], [0.337,-0.305], [0.384,-0.226], [0.431,-0.147], [0.479,-0.069], [0.526,0.010], [0.555,0.056], [0.584,0.103], [0.605,0.149], [0.622,0.195], [0.659,0.261], [0.677,0.309], [0.695,0.356], [0.713,0.404], [0.732,0.451], [0.750,0.499], [0.765,0.565], [0.771,0.635], [0.737,0.676], [0.695,0.684], [0.654,0.684], [0.603,0.684], [0.552,0.676], [0.501,0.659], [0.451,0.612], [0.400,0.562], [0.357,0.466], [0.340,0.369], [0.340,0.273], [0.340,0.176], [0.340,0.079], [0.340,0.010], [0.340,-0.066], [0.340,-0.143], [0.340,-0.219], [0.340,-0.296], [0.340,-0.372], [0.340,-0.449], [0.340,-0.525], [0.340,-0.601], [0.340,-0.678], [0.340,-0.754], [0.340,-0.847], [0.340,-0.754], [0.340,-0.678], [0.340,-0.601], [0.340,-0.525], [0.340,-0.449], [0.354,-0.372], [0.397,-0.361], [0.465,-0.353], [0.533,-0.344], [0.618,-0.327], [0.686,-0.302], [0.754,-0.276], [0.797,-0.234], [0.822,-0.198], [0.812,-0.140], [0.788,-0.089], [0.758,-0.059], [0.720,-0.032], [0.652,-0.055], [0.601,-0.106], [0.516,-0.191], [0.465,-0.276], [0.431,-0.336], [0.383,-0.378], [0.414,-0.421], [0.455,-0.453], [0.489,-0.500], [0.522,-0.546], [0.554,-0.592], [0.577,-0.639], [0.591,-0.662], [0.622,-0.708], [0.655,-0.754], [0.688,-0.801], [0.729,-0.846], [0.771,-0.871], [0.814,-0.863], [0.856,-0.846], [0.899,-0.829], [0.941,-0.812], [0.971,-0.803], [1.011,-0.786], [1.065,-0.803], [1.105,-0.786],  ],\n  'l' : [ [0.060,-0.744], [0.097,-0.694], [0.124,-0.646], [0.145,-0.616], [0.171,-0.574], [0.194,-0.526], [0.224,-0.477], [0.255,-0.429], [0.289,-0.381], [0.306,-0.332], [0.340,-0.286], [0.377,-0.238], [0.403,-0.191], [0.435,-0.115], [0.459,-0.055], [0.483,0.013], [0.501,0.056], [0.510,0.095], [0.524,0.140], [0.534,0.190], [0.548,0.237], [0.554,0.284], [0.566,0.351], [0.578,0.404], [0.585,0.480], [0.594,0.566], [0.595,0.613], [0.585,0.682], [0.550,0.734], [0.515,0.771], [0.480,0.782], [0.451,0.786], [0.400,0.781], [0.347,0.767], [0.324,0.719], [0.315,0.672], [0.308,0.632], [0.304,0.574], [0.304,0.488], [0.304,0.401], [0.304,0.314], [0.304,0.227], [0.304,0.141], [0.304,0.054], [0.304,-0.033], [0.304,-0.119], [0.303,-0.206], [0.303,-0.293], [0.303,-0.380], [0.303,-0.466], [0.303,-0.553], [0.303,-0.640], [0.311,-0.702], [0.343,-0.752], [0.383,-0.778], [0.434,-0.784], [0.483,-0.807], [0.538,-0.821], [0.603,-0.803], [0.677,-0.795], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  'm' : [ [0.066,-0.744], [0.100,-0.708], [0.116,-0.685], [0.150,-0.639], [0.166,-0.615], [0.200,-0.569], [0.216,-0.546], [0.233,-0.523], [0.250,-0.500], [0.270,-0.463], [0.295,-0.412], [0.316,-0.384], [0.324,-0.361], [0.334,-0.337], [0.349,-0.314], [0.372,-0.276], [0.389,-0.251], [0.416,-0.222], [0.449,-0.175], [0.466,-0.152], [0.482,-0.129], [0.499,-0.106], [0.527,-0.081], [0.567,-0.069], [0.603,-0.055], [0.649,-0.059], [0.665,-0.083], [0.669,-0.103], [0.674,-0.154], [0.679,-0.205], [0.685,-0.256], [0.690,-0.307], [0.695,-0.358], [0.686,-0.402], [0.676,-0.447], [0.666,-0.491], [0.657,-0.535], [0.647,-0.579], [0.637,-0.624], [0.628,-0.668], [0.618,-0.712], [0.608,-0.756], [0.599,-0.801], [0.608,-0.756], [0.618,-0.712], [0.628,-0.668], [0.637,-0.624], [0.647,-0.579], [0.657,-0.535], [0.666,-0.491], [0.676,-0.447], [0.686,-0.402], [0.695,-0.358], [0.715,-0.314], [0.743,-0.276], [0.765,-0.245], [0.782,-0.222], [0.798,-0.198], [0.815,-0.175], [0.832,-0.152], [0.848,-0.129], [0.882,-0.089], [0.916,-0.064], [0.966,-0.044], [1.015,-0.036], [1.031,-0.059], [1.048,-0.083], [1.065,-0.106], [1.075,-0.143], [1.085,-0.180], [1.095,-0.217], [1.105,-0.254], [1.114,-0.291], [1.103,-0.340], [1.091,-0.388], [1.080,-0.437], [1.068,-0.486], [1.056,-0.534], [1.045,-0.583], [1.033,-0.632], [1.021,-0.680], [1.010,-0.729], [1.009,-0.777], [1.010,-0.729], [1.021,-0.680], [1.033,-0.632], [1.045,-0.583], [1.056,-0.534], [1.068,-0.486], [1.080,-0.437], [1.091,-0.388], [1.103,-0.340], [1.114,-0.291], [1.131,-0.268], [1.156,-0.234], [1.181,-0.198], [1.198,-0.175], [1.215,-0.140], [1.248,-0.106], [1.264,-0.083], [1.290,-0.059], [1.358,-0.038], [1.431,-0.059], [1.464,-0.106], [1.480,-0.129], [1.497,-0.175], [1.489,-0.224], [1.480,-0.272], [1.472,-0.320], [1.464,-0.369], [1.455,-0.417], [1.447,-0.466], [1.439,-0.514], [1.431,-0.562], [1.422,-0.611], [1.414,-0.659], [1.414,-0.708], [1.447,-0.754], [1.464,-0.777], [1.496,-0.803], [1.580,-0.812], [1.630,-0.812], [1.677,-0.799], [1.730,-0.795], [1.785,-0.786],  ],\n  'n' : [ [0.033,-0.786], [0.067,-0.786], [0.085,-0.744], [0.102,-0.701], [0.119,-0.625], [0.145,-0.531], [0.170,-0.446], [0.196,-0.361], [0.221,-0.234], [0.255,-0.106], [0.292,0.010], [0.332,0.064], [0.374,0.038], [0.400,-0.013], [0.414,-0.059], [0.423,-0.106], [0.431,-0.149], [0.435,-0.198], [0.430,-0.254], [0.430,-0.310], [0.430,-0.365], [0.430,-0.421], [0.430,-0.476], [0.430,-0.532], [0.430,-0.588], [0.430,-0.643], [0.430,-0.699], [0.430,-0.754], [0.430,-0.699], [0.430,-0.643], [0.430,-0.588], [0.430,-0.532], [0.430,-0.476], [0.430,-0.421], [0.430,-0.365], [0.430,-0.310], [0.430,-0.254], [0.459,-0.242], [0.485,-0.217], [0.508,-0.198], [0.525,-0.175], [0.542,-0.152], [0.558,-0.129], [0.587,-0.098], [0.620,-0.059], [0.656,-0.013], [0.691,0.010], [0.741,0.010], [0.774,-0.013], [0.791,-0.036], [0.808,-0.059], [0.816,-0.106], [0.825,-0.149], [0.825,-0.234], [0.825,-0.293], [0.825,-0.361], [0.825,-0.421], [0.825,-0.480], [0.825,-0.523], [0.825,-0.574], [0.825,-0.616], [0.825,-0.662], [0.825,-0.708], [0.833,-0.761], [0.865,-0.812], [0.924,-0.820], [0.967,-0.812], [1.024,-0.786],  ],\n  'o' : [ [0.085,-0.727], [0.134,-0.659], [0.162,-0.608], [0.187,-0.557], [0.204,-0.514], [0.214,-0.480], [0.238,-0.430], [0.256,-0.395], [0.267,-0.361], [0.289,-0.319], [0.314,-0.268], [0.331,-0.245], [0.346,-0.222], [0.372,-0.183], [0.397,-0.152], [0.414,-0.129], [0.431,-0.106], [0.447,-0.083], [0.482,-0.072], [0.525,-0.055], [0.584,-0.055], [0.627,-0.072], [0.647,-0.083], [0.669,-0.106], [0.685,-0.123], [0.697,-0.149], [0.714,-0.175], [0.720,-0.224], [0.719,-0.272], [0.724,-0.320], [0.723,-0.368], [0.716,-0.417], [0.711,-0.465], [0.702,-0.513], [0.689,-0.562], [0.671,-0.610], [0.654,-0.658], [0.643,-0.701], [0.620,-0.752], [0.595,-0.795], [0.552,-0.829], [0.510,-0.846], [0.459,-0.854], [0.397,-0.842], [0.372,-0.820], [0.347,-0.791], [0.314,-0.754], [0.298,-0.731], [0.281,-0.708], [0.264,-0.685], [0.253,-0.659], [0.236,-0.616], [0.219,-0.574], [0.207,-0.531], [0.214,-0.480], [0.238,-0.430], [0.256,-0.395], [0.267,-0.361], [0.289,-0.319], [0.314,-0.268], [0.331,-0.245], [0.346,-0.222], [0.372,-0.183], [0.397,-0.152], [0.414,-0.129], [0.431,-0.106], [0.447,-0.083], [0.482,-0.072], [0.524,-0.106], [0.544,-0.149], [0.570,-0.183], [0.595,-0.200], [0.629,-0.217], [0.663,-0.225], [0.697,-0.225], [0.731,-0.225], [0.765,-0.225], [0.799,-0.221], [0.833,-0.217], [0.867,-0.208], [0.901,-0.191], [0.935,-0.174], [0.969,-0.149],  ],\n  'p' : [ [0.069,-0.801], [0.130,-0.767], [0.181,-0.693], [0.211,-0.610], [0.232,-0.524], [0.253,-0.438], [0.274,-0.352], [0.291,-0.300], [0.316,-0.257], [0.337,-0.179], [0.364,-0.136], [0.372,-0.215], [0.370,-0.323], [0.368,-0.431], [0.367,-0.539], [0.365,-0.646], [0.363,-0.754], [0.361,-0.862], [0.359,-0.970], [0.357,-1.078], [0.355,-1.186], [0.353,-1.294], [0.352,-1.402], [0.350,-1.510], [0.352,-1.402], [0.353,-1.294], [0.355,-1.186], [0.357,-1.078], [0.359,-0.970], [0.361,-0.862], [0.363,-0.754], [0.365,-0.646], [0.367,-0.539], [0.368,-0.431], [0.370,-0.323], [0.372,-0.215], [0.374,-0.107], [0.364,-0.136], [0.407,-0.091], [0.438,-0.048], [0.478,-0.020], [0.510,-0.002], [0.534,0.007], [0.564,0.017], [0.610,0.010], [0.662,-0.011], [0.709,-0.077], [0.722,-0.104], [0.753,-0.170], [0.771,-0.282], [0.771,-0.357], [0.774,-0.469], [0.760,-0.538], [0.748,-0.616], [0.726,-0.654], [0.691,-0.694], [0.651,-0.714], [0.589,-0.754], [0.531,-0.747], [0.476,-0.744], [0.425,-0.727], [0.476,-0.744], [0.531,-0.747], [0.589,-0.754], [0.625,-0.748], [0.678,-0.763], [0.763,-0.777], [0.814,-0.783], [0.878,-0.803], [0.935,-0.803], [0.996,-0.795], [1.054,-0.786],  ],\n  'q' : [ [0.033,-0.778], [0.067,-0.761], [0.117,-0.727], [0.145,-0.706], [0.183,-0.662], [0.216,-0.615], [0.233,-0.592], [0.275,-0.548], [0.299,-0.506], [0.333,-0.458], [0.349,-0.430], [0.383,-0.384], [0.416,-0.337], [0.449,-0.291], [0.476,-0.251], [0.508,-0.217], [0.550,-0.175], [0.582,-0.149], [0.627,-0.132], [0.678,-0.115], [0.729,-0.098], [0.780,-0.086], [0.832,-0.089], [0.850,-0.123], [0.847,-0.191], [0.843,-0.259], [0.840,-0.327], [0.836,-0.395], [0.833,-0.463], [0.830,-0.531], [0.826,-0.599], [0.823,-0.667], [0.819,-0.735], [0.765,-0.761], [0.712,-0.786], [0.627,-0.812], [0.559,-0.824], [0.476,-0.812], [0.406,-0.786], [0.349,-0.754], [0.304,-0.676], [0.283,-0.592], [0.299,-0.506], [0.333,-0.458], [0.349,-0.430], [0.383,-0.384], [0.416,-0.337], [0.449,-0.291], [0.476,-0.251], [0.508,-0.217], [0.550,-0.175], [0.582,-0.149], [0.627,-0.132], [0.678,-0.115], [0.729,-0.098], [0.780,-0.086], [0.832,-0.089], [0.850,-0.123], [0.847,-0.191], [0.843,-0.259], [0.840,-0.327], [0.836,-0.395], [0.833,-0.463], [0.830,-0.531], [0.826,-0.599], [0.823,-0.667], [0.819,-0.735], [0.816,-0.803], [0.813,-0.871], [0.809,-0.939], [0.806,-1.007], [0.802,-1.075], [0.799,-1.143], [0.796,-1.211], [0.792,-1.279], [0.789,-1.347], [0.785,-1.415], [0.782,-1.484], [0.779,-1.551], [0.775,-1.619], [0.816,-1.615], [0.867,-1.608], [0.901,-1.598], [0.935,-1.568], [0.969,-1.526], [1.003,-1.466], [1.037,-1.398], [1.054,-1.347], [1.062,-1.279], [1.054,-1.228], [1.037,-1.186], [1.003,-1.125], [0.969,-1.084], [0.935,-1.041], [0.901,-0.990], [0.867,-0.948], [0.850,-0.914], [0.850,-0.854], [0.898,-0.829], [0.952,-0.812], [1.003,-0.795], [1.054,-0.786], [1.139,-0.786], [1.224,-0.786],  ],\n  'r' : [ [0.085,-0.786], [0.170,-0.752], [0.221,-0.701], [0.255,-0.659], [0.289,-0.616], [0.309,-0.531], [0.332,-0.446], [0.349,-0.353], [0.362,-0.293], [0.374,-0.234], [0.389,-0.166], [0.400,-0.106], [0.527,-0.106], [0.612,-0.106], [0.697,-0.106], [0.782,-0.106], [0.867,-0.106], [0.867,-0.149], [0.859,-0.234], [0.850,-0.319], [0.833,-0.404], [0.816,-0.489], [0.807,-0.574], [0.833,-0.659], [0.867,-0.701], [0.935,-0.744], [1.020,-0.769], [1.122,-0.786], [1.241,-0.786],  ],\n  's' : [ [0.066,-0.769], [0.134,-0.731], [0.168,-0.701], [0.200,-0.667], [0.255,-0.615], [0.313,-0.531], [0.383,-0.446], [0.417,-0.378], [0.442,-0.319], [0.451,-0.242], [0.451,-0.191], [0.425,-0.064], [0.510,-0.140], [0.561,-0.191], [0.612,-0.234], [0.653,-0.276], [0.697,-0.319], [0.731,-0.402], [0.748,-0.446], [0.756,-0.490], [0.765,-0.534], [0.756,-0.578], [0.739,-0.622], [0.714,-0.666], [0.680,-0.710], [0.632,-0.747], [0.567,-0.786], [0.517,-0.801], [0.468,-0.803], [0.417,-0.801], [0.374,-0.786], [0.306,-0.761], [0.238,-0.727], [0.306,-0.761], [0.374,-0.786], [0.417,-0.801], [0.468,-0.803], [0.517,-0.801], [0.567,-0.786], [0.632,-0.747], [0.678,-0.769], [0.720,-0.786], [0.763,-0.786], [0.805,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  't' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.786], [0.298,-0.786], [0.374,-0.786], [0.445,-0.786], [0.484,-0.759], [0.499,-0.605], [0.514,-0.452], [0.529,-0.299], [0.543,-0.146], [0.558,0.008], [0.573,0.161], [0.588,0.314], [0.552,0.314], [0.522,0.314], [0.467,0.314], [0.411,0.314], [0.340,0.314], [0.255,0.314], [0.170,0.314], [0.255,0.314], [0.340,0.314], [0.411,0.314], [0.467,0.314], [0.522,0.314], [0.552,0.314], [0.633,0.314], [0.688,0.314], [0.729,0.314], [0.784,0.314], [0.840,0.314], [0.895,0.314], [0.978,0.314], [1.062,0.314], [0.978,0.314], [0.895,0.314], [0.840,0.314], [0.784,0.314], [0.729,0.314], [0.688,0.314], [0.633,0.314], [0.588,0.314], [0.602,0.467], [0.617,0.621], [0.632,0.774], [0.632,0.621], [0.632,0.467], [0.632,0.314], [0.632,0.161], [0.632,0.008], [0.632,-0.146], [0.632,-0.299], [0.632,-0.452], [0.632,-0.605], [0.632,-0.759], [0.659,-0.805], [0.720,-0.816], [0.807,-0.799], [0.894,-0.791], [0.978,-0.786], [1.062,-0.786], [1.147,-0.786], [1.232,-0.786],  ],\n  'u' : [ [0.043,-0.761], [0.085,-0.744], [0.128,-0.727], [0.156,-0.710], [0.179,-0.690], [0.204,-0.646], [0.221,-0.602], [0.238,-0.557], [0.255,-0.506], [0.286,-0.491], [0.293,-0.442], [0.299,-0.392], [0.306,-0.343], [0.312,-0.294], [0.319,-0.245], [0.325,-0.195], [0.332,-0.146], [0.338,-0.097], [0.344,-0.048], [0.338,-0.097], [0.332,-0.146], [0.325,-0.195], [0.319,-0.245], [0.312,-0.294], [0.306,-0.343], [0.299,-0.392], [0.293,-0.442], [0.286,-0.491], [0.280,-0.540], [0.273,-0.589], [0.267,-0.639], [0.260,-0.688], [0.254,-0.737], [0.260,-0.786], [0.289,-0.803], [0.332,-0.812], [0.383,-0.803], [0.425,-0.795], [0.461,-0.778], [0.501,-0.761], [0.544,-0.744], [0.583,-0.727], [0.616,-0.710], [0.646,-0.684], [0.671,-0.650], [0.682,-0.605], [0.686,-0.558], [0.689,-0.511], [0.693,-0.464], [0.697,-0.416], [0.700,-0.369], [0.704,-0.322], [0.708,-0.275], [0.711,-0.228], [0.715,-0.180], [0.719,-0.133], [0.723,-0.074], [0.726,-0.023], [0.723,-0.074], [0.719,-0.133], [0.715,-0.180], [0.711,-0.228], [0.708,-0.275], [0.704,-0.322], [0.700,-0.369], [0.697,-0.416], [0.693,-0.464], [0.712,-0.529], [0.719,-0.582], [0.731,-0.633], [0.748,-0.684], [0.756,-0.735], [0.790,-0.786], [0.845,-0.803], [0.901,-0.803], [0.944,-0.795], [1.020,-0.786],  ],\n  'v' : [ [0.030,-0.784], [0.050,-0.735], [0.070,-0.687], [0.091,-0.639], [0.111,-0.591], [0.131,-0.543], [0.151,-0.494], [0.172,-0.431], [0.184,-0.375], [0.204,-0.327], [0.224,-0.279], [0.245,-0.231], [0.265,-0.182], [0.285,-0.134], [0.321,-0.085], [0.348,-0.060], [0.388,-0.046], [0.430,-0.054], [0.455,-0.076], [0.476,-0.097], [0.488,-0.134], [0.498,-0.176], [0.508,-0.212], [0.509,-0.244], [0.505,-0.280], [0.503,-0.321], [0.501,-0.363], [0.498,-0.404], [0.496,-0.446], [0.493,-0.487], [0.491,-0.528], [0.488,-0.570], [0.486,-0.611], [0.493,-0.657], [0.509,-0.707], [0.525,-0.749], [0.554,-0.790], [0.593,-0.814], [0.635,-0.793], [0.674,-0.766], [0.689,-0.723], [0.703,-0.680], [0.718,-0.637], [0.733,-0.594], [0.737,-0.547], [0.753,-0.502], [0.759,-0.450], [0.769,-0.408], [0.780,-0.331], [0.791,-0.255], [0.803,-0.179], [0.814,-0.102], [0.886,-0.110], [0.960,-0.130], [1.015,-0.143], [1.058,-0.149],  ],\n  'w' : [ [0.030,-0.781], [0.050,-0.754], [0.083,-0.708], [0.102,-0.684], [0.123,-0.659], [0.146,-0.611], [0.170,-0.564], [0.193,-0.516], [0.216,-0.468], [0.240,-0.420], [0.262,-0.361], [0.284,-0.290], [0.306,-0.219], [0.328,-0.148], [0.350,-0.077], [0.361,-0.041], [0.356,-0.126], [0.352,-0.210], [0.348,-0.294], [0.343,-0.379], [0.339,-0.463], [0.342,-0.517], [0.351,-0.602], [0.359,-0.670], [0.390,-0.738], [0.433,-0.783], [0.495,-0.799], [0.565,-0.776], [0.589,-0.728], [0.612,-0.680], [0.636,-0.632], [0.655,-0.585], [0.673,-0.537], [0.689,-0.490], [0.704,-0.442], [0.711,-0.358], [0.719,-0.274], [0.726,-0.190], [0.734,-0.105], [0.741,-0.064], [0.753,-0.120], [0.765,-0.219], [0.777,-0.317], [0.789,-0.416], [0.801,-0.515], [0.812,-0.614], [0.824,-0.712], [0.867,-0.780], [0.911,-0.786], [0.952,-0.775], [0.988,-0.723], [1.014,-0.682], [1.037,-0.634], [1.061,-0.587], [1.073,-0.530], [1.085,-0.448], [1.091,-0.403], [1.101,-0.314], [1.112,-0.224], [1.122,-0.135], [1.133,-0.064], [1.188,-0.072], [1.244,-0.089], [1.298,-0.106], [1.356,-0.149],  ],\n  'x' : [ [0.085,-0.786], [0.170,-0.786], [0.220,-0.721], [0.262,-0.667], [0.304,-0.614], [0.346,-0.560], [0.388,-0.506], [0.430,-0.452], [0.471,-0.398], [0.522,-0.337], [0.555,-0.291], [0.597,-0.237], [0.639,-0.183], [0.681,-0.129], [0.723,-0.075], [0.765,-0.021], [0.799,0.021], [0.765,-0.021], [0.723,-0.075], [0.681,-0.129], [0.639,-0.183], [0.597,-0.237], [0.555,-0.291], [0.522,-0.337], [0.445,-0.429], [0.417,-0.383], [0.380,-0.315], [0.343,-0.248], [0.306,-0.181], [0.269,-0.114], [0.232,-0.046], [0.196,0.021], [0.232,-0.046], [0.269,-0.114], [0.306,-0.181], [0.343,-0.248], [0.380,-0.315], [0.417,-0.383], [0.445,-0.429], [0.491,-0.517], [0.528,-0.585], [0.565,-0.652], [0.602,-0.719], [0.639,-0.786], [0.680,-0.824], [0.718,-0.830], [0.763,-0.846], [0.799,-0.842], [0.834,-0.837], [0.863,-0.820], [0.901,-0.808], [0.935,-0.795], [0.986,-0.786],  ],\n  'y' : [ [0.033,-0.778], [0.066,-0.760], [0.099,-0.739], [0.124,-0.720], [0.145,-0.684], [0.166,-0.648], [0.187,-0.612], [0.208,-0.576], [0.229,-0.540], [0.251,-0.504], [0.272,-0.468], [0.293,-0.431], [0.314,-0.395], [0.335,-0.359], [0.357,-0.323], [0.378,-0.287], [0.399,-0.251], [0.420,-0.215], [0.441,-0.179], [0.462,-0.143], [0.513,-0.123], [0.547,-0.123], [0.586,-0.138], [0.604,-0.161], [0.611,-0.198], [0.606,-0.241], [0.601,-0.279], [0.585,-0.358], [0.570,-0.437], [0.554,-0.515], [0.539,-0.594], [0.523,-0.672], [0.521,-0.735], [0.531,-0.788], [0.549,-0.811], [0.568,-0.834], [0.586,-0.857], [0.609,-0.878], [0.635,-0.895], [0.669,-0.902], [0.703,-0.902], [0.773,-0.893], [0.838,-0.857], [0.870,-0.823], [0.943,-0.745], [0.950,-0.674], [0.957,-0.603], [0.964,-0.533], [0.971,-0.462], [0.977,-0.391], [0.984,-0.320], [0.991,-0.249], [0.998,-0.179], [1.005,-0.132], [0.998,-0.179], [0.991,-0.249], [0.984,-0.320], [0.977,-0.391], [0.971,-0.462], [0.964,-0.533], [0.957,-0.603], [0.950,-0.674], [0.943,-0.745], [0.936,-0.816], [0.929,-0.887], [0.923,-0.957], [0.916,-1.028], [0.909,-1.099], [0.902,-1.170], [0.895,-1.241], [0.888,-1.311], [0.881,-1.382], [0.875,-1.453], [0.868,-1.524], [0.838,-1.571], [0.787,-1.584], [0.720,-1.593], [0.652,-1.601], [0.590,-1.593], [0.543,-1.576], [0.524,-1.553], [0.506,-1.530], [0.488,-1.507], [0.472,-1.476], [0.466,-1.438], [0.473,-1.387], [0.497,-1.348], [0.511,-1.314], [0.534,-1.275], [0.548,-1.241], [0.567,-1.205], [0.582,-1.181], [0.597,-1.158], [0.612,-1.134], [0.627,-1.111], [0.642,-1.087], [0.657,-1.064], [0.698,-1.038], [0.747,-1.012], [0.796,-0.986], [0.846,-0.959], [0.983,-0.897], [1.038,-0.858], [1.094,-0.827], [1.151,-0.809], [1.207,-0.791], [1.258,-0.786],  ],\n  'z' : [ [0.034,-0.752], [0.067,-0.708], [0.083,-0.685], [0.116,-0.639], [0.133,-0.615], [0.166,-0.569], [0.183,-0.546], [0.216,-0.500], [0.233,-0.476], [0.266,-0.430], [0.287,-0.395], [0.316,-0.353], [0.333,-0.327], [0.366,-0.285], [0.389,-0.251], [0.440,-0.191], [0.491,-0.123], [0.516,-0.083], [0.549,-0.047], [0.576,-0.030], [0.615,-0.036], [0.649,-0.059], [0.665,-0.083], [0.682,-0.106], [0.699,-0.129], [0.708,-0.191], [0.699,-0.245], [0.678,-0.319], [0.652,-0.386], [0.615,-0.453], [0.582,-0.500], [0.542,-0.574], [0.499,-0.639], [0.466,-0.685], [0.449,-0.708], [0.399,-0.777], [0.383,-0.801], [0.399,-0.777], [0.449,-0.708], [0.466,-0.685], [0.499,-0.639], [0.549,-0.639], [0.576,-0.667], [0.599,-0.708], [0.615,-0.731], [0.642,-0.769], [0.665,-0.824], [0.669,-0.847], [0.665,-0.870], [0.665,-0.916], [0.665,-0.963], [0.652,-1.084], [0.627,-1.169], [0.602,-1.243], [0.582,-1.287], [0.566,-1.310], [0.532,-1.380], [0.516,-1.403], [0.493,-1.432], [0.459,-1.495], [0.432,-1.519], [0.401,-1.534], [0.366,-1.519], [0.349,-1.495], [0.304,-1.441], [0.283,-1.403], [0.270,-1.356], [0.283,-1.310], [0.303,-1.267], [0.333,-1.218], [0.349,-1.194], [0.366,-1.171], [0.383,-1.148], [0.399,-1.125], [0.416,-1.102], [0.432,-1.079], [0.449,-1.055], [0.466,-1.032], [0.501,-1.002], [0.536,-0.965], [0.571,-0.931], [0.605,-0.897], [0.640,-0.871], [0.675,-0.846], [0.710,-0.829], [0.745,-0.812], [0.780,-0.803], [0.815,-0.791], [0.850,-0.786], [0.892,-0.778], [0.935,-0.778], [0.978,-0.786],  ],\n  'a*' : [ [0.068,-0.174], [0.136,-0.149], [0.204,-0.132], [0.272,-0.098], [0.340,-0.089], [0.432,-0.081], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.561,-0.718], [0.501,-0.773], [0.425,-0.801], [0.357,-0.820], [0.279,-0.801], [0.230,-0.754], [0.213,-0.731], [0.184,-0.681], [0.151,-0.616], [0.146,-0.557], [0.146,-0.500], [0.153,-0.455], [0.180,-0.395], [0.204,-0.353], [0.219,-0.319], [0.246,-0.276], [0.272,-0.234], [0.298,-0.191], [0.333,-0.157], [0.379,-0.132], [0.432,-0.081], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.678,-0.744], [0.729,-0.801], [0.781,-0.786], [0.850,-0.786],  ],\n  'b*' : [ [0.043,-0.157], [0.085,-0.166], [0.128,-0.157], [0.179,-0.157], [0.230,-0.162], [0.281,-0.157], [0.332,-0.140], [0.365,-0.115], [0.391,-0.064], [0.414,-0.004], [0.443,0.064], [0.472,0.140], [0.500,0.241], [0.529,0.320], [0.544,0.399], [0.546,0.510], [0.530,0.602], [0.487,0.674], [0.431,0.743], [0.390,0.750], [0.355,0.739], [0.324,0.724], [0.300,0.686], [0.281,0.627], [0.275,0.497], [0.274,0.368], [0.272,0.238], [0.270,0.108], [0.274,-0.022], [0.275,-0.152], [0.277,-0.282], [0.279,-0.412], [0.281,-0.542], [0.291,-0.672], [0.309,-0.718], [0.339,-0.771], [0.369,-0.786], [0.420,-0.786], [0.457,-0.782], [0.494,-0.764], [0.522,-0.746], [0.548,-0.688], [0.562,-0.634], [0.580,-0.573], [0.594,-0.514], [0.613,-0.446], [0.619,-0.377], [0.628,-0.293], [0.630,-0.200], [0.631,-0.112], [0.701,-0.140], [0.748,-0.157], [0.799,-0.149],  ],\n  'c*' : [ [0.085,-0.140], [0.175,-0.132], [0.243,-0.123], [0.311,-0.106], [0.367,-0.089], [0.413,-0.081], [0.456,-0.072], [0.500,-0.064], [0.566,-0.064], [0.617,-0.106], [0.651,-0.191], [0.617,-0.106], [0.566,-0.064], [0.500,-0.064], [0.456,-0.072], [0.413,-0.081], [0.367,-0.094], [0.331,-0.123], [0.300,-0.152], [0.267,-0.191], [0.243,-0.222], [0.217,-0.268], [0.170,-0.407], [0.170,-0.497], [0.173,-0.565], [0.191,-0.657], [0.217,-0.708], [0.234,-0.731], [0.251,-0.754], [0.277,-0.795], [0.326,-0.829], [0.417,-0.846], [0.532,-0.829], [0.609,-0.820], [0.668,-0.812], [0.736,-0.803], [0.821,-0.795], [0.906,-0.786],  ],\n  'd*' : [ [0.068,-0.157], [0.136,-0.166], [0.204,-0.157], [0.272,-0.140], [0.340,-0.123], [0.425,-0.123], [0.469,-0.089], [0.515,-0.072], [0.629,-0.043], [0.697,-0.036], [0.782,-0.036], [0.697,-0.036], [0.629,-0.043], [0.515,-0.072], [0.469,-0.089], [0.425,-0.123], [0.357,-0.191], [0.333,-0.242], [0.313,-0.319], [0.298,-0.395], [0.289,-0.455], [0.282,-0.500], [0.279,-0.557], [0.287,-0.616], [0.320,-0.681], [0.366,-0.754], [0.415,-0.801], [0.459,-0.810], [0.510,-0.808], [0.561,-0.801], [0.637,-0.773], [0.697,-0.718], [0.799,-0.650], [0.867,-0.639], [0.867,-0.592], [0.867,-0.489], [0.867,-0.404], [0.867,-0.293], [0.867,-0.149], [0.867,0.064], [0.867,0.234], [0.867,0.404], [0.867,0.574], [0.867,0.744], [0.867,0.574], [0.867,0.404], [0.867,0.234], [0.867,0.064], [0.867,-0.149], [0.867,-0.293], [0.867,-0.404], [0.867,-0.489], [0.867,-0.592], [0.867,-0.639], [0.875,-0.701], [0.899,-0.744], [0.950,-0.801], [1.002,-0.824], [1.068,-0.815], [1.122,-0.812], [1.190,-0.795], [1.275,-0.786],  ],\n  'e*' : [ [0.085,-0.149], [0.136,-0.162], [0.170,-0.174], [0.204,-0.191], [0.231,-0.208], [0.264,-0.242], [0.315,-0.276], [0.383,-0.327], [0.451,-0.344], [0.501,-0.336], [0.552,-0.268], [0.566,-0.229], [0.568,-0.191], [0.559,-0.160], [0.542,-0.106], [0.525,-0.072], [0.495,-0.047], [0.452,-0.030], [0.410,-0.021], [0.367,-0.030], [0.325,-0.047], [0.294,-0.072], [0.260,-0.106], [0.235,-0.149], [0.231,-0.208], [0.231,-0.268], [0.231,-0.327], [0.235,-0.404], [0.240,-0.446], [0.250,-0.497], [0.260,-0.548], [0.281,-0.616], [0.298,-0.667], [0.332,-0.701], [0.365,-0.735], [0.417,-0.761], [0.485,-0.769], [0.552,-0.778], [0.620,-0.786], [0.680,-0.786], [0.765,-0.786],  ],\n  'f*' : [ [0.043,-0.191], [0.076,-0.234], [0.111,-0.310], [0.145,-0.395], [0.179,-0.446], [0.213,-0.489], [0.247,-0.531], [0.281,-0.574], [0.321,-0.642], [0.374,-0.592], [0.425,-0.548], [0.451,-0.446], [0.468,-0.361], [0.485,-0.276], [0.501,-0.191], [0.518,-0.106], [0.535,-0.038], [0.552,0.047], [0.565,0.131], [0.582,0.212], [0.605,0.299], [0.619,0.402], [0.632,0.506], [0.614,0.607], [0.578,0.667], [0.535,0.680], [0.485,0.684], [0.425,0.671], [0.374,0.652], [0.329,0.619], [0.298,0.531], [0.294,0.428], [0.292,0.299], [0.294,0.169], [0.296,-0.000], [0.296,-0.172], [0.296,-0.276], [0.298,-0.385], [0.297,-0.489], [0.296,-0.598], [0.295,-0.710], [0.295,-0.829], [0.292,-0.931], [0.289,-1.041], [0.286,-1.126], [0.281,-1.254], [0.281,-1.356], [0.279,-1.466], [0.272,-1.602], [0.323,-1.602], [0.374,-1.601], [0.423,-1.594], [0.474,-1.551], [0.510,-1.509], [0.542,-1.466], [0.550,-1.381], [0.542,-1.296], [0.533,-1.211], [0.522,-1.126], [0.508,-1.041], [0.491,-0.956], [0.468,-0.888], [0.442,-0.846], [0.383,-0.752], [0.420,-0.769], [0.468,-0.803], [0.510,-0.829], [0.567,-0.812], [0.639,-0.803], [0.723,-0.795], [0.807,-0.786],  ],\n  'g*' : [ [0.068,-0.157], [0.136,-0.166], [0.204,-0.174], [0.272,-0.183], [0.340,-0.174], [0.391,-0.179], [0.448,-0.175], [0.480,-0.149], [0.525,-0.132], [0.576,-0.115], [0.627,-0.098], [0.678,-0.086], [0.730,-0.089], [0.748,-0.123], [0.745,-0.191], [0.741,-0.259], [0.738,-0.327], [0.734,-0.395], [0.731,-0.463], [0.728,-0.531], [0.724,-0.599], [0.721,-0.667], [0.717,-0.735], [0.663,-0.761], [0.610,-0.786], [0.525,-0.812], [0.457,-0.824], [0.374,-0.812], [0.304,-0.786], [0.247,-0.754], [0.202,-0.676], [0.181,-0.592], [0.177,-0.548], [0.197,-0.506], [0.231,-0.458], [0.247,-0.430], [0.281,-0.384], [0.314,-0.337], [0.347,-0.291], [0.374,-0.251], [0.406,-0.217], [0.448,-0.175], [0.480,-0.149], [0.525,-0.132], [0.576,-0.115], [0.627,-0.098], [0.678,-0.086], [0.730,-0.089], [0.748,-0.123], [0.745,-0.191], [0.741,-0.259], [0.738,-0.327], [0.734,-0.395], [0.731,-0.463], [0.728,-0.531], [0.724,-0.599], [0.721,-0.667], [0.717,-0.735], [0.714,-0.803], [0.711,-0.871], [0.707,-0.939], [0.704,-1.007], [0.700,-1.075], [0.697,-1.143], [0.694,-1.211], [0.690,-1.279], [0.687,-1.347], [0.683,-1.415], [0.680,-1.484], [0.677,-1.551], [0.673,-1.619], [0.612,-1.615], [0.544,-1.608], [0.493,-1.598], [0.442,-1.568], [0.391,-1.526], [0.340,-1.466], [0.306,-1.398], [0.289,-1.347], [0.272,-1.279], [0.281,-1.228], [0.306,-1.186], [0.347,-1.125], [0.377,-1.084], [0.414,-1.041], [0.474,-0.990], [0.542,-0.948], [0.593,-0.914], [0.647,-0.871], [0.720,-0.829], [0.796,-0.820], [0.884,-0.812], [0.969,-0.803], [1.054,-0.786],  ],\n  'h*' : [ [0.068,-0.174], [0.136,-0.200], [0.204,-0.217], [0.272,-0.225], [0.323,-0.217], [0.303,-0.276], [0.326,-0.242], [0.349,-0.200], [0.383,-0.155], [0.432,-0.083], [0.483,-0.038], [0.508,0.013], [0.549,0.064], [0.575,0.131], [0.602,0.202], [0.617,0.249], [0.641,0.297], [0.651,0.370], [0.660,0.438], [0.662,0.523], [0.651,0.616], [0.641,0.693], [0.599,0.742], [0.542,0.769], [0.483,0.769], [0.406,0.738], [0.355,0.702], [0.321,0.636], [0.295,0.511], [0.295,0.425], [0.295,0.339], [0.295,0.227], [0.295,0.114], [0.295,0.001], [0.295,-0.111], [0.295,-0.224], [0.295,-0.336], [0.295,-0.449], [0.295,-0.561], [0.295,-0.674], [0.295,-0.786], [0.299,-0.674], [0.302,-0.561], [0.329,-0.514], [0.368,-0.447], [0.392,-0.386], [0.420,-0.307], [0.447,-0.255], [0.475,-0.185], [0.507,-0.149], [0.564,-0.132], [0.625,-0.123], [0.678,-0.132], [0.743,-0.166], [0.767,-0.229], [0.760,-0.307], [0.755,-0.375], [0.748,-0.453], [0.748,-0.533], [0.761,-0.623], [0.786,-0.717], [0.845,-0.766], [0.920,-0.794], [1.005,-0.786],  ],\n  'i*' : [ [0.051,-0.166], [0.084,-0.167], [0.118,-0.160], [0.154,-0.143], [0.192,-0.084], [0.233,-0.026], [0.227,-0.136], [0.224,-0.195], [0.218,-0.280], [0.216,-0.365], [0.216,-0.425], [0.216,-0.501], [0.216,-0.544], [0.214,-0.629], [0.219,-0.706], [0.241,-0.759], [0.271,-0.806], [0.347,-0.827], [0.431,-0.803],  ],\n  'j*' : [ [0.034,-0.155], [0.061,-0.162], [0.095,-0.166], [0.129,-0.174], [0.163,-0.157], [0.197,-0.140], [0.231,-0.115], [0.265,-0.089], [0.299,-0.072], [0.316,-0.055], [0.333,-0.050], [0.357,-0.038], [0.383,-0.049], [0.383,-0.099], [0.383,-0.167], [0.383,-0.276], [0.383,-0.395], [0.383,-0.513], [0.383,-0.632], [0.383,-0.751], [0.383,-0.869], [0.383,-0.988], [0.383,-1.107], [0.383,-1.225], [0.383,-1.344], [0.368,-1.405], [0.349,-1.466], [0.326,-1.514], [0.296,-1.530], [0.255,-1.534], [0.218,-1.518], [0.196,-1.496], [0.172,-1.406], [0.162,-1.296], [0.159,-1.211], [0.173,-1.126], [0.196,-1.053], [0.218,-1.005], [0.241,-0.957], [0.263,-0.909], [0.286,-0.861], [0.301,-0.837], [0.328,-0.808], [0.356,-0.780], [0.384,-0.753], [0.408,-0.742], [0.439,-0.734], [0.473,-0.733], [0.509,-0.750], [0.552,-0.767], [0.595,-0.786],  ],\n  'k*' : [ [0.043,-0.166], [0.085,-0.191], [0.119,-0.208], [0.153,-0.251], [0.187,-0.276], [0.221,-0.276], [0.272,-0.259], [0.323,-0.234], [0.337,-0.305], [0.384,-0.226], [0.431,-0.147], [0.479,-0.069], [0.526,0.010], [0.555,0.056], [0.584,0.103], [0.605,0.149], [0.622,0.195], [0.659,0.261], [0.677,0.309], [0.695,0.356], [0.713,0.404], [0.732,0.451], [0.750,0.499], [0.765,0.565], [0.771,0.635], [0.737,0.676], [0.695,0.684], [0.654,0.684], [0.603,0.684], [0.552,0.676], [0.501,0.659], [0.451,0.612], [0.400,0.562], [0.357,0.466], [0.340,0.369], [0.340,0.273], [0.340,0.176], [0.340,0.079], [0.340,0.010], [0.340,-0.066], [0.340,-0.143], [0.340,-0.219], [0.340,-0.296], [0.340,-0.372], [0.340,-0.449], [0.340,-0.525], [0.340,-0.601], [0.340,-0.678], [0.340,-0.754], [0.340,-0.847], [0.340,-0.754], [0.340,-0.678], [0.340,-0.601], [0.340,-0.525], [0.340,-0.449], [0.354,-0.372], [0.397,-0.361], [0.465,-0.353], [0.533,-0.344], [0.618,-0.327], [0.686,-0.302], [0.754,-0.276], [0.797,-0.234], [0.822,-0.198], [0.812,-0.140], [0.788,-0.089], [0.758,-0.059], [0.720,-0.032], [0.652,-0.055], [0.601,-0.106], [0.516,-0.191], [0.465,-0.276], [0.431,-0.336], [0.383,-0.378], [0.414,-0.421], [0.455,-0.453], [0.489,-0.500], [0.522,-0.546], [0.554,-0.592], [0.577,-0.639], [0.591,-0.662], [0.622,-0.708], [0.655,-0.754], [0.688,-0.801], [0.729,-0.846], [0.771,-0.871], [0.814,-0.863], [0.856,-0.846], [0.899,-0.829], [0.941,-0.812], [0.971,-0.803], [1.011,-0.786], [1.065,-0.786], [1.105,-0.786],  ],\n  'l*' : [ [0.031,-0.157], [0.054,-0.174], [0.088,-0.191], [0.122,-0.234], [0.156,-0.276], [0.207,-0.302], [0.241,-0.319], [0.284,-0.327], [0.306,-0.332], [0.340,-0.286], [0.377,-0.238], [0.403,-0.191], [0.435,-0.115], [0.459,-0.055], [0.483,0.013], [0.501,0.056], [0.510,0.095], [0.524,0.140], [0.534,0.190], [0.548,0.237], [0.554,0.284], [0.566,0.351], [0.578,0.404], [0.585,0.480], [0.594,0.566], [0.595,0.613], [0.585,0.682], [0.550,0.734], [0.515,0.771], [0.480,0.782], [0.451,0.786], [0.400,0.781], [0.347,0.767], [0.324,0.719], [0.315,0.672], [0.308,0.632], [0.304,0.574], [0.304,0.488], [0.304,0.401], [0.304,0.314], [0.304,0.227], [0.304,0.141], [0.304,0.054], [0.304,-0.033], [0.304,-0.119], [0.303,-0.206], [0.303,-0.293], [0.303,-0.380], [0.303,-0.466], [0.303,-0.553], [0.303,-0.640], [0.311,-0.702], [0.343,-0.752], [0.383,-0.778], [0.434,-0.784], [0.483,-0.807], [0.538,-0.821], [0.603,-0.803], [0.677,-0.795], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  'm*' : [ [0.034,-0.149], [0.085,-0.140], [0.136,-0.140], [0.187,-0.132], [0.238,-0.123], [0.272,-0.106], [0.315,-0.072], [0.349,-0.055], [0.394,-0.059], [0.410,-0.083], [0.414,-0.103], [0.419,-0.154], [0.424,-0.205], [0.430,-0.256], [0.435,-0.307], [0.440,-0.358], [0.431,-0.402], [0.421,-0.447], [0.411,-0.491], [0.402,-0.535], [0.392,-0.579], [0.382,-0.624], [0.373,-0.668], [0.363,-0.712], [0.353,-0.756], [0.344,-0.801], [0.353,-0.756], [0.363,-0.712], [0.373,-0.668], [0.382,-0.624], [0.392,-0.579], [0.402,-0.535], [0.411,-0.491], [0.421,-0.447], [0.431,-0.402], [0.440,-0.358], [0.460,-0.314], [0.488,-0.276], [0.510,-0.245], [0.527,-0.222], [0.543,-0.198], [0.560,-0.175], [0.577,-0.152], [0.593,-0.129], [0.627,-0.089], [0.661,-0.064], [0.711,-0.044], [0.760,-0.036], [0.776,-0.059], [0.793,-0.083], [0.810,-0.106], [0.820,-0.143], [0.830,-0.180], [0.840,-0.217], [0.850,-0.254], [0.859,-0.291], [0.848,-0.340], [0.836,-0.388], [0.825,-0.437], [0.813,-0.486], [0.801,-0.534], [0.790,-0.583], [0.778,-0.632], [0.766,-0.680], [0.755,-0.729], [0.754,-0.777], [0.755,-0.729], [0.766,-0.680], [0.778,-0.632], [0.790,-0.583], [0.801,-0.534], [0.813,-0.486], [0.825,-0.437], [0.836,-0.388], [0.848,-0.340], [0.859,-0.291], [0.876,-0.268], [0.901,-0.234], [0.926,-0.198], [0.943,-0.175], [0.961,-0.140], [0.993,-0.106], [1.009,-0.083], [1.035,-0.059], [1.103,-0.038], [1.176,-0.059], [1.209,-0.106], [1.225,-0.129], [1.242,-0.175], [1.234,-0.224], [1.225,-0.272], [1.217,-0.320], [1.209,-0.369], [1.200,-0.417], [1.192,-0.466], [1.184,-0.514], [1.176,-0.562], [1.167,-0.611], [1.159,-0.659], [1.159,-0.708], [1.192,-0.754], [1.209,-0.777], [1.241,-0.803], [1.325,-0.812], [1.375,-0.812], [1.422,-0.803], [1.475,-0.799], [1.564,-0.795], [1.649,-0.786],  ],\n  'n*' : [ [0.051,-0.132], [0.102,-0.115], [0.153,-0.098], [0.204,-0.047], [0.238,-0.004], [0.264,0.021], [0.291,0.038], [0.332,0.064], [0.374,0.038], [0.400,-0.013], [0.414,-0.059], [0.423,-0.106], [0.431,-0.149], [0.435,-0.198], [0.430,-0.254], [0.430,-0.310], [0.430,-0.365], [0.430,-0.421], [0.430,-0.476], [0.430,-0.532], [0.430,-0.588], [0.430,-0.643], [0.430,-0.699], [0.430,-0.754], [0.430,-0.699], [0.430,-0.643], [0.430,-0.588], [0.430,-0.532], [0.430,-0.476], [0.430,-0.421], [0.430,-0.365], [0.430,-0.310], [0.430,-0.254], [0.459,-0.242], [0.485,-0.217], [0.508,-0.198], [0.525,-0.175], [0.542,-0.152], [0.558,-0.129], [0.587,-0.098], [0.620,-0.059], [0.656,-0.013], [0.691,0.010], [0.741,0.010], [0.774,-0.013], [0.791,-0.036], [0.808,-0.059], [0.816,-0.106], [0.825,-0.149], [0.825,-0.234], [0.825,-0.293], [0.825,-0.361], [0.825,-0.421], [0.825,-0.480], [0.825,-0.523], [0.825,-0.574], [0.825,-0.616], [0.825,-0.662], [0.825,-0.708], [0.833,-0.761], [0.865,-0.812], [0.924,-0.820], [0.967,-0.812], [1.024,-0.786], [1.088,-0.786],  ],\n  'o*' : [ [0.051,-0.170], [0.102,-0.174], [0.153,-0.166], [0.204,-0.157], [0.255,-0.149], [0.306,-0.140], [0.346,-0.152], [0.363,-0.129], [0.380,-0.106], [0.396,-0.083], [0.431,-0.072], [0.474,-0.055], [0.533,-0.055], [0.576,-0.072], [0.596,-0.083], [0.618,-0.106], [0.634,-0.123], [0.646,-0.149], [0.663,-0.175], [0.669,-0.224], [0.668,-0.272], [0.673,-0.320], [0.671,-0.368], [0.665,-0.417], [0.660,-0.465], [0.651,-0.513], [0.637,-0.562], [0.620,-0.610], [0.603,-0.658], [0.592,-0.701], [0.570,-0.752], [0.544,-0.795], [0.501,-0.829], [0.459,-0.846], [0.408,-0.854], [0.346,-0.842], [0.321,-0.820], [0.296,-0.791], [0.263,-0.754], [0.247,-0.731], [0.230,-0.708], [0.213,-0.685], [0.202,-0.659], [0.185,-0.616], [0.168,-0.574], [0.156,-0.531], [0.163,-0.480], [0.187,-0.430], [0.205,-0.395], [0.216,-0.361], [0.238,-0.319], [0.263,-0.268], [0.280,-0.245], [0.295,-0.222], [0.321,-0.183], [0.346,-0.152], [0.363,-0.129], [0.380,-0.106], [0.396,-0.083], [0.431,-0.072], [0.473,-0.106], [0.493,-0.149], [0.518,-0.183], [0.544,-0.200], [0.578,-0.217], [0.612,-0.225], [0.646,-0.225], [0.680,-0.225], [0.714,-0.225], [0.748,-0.221], [0.782,-0.217], [0.816,-0.208], [0.850,-0.191], [0.884,-0.174], [0.918,-0.149],  ],\n  'p*' : [ [0.043,-0.153], [0.085,-0.157], [0.136,-0.157], [0.187,-0.157], [0.238,-0.140], [0.279,-0.136], [0.287,-0.215], [0.285,-0.323], [0.283,-0.431], [0.282,-0.539], [0.280,-0.646], [0.278,-0.754], [0.276,-0.862], [0.274,-0.970], [0.272,-1.078], [0.270,-1.186], [0.268,-1.294], [0.267,-1.402], [0.265,-1.510], [0.267,-1.402], [0.268,-1.294], [0.270,-1.186], [0.272,-1.078], [0.274,-0.970], [0.276,-0.862], [0.278,-0.754], [0.280,-0.646], [0.282,-0.539], [0.283,-0.431], [0.285,-0.323], [0.287,-0.215], [0.289,-0.107], [0.279,-0.136], [0.322,-0.091], [0.353,-0.048], [0.393,-0.020], [0.425,-0.002], [0.449,0.007], [0.479,0.017], [0.525,0.010], [0.577,-0.011], [0.624,-0.077], [0.637,-0.104], [0.668,-0.170], [0.686,-0.282], [0.686,-0.357], [0.689,-0.469], [0.675,-0.538], [0.663,-0.616], [0.641,-0.654], [0.606,-0.694], [0.566,-0.714], [0.504,-0.754], [0.446,-0.747], [0.391,-0.744], [0.340,-0.727], [0.391,-0.744], [0.446,-0.747], [0.504,-0.754], [0.540,-0.748], [0.593,-0.763], [0.678,-0.777], [0.729,-0.783], [0.793,-0.803], [0.850,-0.803], [0.911,-0.795], [0.969,-0.786],  ],\n  'q*' : [ [0.051,-0.153], [0.102,-0.157], [0.153,-0.162], [0.204,-0.166], [0.255,-0.183], [0.306,-0.200], [0.357,-0.191], [0.408,-0.183], [0.459,-0.166], [0.514,-0.149], [0.559,-0.132], [0.610,-0.115], [0.661,-0.098], [0.712,-0.086], [0.764,-0.089], [0.782,-0.123], [0.779,-0.191], [0.775,-0.259], [0.772,-0.327], [0.768,-0.395], [0.765,-0.463], [0.762,-0.531], [0.758,-0.599], [0.755,-0.667], [0.751,-0.735], [0.697,-0.761], [0.644,-0.786], [0.559,-0.812], [0.491,-0.824], [0.408,-0.812], [0.338,-0.786], [0.281,-0.754], [0.236,-0.676], [0.215,-0.592], [0.207,-0.548], [0.231,-0.506], [0.265,-0.458], [0.281,-0.430], [0.315,-0.384], [0.348,-0.337], [0.381,-0.291], [0.408,-0.251], [0.440,-0.217], [0.482,-0.175], [0.514,-0.149], [0.559,-0.132], [0.610,-0.115], [0.661,-0.098], [0.712,-0.086], [0.764,-0.089], [0.782,-0.123], [0.779,-0.191], [0.775,-0.259], [0.772,-0.327], [0.768,-0.395], [0.765,-0.463], [0.762,-0.531], [0.758,-0.599], [0.755,-0.667], [0.751,-0.735], [0.748,-0.803], [0.745,-0.871], [0.741,-0.939], [0.738,-1.007], [0.734,-1.075], [0.731,-1.143], [0.728,-1.211], [0.724,-1.279], [0.721,-1.347], [0.717,-1.415], [0.714,-1.484], [0.711,-1.551], [0.707,-1.619], [0.748,-1.615], [0.799,-1.608], [0.833,-1.598], [0.867,-1.568], [0.901,-1.526], [0.935,-1.466], [0.969,-1.398], [0.986,-1.347], [0.995,-1.279], [0.986,-1.228], [0.969,-1.186], [0.935,-1.125], [0.901,-1.084], [0.867,-1.041], [0.833,-0.990], [0.799,-0.948], [0.782,-0.914], [0.782,-0.854], [0.830,-0.829], [0.884,-0.812], [0.935,-0.803], [0.986,-0.799], [1.020,-0.795], [1.105,-0.791], [1.207,-0.786],  ],\n  'r*' : [ [0.085,-0.174], [0.170,-0.183], [0.170,-0.064], [0.255,-0.064], [0.340,-0.064], [0.425,-0.064], [0.510,-0.064], [0.510,-0.149], [0.501,-0.234], [0.493,-0.319], [0.476,-0.404], [0.459,-0.489], [0.451,-0.574], [0.476,-0.659], [0.510,-0.701], [0.578,-0.744], [0.663,-0.769], [0.765,-0.786],  ],\n  's*' : [ [0.085,-0.149], [0.170,-0.157], [0.221,-0.174], [0.272,-0.200], [0.323,-0.234], [0.374,-0.234], [0.425,-0.225], [0.476,-0.217], [0.527,-0.200], [0.561,-0.191], [0.603,-0.166], [0.663,-0.145], [0.748,-0.119], [0.819,-0.106], [0.820,-0.174], [0.830,-0.222], [0.842,-0.289], [0.855,-0.353], [0.867,-0.402], [0.867,-0.446], [0.867,-0.490], [0.859,-0.534], [0.850,-0.578], [0.842,-0.622], [0.825,-0.666], [0.782,-0.710], [0.657,-0.769], [0.611,-0.757], [0.547,-0.735], [0.497,-0.684], [0.447,-0.616], [0.397,-0.531], [0.354,-0.446], [0.332,-0.361], [0.323,-0.276], [0.332,-0.361], [0.354,-0.446], [0.397,-0.531], [0.447,-0.616], [0.497,-0.684], [0.547,-0.735], [0.611,-0.757], [0.657,-0.769], [0.700,-0.786], [0.742,-0.795], [0.785,-0.803], [0.850,-0.812], [0.935,-0.803], [1.020,-0.795], [1.105,-0.786],  ],\n  't*' : [ [0.085,-0.191], [0.170,-0.234], [0.255,-0.276], [0.340,-0.259], [0.425,-0.191], [0.510,-0.106], [0.558,0.008], [0.573,0.161], [0.588,0.314], [0.552,0.314], [0.522,0.314], [0.467,0.314], [0.411,0.314], [0.340,0.314], [0.255,0.314], [0.170,0.314], [0.255,0.314], [0.340,0.314], [0.411,0.314], [0.467,0.314], [0.522,0.314], [0.552,0.314], [0.633,0.314], [0.688,0.314], [0.729,0.314], [0.784,0.314], [0.840,0.314], [0.895,0.314], [0.978,0.314], [1.062,0.314], [0.978,0.314], [0.895,0.314], [0.840,0.314], [0.784,0.314], [0.729,0.314], [0.688,0.314], [0.633,0.314], [0.588,0.314], [0.602,0.467], [0.617,0.621], [0.632,0.774], [0.632,0.621], [0.632,0.467], [0.632,0.314], [0.632,0.161], [0.632,0.008], [0.632,-0.146], [0.632,-0.299], [0.632,-0.452], [0.632,-0.605], [0.632,-0.759], [0.659,-0.805], [0.720,-0.816], [0.807,-0.799], [0.894,-0.791], [0.978,-0.786], [1.062,-0.786], [1.147,-0.786], [1.232,-0.786],  ],\n  'u*' : [ [0.043,-0.157], [0.085,-0.166], [0.128,-0.157], [0.162,-0.157], [0.196,-0.140], [0.230,-0.106], [0.272,-0.081], [0.306,-0.055], [0.344,-0.048], [0.338,-0.097], [0.332,-0.146], [0.325,-0.195], [0.319,-0.245], [0.312,-0.294], [0.306,-0.343], [0.299,-0.392], [0.293,-0.442], [0.286,-0.491], [0.280,-0.540], [0.273,-0.589], [0.267,-0.639], [0.260,-0.688], [0.254,-0.737], [0.260,-0.786], [0.289,-0.803], [0.332,-0.812], [0.383,-0.803], [0.425,-0.795], [0.461,-0.778], [0.501,-0.761], [0.544,-0.744], [0.583,-0.727], [0.616,-0.710], [0.646,-0.684], [0.671,-0.650], [0.682,-0.605], [0.686,-0.558], [0.689,-0.511], [0.693,-0.464], [0.697,-0.416], [0.700,-0.369], [0.704,-0.322], [0.708,-0.275], [0.711,-0.228], [0.715,-0.180], [0.719,-0.133], [0.723,-0.074], [0.726,-0.023], [0.723,-0.074], [0.719,-0.133], [0.715,-0.180], [0.711,-0.228], [0.708,-0.275], [0.704,-0.322], [0.700,-0.369], [0.697,-0.416], [0.693,-0.464], [0.712,-0.529], [0.719,-0.582], [0.731,-0.633], [0.748,-0.684], [0.756,-0.735], [0.790,-0.786], [0.845,-0.803], [0.901,-0.803], [0.944,-0.795], [1.020,-0.786],  ],\n  'v*' : [ [0.051,-0.157], [0.102,-0.140], [0.136,-0.123], [0.162,-0.098], [0.187,-0.081], [0.211,-0.055], [0.243,-0.054], [0.268,-0.076], [0.289,-0.097], [0.301,-0.134], [0.311,-0.176], [0.321,-0.212], [0.322,-0.244], [0.318,-0.280], [0.316,-0.321], [0.314,-0.363], [0.311,-0.404], [0.309,-0.446], [0.306,-0.487], [0.304,-0.528], [0.301,-0.570], [0.299,-0.611], [0.306,-0.657], [0.322,-0.707], [0.338,-0.749], [0.367,-0.790], [0.406,-0.814], [0.448,-0.793], [0.487,-0.766], [0.502,-0.723], [0.516,-0.680], [0.531,-0.637], [0.546,-0.594], [0.550,-0.547], [0.566,-0.502], [0.572,-0.450], [0.582,-0.408], [0.593,-0.331], [0.604,-0.255], [0.616,-0.179], [0.627,-0.102], [0.699,-0.110], [0.773,-0.130], [0.828,-0.143], [0.871,-0.149],  ],\n  'w*' : [ [0.051,-0.128], [0.102,-0.115], [0.153,-0.081], [0.187,-0.064], [0.225,-0.041], [0.220,-0.126], [0.216,-0.210], [0.212,-0.294], [0.207,-0.379], [0.203,-0.463], [0.206,-0.517], [0.215,-0.602], [0.223,-0.670], [0.254,-0.738], [0.297,-0.783], [0.359,-0.799], [0.429,-0.776], [0.453,-0.728], [0.476,-0.680], [0.500,-0.632], [0.519,-0.585], [0.537,-0.537], [0.553,-0.490], [0.568,-0.442], [0.575,-0.358], [0.583,-0.274], [0.590,-0.190], [0.598,-0.105], [0.605,-0.064], [0.617,-0.120], [0.629,-0.219], [0.641,-0.317], [0.653,-0.416], [0.665,-0.515], [0.676,-0.614], [0.688,-0.712], [0.731,-0.780], [0.775,-0.786], [0.816,-0.775], [0.852,-0.723], [0.878,-0.682], [0.901,-0.634], [0.925,-0.587], [0.937,-0.530], [0.949,-0.448], [0.955,-0.403], [0.965,-0.314], [0.976,-0.224], [0.986,-0.135], [0.997,-0.064], [1.052,-0.072], [1.108,-0.089], [1.162,-0.106], [1.220,-0.149],  ],\n  'x*' : [ [0.043,-0.106], [0.085,-0.064], [0.128,-0.004], [0.196,0.021], [0.232,-0.046], [0.269,-0.114], [0.306,-0.181], [0.343,-0.248], [0.380,-0.315], [0.417,-0.383], [0.445,-0.429], [0.430,-0.452], [0.388,-0.506], [0.346,-0.560], [0.304,-0.614], [0.262,-0.667], [0.220,-0.721], [0.170,-0.786], [0.220,-0.721], [0.262,-0.667], [0.304,-0.614], [0.346,-0.560], [0.388,-0.506], [0.430,-0.452], [0.471,-0.398], [0.522,-0.337], [0.555,-0.291], [0.597,-0.237], [0.639,-0.183], [0.681,-0.129], [0.723,-0.075], [0.765,-0.021], [0.799,0.021], [0.765,-0.021], [0.723,-0.075], [0.681,-0.129], [0.639,-0.183], [0.597,-0.237], [0.555,-0.291], [0.522,-0.337], [0.471,-0.398], [0.445,-0.429], [0.491,-0.517], [0.528,-0.585], [0.565,-0.652], [0.602,-0.719], [0.639,-0.786], [0.680,-0.824], [0.718,-0.830], [0.763,-0.846], [0.799,-0.842], [0.834,-0.837], [0.863,-0.820], [0.901,-0.808], [0.935,-0.795], [0.986,-0.786],  ],\n  'y*' : [ [0.043,-0.157], [0.085,-0.166], [0.128,-0.157], [0.162,-0.157], [0.196,-0.149], [0.230,-0.140], [0.264,-0.123], [0.306,-0.123], [0.340,-0.123], [0.379,-0.138], [0.397,-0.161], [0.405,-0.198], [0.399,-0.241], [0.394,-0.279], [0.378,-0.358], [0.363,-0.437], [0.347,-0.515], [0.332,-0.594], [0.317,-0.672], [0.315,-0.735], [0.325,-0.788], [0.343,-0.811], [0.361,-0.834], [0.379,-0.857], [0.402,-0.878], [0.428,-0.895], [0.462,-0.902], [0.496,-0.902], [0.566,-0.893], [0.632,-0.857], [0.663,-0.823], [0.737,-0.745], [0.743,-0.674], [0.750,-0.603], [0.757,-0.533], [0.764,-0.462], [0.771,-0.391], [0.778,-0.320], [0.785,-0.249], [0.791,-0.179], [0.799,-0.132], [0.791,-0.179], [0.785,-0.249], [0.778,-0.320], [0.771,-0.391], [0.764,-0.462], [0.757,-0.533], [0.750,-0.603], [0.743,-0.674], [0.737,-0.745], [0.730,-0.816], [0.723,-0.887], [0.716,-0.957], [0.709,-1.028], [0.702,-1.099], [0.695,-1.170], [0.689,-1.241], [0.682,-1.311], [0.675,-1.382], [0.668,-1.453], [0.661,-1.524], [0.631,-1.571], [0.580,-1.584], [0.513,-1.593], [0.446,-1.601], [0.383,-1.593], [0.336,-1.576], [0.318,-1.553], [0.300,-1.530], [0.281,-1.507], [0.265,-1.476], [0.260,-1.438], [0.267,-1.387], [0.291,-1.348], [0.304,-1.314], [0.327,-1.275], [0.342,-1.241], [0.360,-1.205], [0.375,-1.181], [0.390,-1.158], [0.405,-1.134], [0.420,-1.111], [0.435,-1.087], [0.450,-1.064], [0.491,-1.038], [0.541,-1.012], [0.590,-0.986], [0.639,-0.959], [0.777,-0.897], [0.832,-0.858], [0.888,-0.827], [0.944,-0.809], [1.001,-0.791], [1.052,-0.786],  ],\n  'z*' : [ [0.043,-0.157], [0.085,-0.166], [0.136,-0.174], [0.187,-0.174], [0.238,-0.174], [0.289,-0.174], [0.340,-0.157], [0.374,-0.140], [0.406,-0.115], [0.431,-0.083], [0.464,-0.047], [0.491,-0.030], [0.530,-0.036], [0.564,-0.059], [0.595,-0.083], [0.612,-0.106], [0.629,-0.149], [0.623,-0.191], [0.614,-0.245], [0.593,-0.319], [0.567,-0.386], [0.530,-0.453], [0.497,-0.500], [0.457,-0.574], [0.414,-0.639], [0.381,-0.685], [0.364,-0.708], [0.314,-0.777], [0.298,-0.801], [0.314,-0.777], [0.364,-0.708], [0.381,-0.685], [0.414,-0.639], [0.464,-0.639], [0.491,-0.667], [0.514,-0.708], [0.530,-0.731], [0.557,-0.769], [0.580,-0.824], [0.584,-0.847], [0.580,-0.870], [0.580,-0.916], [0.580,-0.963], [0.567,-1.084], [0.542,-1.169], [0.517,-1.243], [0.497,-1.287], [0.481,-1.310], [0.447,-1.380], [0.431,-1.403], [0.408,-1.432], [0.374,-1.495], [0.347,-1.519], [0.316,-1.534], [0.281,-1.519], [0.264,-1.495], [0.219,-1.441], [0.198,-1.403], [0.185,-1.356], [0.198,-1.310], [0.218,-1.267], [0.248,-1.218], [0.264,-1.194], [0.281,-1.171], [0.298,-1.148], [0.314,-1.125], [0.331,-1.102], [0.347,-1.079], [0.364,-1.055], [0.381,-1.032], [0.416,-1.002], [0.451,-0.965], [0.486,-0.931], [0.520,-0.897], [0.555,-0.871], [0.590,-0.846], [0.625,-0.829], [0.660,-0.812], [0.695,-0.803], [0.730,-0.791], [0.765,-0.786], [0.816,-0.778], [0.867,-0.778], [0.918,-0.786],  ],\n  ',' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.357,-0.701], [0.391,-0.616], [0.459,-0.701], [0.476,-0.786], [0.493,-0.871], [0.493,-0.956], [0.459,-1.041], [0.425,-1.126], [0.357,-1.211], [0.255,-1.296], [0.357,-1.211], [0.425,-1.126], [0.459,-1.041], [0.493,-0.956], [0.493,-0.871], [0.476,-0.786], [0.459,-0.701], [0.391,-0.616], [0.459,-0.701], [0.476,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786],  ],\n  '?' : [ [0.085,-0.786], [0.170,-0.786], [0.272,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.786], [0.425,-0.701], [0.425,-0.616], [0.425,-0.531], [0.425,-0.446], [0.425,-0.361], [0.425,-0.276], [0.425,-0.191], [0.425,-0.064], [0.527,-0.038], [0.586,-0.021], [0.640,0.004], [0.697,0.080], [0.734,0.149], [0.749,0.252], [0.748,0.387], [0.741,0.516], [0.726,0.600], [0.712,0.659], [0.672,0.740], [0.641,0.777], [0.586,0.786], [0.537,0.794], [0.485,0.786], [0.412,0.744], [0.340,0.701], [0.213,0.616], [0.340,0.701], [0.412,0.744], [0.485,0.786], [0.537,0.794], [0.586,0.786], [0.641,0.777], [0.672,0.740], [0.712,0.659], [0.726,0.600], [0.741,0.516], [0.748,0.387], [0.749,0.252], [0.734,0.149], [0.697,0.080], [0.640,0.004], [0.586,-0.021], [0.527,-0.038], [0.425,-0.064], [0.425,-0.191], [0.425,-0.276], [0.425,-0.361], [0.425,-0.446], [0.425,-0.531], [0.425,-0.616], [0.425,-0.701], [0.425,-0.786], [0.612,-0.786], [0.561,-0.659], [0.425,-0.574], [0.289,-0.659], [0.238,-0.786], [0.289,-0.914], [0.425,-0.999], [0.561,-0.914], [0.612,-0.786], [0.425,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '&' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.786], [0.344,-0.778], [0.425,-0.774], [0.501,-0.774], [0.630,-0.761], [0.731,-0.748], [0.816,-0.684], [0.901,-0.574], [0.969,-0.506], [1.020,-0.440], [1.105,-0.319], [1.207,-0.191], [1.105,-0.319], [1.020,-0.440], [0.969,-0.506], [0.901,-0.574], [0.816,-0.684], [0.731,-0.748], [0.630,-0.761], [0.501,-0.774], [0.425,-0.774], [0.344,-0.778], [0.298,-0.718], [0.272,-0.676], [0.255,-0.599], [0.247,-0.497], [0.255,-0.327], [0.306,-0.191], [0.408,-0.064], [0.493,0.004], [0.544,0.047], [0.663,0.089], [0.756,0.154], [0.799,0.234], [0.842,0.335], [0.875,0.429], [0.885,0.520], [0.888,0.614], [0.871,0.690], [0.837,0.749], [0.790,0.777], [0.706,0.786], [0.637,0.786], [0.570,0.777], [0.499,0.760], [0.464,0.734], [0.440,0.681], [0.429,0.605], [0.422,0.548], [0.424,0.463], [0.432,0.404], [0.459,0.306], [0.501,0.174], [0.578,0.064], [0.646,-0.106], [0.714,-0.276], [0.765,-0.446], [0.816,-0.616], [0.867,-0.786], [0.935,-0.829], [1.020,-0.829], [1.097,-0.803], [1.191,-0.786], [1.290,-0.786], [1.385,-0.786], [1.462,-0.786],  ],\n  '$' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-1.041], [0.510,-0.786], [0.510,-0.531], [0.510,-0.276], [0.510,-0.021], [0.510,0.234], [0.510,0.489], [0.510,0.829], [0.544,0.829], [0.544,0.489], [0.544,0.234], [0.544,-0.021], [0.544,-0.276], [0.544,-0.531], [0.544,-0.786], [0.544,-1.041], [0.544,-0.786], [0.652,-0.786], [0.729,-0.778], [0.790,-0.733], [0.829,-0.664], [0.887,-0.560], [0.912,-0.429], [0.904,-0.334], [0.880,-0.267], [0.831,-0.191], [0.774,-0.140], [0.708,-0.140], [0.629,-0.140], [0.544,-0.140], [0.475,-0.140], [0.408,-0.132], [0.340,-0.098], [0.306,-0.072], [0.272,-0.030], [0.221,0.038], [0.187,0.115], [0.170,0.242], [0.187,0.341], [0.238,0.440], [0.289,0.497], [0.349,0.530], [0.425,0.548], [0.510,0.548], [0.592,0.548], [0.680,0.548], [0.765,0.548], [0.850,0.548], [0.765,0.548], [0.680,0.548], [0.592,0.548], [0.510,0.548], [0.425,0.548], [0.349,0.530], [0.289,0.497], [0.238,0.440], [0.187,0.341], [0.170,0.242], [0.187,0.115], [0.221,0.038], [0.272,-0.030], [0.306,-0.072], [0.340,-0.098], [0.408,-0.132], [0.475,-0.140], [0.544,-0.140], [0.629,-0.140], [0.708,-0.140], [0.774,-0.140], [0.831,-0.191], [0.880,-0.267], [0.904,-0.334], [0.912,-0.429], [0.887,-0.560], [0.829,-0.664], [0.790,-0.733], [0.729,-0.778], [0.652,-0.786], [0.510,-0.786], [0.425,-0.786], [0.340,-0.786], [0.255,-0.786], [0.170,-0.786], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '!' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.531], [0.510,-0.276], [0.510,-0.021], [0.510,0.234], [0.510,0.489], [0.510,0.786], [0.510,0.489], [0.510,0.234], [0.510,-0.021], [0.510,-0.276], [0.510,-0.531], [0.510,-0.786], [0.697,-0.786], [0.646,-0.659], [0.510,-0.574], [0.374,-0.659], [0.323,-0.786], [0.374,-0.914], [0.510,-0.999], [0.646,-0.914], [0.697,-0.786], [0.510,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n}\n","export let raysol_sanserif = {\n  ' ' : [ [0.000,-0.786], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '0' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.544,-0.691], [0.629,-0.595], [0.680,-0.500], [0.723,-0.404], [0.765,-0.308], [0.799,-0.213], [0.833,-0.117], [0.840,-0.009], [0.833,0.117], [0.799,0.212], [0.765,0.308], [0.723,0.404], [0.680,0.499], [0.629,0.595], [0.544,0.690], [0.425,0.786], [0.306,0.690], [0.221,0.595], [0.170,0.499], [0.128,0.404], [0.085,0.308], [0.051,0.212], [0.017,0.117], [0.010,-0.009], [0.017,-0.117], [0.051,-0.213], [0.085,-0.308], [0.128,-0.404], [0.170,-0.500], [0.221,-0.595], [0.306,-0.691], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  '1' : [ [0.085,-0.786], [0.085,-0.629], [0.085,-0.472], [0.085,-0.315], [0.085,-0.157], [0.085,-0.000], [0.085,0.157], [0.085,0.314], [0.085,0.472], [0.085,0.629], [0.085,0.786], [0.085,0.629], [0.085,0.472], [0.085,0.314], [0.085,0.157], [0.085,-0.000], [0.085,-0.157], [0.085,-0.315], [0.085,-0.472], [0.085,-0.629], [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  '2' : [ [0.085,-0.786], [0.170,-0.786], [0.085,-0.786], [0.177,-0.599], [0.269,-0.412], [0.360,-0.225], [0.452,-0.038], [0.544,0.149], [0.612,0.276], [0.654,0.404], [0.663,0.531], [0.637,0.616], [0.587,0.701], [0.527,0.752], [0.451,0.782], [0.383,0.786], [0.315,0.782], [0.238,0.752], [0.179,0.701], [0.128,0.616], [0.085,0.531], [0.128,0.616], [0.179,0.701], [0.238,0.752], [0.315,0.782], [0.383,0.786], [0.451,0.782], [0.527,0.752], [0.587,0.701], [0.637,0.616], [0.663,0.531], [0.654,0.404], [0.612,0.276], [0.544,0.149], [0.452,-0.038], [0.360,-0.225], [0.269,-0.412], [0.177,-0.599], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.765,-0.786], [0.850,-0.574], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  '3' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.786], [0.408,-0.782], [0.485,-0.752], [0.544,-0.701], [0.595,-0.616], [0.620,-0.531], [0.612,-0.404], [0.570,-0.276], [0.476,-0.149], [0.340,0.064], [0.255,0.064], [0.340,0.064], [0.501,0.149], [0.570,0.276], [0.612,0.404], [0.620,0.531], [0.595,0.616], [0.544,0.701], [0.485,0.752], [0.408,0.782], [0.340,0.786], [0.272,0.782], [0.196,0.752], [0.136,0.701], [0.085,0.616], [0.043,0.531], [0.085,0.616], [0.136,0.701], [0.196,0.752], [0.272,0.782], [0.340,0.786], [0.408,0.782], [0.485,0.752], [0.544,0.701], [0.595,0.616], [0.620,0.531], [0.612,0.404], [0.570,0.276], [0.501,0.149], [0.340,0.064], [0.255,0.064], [0.340,0.064], [0.476,-0.149], [0.570,-0.276], [0.612,-0.404], [0.620,-0.531], [0.595,-0.616], [0.544,-0.701], [0.485,-0.752], [0.408,-0.782], [0.340,-0.786], [0.272,-0.782], [0.196,-0.752], [0.136,-0.701], [0.085,-0.616], [0.043,-0.531], [0.000,-0.438], [0.043,-0.531], [0.085,-0.616], [0.136,-0.701], [0.196,-0.752], [0.272,-0.782], [0.340,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '4' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.595,-0.616], [0.595,-0.446], [0.595,-0.276], [0.595,-0.106], [0.595,-0.000], [0.510,-0.000], [0.425,-0.000], [0.340,-0.000], [0.255,-0.000], [0.170,-0.000], [0.068,-0.000], [0.085,0.064], [0.085,0.234], [0.085,0.404], [0.085,0.574], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.574], [0.085,0.404], [0.085,0.234], [0.085,0.064], [0.085,-0.000], [0.170,-0.000], [0.255,-0.000], [0.340,-0.000], [0.425,-0.000], [0.510,-0.000], [0.595,-0.000], [0.680,-0.000], [0.807,-0.000], [0.935,-0.000], [0.807,-0.000], [0.680,-0.000], [0.595,-0.000], [0.595,0.064], [0.595,0.234], [0.595,0.404], [0.595,0.574], [0.595,0.744], [0.595,0.786], [0.595,0.744], [0.595,0.574], [0.595,0.404], [0.595,0.234], [0.595,0.064], [0.595,-0.000], [0.595,-0.106], [0.595,-0.276], [0.595,-0.446], [0.595,-0.616], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  '5' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.744], [0.493,-0.740], [0.570,-0.710], [0.629,-0.659], [0.680,-0.574], [0.706,-0.489], [0.714,-0.361], [0.697,-0.191], [0.654,-0.064], [0.561,0.064], [0.425,0.174], [0.272,0.166], [0.136,0.140], [0.153,0.302], [0.170,0.463], [0.187,0.625], [0.204,0.786], [0.289,0.786], [0.374,0.786], [0.459,0.786], [0.544,0.786], [0.680,0.786], [0.799,0.786], [0.680,0.786], [0.544,0.786], [0.459,0.786], [0.374,0.786], [0.289,0.786], [0.204,0.786], [0.187,0.625], [0.170,0.463], [0.153,0.302], [0.136,0.140], [0.272,0.166], [0.425,0.174], [0.561,0.064], [0.654,-0.064], [0.697,-0.191], [0.714,-0.361], [0.706,-0.489], [0.680,-0.574], [0.629,-0.659], [0.570,-0.710], [0.493,-0.740], [0.425,-0.744], [0.357,-0.740], [0.281,-0.710], [0.221,-0.659], [0.170,-0.616], [0.128,-0.548], [0.076,-0.421], [0.128,-0.548], [0.170,-0.616], [0.221,-0.659], [0.281,-0.710], [0.357,-0.740], [0.425,-0.744], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  '6' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.357,-0.744], [0.425,-0.740], [0.501,-0.710], [0.561,-0.659], [0.612,-0.574], [0.637,-0.489], [0.629,-0.361], [0.587,-0.234], [0.510,-0.106], [0.442,-0.038], [0.357,-0.021], [0.272,-0.038], [0.442,-0.038], [0.357,-0.021], [0.272,-0.038], [0.204,-0.106], [0.128,-0.234], [0.085,-0.361], [0.112,-0.247], [0.139,-0.132], [0.167,-0.017], [0.194,0.098], [0.221,0.212], [0.248,0.327], [0.275,0.442], [0.303,0.557], [0.330,0.671], [0.357,0.786], [0.330,0.671], [0.303,0.557], [0.275,0.442], [0.248,0.327], [0.221,0.212], [0.194,0.098], [0.167,-0.017], [0.139,-0.132], [0.112,-0.247], [0.085,-0.361], [0.076,-0.489], [0.102,-0.574], [0.153,-0.659], [0.213,-0.710], [0.289,-0.740], [0.357,-0.744], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '7' : [ [0.085,-0.786], [0.170,-0.786], [0.221,-0.629], [0.272,-0.472], [0.323,-0.315], [0.374,-0.157], [0.425,-0.000], [0.476,0.157], [0.527,0.314], [0.578,0.472], [0.629,0.629], [0.680,0.786], [0.606,0.786], [0.531,0.786], [0.457,0.786], [0.383,0.786], [0.308,0.786], [0.234,0.786], [0.159,0.786], [0.043,0.786], [0.159,0.786], [0.234,0.786], [0.308,0.786], [0.383,0.786], [0.457,0.786], [0.531,0.786], [0.606,0.786], [0.680,0.786], [0.629,0.629], [0.578,0.472], [0.527,0.314], [0.476,0.157], [0.425,-0.000], [0.374,-0.157], [0.323,-0.315], [0.272,-0.472], [0.221,-0.629], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  '8' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.744], [0.408,-0.740], [0.485,-0.710], [0.544,-0.659], [0.595,-0.574], [0.620,-0.489], [0.612,-0.361], [0.570,-0.234], [0.493,-0.106], [0.425,0.021], [0.340,0.021], [0.255,0.021], [0.179,0.149], [0.111,0.276], [0.068,0.404], [0.060,0.531], [0.085,0.616], [0.136,0.701], [0.196,0.752], [0.272,0.782], [0.340,0.786], [0.408,0.782], [0.485,0.752], [0.544,0.701], [0.595,0.616], [0.620,0.531], [0.612,0.404], [0.570,0.276], [0.501,0.149], [0.425,0.021], [0.340,0.021], [0.255,0.021], [0.187,-0.106], [0.111,-0.234], [0.068,-0.361], [0.060,-0.489], [0.085,-0.574], [0.136,-0.659], [0.196,-0.710], [0.272,-0.740], [0.340,-0.744], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '9' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.646,-0.786], [0.646,-0.616], [0.646,-0.446], [0.646,-0.276], [0.646,-0.106], [0.646,0.064], [0.646,0.234], [0.646,0.404], [0.595,0.276], [0.527,0.149], [0.365,0.064], [0.204,0.149], [0.136,0.276], [0.093,0.404], [0.085,0.531], [0.111,0.616], [0.162,0.701], [0.221,0.752], [0.298,0.782], [0.365,0.786], [0.433,0.782], [0.510,0.752], [0.570,0.701], [0.620,0.616], [0.646,0.531], [0.646,0.404], [0.646,0.234], [0.646,0.064], [0.646,-0.106], [0.646,-0.276], [0.646,-0.446], [0.646,-0.616], [0.646,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'A' : [ [0.085,-0.786], [0.128,-0.629], [0.170,-0.472], [0.213,-0.315], [0.255,-0.157], [0.298,-0.000], [0.340,0.157], [0.383,0.314], [0.425,0.472], [0.468,0.629], [0.510,0.786], [0.552,0.629], [0.595,0.472], [0.637,0.314], [0.680,0.157], [0.723,-0.000], [0.765,-0.157], [0.680,-0.157], [0.595,-0.157], [0.510,-0.157], [0.425,-0.157], [0.340,-0.157], [0.255,-0.157], [0.340,-0.157], [0.425,-0.157], [0.510,-0.157], [0.595,-0.157], [0.680,-0.157], [0.765,-0.157], [0.807,-0.315], [0.850,-0.472], [0.892,-0.629], [0.935,-0.786], [1.275,-0.786],  ],\n  'B' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.459,0.777], [0.510,0.752], [0.561,0.701], [0.595,0.667], [0.629,0.616], [0.663,0.531], [0.697,0.446], [0.697,0.404], [0.663,0.319], [0.629,0.234], [0.595,0.183], [0.561,0.149], [0.510,0.098], [0.459,0.072], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.459,0.055], [0.510,0.030], [0.561,-0.021], [0.595,-0.055], [0.629,-0.106], [0.663,-0.191], [0.697,-0.276], [0.714,-0.361], [0.697,-0.446], [0.663,-0.531], [0.629,-0.616], [0.595,-0.667], [0.561,-0.701], [0.510,-0.752], [0.459,-0.778], [0.425,-0.786], [0.357,-0.786], [0.289,-0.786], [0.221,-0.786], [0.153,-0.786], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.561,-0.786], [0.646,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'C' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.442,-0.740], [0.365,-0.710], [0.306,-0.659], [0.255,-0.574], [0.213,-0.489], [0.170,-0.395], [0.136,-0.276], [0.102,-0.132], [0.085,0.021], [0.102,0.174], [0.136,0.319], [0.170,0.438], [0.213,0.531], [0.255,0.616], [0.306,0.701], [0.365,0.752], [0.442,0.782], [0.510,0.786], [0.578,0.782], [0.654,0.752], [0.714,0.701], [0.765,0.616], [0.807,0.531], [0.765,0.616], [0.714,0.701], [0.654,0.752], [0.578,0.782], [0.510,0.786], [0.442,0.782], [0.365,0.752], [0.306,0.701], [0.255,0.616], [0.213,0.531], [0.170,0.438], [0.136,0.319], [0.102,0.174], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.765,-0.574], [0.714,-0.659], [0.654,-0.710], [0.578,-0.740], [0.510,-0.744], [0.510,-0.786], [0.425,-0.786], [0.374,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'D' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.408,-0.740], [0.485,-0.710], [0.544,-0.659], [0.595,-0.574], [0.637,-0.489], [0.680,-0.395], [0.714,-0.276], [0.748,-0.132], [0.765,0.021], [0.748,0.174], [0.714,0.319], [0.680,0.438], [0.637,0.531], [0.595,0.616], [0.544,0.701], [0.485,0.752], [0.408,0.782], [0.340,0.786], [0.272,0.786], [0.196,0.786], [0.136,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'E' : [ [0.085,-0.786], [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.629,0.064], [0.561,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.493,0.786], [0.561,0.786], [0.629,0.786], [0.629,0.701], [0.629,0.531], [0.629,0.701], [0.561,0.786], [0.493,0.786], [0.425,0.786], [0.357,0.786], [0.289,0.786], [0.221,0.786], [0.153,0.786], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.493,-0.786], [0.561,-0.786], [0.629,-0.701], [0.629,-0.531], [0.629,-0.701], [0.629,-0.786], [0.714,-0.786], [1.054,-0.786],  ],\n  'F' : [ [0.085,-0.786], [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.085,0.064], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.493,0.786], [0.561,0.786], [0.629,0.786], [0.561,0.786], [0.493,0.786], [0.425,0.786], [0.357,0.786], [0.289,0.786], [0.221,0.786], [0.153,0.786], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.493,-0.786], [0.561,-0.786], [0.629,-0.786], [0.969,-0.786],  ],\n  'G' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.744], [0.493,-0.740], [0.570,-0.710], [0.629,-0.659], [0.680,-0.574], [0.723,-0.489], [0.765,-0.395], [0.799,-0.276], [0.833,-0.132], [0.850,0.021], [0.765,0.021], [0.680,0.021], [0.595,0.021], [0.510,0.021], [0.425,0.021], [0.510,0.021], [0.595,0.021], [0.680,0.021], [0.765,0.021], [0.850,0.021], [0.833,-0.132], [0.799,-0.276], [0.765,-0.395], [0.723,-0.489], [0.680,-0.574], [0.629,-0.659], [0.570,-0.710], [0.493,-0.740], [0.425,-0.744], [0.357,-0.740], [0.281,-0.710], [0.221,-0.659], [0.170,-0.574], [0.128,-0.489], [0.085,-0.395], [0.051,-0.276], [0.017,-0.132], [0.000,0.021], [0.017,0.174], [0.051,0.319], [0.085,0.438], [0.128,0.531], [0.170,0.616], [0.221,0.701], [0.281,0.752], [0.357,0.782], [0.425,0.786], [0.493,0.782], [0.570,0.752], [0.629,0.701], [0.680,0.616], [0.629,0.701], [0.570,0.752], [0.493,0.782], [0.425,0.786], [0.357,0.782], [0.281,0.752], [0.221,0.701], [0.170,0.616], [0.128,0.531], [0.085,0.438], [0.051,0.319], [0.017,0.174], [0.000,0.021], [0.017,-0.132], [0.051,-0.276], [0.085,-0.395], [0.128,-0.489], [0.170,-0.574], [0.221,-0.659], [0.281,-0.710], [0.357,-0.740], [0.425,-0.744], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'H' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.629,0.064], [0.697,0.064], [0.765,0.064], [0.765,0.149], [0.765,0.234], [0.765,0.319], [0.765,0.404], [0.765,0.489], [0.765,0.574], [0.765,0.659], [0.765,0.744], [0.765,0.786], [0.765,0.744], [0.765,0.659], [0.765,0.574], [0.765,0.489], [0.765,0.404], [0.765,0.319], [0.765,0.234], [0.765,0.149], [0.765,0.064], [0.697,0.064], [0.629,0.064], [0.561,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.629,0.064], [0.697,0.064], [0.765,0.064], [0.765,-0.021], [0.765,-0.106], [0.765,-0.191], [0.765,-0.276], [0.765,-0.361], [0.765,-0.446], [0.765,-0.531], [0.765,-0.616], [0.765,-0.701], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'I' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.701], [0.340,-0.616], [0.340,-0.531], [0.340,-0.446], [0.340,-0.361], [0.340,-0.276], [0.340,-0.191], [0.340,-0.106], [0.340,-0.021], [0.340,0.064], [0.340,0.149], [0.340,0.234], [0.340,0.319], [0.340,0.404], [0.340,0.489], [0.340,0.574], [0.340,0.659], [0.340,0.744], [0.340,0.786], [0.255,0.786], [0.170,0.786], [0.085,0.786], [0.170,0.786], [0.255,0.786], [0.340,0.786], [0.425,0.786], [0.510,0.786], [0.595,0.786], [0.510,0.786], [0.425,0.786], [0.340,0.744], [0.340,0.659], [0.340,0.574], [0.340,0.489], [0.340,0.404], [0.340,0.319], [0.340,0.234], [0.340,0.149], [0.340,0.064], [0.340,-0.021], [0.340,-0.106], [0.340,-0.191], [0.340,-0.276], [0.340,-0.361], [0.340,-0.446], [0.340,-0.531], [0.340,-0.616], [0.340,-0.701], [0.340,-0.786], [0.255,-0.701], [0.170,-0.701], [0.085,-0.701], [0.170,-0.701], [0.255,-0.701], [0.340,-0.701], [0.425,-0.701], [0.510,-0.701], [0.595,-0.701], [0.510,-0.701], [0.425,-0.701], [0.340,-0.701], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  'J' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.391,-0.786], [0.425,-0.778], [0.476,-0.752], [0.527,-0.701], [0.561,-0.667], [0.595,-0.616], [0.629,-0.531], [0.663,-0.446], [0.680,-0.361], [0.680,-0.276], [0.680,-0.191], [0.680,-0.106], [0.680,-0.021], [0.680,0.064], [0.680,0.149], [0.680,0.234], [0.680,0.319], [0.680,0.404], [0.680,0.489], [0.680,0.574], [0.680,0.659], [0.680,0.744], [0.680,0.786], [0.680,0.744], [0.680,0.659], [0.680,0.574], [0.680,0.489], [0.680,0.404], [0.680,0.319], [0.680,0.234], [0.680,0.149], [0.680,0.064], [0.680,-0.021], [0.680,-0.106], [0.680,-0.191], [0.680,-0.276], [0.680,-0.361], [0.663,-0.446], [0.629,-0.531], [0.595,-0.616], [0.561,-0.667], [0.527,-0.701], [0.476,-0.752], [0.425,-0.778], [0.391,-0.786], [0.340,-0.786], [0.289,-0.786], [0.255,-0.778], [0.204,-0.752], [0.153,-0.701], [0.119,-0.667], [0.085,-0.616], [0.051,-0.531], [0.017,-0.446], [0.000,-0.361], [0.017,-0.446], [0.051,-0.531], [0.085,-0.616], [0.119,-0.667], [0.153,-0.701], [0.204,-0.752], [0.255,-0.778], [0.289,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'K' : [ [0.085,-0.786], [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.224,0.136], [0.279,0.208], [0.333,0.280], [0.388,0.353], [0.442,0.425], [0.496,0.497], [0.551,0.569], [0.605,0.642], [0.660,0.714], [0.714,0.786], [0.660,0.714], [0.605,0.642], [0.551,0.569], [0.496,0.497], [0.442,0.425], [0.388,0.353], [0.333,0.280], [0.279,0.208], [0.224,0.136], [0.170,0.064], [0.224,-0.021], [0.279,-0.106], [0.333,-0.191], [0.388,-0.276], [0.442,-0.361], [0.496,-0.446], [0.551,-0.531], [0.605,-0.616], [0.660,-0.701], [0.714,-0.786], [0.799,-0.786], [1.139,-0.786],  ],\n  'L' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.765,-0.574], [0.765,-0.446], [0.765,-0.574], [0.765,-0.701], [0.765,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'M' : [ [0.085,-0.786], [0.085,-0.786], [0.119,-0.629], [0.153,-0.472], [0.187,-0.315], [0.221,-0.157], [0.255,-0.000], [0.289,0.157], [0.323,0.314], [0.357,0.472], [0.391,0.629], [0.425,0.786], [0.459,0.629], [0.493,0.472], [0.527,0.314], [0.561,0.157], [0.595,-0.000], [0.629,-0.157], [0.663,-0.315], [0.697,-0.472], [0.731,-0.629], [0.765,-0.786], [0.799,-0.629], [0.833,-0.472], [0.867,-0.315], [0.901,-0.157], [0.935,-0.000], [0.969,0.157], [1.003,0.314], [1.037,0.472], [1.071,0.629], [1.105,0.786], [1.139,0.629], [1.173,0.472], [1.207,0.314], [1.241,0.157], [1.275,-0.000], [1.309,-0.157], [1.343,-0.315], [1.377,-0.472], [1.411,-0.629], [1.445,-0.786], [1.530,-0.786], [1.870,-0.786],  ],\n  'N' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.170,0.629], [0.255,0.472], [0.340,0.314], [0.425,0.157], [0.510,-0.000], [0.595,-0.157], [0.680,-0.315], [0.765,-0.472], [0.850,-0.629], [0.935,-0.786], [0.935,-0.701], [0.935,-0.616], [0.935,-0.531], [0.935,-0.446], [0.935,-0.361], [0.935,-0.276], [0.935,-0.191], [0.935,-0.106], [0.935,-0.021], [0.935,0.064], [0.935,0.149], [0.935,0.234], [0.935,0.319], [0.935,0.404], [0.935,0.489], [0.935,0.574], [0.935,0.659], [0.935,0.744], [0.935,0.786], [0.935,0.744], [0.935,0.659], [0.935,0.574], [0.935,0.489], [0.935,0.404], [0.935,0.319], [0.935,0.234], [0.935,0.149], [0.935,0.064], [0.935,-0.021], [0.935,-0.106], [0.935,-0.191], [0.935,-0.276], [0.935,-0.361], [0.935,-0.446], [0.935,-0.531], [0.935,-0.616], [0.935,-0.701], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'O' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.850,-0.395], [0.884,-0.276], [0.918,-0.132], [0.935,0.021], [0.918,0.174], [0.884,0.319], [0.850,0.438], [0.807,0.531], [0.765,0.616], [0.714,0.701], [0.654,0.752], [0.578,0.782], [0.510,0.786], [0.442,0.782], [0.365,0.752], [0.306,0.701], [0.255,0.616], [0.213,0.531], [0.170,0.438], [0.136,0.319], [0.102,0.174], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'P' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.459,0.072], [0.510,0.098], [0.561,0.149], [0.595,0.183], [0.629,0.234], [0.663,0.319], [0.697,0.404], [0.697,0.446], [0.663,0.531], [0.629,0.616], [0.595,0.667], [0.561,0.701], [0.510,0.752], [0.459,0.777], [0.425,0.786], [0.357,0.786], [0.289,0.786], [0.221,0.786], [0.153,0.786], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.493,-0.786], [0.561,-0.786], [0.629,-0.786], [0.697,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'Q' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.850,-0.395], [0.884,-0.276], [0.918,-0.132], [0.935,0.021], [0.918,0.174], [0.884,0.319], [0.850,0.438], [0.807,0.531], [0.765,0.616], [0.714,0.701], [0.654,0.752], [0.578,0.782], [0.510,0.786], [0.442,0.782], [0.365,0.752], [0.306,0.701], [0.255,0.616], [0.213,0.531], [0.170,0.438], [0.136,0.319], [0.102,0.174], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.799,-0.854], [0.833,-0.922], [0.867,-0.990], [0.765,-0.786], [0.765,-0.786], [0.867,-0.990], [0.833,-0.922], [0.799,-0.854], [0.765,-0.786], [0.731,-0.718], [0.697,-0.650], [0.663,-0.582], [0.629,-0.514], [0.595,-0.446], [0.629,-0.514], [0.663,-0.582], [0.697,-0.650], [0.731,-0.718], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'R' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.459,0.777], [0.510,0.752], [0.561,0.701], [0.595,0.667], [0.629,0.616], [0.663,0.531], [0.697,0.446], [0.697,0.404], [0.663,0.319], [0.629,0.234], [0.595,0.183], [0.561,0.149], [0.510,0.098], [0.459,0.072], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.391,-0.021], [0.425,-0.106], [0.459,-0.191], [0.493,-0.276], [0.527,-0.361], [0.561,-0.446], [0.595,-0.531], [0.629,-0.616], [0.663,-0.701], [0.697,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'S' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.744], [0.493,-0.740], [0.570,-0.710], [0.629,-0.659], [0.680,-0.574], [0.706,-0.489], [0.697,-0.361], [0.654,-0.234], [0.561,-0.106], [0.425,0.021], [0.289,0.149], [0.196,0.276], [0.153,0.404], [0.145,0.531], [0.170,0.616], [0.221,0.701], [0.281,0.752], [0.357,0.782], [0.425,0.786], [0.493,0.782], [0.570,0.752], [0.629,0.701], [0.680,0.616], [0.723,0.531], [0.680,0.616], [0.629,0.701], [0.570,0.752], [0.493,0.782], [0.425,0.786], [0.357,0.782], [0.281,0.752], [0.221,0.701], [0.170,0.616], [0.145,0.531], [0.153,0.404], [0.196,0.276], [0.289,0.149], [0.425,0.021], [0.561,-0.106], [0.654,-0.234], [0.697,-0.361], [0.706,-0.489], [0.680,-0.574], [0.629,-0.659], [0.570,-0.710], [0.493,-0.740], [0.425,-0.744], [0.357,-0.740], [0.281,-0.710], [0.221,-0.659], [0.170,-0.574], [0.128,-0.489], [0.085,-0.395], [0.128,-0.489], [0.170,-0.574], [0.221,-0.659], [0.281,-0.710], [0.357,-0.740], [0.425,-0.744], [0.425,-0.786], [0.425,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'T' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.595,-0.701], [0.595,-0.616], [0.595,-0.531], [0.595,-0.446], [0.595,-0.361], [0.595,-0.276], [0.595,-0.191], [0.595,-0.106], [0.595,-0.021], [0.595,0.064], [0.595,0.149], [0.595,0.234], [0.595,0.319], [0.595,0.404], [0.595,0.489], [0.595,0.574], [0.595,0.659], [0.595,0.744], [0.595,0.786], [0.510,0.786], [0.425,0.786], [0.340,0.786], [0.255,0.786], [0.170,0.786], [0.085,0.786], [0.170,0.786], [0.255,0.786], [0.340,0.786], [0.425,0.786], [0.510,0.786], [0.595,0.786], [0.680,0.786], [0.765,0.786], [0.850,0.786], [0.935,0.786], [1.020,0.786], [1.105,0.786], [1.020,0.786], [0.935,0.786], [0.850,0.786], [0.765,0.786], [0.680,0.786], [0.595,0.744], [0.595,0.659], [0.595,0.574], [0.595,0.489], [0.595,0.404], [0.595,0.319], [0.595,0.234], [0.595,0.149], [0.595,0.064], [0.595,-0.021], [0.595,-0.106], [0.595,-0.191], [0.595,-0.276], [0.595,-0.361], [0.595,-0.446], [0.595,-0.531], [0.595,-0.616], [0.595,-0.701], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.445,-0.786],  ],\n  'U' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.850,-0.395], [0.884,-0.276], [0.918,-0.132], [0.935,0.021], [0.935,0.106], [0.935,0.191], [0.935,0.276], [0.935,0.361], [0.935,0.446], [0.935,0.531], [0.935,0.616], [0.935,0.701], [0.935,0.786], [0.935,0.701], [0.935,0.616], [0.935,0.531], [0.935,0.446], [0.935,0.361], [0.935,0.276], [0.935,0.191], [0.935,0.106], [0.935,0.021], [0.918,-0.132], [0.884,-0.276], [0.850,-0.395], [0.807,-0.489], [0.765,-0.574], [0.714,-0.659], [0.654,-0.710], [0.578,-0.740], [0.510,-0.744], [0.442,-0.740], [0.365,-0.710], [0.306,-0.659], [0.255,-0.574], [0.213,-0.489], [0.170,-0.395], [0.136,-0.276], [0.102,-0.132], [0.085,0.021], [0.085,0.106], [0.085,0.191], [0.085,0.276], [0.085,0.361], [0.085,0.446], [0.085,0.531], [0.085,0.616], [0.085,0.701], [0.085,0.786], [0.085,0.701], [0.085,0.616], [0.085,0.531], [0.085,0.446], [0.085,0.361], [0.085,0.276], [0.085,0.191], [0.085,0.106], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'V' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.646,-0.629], [0.697,-0.472], [0.748,-0.315], [0.799,-0.157], [0.850,-0.000], [0.901,0.157], [0.952,0.314], [1.003,0.472], [1.054,0.629], [1.105,0.786], [1.054,0.629], [1.003,0.472], [0.952,0.314], [0.901,0.157], [0.850,-0.000], [0.799,-0.157], [0.748,-0.315], [0.697,-0.472], [0.646,-0.629], [0.595,-0.786], [0.544,-0.629], [0.493,-0.472], [0.442,-0.315], [0.391,-0.157], [0.340,-0.000], [0.289,0.157], [0.238,0.314], [0.187,0.472], [0.136,0.629], [0.085,0.786], [0.136,0.629], [0.187,0.472], [0.238,0.314], [0.289,0.157], [0.340,-0.000], [0.391,-0.157], [0.442,-0.315], [0.493,-0.472], [0.544,-0.629], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'W' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.786], [0.391,-0.629], [0.357,-0.472], [0.323,-0.315], [0.289,-0.157], [0.255,-0.000], [0.221,0.157], [0.187,0.314], [0.153,0.472], [0.119,0.629], [0.085,0.786], [0.119,0.629], [0.153,0.472], [0.187,0.314], [0.221,0.157], [0.255,-0.000], [0.289,-0.157], [0.323,-0.315], [0.357,-0.472], [0.391,-0.629], [0.425,-0.786], [0.459,-0.629], [0.493,-0.472], [0.527,-0.315], [0.561,-0.157], [0.595,-0.000], [0.629,0.157], [0.663,0.314], [0.697,0.472], [0.731,0.629], [0.765,0.786], [0.799,0.629], [0.833,0.472], [0.867,0.314], [0.901,0.157], [0.935,-0.000], [0.969,-0.157], [1.003,-0.315], [1.037,-0.472], [1.071,-0.629], [1.105,-0.786], [1.139,-0.629], [1.173,-0.472], [1.207,-0.315], [1.241,-0.157], [1.275,-0.000], [1.309,0.157], [1.343,0.314], [1.377,0.472], [1.411,0.629], [1.445,0.786], [1.411,0.629], [1.377,0.472], [1.343,0.314], [1.309,0.157], [1.275,-0.000], [1.241,-0.157], [1.207,-0.315], [1.173,-0.472], [1.139,-0.629], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786], [1.530,-0.786], [1.870,-0.786],  ],\n  'X' : [ [0.085,-0.786], [0.187,-0.629], [0.289,-0.472], [0.391,-0.315], [0.493,-0.157], [0.595,-0.000], [0.697,0.157], [0.799,0.314], [0.901,0.472], [1.003,0.629], [1.105,0.786], [1.003,0.629], [0.901,0.472], [0.799,0.314], [0.697,0.157], [0.595,-0.000], [0.493,0.157], [0.391,0.314], [0.289,0.472], [0.187,0.629], [0.085,0.786], [0.187,0.629], [0.289,0.472], [0.391,0.314], [0.493,0.157], [0.595,-0.000], [0.697,-0.157], [0.799,-0.315], [0.901,-0.472], [1.003,-0.629], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'Y' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.595,-0.701], [0.595,-0.616], [0.595,-0.531], [0.595,-0.446], [0.595,-0.361], [0.595,-0.276], [0.595,-0.191], [0.595,-0.106], [0.595,-0.021], [0.595,-0.000], [0.697,0.157], [0.799,0.314], [0.901,0.472], [1.003,0.629], [1.105,0.786], [1.003,0.629], [0.901,0.472], [0.799,0.314], [0.697,0.157], [0.595,-0.000], [0.493,0.157], [0.391,0.314], [0.289,0.472], [0.187,0.629], [0.085,0.786], [0.187,0.629], [0.289,0.472], [0.391,0.314], [0.493,0.157], [0.595,-0.000], [0.595,-0.021], [0.595,-0.106], [0.595,-0.191], [0.595,-0.276], [0.595,-0.361], [0.595,-0.446], [0.595,-0.531], [0.595,-0.616], [0.595,-0.701], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'Z' : [ [0.085,-0.786], [0.187,-0.629], [0.289,-0.472], [0.391,-0.315], [0.493,-0.157], [0.595,-0.000], [0.697,0.157], [0.799,0.314], [0.901,0.472], [1.003,0.629], [1.105,0.786], [0.935,0.786], [0.765,0.786], [0.595,0.786], [0.425,0.786], [0.255,0.786], [0.085,0.786], [0.255,0.786], [0.425,0.786], [0.595,0.786], [0.765,0.786], [0.935,0.786], [1.105,0.786], [1.003,0.629], [0.901,0.472], [0.799,0.314], [0.697,0.157], [0.595,-0.000], [0.493,-0.157], [0.391,-0.315], [0.289,-0.472], [0.187,-0.629], [0.085,-0.769], [0.255,-0.769], [0.425,-0.769], [0.595,-0.769], [0.765,-0.769], [0.935,-0.769], [1.105,-0.769], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'a' : [ [0.068,-0.786], [0.153,-0.786], [0.238,-0.786], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.646,-0.701], [0.646,-0.616], [0.646,-0.531], [0.646,-0.446], [0.646,-0.361], [0.646,-0.276], [0.646,-0.191], [0.646,-0.106], [0.646,-0.021], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.731,-0.786], [1.071,-0.786],  ],\n  'b' : [ [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.459,-0.778], [0.510,-0.752], [0.561,-0.701], [0.595,-0.667], [0.629,-0.616], [0.663,-0.531], [0.697,-0.446], [0.714,-0.361], [0.697,-0.276], [0.663,-0.191], [0.629,-0.106], [0.595,-0.055], [0.561,-0.021], [0.510,0.030], [0.459,0.055], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.017,-0.786], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.561,-0.786], [0.646,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'c' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.340,-0.778], [0.289,-0.752], [0.238,-0.701], [0.204,-0.667], [0.170,-0.616], [0.136,-0.531], [0.102,-0.446], [0.085,-0.361], [0.102,-0.276], [0.136,-0.191], [0.170,-0.106], [0.204,-0.055], [0.238,-0.021], [0.289,0.030], [0.340,0.055], [0.374,0.064], [0.442,0.064], [0.510,0.064], [0.578,0.064], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.986,-0.786],  ],\n  'd' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.714,-0.786], [0.714,-0.701], [0.714,-0.616], [0.714,-0.531], [0.714,-0.446], [0.714,-0.361], [0.714,-0.276], [0.714,-0.191], [0.714,-0.106], [0.714,-0.021], [0.714,0.064], [0.714,0.149], [0.714,0.234], [0.714,0.319], [0.714,0.404], [0.714,0.489], [0.714,0.574], [0.714,0.659], [0.714,0.744], [0.714,0.786], [0.714,0.744], [0.714,0.659], [0.714,0.574], [0.714,0.489], [0.714,0.404], [0.714,0.319], [0.714,0.234], [0.714,0.149], [0.714,0.064], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.714,-0.786], [0.799,-0.786], [1.139,-0.786],  ],\n  'e' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.340,-0.778], [0.289,-0.752], [0.238,-0.701], [0.204,-0.667], [0.170,-0.616], [0.128,-0.531], [0.102,-0.446], [0.094,-0.361], [0.179,-0.361], [0.255,-0.361], [0.332,-0.361], [0.408,-0.361], [0.476,-0.361], [0.518,-0.361], [0.595,-0.361], [0.671,-0.361], [0.748,-0.361], [0.723,-0.276], [0.706,-0.191], [0.663,-0.106], [0.629,-0.055], [0.595,-0.021], [0.544,0.030], [0.493,0.055], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.128,-0.191], [0.102,-0.276], [0.102,-0.446], [0.128,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.714,-0.786], [0.816,-0.786], [1.156,-0.786],  ],\n  'f' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.701], [0.425,-0.616], [0.425,-0.531], [0.425,-0.446], [0.425,-0.361], [0.425,-0.276], [0.425,-0.191], [0.425,-0.106], [0.425,-0.021], [0.425,0.064], [0.510,0.064], [0.595,0.064], [0.680,0.064], [0.807,0.064], [0.680,0.064], [0.595,0.064], [0.510,0.064], [0.425,0.064], [0.340,0.064], [0.255,0.064], [0.170,0.064], [0.043,0.064], [0.170,0.064], [0.255,0.064], [0.340,0.064], [0.425,0.064], [0.425,0.149], [0.425,0.234], [0.425,0.319], [0.442,0.446], [0.468,0.531], [0.510,0.616], [0.544,0.667], [0.578,0.701], [0.629,0.752], [0.680,0.777], [0.714,0.786], [0.782,0.786], [0.850,0.786], [0.782,0.786], [0.714,0.786], [0.680,0.777], [0.629,0.752], [0.578,0.701], [0.544,0.667], [0.510,0.616], [0.468,0.531], [0.442,0.446], [0.425,0.319], [0.425,0.234], [0.425,0.149], [0.425,0.064], [0.425,-0.021], [0.425,-0.106], [0.425,-0.191], [0.425,-0.276], [0.425,-0.361], [0.425,-0.446], [0.425,-0.531], [0.425,-0.616], [0.425,-0.701], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'g' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.646,-0.871], [0.646,-0.956], [0.646,-1.041], [0.646,-1.126], [0.629,-1.254], [0.603,-1.339], [0.561,-1.424], [0.527,-1.475], [0.493,-1.509], [0.442,-1.560], [0.391,-1.585], [0.357,-1.594], [0.289,-1.594], [0.221,-1.594], [0.153,-1.594], [0.221,-1.594], [0.289,-1.594], [0.357,-1.594], [0.391,-1.585], [0.442,-1.560], [0.493,-1.509], [0.527,-1.475], [0.561,-1.424], [0.603,-1.339], [0.629,-1.254], [0.646,-1.126], [0.646,-1.041], [0.646,-0.956], [0.646,-0.871], [0.646,-0.786], [0.646,-0.701], [0.646,-0.616], [0.646,-0.531], [0.646,-0.446], [0.646,-0.361], [0.646,-0.276], [0.646,-0.191], [0.646,-0.106], [0.646,-0.021], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.714,-0.786], [1.054,-0.786],  ],\n  'h' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.744], [0.085,0.786], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.106], [0.102,-0.064], [0.153,-0.030], [0.238,0.021], [0.323,0.064], [0.425,0.064], [0.510,0.021], [0.595,-0.030], [0.646,-0.064], [0.663,-0.106], [0.663,-0.191], [0.663,-0.276], [0.663,-0.361], [0.663,-0.446], [0.663,-0.531], [0.663,-0.616], [0.663,-0.701], [0.663,-0.786], [0.748,-0.786], [1.088,-0.786],  ],\n  'i' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'j' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.493,-0.786], [0.493,-0.701], [0.493,-0.616], [0.493,-0.531], [0.493,-0.446], [0.493,-0.361], [0.493,-0.276], [0.493,-0.191], [0.493,-0.106], [0.493,-0.021], [0.493,0.064], [0.493,-0.021], [0.493,-0.106], [0.493,-0.191], [0.493,-0.276], [0.493,-0.361], [0.493,-0.446], [0.493,-0.531], [0.493,-0.616], [0.493,-0.701], [0.493,-0.786], [0.493,-0.871], [0.493,-0.956], [0.493,-1.041], [0.493,-1.126], [0.476,-1.254], [0.451,-1.339], [0.408,-1.424], [0.374,-1.475], [0.340,-1.509], [0.289,-1.560], [0.238,-1.585], [0.204,-1.594], [0.136,-1.594], [0.068,-1.594], [0.000,-1.594], [0.068,-1.594], [0.136,-1.594], [0.204,-1.594], [0.238,-1.585], [0.289,-1.560], [0.340,-1.509], [0.374,-1.475], [0.408,-1.424], [0.451,-1.339], [0.476,-1.254], [0.493,-1.126], [0.493,-1.041], [0.493,-0.956], [0.493,-0.871], [0.493,-0.786], [0.442,-0.786], [0.493,-0.786], [0.578,-0.786], [0.918,-0.786],  ],\n  'k' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.744], [0.085,0.786], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.184,-0.295], [0.283,-0.228], [0.383,-0.162], [0.482,-0.095], [0.581,-0.029], [0.680,0.038], [0.581,-0.029], [0.482,-0.095], [0.383,-0.162], [0.283,-0.228], [0.184,-0.295], [0.085,-0.361], [0.184,-0.432], [0.283,-0.503], [0.383,-0.574], [0.482,-0.645], [0.581,-0.716], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'l' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.744], [0.085,0.786], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'm' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.153,0.004], [0.255,0.030], [0.323,0.047], [0.391,0.047], [0.459,0.030], [0.561,0.004], [0.612,-0.021], [0.629,-0.106], [0.629,-0.191], [0.629,-0.276], [0.629,-0.361], [0.629,-0.446], [0.629,-0.531], [0.629,-0.616], [0.629,-0.701], [0.629,-0.808], [0.629,-0.701], [0.629,-0.616], [0.629,-0.531], [0.629,-0.446], [0.629,-0.361], [0.629,-0.276], [0.629,-0.191], [0.629,-0.106], [0.646,-0.021], [0.697,0.004], [0.799,0.030], [0.867,0.047], [0.935,0.047], [1.003,0.030], [1.105,0.004], [1.156,-0.021], [1.173,-0.106], [1.173,-0.191], [1.173,-0.276], [1.173,-0.361], [1.173,-0.446], [1.173,-0.531], [1.173,-0.616], [1.173,-0.701], [1.173,-0.786], [1.258,-0.786], [1.598,-0.786],  ],\n  'n' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.153,0.004], [0.255,0.030], [0.323,0.047], [0.391,0.047], [0.459,0.030], [0.561,0.004], [0.612,-0.021], [0.629,-0.106], [0.629,-0.191], [0.629,-0.276], [0.629,-0.361], [0.629,-0.446], [0.629,-0.531], [0.629,-0.616], [0.629,-0.701], [0.629,-0.786], [0.714,-0.786], [1.054,-0.786],  ],\n  'o' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.646,-0.786], [0.680,-0.778], [0.731,-0.752], [0.782,-0.701], [0.816,-0.667], [0.850,-0.616], [0.884,-0.531], [0.918,-0.446], [0.935,-0.361], [0.918,-0.276], [0.884,-0.191], [0.850,-0.106], [0.816,-0.055], [0.782,-0.021], [0.731,0.030], [0.680,0.055], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'p' : [ [0.085,-0.786], [0.085,-0.871], [0.085,-0.956], [0.085,-1.041], [0.085,-1.126], [0.085,-1.211], [0.085,-1.296], [0.085,-1.381], [0.085,-1.466], [0.085,-1.551], [0.085,-1.211], [0.085,-1.551], [0.085,-1.466], [0.085,-1.381], [0.085,-1.296], [0.085,-1.211], [0.085,-1.126], [0.085,-1.041], [0.085,-0.956], [0.085,-0.871], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.391,-0.778], [0.442,-0.752], [0.493,-0.701], [0.527,-0.667], [0.561,-0.616], [0.595,-0.531], [0.629,-0.446], [0.646,-0.361], [0.629,-0.276], [0.595,-0.191], [0.561,-0.106], [0.527,-0.055], [0.493,-0.021], [0.442,0.030], [0.391,0.055], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.493,-0.786], [0.578,-0.786], [0.663,-0.786], [0.731,-0.786], [1.071,-0.786],  ],\n  'q' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.646,-0.871], [0.646,-0.956], [0.646,-1.041], [0.646,-1.126], [0.663,-1.254], [0.689,-1.339], [0.731,-1.424], [0.765,-1.475], [0.799,-1.509], [0.850,-1.560], [0.901,-1.585], [0.935,-1.594], [1.003,-1.594], [1.071,-1.594], [1.139,-1.594], [1.071,-1.594], [1.003,-1.594], [0.935,-1.594], [0.901,-1.585], [0.850,-1.560], [0.799,-1.509], [0.765,-1.475], [0.731,-1.424], [0.689,-1.339], [0.663,-1.254], [0.646,-1.126], [0.646,-1.041], [0.646,-0.956], [0.646,-0.871], [0.646,-0.786], [0.646,-0.701], [0.646,-0.616], [0.646,-0.531], [0.646,-0.446], [0.646,-0.361], [0.646,-0.276], [0.646,-0.191], [0.646,-0.106], [0.646,-0.021], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.714,-0.786], [0.816,-0.786], [0.918,-0.786], [1.020,-0.786], [1.105,-0.786], [1.224,-0.786], [1.564,-0.786],  ],\n  'r' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,-0.021], [0.085,0.149], [0.085,0.191], [0.085,0.149], [0.085,-0.021], [0.153,0.004], [0.255,0.030], [0.323,0.055], [0.391,0.064], [0.459,0.055], [0.527,0.030], [0.595,-0.021], [0.527,0.030], [0.459,0.055], [0.391,0.064], [0.323,0.055], [0.255,0.030], [0.153,0.004], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  's' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.561,-0.786], [0.595,-0.778], [0.646,-0.752], [0.697,-0.701], [0.731,-0.667], [0.765,-0.616], [0.756,-0.565], [0.731,-0.531], [0.663,-0.489], [0.595,-0.446], [0.510,-0.404], [0.425,-0.361], [0.340,-0.319], [0.255,-0.276], [0.187,-0.234], [0.119,-0.191], [0.102,-0.115], [0.119,-0.055], [0.153,-0.021], [0.204,0.030], [0.255,0.055], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.595,0.055], [0.646,0.030], [0.697,-0.021], [0.731,-0.055], [0.697,-0.021], [0.646,0.030], [0.595,0.055], [0.561,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.255,0.055], [0.204,0.030], [0.153,-0.021], [0.119,-0.055], [0.102,-0.115], [0.119,-0.191], [0.187,-0.234], [0.255,-0.276], [0.340,-0.319], [0.425,-0.361], [0.510,-0.404], [0.595,-0.446], [0.663,-0.489], [0.731,-0.531], [0.756,-0.565], [0.765,-0.616], [0.731,-0.667], [0.697,-0.701], [0.646,-0.752], [0.595,-0.778], [0.561,-0.786], [0.510,-0.786], [0.425,-0.786], [0.340,-0.786], [0.289,-0.786], [0.255,-0.778], [0.204,-0.752], [0.153,-0.701], [0.119,-0.667], [0.060,-0.616], [0.119,-0.667], [0.153,-0.701], [0.204,-0.752], [0.255,-0.778], [0.289,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  't' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.374,-0.786], [0.374,-0.701], [0.374,-0.616], [0.374,-0.531], [0.374,-0.446], [0.374,-0.361], [0.374,-0.276], [0.374,-0.191], [0.374,-0.106], [0.374,-0.021], [0.374,0.064], [0.374,0.149], [0.374,0.234], [0.374,0.319], [0.374,0.361], [0.374,0.446], [0.306,0.446], [0.238,0.446], [0.170,0.446], [0.043,0.446], [0.170,0.446], [0.238,0.446], [0.306,0.446], [0.374,0.446], [0.442,0.446], [0.510,0.446], [0.578,0.446], [0.706,0.446], [0.578,0.446], [0.510,0.446], [0.442,0.446], [0.374,0.446], [0.374,0.531], [0.374,0.616], [0.374,0.701], [0.374,0.786], [0.374,0.701], [0.374,0.616], [0.374,0.531], [0.374,0.446], [0.374,0.361], [0.374,0.319], [0.374,0.234], [0.374,0.149], [0.374,0.064], [0.374,-0.021], [0.374,-0.106], [0.374,-0.191], [0.374,-0.276], [0.374,-0.361], [0.374,-0.446], [0.374,-0.531], [0.374,-0.616], [0.374,-0.701], [0.374,-0.786], [0.459,-0.786], [0.544,-0.786], [0.663,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'u' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.323,-0.769], [0.255,-0.752], [0.153,-0.727], [0.102,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.102,-0.701], [0.153,-0.727], [0.255,-0.752], [0.323,-0.769], [0.391,-0.786], [0.459,-0.769], [0.527,-0.752], [0.629,-0.727], [0.680,-0.701], [0.697,-0.701], [0.697,-0.616], [0.697,-0.531], [0.697,-0.446], [0.697,-0.361], [0.697,-0.276], [0.697,-0.191], [0.697,-0.106], [0.697,-0.021], [0.697,0.064], [0.697,-0.021], [0.697,-0.106], [0.697,-0.191], [0.697,-0.276], [0.697,-0.361], [0.697,-0.446], [0.697,-0.531], [0.697,-0.616], [0.697,-0.701], [0.697,-0.786], [0.782,-0.786], [1.122,-0.786],  ],\n  'v' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.468,-0.786], [0.429,-0.701], [0.391,-0.616], [0.353,-0.531], [0.315,-0.446], [0.276,-0.361], [0.238,-0.276], [0.200,-0.191], [0.162,-0.106], [0.123,-0.021], [0.085,0.064], [0.123,-0.021], [0.162,-0.106], [0.200,-0.191], [0.238,-0.276], [0.276,-0.361], [0.315,-0.446], [0.353,-0.531], [0.391,-0.616], [0.429,-0.701], [0.468,-0.786], [0.506,-0.701], [0.544,-0.616], [0.582,-0.531], [0.620,-0.446], [0.659,-0.361], [0.697,-0.276], [0.735,-0.191], [0.773,-0.106], [0.812,-0.021], [0.850,0.064], [0.812,-0.021], [0.773,-0.106], [0.735,-0.191], [0.697,-0.276], [0.659,-0.361], [0.620,-0.446], [0.582,-0.531], [0.544,-0.616], [0.506,-0.701], [0.468,-0.786], [0.552,-0.786], [0.663,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'w' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.315,-0.701], [0.289,-0.616], [0.264,-0.531], [0.238,-0.446], [0.213,-0.361], [0.187,-0.276], [0.162,-0.191], [0.136,-0.106], [0.111,-0.021], [0.085,0.064], [0.111,-0.021], [0.136,-0.106], [0.162,-0.191], [0.187,-0.276], [0.213,-0.361], [0.238,-0.446], [0.264,-0.531], [0.289,-0.616], [0.315,-0.701], [0.340,-0.786], [0.365,-0.701], [0.391,-0.616], [0.417,-0.531], [0.442,-0.446], [0.468,-0.361], [0.493,-0.276], [0.518,-0.191], [0.544,-0.106], [0.570,-0.021], [0.595,0.064], [0.620,-0.021], [0.646,-0.106], [0.671,-0.191], [0.697,-0.276], [0.723,-0.361], [0.748,-0.446], [0.773,-0.531], [0.799,-0.616], [0.825,-0.701], [0.850,-0.786], [0.875,-0.701], [0.901,-0.616], [0.926,-0.531], [0.952,-0.446], [0.978,-0.361], [1.003,-0.276], [1.028,-0.191], [1.054,-0.106], [1.079,-0.021], [1.105,0.064], [1.079,-0.021], [1.054,-0.106], [1.028,-0.191], [1.003,-0.276], [0.978,-0.361], [0.952,-0.446], [0.926,-0.531], [0.901,-0.616], [0.875,-0.701], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'x' : [ [0.076,-0.701], [0.153,-0.616], [0.230,-0.531], [0.306,-0.446], [0.383,-0.361], [0.459,-0.276], [0.535,-0.191], [0.612,-0.106], [0.689,-0.021], [0.765,0.064], [0.689,-0.021], [0.612,-0.106], [0.535,-0.191], [0.459,-0.276], [0.383,-0.361], [0.306,-0.276], [0.230,-0.191], [0.153,-0.106], [0.076,-0.021], [0.000,0.064], [0.076,-0.021], [0.153,-0.106], [0.230,-0.191], [0.306,-0.276], [0.383,-0.361], [0.459,-0.446], [0.535,-0.531], [0.612,-0.616], [0.689,-0.701], [0.765,-0.786], [1.105,-0.786],  ],\n  'y' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.468,-0.786], [0.429,-0.701], [0.391,-0.616], [0.353,-0.531], [0.315,-0.446], [0.276,-0.361], [0.238,-0.276], [0.200,-0.191], [0.162,-0.106], [0.123,-0.021], [0.085,0.064], [0.123,-0.021], [0.162,-0.106], [0.200,-0.191], [0.238,-0.276], [0.276,-0.361], [0.315,-0.446], [0.353,-0.531], [0.391,-0.616], [0.429,-0.701], [0.468,-0.786], [0.506,-0.701], [0.544,-0.616], [0.582,-0.531], [0.620,-0.446], [0.659,-0.361], [0.697,-0.276], [0.735,-0.191], [0.773,-0.106], [0.812,-0.021], [0.850,0.064], [0.812,-0.021], [0.773,-0.106], [0.735,-0.191], [0.697,-0.276], [0.659,-0.361], [0.620,-0.446], [0.582,-0.531], [0.544,-0.616], [0.506,-0.701], [0.468,-0.786], [0.429,-0.871], [0.391,-0.956], [0.353,-1.041], [0.315,-1.126], [0.276,-1.211], [0.238,-1.296], [0.200,-1.381], [0.238,-1.296], [0.276,-1.211], [0.315,-1.126], [0.353,-1.041], [0.391,-0.956], [0.429,-0.871], [0.468,-0.786], [0.552,-0.786], [0.637,-0.786], [0.723,-0.786], [0.807,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'z' : [ [0.085,-0.786], [0.162,-0.701], [0.238,-0.616], [0.315,-0.531], [0.391,-0.446], [0.468,-0.361], [0.544,-0.276], [0.620,-0.191], [0.697,-0.106], [0.773,-0.021], [0.850,0.064], [0.765,0.064], [0.680,0.064], [0.595,0.064], [0.510,0.064], [0.425,0.064], [0.340,0.064], [0.255,0.064], [0.170,0.064], [0.085,0.064], [0.170,0.064], [0.255,0.064], [0.340,0.064], [0.425,0.064], [0.510,0.064], [0.595,0.064], [0.680,0.064], [0.765,0.064], [0.850,0.064], [0.773,-0.021], [0.697,-0.106], [0.620,-0.191], [0.544,-0.276], [0.468,-0.361], [0.391,-0.446], [0.315,-0.531], [0.238,-0.616], [0.162,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'a*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'b*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'c*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'd*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'e*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'f*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'g*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'h*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'i*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'j*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'k*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'l*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'm*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'n*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'o*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'p*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'q*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'r*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  's*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  't*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'u*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'v*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'w*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'x*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'y*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'z*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  ',' : [ [0.085,-0.786], [0.170,-0.786], [0.187,-0.701], [0.221,-0.616], [0.289,-0.701], [0.306,-0.786], [0.323,-0.871], [0.323,-0.956], [0.289,-1.041], [0.255,-1.126], [0.187,-1.211], [0.085,-1.296], [0.187,-1.211], [0.255,-1.126], [0.289,-1.041], [0.323,-0.956], [0.323,-0.871], [0.306,-0.786], [0.289,-0.701], [0.221,-0.616], [0.289,-0.701], [0.306,-0.786], [0.425,-0.786], [0.765,-0.786],  ],\n  '?' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.701], [0.425,-0.616], [0.425,-0.531], [0.425,-0.446], [0.425,-0.361], [0.425,-0.276], [0.425,-0.191], [0.425,-0.106], [0.425,-0.081], [0.452,-0.038], [0.476,0.004], [0.510,0.072], [0.544,0.149], [0.578,0.208], [0.612,0.276], [0.629,0.319], [0.646,0.361], [0.654,0.404], [0.660,0.472], [0.663,0.531], [0.654,0.574], [0.637,0.616], [0.620,0.659], [0.587,0.701], [0.561,0.735], [0.527,0.752], [0.485,0.773], [0.451,0.782], [0.417,0.786], [0.383,0.786], [0.340,0.783], [0.315,0.782], [0.272,0.769], [0.238,0.752], [0.204,0.731], [0.179,0.701], [0.150,0.659], [0.128,0.616], [0.102,0.574], [0.085,0.531], [0.102,0.574], [0.128,0.616], [0.150,0.659], [0.179,0.701], [0.204,0.731], [0.238,0.752], [0.272,0.769], [0.315,0.782], [0.340,0.783], [0.383,0.786], [0.417,0.786], [0.451,0.782], [0.485,0.773], [0.527,0.752], [0.561,0.735], [0.587,0.701], [0.620,0.659], [0.637,0.616], [0.654,0.574], [0.663,0.531], [0.660,0.472], [0.654,0.404], [0.646,0.361], [0.629,0.319], [0.612,0.276], [0.578,0.208], [0.544,0.149], [0.510,0.072], [0.476,0.004], [0.452,-0.038], [0.425,-0.081], [0.425,-0.106], [0.425,-0.149], [0.425,-0.191], [0.425,-0.234], [0.425,-0.276], [0.425,-0.319], [0.425,-0.361], [0.425,-0.404], [0.425,-0.446], [0.425,-0.489], [0.425,-0.531], [0.425,-0.574], [0.425,-0.616], [0.425,-0.659], [0.425,-0.701], [0.425,-0.744], [0.425,-0.786], [0.340,-0.786], [0.425,-0.786], [0.612,-0.786], [0.561,-0.659], [0.425,-0.574], [0.289,-0.659], [0.238,-0.786], [0.289,-0.914], [0.425,-0.999], [0.561,-0.914], [0.612,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '&' : [ [0.085,-0.786], [0.174,-0.778], [0.255,-0.774], [0.332,-0.774], [0.460,-0.761], [0.561,-0.748], [0.646,-0.684], [0.731,-0.574], [0.799,-0.506], [0.850,-0.440], [0.935,-0.319], [1.037,-0.191], [0.935,-0.319], [0.850,-0.440], [0.799,-0.506], [0.731,-0.574], [0.646,-0.684], [0.561,-0.748], [0.460,-0.761], [0.332,-0.774], [0.255,-0.774], [0.174,-0.778], [0.128,-0.718], [0.102,-0.676], [0.085,-0.599], [0.076,-0.497], [0.085,-0.327], [0.136,-0.191], [0.238,-0.064], [0.323,0.004], [0.374,0.047], [0.493,0.089], [0.587,0.154], [0.629,0.234], [0.672,0.335], [0.706,0.429], [0.715,0.520], [0.718,0.614], [0.701,0.690], [0.667,0.749], [0.620,0.777], [0.535,0.786], [0.468,0.786], [0.400,0.777], [0.329,0.760], [0.294,0.734], [0.270,0.681], [0.259,0.605], [0.252,0.548], [0.254,0.463], [0.262,0.404], [0.289,0.306], [0.332,0.174], [0.408,0.064], [0.476,-0.106], [0.544,-0.276], [0.595,-0.446], [0.646,-0.616], [0.697,-0.786], [0.765,-0.829], [0.850,-0.829], [0.926,-0.803], [1.021,-0.786], [1.120,-0.786], [1.460,-0.786],  ],\n  '$' : [ [0.102,-0.786], [0.221,-0.786], [0.306,-0.786], [0.391,-0.786], [0.476,-0.786], [0.476,-0.786], [0.476,-1.126], [0.476,-0.786], [0.476,-0.531], [0.476,-0.276], [0.476,-0.021], [0.476,0.234], [0.476,0.489], [0.476,0.829], [0.510,0.829], [0.510,0.489], [0.510,0.234], [0.510,-0.021], [0.510,-0.276], [0.510,-0.531], [0.510,-0.786], [0.510,-1.126], [0.510,-0.786], [0.476,-0.786], [0.476,-0.871], [0.595,-0.910], [0.671,-0.880], [0.731,-0.829], [0.782,-0.744], [0.807,-0.659], [0.799,-0.531], [0.756,-0.404], [0.663,-0.276], [0.476,-0.149], [0.289,-0.021], [0.196,0.106], [0.153,0.234], [0.145,0.361], [0.170,0.446], [0.221,0.531], [0.281,0.582], [0.357,0.612], [0.476,0.616], [0.595,0.612], [0.671,0.582], [0.731,0.531], [0.782,0.446], [0.825,0.361], [0.782,0.446], [0.731,0.531], [0.671,0.582], [0.595,0.612], [0.476,0.616], [0.357,0.612], [0.281,0.582], [0.221,0.531], [0.170,0.446], [0.145,0.361], [0.153,0.234], [0.196,0.106], [0.289,-0.021], [0.476,-0.149], [0.663,-0.276], [0.756,-0.404], [0.799,-0.531], [0.807,-0.659], [0.782,-0.744], [0.731,-0.829], [0.671,-0.880], [0.595,-0.910], [0.476,-0.914], [0.357,-0.910], [0.281,-0.880], [0.221,-0.829], [0.170,-0.744], [0.128,-0.659], [0.085,-0.565], [0.128,-0.659], [0.170,-0.744], [0.221,-0.829], [0.281,-0.880], [0.357,-0.910], [0.476,-0.914], [0.476,-0.786], [0.561,-0.786], [0.646,-0.786], [0.731,-0.786], [0.816,-0.786], [0.901,-0.786], [1.241,-0.786],  ],\n  '!' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.255,-0.531], [0.255,-0.276], [0.255,-0.021], [0.255,0.234], [0.255,0.489], [0.255,0.786], [0.255,0.489], [0.255,0.234], [0.255,-0.021], [0.255,-0.276], [0.255,-0.531], [0.255,-0.786], [0.442,-0.786], [0.391,-0.659], [0.255,-0.574], [0.119,-0.659], [0.068,-0.786], [0.119,-0.914], [0.255,-0.999], [0.391,-0.914], [0.442,-0.786], [0.255,-0.786], [0.425,-0.786], [0.510,-0.786], [0.850,-0.786],  ],\n}\n","import Victor from 'victor'\nimport { raysol_cursive } from './raysol_cursive'\nimport { raysol_sanserif } from './raysol_sanserif'\n\nconst fontSpacing = 1.5\n\n// Format for vertices: [x,y,b] where in a 0:7(8) by -1:7 grid defining x,y and b defines the line or curve.\n// Bulge directions could be represented by a 0:4 list starting at none, then NE and going clockwise.\n// 4  1\n// 3  2\nlet billsey = {\n  ' ': [ [8,-1,0] ],\n  'A': [ [0,0,0], [3.5,7,0], [7,0,0], [5,3.5,0], [2,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'B': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [0,3.5,0], [3.5,3.5,0], [7,1.75,1], [3.5,0,2], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'C': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,3.5,4], [3.5,0,3], [7,1.75,2], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'D': [ [0,0,0], [0,7,0], [3.5,7,0], [7,3.5,1], [3.5,0,2], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'E': [ [0,0,0], [0,7,0], [7,7,0], [0,7,0], [0,3.5,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [7,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'F': [ [0,0,0], [0,7,0], [7,7,0], [0,7,0], [0,3.5,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'G': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,3.5,4], [3.5,0,3], [7,1.75,2], [5.25,1.75,0], [7,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'H': [ [0,0,0], [0,7,0], [0,3.5,0], [7,3.5,0], [7,7,0], [7,0,0], [7,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'I': [ [3.5,-1,0], [3.5,7,0], [0,7,0], [7,7,0], [3.5,7,0], [3.5,0,0], [0,0,0], [7,0,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'J': [ [3.5,-1,0], [3.5,0,0], [0,1.75,3], [3.5,0,3], [7,1.75,2], [7,7,0], [7,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'K': [ [0,0,0], [0,7,0], [0,1.75,0], [3.5,3.5,0], [7,7,0], [3.5,3.5,0], [7,0,0], [3.5,3.5,0], [0,1.75,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'L': [ [0,0,0], [0,7,0], [0,0,0], [7,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'M': [ [0,0,0], [0,7,0], [3.5,0,0], [7,7,0], [7,0,0], [7,7,0], [3.5,0,0], [0,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'N': [ [0,0,0], [0,7,0], [7,0,0], [7,7,0], [7,0,0], [0,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'O': [ [3.5,-1,0], [3.5, 0, 0], [0, 3.5, 3], [3.5, 7, 4], [7.0, 3.5, 1], [3.5, 0, 2], [3.5, -1, 0], [8, -1, 0] ],\n  'P': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'Q': [ [3.5,-1,0], [3.5, 0, 0], [0, 3.5, 3], [3.5, 7, 4], [7.0, 3.5, 1], [3.5, 0, 2], [4.325,0.5,4], [6.075,0,0], [7,0.5,2], [6.075,0,2], [4.325,0.5,0], [3.5,0,4], [3.5, -1, 0], [8, -1, 0] ],\n  'R': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [7,0,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'S': [ [3.5,-1,0], [3.5,0,0], [0,1.75,3], [3.5,0,3], [7,1.75,2], [3.5,3.5,1], [0,5.25,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,5.25,4], [3.5,3.5,3], [7,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'T': [ [3.5,-1,0], [3.5,7,0], [0,7,0], [7,7,0], [3.5,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'U': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [0,7,0], [0,3.5,0], [3.5,0,3], [7,3.5,2], [7,7,0], [7,3.5,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'V': [ [3.5,-1,0], [3.5,0,0], [0,7,0], [3.5,0,0], [7,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'W': [ [1.75,-1,0], [1.75,0,0], [0,7,0], [1.75,0,0], [3.5,7,0], [5.25,0,0], [7,7,0], [5.25,0,0], [3.5,7,0], [1.75,0,0], [1.75,-1,0], [8,-1,0] ],\n  'X': [ [0,0,0], [7,7,0], [3.5,3.5,0], [0,7,0], [7,0,0], [3.5,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'Y': [ [3.5,-1,0], [3.5,3.5,0], [0,7,0], [3.5,3.5,0], [7,7,0], [3.5,3.5,0], [3.5,-1,0], [8,-1,0] ],\n  'Z': [ [0,0,0], [7,0,0], [0,0,0], [7,7,0], [0,7,0], [7,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  '0': [ [3.5,-1,0], [3.5,0,0], [6,3.5,2], [3.5,7,1], [1,3.5,4], [3.5,0,3], [3.5,-1,0], [8,-1,0] ],\n  '1': [ [0,-1,0], [0,0,0], [0,0,0], [7,0,0], [3.5,0,0], [3.5,7,0], [1.5,6,2], [3.5,7,2], [3.5,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  '2': [ [1,-1,0], [1,0,0], [6,5.25,0], [3.5,7,1], [1,5.25,4], [3.5,7,4], [6,5.25,1], [1,0,0], [6,0,0], [1,0,0], [1,-1,0], [8,-1,0] ],\n  '3': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [3.5,0,3], [6,1.75,2], [3.5,3.5,1], [6,5.25,2], [3.5,7,1], [1,5.25,4], [3.5,7,4], [6,5.25,1], [3.5,3.5,2], [6,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '4': [ [3.5,-1,0], [3.5,0,0], [3.5,7,0], [1,3.5,0], [6,3.5,0], [3.5,3.5,0], [3.5,-1,0], [8,-1,0] ],\n  '5': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [3.5,0,3], [6,1.75,2], [3.5,3.5,1],[1,3.5,0], [1,7,0], [6,7,0], [1,7,0], [1,3.5,0], [3.5,3.5,0], [6,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '6': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [5.25,7,4], [1,1.75,4], [3.5,0,3],[6,1.75,2], [3.5,3.5,1], [1,1.75,4], [3.5,0,3], [3.5,-1,0], [8,-1,0] ],\n  '7': [ [3.5,-1,0], [3.5,0,0], [6,7,0], [1,7,0], [6,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  '8': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [6,5.25,0], [3.5,7,1], [1,5.25,4], [6,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '9': [ [3.5,-1,0], [3.5,0,0], [6,5.25,2], [3.5,7,1], [1,5.25,4], [3.5,3.5,3], [6,5.25,2], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '$': [ [3.5,-1,0], [3.5,0.5,0], [0,2.00,3], [3.5,0.5,3], [7,2.00,2], [3.5,3.5,1], [0,5.00,3], [3.5,6.5,4], [7,5.00,1], [3.5,6.5,1], [3.5, 7, 0], [3.5, 0, 0], [3.5,-1,0], [8,-1,0] ],\n  '.': [ [3.5,-1,0], [3.5,0.5,0], [3,1,3], [3.5,1.5,4], [4,1,1], [3.5,0.5,2], [3.5,-1,0], [8,-1,0] ],\n}\n\n// This is a clever way to create a range from 0..32, and then compute an x,y for each of those\n// points on the unit circle from zero to pi/2.\nconst curve = [...Array(32).keys()].map((index) => {\n  let angle = (index+1) * Math.PI/2.0/32.0\n  return new Victor(Math.cos(angle), Math.sin(angle))\n})\n\nconst billseyConverter = (vertices) => {\n  let newVertices = []\n  let prevPoint = new Victor(0,0)\n  vertices.forEach( (vertex) => {\n    switch (vertex[2]) {\n    case 0:\n    default:\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 1: // NE\n      if (vertex[1] < prevPoint[1]) { // clockwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      } else { // ccwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 2: // SE\n      if (vertex[1] < prevPoint[1]) { // clockwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      } else { // ccwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 3: // SW\n      if (vertex[1] > prevPoint[1]) { // clockwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      } else { // ccwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 4: // NW\n      if (vertex[1] > prevPoint[1]) { // clockwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      } else { // ccwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    }\n    prevPoint = vertex\n  })\n\n  const scale = 0.6;\n  const offset_y = -0.5\n  const scaledVertices = newVertices.map( vertex => {\n    return new Victor(scale * vertex.x, scale * vertex.y + offset_y)\n  })\n  return {\n    maxX: fontSpacing,\n    vertices: scaledVertices,\n  }\n}\n\nconst raysolConverter = (vertices) => {\n  let newVertices = []\n  vertices.forEach( (vertex) => {\n    newVertices.push(new Victor(vertex[0], vertex[1]))\n  })\n\n  return {\n    maxX: fontSpacing,\n    vertices: newVertices,\n  }\n}\n\nexport const MonospaceFont = (ch) => {\n  let upper = ch.toUpperCase()\n  if (billsey.hasOwnProperty(upper)) {\n    return billseyConverter(billsey[upper])\n  } else {\n    return billseyConverter(billsey[' '])\n  }\n}\n\nexport const CursiveFont = (ch) => {\n  if (raysol_cursive.hasOwnProperty(ch)) {\n    return raysolConverter(raysol_cursive[ch])\n  } else {\n    return raysolConverter(raysol_cursive[' '])\n  }\n}\n\nexport const SansSerifFont = (ch) => {\n  if (raysol_cursive.hasOwnProperty(ch)) {\n    return raysolConverter(raysol_sanserif[ch])\n  } else {\n    return raysolConverter(raysol_sanserif[' '])\n  }\n}\n","import Victor from 'victor'\nimport { roundP } from './util'\n\n// convert degrees to radians\nexport const degToRad = (deg) => {\n  return deg / 180.0 * Math.PI\n}\n\n// convert radians to degrees\nexport const radToDeg = (rad) => {\n  return rad * 180.0 / Math.PI\n}\n\nexport const distance = (v1, v2) => {\n  return Math.sqrt(Math.pow(v1.x - v2.x, 2.0) + Math.pow(v1.y - v2.y, 2.0))\n}\n\n// calculate the coterminal angle (0..2*PI) of a given angle\nexport const coterminal = (angle) => {\n  return angle - Math.floor(angle / (Math.PI * 2)) * Math.PI * 2\n}\n\nexport const angle = (point) => {\n  return Math.atan2(point.y, point.x)\n}\n\n// returns whether a point is on the segment defined by start and end\nexport const onSegment = (start, end, point) => {\n  return start.distance(point) + end.distance(point) - start.distance(end) < 0.001\n}\n\nexport const slope = (v1, v2) => {\n  let d = v2.x - v1.x\n  let n = v2.y - v1.y\n  return d === 0 ? undefined : n / d\n}\n\n// computes a bounding box from a set of points.\nexport const findBounds = (vertices) => {\n  let n = vertices.length\n\n  if (n === 0) {\n    return []\n  }\n\n  let loX = vertices[0].x\n  let hiX = vertices[0].x\n  let loY = vertices[0].y\n  let hiY = vertices[0].y\n\n  for(let i=1; i<n; ++i) {\n    let p = vertices[i]\n    loX = Math.min(loX, p.x)\n    hiX = Math.max(hiX, p.x)\n    loY = Math.min(loY, p.y)\n    hiY = Math.max(hiY, p.y)\n  }\n\n  return [new Victor(loX, loY), new Victor(hiX, hiY)]\n}\n\n// resizes each vertex in a list to the specified dimensions. Will not stretch the shape.\nexport const resizeVertices = (vertices, sizeX, sizeY) => {\n  let size = Math.max(sizeX, sizeY)\n  let bounds = findBounds(vertices)\n  let curveSize = Math.max(bounds[1].y - bounds[0].y, bounds[1].x - bounds[0].x)\n  let scale = size/curveSize\n\n  let scaledBounds = [bounds[0].multiply({x: scale, y: scale}), bounds[1].multiply({x: scale, y: scale})]\n  let deltaX = scaledBounds[1].x - (scaledBounds[1].x - scaledBounds[0].x)/2\n  let deltaY = scaledBounds[1].y - (scaledBounds[1].y - scaledBounds[0].y)/2\n\n  return vertices.map(vertex => vertex.clone().multiply({x: scale, y: scale}).add({x: -deltaX, y: -deltaY}))\n}\n\n// returns a vertex with x and y rounded to p number of digits\nexport const vertexRoundP = (v, p) => {\n  return new Victor(roundP(v.x, p), roundP(v.y, p))\n}\n\n// Transform functions\nexport const rotate = (vertex, angleDeg) => {\n  const angle = Math.PI / 180.0 * angleDeg\n  return new Victor(\n   vertex.x * Math.cos(angle) - vertex.y * Math.sin(angle),\n   vertex.x * Math.sin(angle) + vertex.y * Math.cos(angle)\n  )\n}\n\nexport const scale = (vertex, scalePerc) => {\n  const scale = scalePerc / 100.0\n  return new Victor(\n    vertex.x * scale,\n    vertex.y * scale\n  )\n}\n\nexport const offset = (vertex, offsetX, offsetY) => {\n  return new Victor(\n    vertex.x + offsetX,\n    vertex.y + offsetY\n  )\n}\n","import { vertexRoundP } from '../../common/geometry'\n\n// base machine class\nexport default class Machine {\n  polish() {\n    return this.enforceLimits()\n      .cleanVertices()\n      .limitPrecision()\n      .optimizePerimeter()\n      .addEndpoints()\n  }\n\n  // clean the list of vertices and remove duplicate points\n  cleanVertices() {\n    let previous = null\n    let cleanVertices = []\n\n    for (let i=0; i<this.vertices.length; i++) {\n      if (previous) {\n        let start = this.vertices[i]\n        let end = previous\n\n        if (start.distance(end) > 0.001) {\n          cleanVertices.push(this.nearestVertex(this.vertices[i]))\n        }\n      } else {\n        cleanVertices.push(this.nearestVertex(this.vertices[i]))\n      }\n      previous = this.vertices[i]\n    }\n\n    this.vertices = cleanVertices\n    return this\n  }\n\n  // walk the given vertices, clipping as needed along the circle perimeter\n  enforceLimits() {\n    let cleanVertices = []\n    let previous = null\n\n    for (let next=0; next<this.vertices.length; next++) {\n      const vertex = this.vertices[next]\n\n      if (previous) {\n        const line = this.clipLine(previous, vertex)\n\n        for (let pt=0; pt<line.length; pt++) {\n          if (line[pt] !== previous) {\n            cleanVertices.push(line[pt])\n          }\n        }\n      } else {\n        cleanVertices.push(this.nearestVertex(vertex))\n      }\n\n      previous = vertex\n    }\n\n    this.vertices = cleanVertices\n    return this\n  }\n\n  // strip out unnecessary/redundant perimeter moves\n  optimizePerimeter() {\n    let segments = this.stripExtraPerimeterVertices()\n\n    if (this.settings.minimizeMoves) {\n      segments = this.minimizePerimeterMoves(segments)\n    }\n\n    // connect the segments together\n    let connectedVertices = []\n    for (let j=0; j<segments.length; j++) {\n      const current = segments[j]\n\n      if (j > 0) {\n        // connect the two segments along the circle perimeter\n        const prev = segments[j-1]\n        connectedVertices.push(this.tracePerimeter(prev[prev.length-1], current[0]))\n      }\n      connectedVertices.push(current)\n    }\n\n    this.vertices = connectedVertices.flat()\n    return this\n  }\n\n  // remove all non-essential perimeter vertices. returns a list of segments\n  // involving non-perimeter paths\n  stripExtraPerimeterVertices() {\n    let segments = []\n    let segment = []\n    let perimeter = null\n\n    for (let i=0; i<this.vertices.length; i++) {\n      const curr = this.vertices[i]\n      const prev = this.vertices[i-1]\n\n      if (!prev || !this.onPerimeter(curr, prev)) {\n        if (perimeter) { segment.push(perimeter) }\n        segment.push(curr)\n        perimeter = null\n      } else {\n        if (!perimeter) {\n          segments.push(segment)\n          segment = []\n        }\n        perimeter = curr\n      }\n    }\n\n    if (segment.length > 0) {\n      segments.push(segment)\n    }\n\n    return segments\n  }\n\n  // primitive O(n^2) algorithm that orders segments to try to minimize the distance traveled\n  minimizePerimeterMoves(segments) {\n    let walked = []\n    let current = segments.shift()\n    let currentIndex\n    let lastSegment\n\n    if (segments.length > 0) {\n      // reserve the last segment to ensure we don't draw an invalid line connecting\n      // to it\n      lastSegment = segments.pop()\n    }\n\n    walked.push(current)\n    while (segments.length > 0) {\n      // find segment that is the shortest distance from our current one\n      let minDist = Number.MAX_SAFE_INTEGER\n      let prev = current\n\n      /* eslint-disable no-loop-func */\n      segments.forEach((segment, index) => {\n        const dist = Math.min(\n          this.perimeterDistance(current[current.length-1], segment[0]),\n          this.perimeterDistance(current[current.length-1], segment[segment.length-1])\n        )\n\n        if (dist < minDist) {\n          currentIndex = index\n          minDist = dist\n        }\n      })\n      /* eslint-enable no-loop-func */\n\n      // reverse if needed to connect\n      current = segments.splice(currentIndex, 1)[0]\n      if (this.perimeterDistance(prev[prev.length-1], current[0]) > this.perimeterDistance(prev[prev.length-1], current[current.length-1])) {\n        current = current.reverse()\n      }\n      walked.push(current)\n    }\n\n    if (lastSegment) {\n      walked.push(lastSegment)\n    }\n\n    return walked\n  }\n\n  // round each vertex to the nearest .001. This eliminates floating point\n  // math errors and allows us to do accurate equality comparisons.\n  limitPrecision() {\n    this.vertices = this.vertices.map(vertex => vertexRoundP(vertex, 3))\n    return this\n  }\n}\n","import { angle, onSegment } from '../../common/geometry'\nimport Machine from './Machine'\nimport Victor from 'victor'\n\nexport const traceCircle = (startAngle, endAngle, size) => {\n  let resolution = (Math.PI*2.0) / 128.0 // 128 segments per circle. Enough?\n  let deltaAngle = ((endAngle - startAngle) + 2.0 * Math.PI) % (2.0 * Math.PI)\n\n  if (deltaAngle > Math.PI) {\n    deltaAngle -= 2.0 * Math.PI\n  }\n  if (deltaAngle < 0.0) {\n    resolution *= -1.0\n  }\n\n  let tracePoints = []\n  for (let step = 0; step < (deltaAngle/resolution) ; step++) {\n    tracePoints.push(Victor(size * Math.cos(resolution * step + startAngle),\n                            size * Math.sin(resolution * step + startAngle)))\n  }\n  return tracePoints\n}\n\nexport default class PolarMachine extends Machine {\n  constructor(vertices, settings) {\n    super()\n    this.vertices = vertices\n    this.settings = settings\n  }\n\n  addEndpoints() {\n    const maxRadius = this.settings.maxRadius\n\n    if (this.settings.polarStartPoint !== 'none') {\n      if (this.settings.polarStartPoint === 'center') {\n        this.vertices.unshift(new Victor(0.0, 0.0))\n      } else {\n        const first = this.vertices[0]\n        const scale = maxRadius / first.magnitude()\n        const startPoint = Victor.fromObject(first).multiply(new Victor(scale, scale))\n        this.vertices.unshift(new Victor(startPoint.x, startPoint.y))\n      }\n    }\n\n    if (this.settings.polarEndPoint !== 'none') {\n      if (this.settings.polarEndPoint === 'center') {\n        this.vertices.push(new Victor(0.0, 0.0))\n      } else {\n        const last = this.vertices[this.vertices.length-1]\n        const scale = maxRadius / last.magnitude()\n        const endPoint =  Victor.fromObject(last).multiply(new Victor(scale, scale))\n        this.vertices.push(new Victor(endPoint.x, endPoint.y))\n      }\n    }\n\n    return this\n  }\n\n  // Finds the nearest vertex that is in the bounds of the circle. This will change the\n  // shape. i.e. this doesn't care about the line segment, only about the point.\n  nearestVertex(vertex) {\n    const size = this.settings.maxRadius\n\n    if ( vertex.length() > size) {\n      const scale = size / vertex.length()\n      return vertex.multiply(new Victor(scale, scale))\n    } else {\n      return vertex\n    }\n  }\n\n  // Returns the distance along the perimeter between two points.\n  perimeterDistance(v1, v2) {\n    const startAngle = angle(v1)\n    const endAngle = angle(v2)\n    let deltaAngle = Math.abs(endAngle - startAngle)\n\n    if (deltaAngle > Math.PI) {\n      deltaAngle -= 2.0 * Math.PI\n    }\n\n    return Math.abs(deltaAngle) * this.settings.maxRadius\n  }\n\n  // Returns points along the circle from the start to the end, tracing a circle of radius size.\n  tracePerimeter(start, end) {\n    return traceCircle(start.angle(), end.angle(), this.settings.maxRadius)\n  }\n\n  // Returns whether a given path lies on the perimeter of the circle.\n  onPerimeter(v1, v2, delta=1) {\n    let rm = Math.pow(this.settings.maxRadius, 2)\n    let r1 = Math.pow(v1.x, 2) + Math.pow(v1.y, 2)\n    let r2 = Math.pow(v2.x, 2) + Math.pow(v2.y, 2)\n    let d = this.perimeterDistance(v1, v2)\n\n    // Delta is purposefully large to accommodate the squaring of the compared values.\n    // Setting delta too small will result in perimeter moves being miscategorized.\n    // d is used to guard against the case where there is a straight line connecting two\n    // perimeter points directly. In this case, we want to register that as a non-perimeter\n    // move, or it will be incorrectly optimized out of the final vertices. The 3/50\n    // ratio could likely be refined further (relative to maxRadius), but it seems to produce\n    // accurate results at various machine sizes.\n    return Math.abs(r1 - rm) < delta && Math.abs(r2 - rm) < delta && d < 3*this.settings.maxRadius/50\n  }\n\n  // The guts of logic for this limits enforcer. It will take a single line (defined by\n  // start and end) and if the line goes out of bounds, returns the vertices around the\n  // outside edge to follow around without messing up the shape of the vertices.\n  clipLine(start, end) {\n    // Cases:\n    // 1 - Entire line is inside\n    //     return start, end\n    // 2 - Entire line is outside\n    //     trace from start to end\n    // 3 - only start is inside\n    //     find the intersection\n    //     include start\n    //     include intersection\n    //     trace from intersection to closest to end point\n    // 4 - only end is inside\n    //     do reverse of 3\n    // 4 - Neither end is inside, but there is some line segment inside\n    //     find both intersections\n    //     trace from start to first intersction\n    //     trace from second intersection to end\n    const size = this.settings.maxRadius\n    const radStart = start.magnitude()\n    const radEnd = end.magnitude()\n\n    if (radStart <= size && radEnd <= size) {\n      // The whole segment is inside\n      return [start, end]\n    }\n\n    // Check for the odd case of coincident points\n    if (start.distance(end) < 0.00001) {\n       return [this.nearestVertex(start)]\n    }\n\n    let intersections = this.getIntersections(start, end)\n    if (!intersections.intersection) {\n      // The whole line is outside, just trace.\n      return this.tracePerimeter(start, end)\n    }\n\n    // if neither point is on the segment, then it should just be a trace\n    if (!intersections.points[0].on && !intersections.points[1].on) {\n      return this.tracePerimeter(start, end)\n    }\n\n    // If both points are outside, but there's an intersection\n    if (radStart > size + 1.0e-9 && radEnd > size + 1.0e-9) {\n      let point = intersections.points[0].point\n      let otherPoint = intersections.points[1].point\n\n      return [\n        ...this.tracePerimeter(start, point),\n        point,\n        ...this.tracePerimeter(otherPoint, end)\n      ]\n    }\n\n    // If we're here, then one point is still in the circle.\n    if (radStart <= size) {\n      let point1 = (intersections.points[0].on && Math.abs(intersections.points[0].point - start) > 0.0001) ? intersections.points[0].point : intersections.points[1].point\n\n      return [\n        start,\n        ...this.tracePerimeter(point1, end),\n        end\n      ]\n    } else {\n      const point1 = intersections.points[0].on ? intersections.points[0].point : intersections.points[1].point\n\n      return [\n        ...this.tracePerimeter(start, point1),\n        point1,\n        end\n      ]\n    }\n  }\n\n  getIntersections(start, end) {\n    const size = this.settings.maxRadius\n    let direction = end.clone().subtract(start).clone().normalize()\n    let t = direction.x * -1.0 * start.x + direction.y * -1.0 * start.y\n    let e = direction.clone().multiply(Victor(t,t)).add(start)\n    let distanceToLine = e.magnitude()\n\n    if (distanceToLine >= size) {\n      return {\n        intersection: false,\n        points: [],\n      }\n    }\n\n    let dt = Math.sqrt(size*size - distanceToLine*distanceToLine)\n    let point1 = direction.clone().multiply(Victor(t - dt,t - dt)).add(start)\n    let point2 = direction.clone().multiply(Victor(t + dt,t + dt)).add(start)\n\n    return {\n      intersection: true,\n      points: [\n        {\n          point: point1,\n          on: onSegment(start, end, point1),\n        },\n        {\n          point: point2,\n          on: onSegment(start, end, point2),\n        }\n      ]}\n  }\n}\n","import { CursiveFont, SansSerifFont, MonospaceFont } from './Fonts'\nimport Victor from 'victor'\nimport Shape, { shapeOptions } from '../Shape'\nimport { traceCircle } from '../../features/machine/PolarMachine'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    inputText: {\n      title: 'Text',\n      type: 'textarea',\n    },\n    inputFont: {\n      title: 'Font',\n      type: 'dropdown',\n      choices: ['Cursive', 'Sans Serif', 'Monospace'],\n    },\n    rotateDir: {\n      title: 'Rotate',\n      type: 'dropdown',\n      choices: ['Top', 'Center', 'Bottom'],\n    },\n  }\n}\n\nfunction getMaxX(points) {\n  // Measure the width of the line\n  let maxX = 0\n  points.forEach( (point) => {\n    if (point.x > maxX) {\n      maxX = point.x\n    }\n  })\n  return maxX\n}\n\nexport default class InputText extends Shape {\n  constructor() {\n    super('Text')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'inputText',\n        inputText: 'Sandify',\n        inputFont: 'Cursive',\n        rotateDir: 'Center',\n      }\n    }\n  }\n\n  getInitialTransformState() {\n    return {\n      ...super.getInitialTransformState(),\n      ...{\n        repeatEnabled: false,\n        startingSize: 25\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let prevLetter = ''\n    let x = 0.0\n    let lines = []\n    for (let chi = 0; chi < state.shape.inputText.length; chi++) {\n      var nextLetter = state.shape.inputText[chi]\n      if (prevLetter === 'b' || prevLetter === 'v' || prevLetter === 'o' || prevLetter === 'w') {\n        // Save this letter before we possibly add in a '*'\n        prevLetter = nextLetter\n        if (nextLetter.search('[a-z]+') !== -1 && state.shape.inputFont === 'Cursive')\n        {\n          nextLetter = nextLetter + '*'\n        }\n      }\n      else {\n        prevLetter = nextLetter\n      }\n\n      if (nextLetter === '\\n') {\n        // New line\n        lines.push(points)\n        points = []\n        x = 0.0\n        continue\n      }\n\n      var shape = undefined\n      if (state.shape.inputFont === 'Cursive') {\n        shape = CursiveFont(nextLetter)\n      } else if (state.shape.inputFont === 'Sans Serif') {\n        shape = SansSerifFont(nextLetter)\n      } else if (state.shape.inputFont === 'Monospace') {\n        shape = MonospaceFont(nextLetter)\n      } else {\n        // Internal error, but I'm going to just recover\n        shape = CursiveFont(nextLetter)\n      }\n\n      // TODO add in the \"Kern\" here.\n      for (let vi = 0; vi < shape.vertices.length; vi++) {\n        points.push(new Victor(shape.vertices[vi].x + x, shape.vertices[vi].y))\n      }\n      x += shape.vertices[shape.vertices.length-1].x\n    }\n    // Save the last line we were working on.\n    lines.push(points)\n\n    // The height of a row of text, including the space above.\n    const maxY = 2.4\n\n    if (state.shape.rotateDir === 'Center') {\n      // Starting Y offset\n      let y = (lines.length - 1) * maxY / 2.0\n      let textPoints = []\n\n      // Capture some wrap around points, to connect the lines.\n      let connectorPoints = []\n      lines.forEach( (points) => {\n        let maxX = getMaxX(points)\n        let widthOffset = maxX / 2.0\n\n        // Add in the connector points (if we have any)\n        textPoints = [...textPoints, ...connectorPoints]\n        connectorPoints = []\n\n        // offset the line's vertices\n        textPoints = [...textPoints, ...points.map( (point) => {\n          return new Victor(point.x - widthOffset, point.y + y)\n        })]\n\n        // Add in some points way off, so to wrap around for this line.\n        connectorPoints.push(new Victor(1e9, y))\n        connectorPoints.push(new Victor(1e9, -1e9))\n        connectorPoints.push(new Victor(-1e9, -1e9))\n        y -= maxY\n        connectorPoints.push(new Victor(-1e9, y))\n      })\n      return textPoints\n    } else {\n      // This variable controls \"Top\" vs. \"Bottom\"\n      let direction = 1.0\n      if (state.shape.rotateDir === 'Bottom') {\n        direction = -1.0\n        lines.reverse()\n      }\n\n      // These are the vertices we will be using.\n      let textPoints = []\n\n      // Some constants to rotate the letters.\n      //\n      // The \"lines\" object contains lines of words, in vertices.\n      // The vertices are in X, Y, the X starts at 0, the Y goes between -something and +something.\n      // The middle of the word is about at Y=0.\n      //\n      // We want the words to follow around a circle. We want them to stay about the same size, as\n      // if they were plotted in a line. We want them to be centered.\n      //\n      // r is the radius, theta is the angle.\n      // rPerY is the multiplier to get from Y to r.\n      // thetaPerX is the multiplier to get from X to theta.\n      //\n      // The Max is based on how far away from the center we start.\n      //\n      // Offset is because we want to start the row far away from the center.\n      //\n      // thetaCenter is how far off from the theta=0 we start the words.\n      //\n      const maxRPerY = 0.8\n      let rPerY = direction * maxRPerY\n      let thetaCenter = direction * Math.PI / 2.0\n      const maxROffset = maxY * 2.0\n      let rOffset = maxROffset\n      const rOffsetPerLine = rOffset / lines.length\n      let thetaPerX = -rPerY / rOffset\n\n      // This captures the previous angle, so we can track around for the next line.\n      let lastTheta\n\n      lines.forEach( (points) => {\n\n        let maxX = getMaxX(points)\n        // This widthOffset is in X.\n        let widthOffset = maxX / 2.0\n\n        // Scale the size of the words to fit within one circle.\n        if (Math.PI * 2.0 < Math.abs(thetaPerX * maxX)) {\n          // We are going to roll all the way around\n          thetaPerX = direction * -Math.PI * 2.0 / maxX\n          rPerY = -thetaPerX * rOffset\n        }\n\n        // Add in the connector points (if we have any)\n        if (lastTheta) {\n          let endTheta = thetaCenter + thetaPerX * -widthOffset\n\n          // Get the Y value of the first point in the next (this) line.\n          let r = rOffset + rPerY * 0.0\n          if (points.length > 0) {\n            r = rOffset + rPerY * points[0].y\n          }\n\n          textPoints = [...textPoints, ...traceCircle(lastTheta, endTheta, r)]\n        }\n\n        // Transform the points and add them to textPoints.\n        textPoints = [...textPoints, ...points.map( (point) => {\n          const r = rOffset + rPerY * point.y\n          lastTheta = thetaCenter + thetaPerX * (point.x - widthOffset)\n          return new Victor(r * Math.cos(lastTheta), r * Math.sin(lastTheta))\n        })]\n\n        // Set up for the next line.\n        rOffset -= rOffsetPerLine\n        rPerY = direction * Math.sqrt(maxRPerY * rOffset / maxROffset)\n        thetaPerX = -rPerY / rOffset\n      })\n      return textPoints\n    }\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport { vertexRoundP } from './geometry'\n\nexport const onSubtypeChange = (subtype, changes, attrs) => {\n  // if we switch back with too many iterations, the code\n  // will crash from recursion, so we'll set a ceiling where needed\n  if (subtype) {\n    let max = subtype.maxIterations\n    let min = subtype.minIterations\n    let iterations = attrs.iterations || 1\n\n    if (max) {\n      iterations = Math.min(iterations, max)\n    }\n\n    if (min) {\n      iterations = Math.max(iterations, min)\n    }\n\n    changes.iterations = iterations\n  }\n\n  return changes\n}\n\nexport const onMinIterations = (subtype, state) => {\n  return (subtype && subtype.minIterations) || 1\n}\n\nexport const onMaxIterations = (subtype, state) => {\n  return (subtype && subtype.maxIterations) || 7\n}\n\n// Implements a Lindenmayer system (L-system). See https://en.wikipedia.org/wiki/L-system.\n// Adapted from http://bl.ocks.org/nitaku/ce638f8bd5e70cb809e1\nexport const lsystem = (config) => {\n  let input = config.axiom\n  let output\n\n  for (let i=0; i<config.iterations; i++) {\n    output = ''\n\n    for (let j=0; j<input.length; j++) {\n      let char = input[j]\n\n      if (config.rules[char] !== undefined) {\n        output += config.rules[char]\n      } else {\n        output += char\n      }\n    }\n    input = output\n  }\n  return output\n}\n\nconst lsystemDraw = (vertex, angle, config) => {\n  return vertexRoundP(vertex.clone().add({x: -config.side * Math.cos(angle), y: -config.side * Math.sin(angle)}), 2)\n}\n\nexport const lsystemPath = (instructions, config) => {\n  let vertex = new Victor(0, 0)\n  let currVertices = [vertex]\n  let angle = -Math.PI/2\n\n  if (config.startingAngle) {\n    angle = typeof config.startingAngle === 'function' ?\n      config.startingAngle(config.iterations) :\n      config.startingAngle\n  }\n\n  // This will store the previous return paths we are not working on.\n  let returnPaths = []\n  for (let i=0; i<instructions.length; i++) {\n    let char = instructions[i]\n\n    if (char === '+') {\n      angle += config.angle\n      if (returnPaths.length) {\n        returnPaths.slice(-1)[0].push('-')\n      }\n    } else if (char === '-') {\n      angle -= config.angle\n      if (returnPaths.length) {\n        returnPaths.slice(-1)[0].push('+')\n      }\n    } else if (config.draw.includes(char)) {\n      vertex = lsystemDraw(vertex, angle, config)\n      currVertices.push(vertex)\n      if (returnPaths.length) {\n        returnPaths.slice(-1)[0].push('B')\n      }\n    } else if (char === '[') {\n      // open a branch\n      returnPaths.push([])\n\n    } else if (char === ']') {\n      // Return to the beginning of the branch\n      let returnPath = returnPaths.pop().reverse()\n\n      for (let j=0; j<returnPath.length; j++) {\n        let revChar = returnPath[j]\n\n        if (revChar === '+') {\n          angle += config.angle\n        } else if (revChar === '-') {\n          angle -= config.angle\n        } else if (revChar === 'B') {\n          // Reverse Draw\n          vertex = lsystemDraw(vertex, angle + Math.PI, config)\n          currVertices.push(vertex)\n        }\n      }\n    }\n  }\n\n  return currVertices\n}\n","// L-system instructions for space filling curves\nexport const subtypes = {\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  '32-segment': {\n    axiom: 'F+F+F+F',\n    draw: ['F'],\n    rules:  {\n      F: '-F+F-F-F+F+FF-F+F+FF+F-F-FF+FF-FF+F+F-FF-F-F+FF-F-F+F+F-F+'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 2\n  },\n  // http://www.kevs3d.co.uk/dev/lsystems/\n  'Cog Triangle': {\n    axiom: 'W----W----W',\n    draw: ['F'],\n    rules:  {\n      W: '+++X--F--ZFX+',\n      X: '---W++F++YFW-',\n      Y: '+ZFX--F--Z+++',\n      Z: '-YFW++F++Y---'\n    },\n    angle: Math.PI/6,\n    minIterations: 1,\n    maxIterations: 8\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Fractal Tree': {\n    axiom: 'F',\n    draw: ['F'],\n    rules:  {\n      F: 'F[+FF][-FF]F[-F][+F]F',\n    },\n    angle: Math.PI/5,\n    maxIterations: 5\n  },\n  // https://www.vexlio.com/blog/drawing-simple-organics-with-l-systems/\n  'Fractal Tree 2': {\n    axiom: 'F',\n    draw: ['F'],\n    rules:  {\n      F: 'F[-F][+F]',\n    },\n    angle: 10*Math.PI/72,\n    maxIterations: 9\n  },\n  // https://www.vexlio.com/blog/drawing-simple-organics-with-l-systems/\n  'Fractal Tree 3': {\n    axiom: 'X',\n    draw: ['F'],\n    rules:  {\n      F: 'FF',\n      X: 'F+[-F-XF-X][+FF][--XF[+X]][++F-X]'\n    },\n    angle: Math.PI/8,\n    maxIterations: 6\n  },\n  // https://www.vexlio.com/blog/drawing-simple-organics-with-l-systems/\n  'Fractal Tree 4': {\n    axiom: 'X',\n    draw: ['F'],\n    rules:  {\n      F: 'FX[FX[+XF]]',\n      X: 'FF[+XZ++X-F[+ZX]][-X++F-X]',\n      Z: '[+F-X-F][++ZX]'\n    },\n    angle: Math.PI/8,\n    maxIterations: 5\n  },\n  // http://algorithmicbotany.org/papers/abop/abop-ch1.pdf\n  'Fractal Tree 5': {\n    axiom: 'X',\n    draw: ['F'],\n    rules:  {\n      X: 'F[+X]F[-X]+X',\n      F: 'FF'\n    },\n    angle: Math.PI/9,\n    maxIterations: 8\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Gosper (flowsnake)': {\n    axiom: 'A',\n    draw: ['A', 'B'],\n    rules:  {\n      A: 'A-B--B+A++AA+B-',\n      B: '+A-BB--B-A++A+B'\n    },\n    angle: Math.PI / 3,\n    maxIterations: 5\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Ice': {\n    axiom: 'F+F+F+F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF+F++F+F'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 6\n  },\n  // https://fronkonstin.com/2017/06/26/a-shiny-app-to-draw-curves-based-on-l-systems/\n  'Koch Cube 1': {\n    axiom: 'F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF-F-F-F-FF',\n    },\n    maxIterations: 5\n  },\n  // http://algorithmicbotany.org/papers/abop/abop-ch1.pdf\n  'Koch Cube 2': {\n    axiom: 'F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF-F+F-F-FF',\n    },\n    maxIterations: 5\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Koch Curve': {\n    axiom: 'F',\n    draw: ['F'],\n    rules:  {\n      F: 'F+F--F+F'\n    },\n    angle: 4*Math.PI/9,\n    startingAngle: Math.PI,\n    maxIterations: 7\n  },\n  // https://fronkonstin.com/2017/06/26/a-shiny-app-to-draw-curves-based-on-l-systems/\n  'Koch Flower': {\n    axiom: 'F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF-F-F-F-F-F+F',\n    },\n    maxIterations: 4\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Koch Island': {\n    axiom: 'F+F+F+F',\n    draw: ['F'],\n    rules:  {\n      F: 'F+F-F-FF+F+F-F'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 4\n  },\n  'Koch Snowflake': {\n    axiom: 'F--F--F--',\n    draw: ['F'],\n    rules:  {\n      F: 'F+F--F+F'\n    },\n    angle: Math.PI / 3,\n    startingAngle: -Math.PI / 3,\n    maxIterations: 5\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'McWorter\\'s Pentadendrite': {\n    axiom: 'F-F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'F-F-F++F+F-F',\n    },\n    angle: 2*Math.PI/5,\n    maxIterations: 5\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Penrose Tile': {\n     axiom: '[7]++[7]++[7]++[7]++[7]',\n     draw: ['6', '7', '8', '9'],\n    rules: {\n      6: '8++9----7[-8----6]++',\n      7: '+8--9[---6--7]+',\n      8: '-6++7[+++8++9]-',\n      9: '--8++++6[+9++++7]--7'\n    },\n    angle: Math.PI/5,\n    maxIterations: 6\n  },\n  'Plusses': {\n    axiom: 'XYXYXYX+XYXYXYX+XYXYXYX+XYXYXYX',\n    draw: ['F'],\n    rules:  {\n      X: 'FX+FX+FXFY-FY-',\n      Y: '+FX+FXFY-FY-FY'\n    },\n    maxIterations: 4\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Red Dragon': {\n    axiom: 'FA',\n    draw: ['F'],\n    rules:  {\n      A: 'A+BF+',\n      B: '-FA-B'\n    },\n    minIterations: 9,\n    maxIterations: 15,\n    startingAngle: Math.PI\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Sierpinski Triangle (arrowhead)': {\n    axiom: 'X',\n    draw: ['X', 'Y'],\n    rules:  {\n      X: 'Y+X+Y',\n      Y: 'X-Y-X'\n    },\n    angle: Math.PI / 3,\n    startingAngle: (i) => {\n      if (i % 2 === 0) {\n        return 0\n      } else {\n        return -Math.PI/3\n      }\n    },\n    maxIterations: 8\n  },\n}\n","import Shape, { shapeOptions } from '../Shape'\nimport {\n  lsystem,\n  lsystemPath,\n  onSubtypeChange,\n  onMinIterations,\n  onMaxIterations\n} from '../../common/lindenmayer'\nimport { subtypes } from './subtypes'\nimport { resizeVertices } from '../../common/geometry'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    subtype: {\n      title: 'Type',\n      type: 'dropdown',\n      choices: Object.keys(subtypes),\n      onChange: (changes, attrs) => {\n        return onSubtypeChange(subtypes[changes.subtype], changes, attrs)\n      }\n    },\n    iterations: {\n      title: 'Iterations',\n      min: (state) => {\n        return onMinIterations(subtypes[state.subtype], state)\n      },\n      max: (state) => {\n        return onMaxIterations(subtypes[state.subtype], state)\n      }\n    },\n  }\n}\n\nexport default class LSystem extends Shape {\n  constructor() {\n    super('Fractal Line Writer')\n    this.link = 'https://en.wikipedia.org/wiki/L-system'\n    this.linkText = 'this Wikipedia article on L-systems'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'lsystem',\n        iterations: 3,\n        subtype: 'McWorter\\'s Pentadendrite',\n      }\n    }\n  }\n\n  getInitialTransformState() {\n    return {\n      ...super.getInitialTransformState(),\n      ...{\n        repeatEnabled: false,\n        startingSize: 23,\n      }\n    }\n  }\n\n  getVertices(state) {\n    const shape = state.shape\n    const iterations = shape.iterations || 1\n    const size = 8\n\n    // generate our vertices using a set of l-system rules\n    let config = subtypes[shape.subtype]\n    config.iterations = iterations\n    config.side = 5\n\n    if (config.angle === undefined) { config.angle = Math.PI/2 }\n\n    let curve = lsystemPath(lsystem(config), config)\n\n    return resizeVertices(curve, size, size)\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    polygonSides: {\n      title: 'Number of sides',\n      min: 3\n    },\n    roundCorners: {\n      title: 'Round corners',\n      type: 'checkbox',\n    },\n    roundFraction: {\n      title: 'Round fraction',\n      min: 0.05,\n      max: 0.5,\n      step: 0.025,\n      isVisible: (state) => { return state.roundCorners }\n    },\n  }\n}\n\nexport default class Polygon extends Shape {\n  constructor() {\n    super('Polygon')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'polygon',\n        polygonSides: 4,\n        roundCorners: false,\n        roundFraction: 0.25,\n      }\n    }\n  }\n\n  // Returns a list of points from (start, end] along the line.\n  getLineVertices(startPoint, endPoint, numberOfPoints) {\n    const resolution = 1.0/numberOfPoints\n    let points = []\n    for (let d=resolution; d<=1.0; d+=resolution) {\n      points.push(new Victor(startPoint.x + (endPoint.x - startPoint.x)*d,\n                             startPoint.y + (endPoint.y - startPoint.y)*d))\n    }\n    return points\n  }\n\n  getVertices(state) {\n    // beta is the fraction to have rounded.\n    const beta = state.shape.roundFraction\n    // alpha is the fration to have straight.\n    const alpha = (1.0-beta)\n    let points = []\n    for (let i=0; i<=state.shape.polygonSides; i++) {\n      const angle = Math.PI * 2.0 / state.shape.polygonSides * (0.5 + i)\n      if (state.shape.roundCorners && beta !== 0.0) {\n        // angles that make up the arc.\n        const angleStart = Math.PI * 2.0 / state.shape.polygonSides * i\n        const angleEnd = Math.PI * 2.0 / state.shape.polygonSides * (i + 1)\n        const angleResolution = 0.10\n        if (points.length > 0) {\n          // Start with a line. We use a bunch of points for this, so they get stretch about evenly\n          // as the curves do.\n          const numberOfLinePoints = (angleEnd - angleStart)/angleResolution/beta\n          points = points.concat(this.getLineVertices(points[points.length-1],\n                                                      new Victor(alpha * Math.cos(angle) + beta * Math.cos(angleStart),\n                                                                 alpha * Math.sin(angle) + beta * Math.sin(angleStart)),\n                                                      numberOfLinePoints))\n        }\n        if (i !== state.shape.polygonSides) {\n          // Create the arc.\n          for (let arcAngle=angleStart + angleResolution; arcAngle<=angleEnd; arcAngle += angleResolution) {\n            points.push(new Victor(alpha * Math.cos(angle) + beta * Math.cos(arcAngle), alpha * Math.sin(angle) + beta * Math.sin(arcAngle)))\n          }\n        }\n      } else {\n        // Not rounded corners.\n        points.push(new Victor(Math.cos(angle), Math.sin(angle)))\n      }\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    reuleauxSides: {\n      title: 'Number of sides',\n      step: 1,\n      min: 2\n    },\n  }\n}\n\nexport default class Reuleaux extends Shape {\n  constructor() {\n    super('Reuleaux')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'reuleaux',\n        reuleauxSides: 3\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    // Construct an equalateral triangle\n    let corners = []\n    // Initial location at PI/2\n    let angle = Math.PI/2.0\n    // How much of the circle in one side?\n    let coverageAngle = Math.PI/state.shape.reuleauxSides\n    let halfCoverageAngle = 0.5 * coverageAngle\n    for (let c=0; c<state.shape.reuleauxSides; c++) {\n      let startAngle = angle + Math.PI - halfCoverageAngle\n      corners.push( [new Victor(Math.cos(angle), Math.sin(angle)), startAngle] )\n      angle += 2.0 * Math.PI / state.shape.reuleauxSides\n    }\n    let length = 0.5 / Math.cos(Math.PI/2.0/state.shape.reuleauxSides)\n    const scale = 1.7\n    for (let corn=0; corn < corners.length; corn++) {\n      for (let i=0; i<128; i++) {\n        let angle = coverageAngle  * (i / 128.0) + corners[corn][1]\n        points.push(new Victor(scale * (length * corners[corn][0].x + Math.cos(angle)),\n                           scale * (length * corners[corn][0].y + Math.sin(angle))))\n      }\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    roseN: {\n      title: 'Numerator',\n      step: 1,\n      min: 1\n    },\n    roseD: {\n      title: 'Denominator',\n      step: 1,\n      min: 1\n    },\n  }\n}\n\nexport default class Rose extends Shape {\n  constructor() {\n    super('Rose')\n    this.link = 'http://mathworld.wolfram.com/Rose.html'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'rose',\n        roseN: 3,\n        roseD: 2\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = 2\n    let n = parseInt(state.shape.roseN)\n    let d = parseInt(state.shape.roseD)\n    let p = (n * d % 2 === 0) ? 2 : 1\n    let thetaClose = d * p * 32 * n\n    let resolution = 64 * n\n\n    for (let i=0; i<thetaClose+1; i++) {\n      let theta = Math.PI * 2.0 / (resolution) * i\n      let r = 0.5 * a * Math.sin((n / d) * theta)\n      points.push(new Victor(r * Math.cos(theta), r * Math.sin(theta)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","// L-system instructions for space filling curves\nexport const subtypes = {\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Gosper (flowsnake)': {\n    axiom: 'A',\n    draw: ['A', 'B'],\n    rules:  {\n      A: 'A-B--B+A++AA+B-',\n      B: '+A-BB--B-A++A+B'\n    },\n    angle: Math.PI / 3,\n    iterationsGrow: (config) => {\n      return config.iterations\n    },\n    maxIterations: 6\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Hilbert': {\n    axiom: 'L',\n    draw: 'F',\n    rules: {\n      L: '+RF-LFL-FR+',\n      R: '-LF+RFR+FL-'\n    },\n    startingAngle: Math.PI,\n    minIterations: 2\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Hilbert 2': {\n    axiom: 'X',\n    draw: 'F',\n    rules: {\n      X: 'XFYFX+F+YFXFY-F-XFYFX',\n      Y: 'YFXFY-F-XFYFX+F+YFXFY'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 4\n  },\n  // https://en.wikipedia.org/wiki/Sierpi%C5%84ski_curve\n  'Sierpinski': {\n    axiom: 'F--XF--F--XF',\n    draw: ['F', 'G'],\n    rules: {\n      X: 'XF+G+XF--F--XF+G+X'\n    },\n    startingAngle: Math.PI/4,\n    angle: Math.PI/4,\n    maxIterations: 6\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Penrose Tile': {\n     axiom: '[7]++[7]++[7]++[7]++[7]',\n     draw: ['6', '7', '8', '9'],\n    rules: {\n      6: '8++9----7[-8----6]++',\n      7: '+8--9[---6--7]+',\n      8: '-6++7[+++8++9]-',\n      9: '--8++++6[+9++++7]--7'\n    },\n    angle: Math.PI/5,\n    maxIterations: 6,\n    iterationsGrow: (config) => {\n      return 1 + Math.max(1, 3/config.iterations)\n    }\n  },\n  // https://en.wikipedia.org/wiki/Sierpi%C5%84ski_curve\n  'Sierpinski Square': {\n    axiom: 'F+XF+F+XF',\n    draw: 'F',\n    rules: {\n      X: 'XF-F+F-XF+F+XF-F+F-X'\n    },\n    startingAngle: Math.PI/4,\n    maxIterations: 6\n  },\n}\n","import Shape, { shapeOptions } from '../Shape'\nimport {\n  lsystem,\n  lsystemPath,\n  onSubtypeChange,\n  onMinIterations,\n  onMaxIterations\n} from '../../common/lindenmayer'\nimport { resizeVertices } from '../../common/geometry'\nimport { subtypes } from './subtypes'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    subtype: {\n      title: 'Type',\n      type: 'dropdown',\n      choices: Object.keys(subtypes),\n      onChange: (changes, attrs) => {\n        return onSubtypeChange(subtypes[changes.subtype], changes, attrs)\n      }\n    },\n    iterations: {\n      title: 'Iterations',\n      min: (state) => {\n        return onMinIterations(subtypes[state.subtype], state)\n      },\n      max: (state) => {\n        return onMaxIterations(subtypes[state.subtype], state)\n      }\n    }\n  }\n}\n\nexport default class SpaceFiller extends Shape {\n  constructor() {\n    super('Space Filler')\n    this.linkText = 'Fractal charm: space filling curves'\n    this.link = 'https://www.youtube.com/watch?v=RU0wScIj36o'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'space_filler',\n        selectGroup: 'Erasers',\n        canTransform: false,\n        iterations: 6,\n        subtype: 'Hilbert'\n      }\n    }\n  }\n\n  getInitialTransformState() {\n    return {\n      ...super.getInitialTransformState(),\n      ...{\n        repeatEnabled: false,\n        startingSize: 1,\n        canChangeSize: false,\n      }\n    }\n  }\n\n  getVertices(state) {\n    const machine = state.machine\n    const iterations = state.shape.iterations || 1\n\n    let sizeX, sizeY\n    if (machine.rectangular) {\n      sizeX = machine.maxX - machine.minX\n      sizeY = machine.maxY - machine.minY\n    } else {\n      sizeX = sizeY = machine.maxRadius * 2.0\n    }\n\n    // generate our vertices using a set of l-system rules\n    let config = subtypes[state.shape.subtype]\n    config.iterations = iterations\n\n    if (config.side === undefined) { config.side = 5 }\n    if (config.angle === undefined) { config.angle = Math.PI/2 }\n\n    let curve = lsystemPath(lsystem(config), config)\n    let scale = 1\n\n    if (config.iterationsGrow) {\n      scale = (typeof config.iterationsGrow === 'function') ? config.iterationsGrow(config) : config.iterationsGrow\n    }\n\n    return resizeVertices(curve, sizeX*scale, sizeY*scale)\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    points: {\n      title: 'Number of points',\n      min: 2\n    },\n    starRatio: {\n      title: 'Size of points',\n      step: 0.05,\n      min: 0.05\n    },\n  }\n}\n\nexport default class Star extends Shape {\n  constructor() {\n    super('Star')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'star',\n        points: 5,\n        starRatio: 0.5\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<=state.shape.points * 2; i++) {\n      let angle = Math.PI * 2.0 / (2.0 * state.shape.points) * i\n      let star_scale = 1.0\n      if (i % 2 === 0) {\n        star_scale *= state.shape.starRatio\n      }\n      points.push(new Victor(star_scale * Math.cos(angle), star_scale * Math.sin(angle)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export class PriorityQueue {\n  constructor() {\n    this.collection = []\n  }\n\n  enqueue(element) {\n    if (this.isEmpty()) {\n      this.collection.push(element)\n    } else {\n      let added = false\n      for (let i = 1; i <= this.collection.length; i++) {\n        if (element[1] < this.collection[i-1][1]){\n          this.collection.splice(i-1, 0, element)\n          added = true\n          break\n        }\n      }\n\n      if (!added) {\n        this.collection.push(element)\n      }\n    }\n  }\n\n  dequeue() {\n    let value = this.collection.shift()\n    return value\n  }\n\n  isEmpty() {\n    return (this.collection.length === 0)\n  }\n}\n","import { PriorityQueue } from './PriorityQueue.js'\nimport Victor from 'victor'\n\nexport const mix = (v1, v2, s) => {\n  let u = [v1.x, v1.y]\n  let v = [v2.x, v2.y]\n  var result = []\n\n  for (var i = 0; i < u.length; ++i ) {\n    result.push((1.0 - s) * u[i] + s * v[i])\n  }\n\n  return new Victor(result[0], result[1])\n}\n\n// note: requires string-based nodes to work properly\nexport default class Graph {\n  constructor() {\n    this.nodeMap = {}\n    this.nodeKeys = new Set()\n    this.adjacencyList = {}\n    this.edgeMap = {}\n    this.edgeKeys = new Set()\n    this.clearCachedPaths()\n  }\n\n  addNode(node) {\n    let key = node.toString()\n\n    if (!this.nodeKeys.has(key)) {\n      this.nodeKeys.add(key)\n      this.nodeMap[key] = node\n      this.adjacencyList[key] = []\n      this.clearCachedPaths()\n    }\n  }\n\n  addEdge(node1, node2, weight=1) {\n    let node1Key = node1.toString()\n    let node2Key = node2.toString()\n    let edgeKey = [node1Key, node2Key].sort().toString()\n\n    if (!this.edgeKeys.has(edgeKey)) {\n      this.adjacencyList[node1Key].push({node: node2, weight: weight})\n      this.adjacencyList[node2Key].push({node: node1, weight: weight})\n      this.edgeKeys.add(edgeKey)\n      this.edgeMap[edgeKey] = [node1.toString(), node2.toString()]\n      this.clearCachedPaths()\n    }\n  }\n\n  hasEdge(ekey1, ekey2) {\n    let edgeKey = [ekey1, ekey2].sort().toString()\n    return this.edgeMap[edgeKey]\n  }\n\n  dijkstraShortestPath(startNode, endNode) {\n    let shortest = this.getCachedShortestPath(startNode, endNode)\n\n    if (shortest === undefined) {\n      let times = {}\n      let backtrace = {}\n      let pq = new PriorityQueue()\n      let nodes = this.nodeKeys\n\n      times[startNode] = 0\n\n      nodes.forEach(node => {\n        if (node !== startNode) {\n          times[node] = Infinity\n        }\n      })\n\n      pq.enqueue([startNode, 0])\n\n      while (!pq.isEmpty()) {\n        let shortestStep = pq.dequeue()\n        let currentNode = shortestStep[0]\n        this.adjacencyList[currentNode.toString()].forEach(neighbor => {\n          let time = times[currentNode] + neighbor.weight\n\n          if (time < times[neighbor.node]) {\n            times[neighbor.node] = time\n            backtrace[neighbor.node] = currentNode\n            pq.enqueue([neighbor.node, time])\n          }\n        })\n      }\n\n      let path = [endNode.toString()]\n      let lastStep = endNode\n\n      while(lastStep !== startNode) {\n        path.unshift(backtrace[lastStep].toString())\n        lastStep = backtrace[lastStep]\n      }\n\n      shortest = path.map(node => this.nodeMap[node])\n      this.cacheShortestPath(startNode, endNode, shortest)\n    }\n\n    return shortest\n  }\n\n  clearCachedPaths() {\n    this.cachedPaths = {}\n  }\n\n  cacheShortestPath(node1, node2, path) {\n    this.cachedPaths[this.getPairedKey(node1, node2)] = [...path]\n    this.cachedPaths[this.getPairedKey(node2, node1)] = [...path].reverse()\n  }\n\n  getCachedShortestPath(node1, node2) {\n    let shortest = this.cachedPaths[this.getPairedKey(node1, node2)]\n    return shortest === undefined ? undefined : [...shortest]\n  }\n\n  getPairedKey(node1, node2) {\n    return node1.toString() + '-' + node2.toString()\n  }\n}\n","import Victor from 'victor'\nimport Graph, { mix } from '../../common/Graph'\nimport eulerianTrail from '../../common/eulerianTrail'\nimport { difference } from '../../common/util'\nimport Shape, { shapeOptions } from '../Shape'\n\nconst vecTriangle = [\n  new Victor(-0.85, -0.4907477295),\n  new Victor(0.85, -0.4907477295),\n  new Victor(0.0,  0.9814954573),\n]\n\nconst vecSquare = [\n  new Victor(-0.7, -0.7),\n  new Victor( 0.7,  0.7),\n  new Victor(-0.7,  0.7),\n\n  new Victor(-0.7, -0.7),\n  new Victor(0.7,  0.7),\n  new Victor(0.7, -0.7)\n]\n\nfunction getEdges(edges, a, b, c, count, settings) {\n  let da, db, dc\n\n  if (count === 0) {\n    if (settings.rotate > 0) {\n      da = Math.sqrt(Math.pow(a.x, 2) + Math.pow(a.y, 2)) * (settings.rotate * Math.PI / 180.0)\n      db = Math.sqrt(Math.pow(b.x, 2) + Math.pow(b.y, 2)) * (settings.rotate * Math.PI / 180.0)\n      dc = Math.sqrt(Math.pow(c.x, 2) + Math.pow(c.y, 2)) * (settings.rotate * Math.PI / 180.0)\n    } else {\n      da = (settings.rotate * Math.PI / 180.0)\n      db = (settings.rotate * Math.PI / 180.0)\n      dc = (settings.rotate * Math.PI / 180.0)\n    }\n\n    let ap = new Victor(\n      (a.x * Math.cos(da)) - (a.y * Math.sin(da)),\n      (a.x * Math.sin(da)) + (a.y * Math.cos(da)))\n    let bp = new Victor(\n      (b.x * Math.cos(db)) - (b.y * Math.sin(db)),\n      (b.x * Math.sin(db)) + (b.y * Math.cos(db)))\n    let cp = new Victor(\n      (c.x * Math.cos(dc)) - (c.y * Math.sin(dc)),\n      (c.x * Math.sin(dc)) + (c.y * Math.cos(dc)))\n\n    edges.push([ap, bp], [ap, cp], [bp, cp])\n    return\n  }\n\n  let ab = mix(a, b, 0.5)\n  let ac = mix(a, c, 0.5)\n  let bc = mix(b, c, 0.5)\n\n  getEdges(edges, ab, ac, bc, count - 1, settings)\n  getEdges(edges, c, ac, bc, count - 1, settings)\n  getEdges(edges, b, bc, ab, count - 1, settings)\n  getEdges(edges, a, ab, ac, count - 1, settings)\n}\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    tessellationTwistNumSides: {\n      title: \"Number of sides\",\n      min: 3\n    },\n    tessellationTwistIterations: {\n      title: \"Iterations\",\n      min: 0,\n      max: 4\n    },\n    tessellationTwistRotate: {\n      title: \"Rotate and twist\",\n      step: 5,\n      min: 0\n    }\n  }\n}\n\n// Adapted from https://codepen.io/rafaelpascoalrodrigues/pen/KpBJve.\nexport default class TessellationTwist extends Shape {\n  constructor() {\n    super('Tessellation Twist')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'tessellation_twist',\n        tessellationTwistNumSides: 5,\n        tessellationTwistIterations: 2,\n        tessellationTwistRotate: 0,\n      }\n    }\n  }\n\n  getInitialTransformState() {\n    return {\n      ...super.getInitialTransformState(),\n      ...{\n        startingSize: 110,\n        repeatEnabled: false,\n      }\n    }\n  }\n\n  getShapeVertices(numSides) {\n    let vertices = []\n    for (let i=0; i<=numSides; i++) {\n      let angle = Math.PI * 2.0 / numSides * (0.5 + i)\n      let angle2 = Math.PI * 2.0 / numSides * (0.5 + ((i + 1) % numSides))\n\n      vertices.push(new Victor(0, 0))\n      vertices.push(new Victor(Math.cos(angle), Math.sin(angle)))\n      vertices.push(new Victor(Math.cos(angle2), Math.sin(angle2)))\n    }\n    return vertices\n  }\n\n  getVertices(state) {\n    let vertices\n    let edges = []\n    const tessellation = parseInt(state.shape.tessellationTwistIterations)\n    const sides = parseInt(state.shape.tessellationTwistNumSides)\n\n    switch (sides) {\n      case 3:\n        vertices = vecTriangle.slice(0)\n        break\n      case 4:\n        vertices = vecSquare.slice(0)\n        break\n      default:\n        vertices = this.getShapeVertices(sides)\n        break\n    }\n\n    // build our tessellations\n    for (var i = 0; i < vertices.length; i += 3) {\n      getEdges(edges, vertices[i + 0], vertices[i + 1], vertices[i + 2],\n        tessellation, { rotate: parseInt(state.shape.tessellationTwistRotate) })\n    }\n\n    // build edge and adjacency maps; this serves to ensure unique\n    // vertices and edges, and give us a string-based key to access and run\n    // algorithms on them.\n    let graph = new Graph()\n\n    edges.forEach((edge) => {\n      let v1 = edge[0]\n      let v2 = edge[1]\n\n      graph.addNode(v1)\n      graph.addNode(v2)\n      graph.addEdge(v1, v2)\n    })\n\n    // build a graph\n    // find the eulerian trail that efficiently visits all of the vertices\n    let trail = eulerianTrail({edges: Object.values(graph.edgeMap)})\n\n    let prevKey\n    let walkedVertices = []\n    var walkedEdges = []\n\n    // if there are nodes with an odd number of edges (as in pentagon and hexagon)\n    // there is not a eulerian trail that visits all of the nodes. So we need to identify\n    // the missing nodes and create edges for them. There is a complex algorithm\n    // (chinese postman) that can be used to do this for the general case, but\n    // it's computationally expensive and overkill for our situation.\n    for (i = 0; i < trail.length-1; i++) {\n      let edge = [trail[i], trail[i+1]].sort().toString()\n      walkedEdges.push(edge)\n    }\n    walkedEdges = new Set(walkedEdges)\n\n    let missingEdges = Array.from(difference(walkedEdges, graph.edgeKeys)).reduce((hash, d) => {\n      d = d.split(',')\n      hash[d[0] + ',' + d[1]] = d[2] + ',' + d[3]\n      return hash\n    }, {})\n\n    trail.forEach((key, index) => {\n      let vertex = graph.nodeMap[key]\n\n      if (prevKey) {\n        if (!graph.hasEdge(key, prevKey)) {\n          // non-eulerian move, so we'll walk the shortest valid path between them\n          let path = graph.dijkstraShortestPath(prevKey, key)\n          path.shift()\n          path.forEach(node => walkedVertices.push(node))\n          walkedVertices.push(vertex)\n        } else {\n          walkedVertices.push(vertex)\n        }\n      } else {\n        walkedVertices.push(vertex)\n      }\n\n      // add any missing edges\n      if (missingEdges[key]) {\n        let missingVertex = graph.nodeMap[missingEdges[key]]\n        let edgeKey = [key, missingEdges[key]].sort().toString()\n\n        if (graph.edgeMap[edgeKey]) {\n          // only add valid edges\n          walkedVertices.push(missingVertex)\n          walkedVertices.push(vertex)\n        }\n        delete missingEdges[key]\n      }\n\n      prevKey = key\n    })\n\n    return walkedVertices\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","// adapted from https://github.com/mauriciopoppe/eulerian-trail/blob/master/lib/eulerian-trail.js\n// commented out thrown exceptions to return non-optimal eulerian paths\nexport default function(options) {\n  var g = []\n  var i\n  var edgePointer = []\n  var edgeUsed = []\n  var trail = []\n\n  var id = {}\n  var idReverse = []\n  var idCount = 0\n\n  function getId(x) {\n    if (!id.hasOwnProperty(x)) {\n      edgePointer[idCount] = 0\n      idReverse[idCount] = x\n      id[x] = idCount++\n    }\n    return id[x]\n  }\n\n  function dfs(v) {\n    for (; edgePointer[v] < g[v].length; edgePointer[v] += 1) {\n      var edge = g[v][edgePointer[v]]\n      var to = edge[0]\n      var id = edge[1]\n      if (!edgeUsed[id]) {\n        edgeUsed[id] = true\n        dfs(to)\n      }\n    }\n    trail.push(v)\n  }\n\n  function pushEdge(u, v, id) {\n    g[u] = g[u] || []\n    g[v] = g[v] || []\n    g[u].push([v, id])\n  }\n\n  var deg = []\n  var inDeg = [], outDeg = []\n\n  for (i = 0; i < options.edges.length; i += 1) {\n    var edge = options.edges[i]\n    var u = getId(edge[0])\n    var v = getId(edge[1])\n\n    pushEdge(u, v, i)\n    if (!options.directed) {\n      pushEdge(v, u, i)\n    }\n\n    if (options.directed) {\n      outDeg[u] = outDeg[u] || 0\n      inDeg[u] = inDeg[u] || 0\n      outDeg[v] = outDeg[v] || 0\n      inDeg[v] = inDeg[v] || 0\n      outDeg[u] += 1\n      inDeg[v] += 1\n    } else {\n      deg[u] = deg[u] || 0\n      deg[v] = deg[v] || 0\n      deg[u] += 1\n      deg[v] += 1\n    }\n  }\n\n  function checkDirected() {\n    var oddVertex = 0\n    var start = 0\n\n    for (i = 0; i < idCount; i += 1) {\n      if (outDeg[i] - inDeg[i] !== 0) {\n        if (outDeg[i] > inDeg[i]) {\n          start = i\n        }\n        oddVertex += 1\n      }\n    }\n    return {odd: oddVertex, start: start}\n  }\n\n  function checkUndirected() {\n    var oddVertex = 0\n    var start = 0\n\n    for (i = 0; i < idCount; i += 1) {\n      if (deg[i] % 2 !== 0) {\n        start = i\n        oddVertex += 1\n      }\n    }\n    return {odd: oddVertex, start: start}\n  }\n\n  var check = options.directed ? checkDirected() : checkUndirected()\n  if (check.odd % 2 !== 0 || check.odd > 2) {\n//    throw Error('the graph does not have an eulerian trail')\n  }\n  dfs(check.start)\n\n  if (trail.length !== options.edges.length + 1) {\n//    throw Error('the graph does not have an eulerian trail')\n  }\n\n  trail.reverse()\n\n  // id to input\n  return trail.map(function (id) {\n    return idReverse[id]\n  })\n}\n","import Victor from 'victor'\n\nlet Vicious1Vertices = () => {\n  return [\n    new Victor(-0.745613252629, 0.342139688058),\n    new Victor(-0.722681883112, 0.350763810109),\n    new Victor(-0.700286039815, 0.359363989838),\n    new Victor(-0.683380317501, 0.365945196632),\n    new Victor(-0.666520036737, 0.372640251609),\n    new Victor(-0.649705686141, 0.379449643388),\n    new Victor(-0.632937754332, 0.386372394731),\n    new Victor(-0.61621672993, 0.393408994259),\n    new Victor(-0.59954407879, 0.400558464732),\n    new Victor(-0.582920289531, 0.40782080615),\n    new Victor(-0.566345850773, 0.415195529896),\n    new Victor(-0.549821739752, 0.42268214735),\n    new Victor(-0.533348933706, 0.430280658513),\n    new Victor(-0.516927921255, 0.437990574764),\n    new Victor(-0.500559191017, 0.445811896105),\n    new Victor(-0.484244208848, 0.453743645298),\n    new Victor(-0.467982974749, 0.461785822342),\n    new Victor(-0.451776954575, 0.46993793862),\n    new Victor(-0.435626636946, 0.478199505511),\n    new Victor(-0.417042020391, 0.487809171708),\n    new Victor(-0.398529230801, 0.497557117029),\n    new Victor(-0.380089734033, 0.507441875618),\n    new Victor(-0.361724018706, 0.517463936093),\n    new Victor(-0.343433550675, 0.527621343979),\n    new Victor(-0.325218818561, 0.537915076515),\n    new Victor(-0.307080799601, 0.548343667842),\n    new Victor(-0.289020959651, 0.558906629343),\n    new Victor(-0.271040275948, 0.569603472399),\n    new Victor(-0.253139237112, 0.580433708391),\n    new Victor(-0.235319797618, 0.591396360082),\n    new Victor(-0.217581468846, 0.60249142747),\n    new Victor(-0.199926693892, 0.61371793332),\n    new Victor(-0.182355472755, 0.625075389011),\n    new Victor(-0.164869271291, 0.636562817306),\n    new Victor(-0.147469066739, 0.648180218206),\n    new Victor(-0.130155347716, 0.659926125854),\n    new Victor(-0.112929580079, 0.671800540249),\n    new Victor(-0.0957922524482, 0.683802484155),\n    new Victor(-0.0787448306786, 0.695931957571),\n    new Victor(-0.0617878033894, 0.708187006022),\n    new Victor(-0.0449226364371, 0.720568118127),\n    new Victor(-0.0281493298216, 0.733074316648),\n    new Victor(-0.0114698380183, 0.745704624347),\n    new Victor(0.00511535035415, 0.758458552606),\n    new Victor(0.021605258058, 0.771335124187),\n    new Victor(0.0379993964745, 0.78433433909),\n    new Victor(0.0542962997473, 0.79745424284),\n    new Victor(0.0689143087782, 0.809362371934),\n    new Victor(0.0834609794625, 0.821357963795),\n    new Victor(0.0979358231812, 0.833440041186),\n    new Victor(0.112337862697, 0.845608604107),\n    new Victor(0.12666660939, 0.857863652558),\n    new Victor(0.140921574643, 0.870203720682),\n    new Victor(0.155102758455, 0.882629297099),\n    new Victor(0.169209183589, 0.895138915952),\n    new Victor(0.181539967956, 0.906207597924),\n    new Victor(0.193955771996, 0.91718051061),\n    new Victor(0.206455618473, 0.928057165389),\n    new Victor(0.219038530147, 0.938837562262),\n    new Victor(0.22146207946, 0.940840899396),\n    new Victor(0.223916411758, 0.942806124262),\n    new Victor(0.226401527041, 0.944732748242),\n    new Victor(0.228916936691, 0.946620282717),\n    new Victor(0.230887047745, 0.948104706671),\n    new Victor(0.232926054052, 0.949493361338),\n    new Victor(0.235029069424, 0.950783803623),\n    new Victor(0.237191207672, 0.951972124576),\n    new Victor(0.239407582608, 0.953055881104),\n    new Victor(0.241672819425, 0.954032630111),\n    new Victor(0.243982520555, 0.954900417123),\n    new Victor(0.246330822571, 0.955656799046),\n    new Victor(0.248847209458, 0.956426373676),\n    new Victor(0.251395845187, 0.957082100124),\n    new Victor(0.253971354951, 0.957622512531),\n    new Victor(0.256568363942, 0.958047610898),\n    new Victor(0.259181985973, 0.958355440751),\n    new Victor(0.261806846237, 0.958546002088),\n    new Victor(0.264437081308, 0.958618806291),\n    new Victor(0.267068293617, 0.958573364741),\n    new Victor(0.269695108356, 0.958410166058),\n    new Victor(0.2723116621, 0.95812921024),\n    new Victor(0.274913068661, 0.957731474526),\n    new Victor(0.277493953231, 0.957217447535),\n    new Victor(0.280048941005, 0.956588595122),\n    new Victor(0.282573634412, 0.955845405908),\n    new Victor(0.285062170027, 0.954989834366),\n    new Victor(0.287510150281, 0.954023834973),\n    new Victor(0.289695253613, 0.953107674698),\n    new Victor(0.291880845564, 0.952108937844),\n    new Victor(0.301388879047, 0.947138218659),\n    new Victor(0.310845118937, 0.942069775711),\n    new Victor(0.320249076614, 0.936904097619),\n    new Victor(0.329599286221, 0.931642650239),\n    new Victor(0.363485000908, 0.912453612212),\n    new Victor(0.397329182996, 0.8931922586),\n    new Victor(0.431132321104, 0.873858589404),\n    new Victor(0.464893926612, 0.854453093243),\n    new Victor(0.498613999522, 0.834975281497),\n    new Victor(0.532292539832, 0.815425642786),\n    new Victor(0.565929058925, 0.795804177109),\n    new Victor(0.599524045418, 0.776110884466),\n    new Victor(0.614195802519, 0.767461354237),\n    new Victor(0.628780096852, 0.758665238364),\n    new Victor(0.643274973942, 0.749722536847),\n    new Victor(0.657679456551, 0.740634715542),\n    new Victor(0.663100193664, 0.737124966608),\n    new Victor(0.668459853424, 0.733522380099),\n    new Victor(0.673756481358, 0.729827933253),\n    new Victor(0.678988611609, 0.72604211469),\n    new Victor(0.681833350338, 0.72394251965),\n    new Victor(0.684601864533, 0.721743246372),\n    new Victor(0.687290245243, 0.719446737951),\n    new Victor(0.689896049373, 0.717056903336),\n    new Victor(0.692415367973, 0.714576674241),\n    new Victor(0.694845269331, 0.71200800514),\n    new Victor(0.697182821733, 0.709355293604),\n    new Victor(0.699425093466, 0.706621471345),\n    new Victor(0.70031242523, 0.705263599663),\n    new Victor(0.70110301047, 0.703846605105),\n    new Victor(0.701792940234, 0.702378794191),\n    new Victor(0.702378794191, 0.700866030346),\n    new Victor(0.702858129247, 0.699316131471),\n    new Victor(0.703228502307, 0.697736426848),\n    new Victor(0.703487470278, 0.696135222997),\n    new Victor(0.703634544541, 0.694519360583),\n    new Victor(0.703808492838, 0.692484263226),\n    new Victor(0.704005894839, 0.688243540547),\n    new Victor(0.704113390977, 0.683999886156),\n    new Victor(0.704130981255, 0.679754765908),\n    new Victor(0.704059154289, 0.675510622897),\n    new Victor(0.703896932843, 0.671268434362),\n    new Victor(0.703645294154, 0.667031132015),\n    new Victor(0.703303749604, 0.662799693094),\n    new Victor(0.702872787811, 0.658576560692),\n    new Victor(0.701225165173, 0.648144060414),\n    new Victor(0.699422161753, 0.637737456933),\n    new Victor(0.697463288931, 0.627358704724),\n    new Victor(0.695350012565, 0.617010735501),\n    new Victor(0.693864122754, 0.60962184181),\n    new Victor(0.691242194203, 0.596705692105),\n    new Victor(0.688638833167, 0.58378514483),\n    new Victor(0.686055016884, 0.570860688605),\n    new Victor(0.683489768115, 0.557932812049),\n    new Victor(0.679173798139, 0.53578860744),\n    new Victor(0.675031287842, 0.513610688133),\n    new Victor(0.671063214461, 0.491401008603),\n    new Victor(0.667269089377, 0.469161523326),\n    new Victor(0.663649889828, 0.446892232301),\n    new Victor(0.660205127196, 0.424595578622),\n    new Victor(0.65693480148, 0.402273028147),\n    new Victor(0.653839889918, 0.379925069493),\n    new Victor(0.65092039251, 0.357553168517),\n    new Victor(0.648176309256, 0.335159768314),\n    new Victor(0.645608128774, 0.312745357501),\n    new Victor(0.643215362447, 0.290311401936),\n    new Victor(0.641387928086, 0.272862824121),\n    new Victor(0.640313455316, 0.262524627274),\n    new Victor(0.639318138793, 0.252178123907),\n    new Victor(0.638402467138, 0.241824779876),\n    new Victor(0.637566440349, 0.231464595183),\n    new Victor(0.636809569807, 0.221098058444),\n    new Victor(0.636132344132, 0.210726146899),\n    new Victor(0.635534763324, 0.200349349165),\n    new Victor(0.635016338763, 0.189968153863),\n    new Victor(0.634136336281, 0.166283334136),\n    new Victor(0.633371647838, 0.14259411684),\n    new Victor(0.632722273436, 0.118901479213),\n    new Victor(0.632187724454, 0.0952059098725),\n    new Victor(0.631768489513, 0.0715078974381),\n    new Victor(0.631464568611, 0.0478084191472),\n    new Victor(0.63127547313, 0.0241079636186),\n    new Victor(0.631201691689, 0.000406530852484),\n    new Victor(0.631270098323, -0.0222394852774),\n    new Victor(0.631441114908, -0.0448845241697),\n    new Victor(0.631715230062, -0.0675285858243),\n    new Victor(0.632092443786, -0.0901711816225),\n    new Victor(0.63257226746, -0.112811822945),\n    new Victor(0.633154701085, -0.135450021174),\n    new Victor(0.63384023328, -0.158085776309),\n    new Victor(0.634628864044, -0.180717622493),\n    new Victor(0.635306089719, -0.195449968327),\n    new Victor(0.636126969325, -0.210174984878),\n    new Victor(0.637091014243, -0.22489120629),\n    new Victor(0.638198713093, -0.239597655326),\n    new Victor(0.639449577254, -0.254292377511),\n    new Victor(0.640843606728, -0.268974395606),\n    new Victor(0.642380801514, -0.283642243756),\n    new Victor(0.644060672993, -0.298293967485),\n    new Victor(0.64612020129, -0.31581290641),\n    new Victor(0.6482320118, -0.333325493289),\n    new Victor(0.65039757038, -0.350831239505),\n    new Victor(0.652615411173, -0.368331122296),\n    new Victor(0.654741880247, -0.384873800832),\n    new Victor(0.656970959272, -0.401402798041),\n    new Victor(0.659303625486, -0.417918113923),\n    new Victor(0.661739390269, -0.434418282622),\n    new Victor(0.664278253622, -0.450902815519),\n    new Victor(0.666919726926, -0.467371223995),\n    new Victor(0.66966381018, -0.483822530812),\n    new Victor(0.672510992004, -0.500256735972),\n    new Victor(0.675460295159, -0.516672862235),\n    new Victor(0.678512696885, -0.533069932364),\n    new Victor(0.681666731323, -0.54944794636),\n    new Victor(0.684923375712, -0.565805926984),\n    new Victor(0.688253801542, -0.582478578124),\n    new Victor(0.691624294115, -0.599143411363),\n    new Victor(0.695033876193, -0.615799938082),\n    new Victor(0.698483036394, -0.632448158282),\n    new Victor(0.700362264349, -0.641257466863),\n    new Victor(0.702110053844, -0.650093649478),\n    new Victor(0.703725916259, -0.658955240272),\n    new Victor(0.705209362975, -0.667839796151),\n    new Victor(0.705560191283, -0.670609776202),\n    new Victor(0.705811829972, -0.673129583421),\n    new Victor(0.705988709982, -0.675296119238),\n    new Victor(0.706054184903, -0.677469495719),\n    new Victor(0.706007766116, -0.679642872199),\n    new Victor(0.70584945362, -0.681811362492),\n    new Victor(0.705579736035, -0.683968614552),\n    new Victor(0.705199590599, -0.686109253572),\n    new Victor(0.704709505929, -0.688227904745),\n    new Victor(0.704111436502, -0.690317727409),\n    new Victor(0.702891355326, -0.694066410943),\n    new Victor(0.701505632372, -0.697756460219),\n    new Victor(0.699955733497, -0.701380545956),\n    new Victor(0.698245567651, -0.704932316108),\n    new Victor(0.696378555166, -0.708403464156),\n    new Victor(0.694358116374, -0.711788126674),\n    new Victor(0.692188648844, -0.715079462999),\n    new Victor(0.689874061527, -0.718270143849),\n    new Victor(0.688711148751, -0.719521985248),\n    new Victor(0.687505237521, -0.720732294048),\n    new Victor(0.686256816453, -0.721899115774),\n    new Victor(0.684968817262, -0.723021473187),\n    new Victor(0.683641728566, -0.724097900432),\n    new Victor(0.68227750484, -0.725126443034),\n    new Victor(0.68087761194, -0.726106612373),\n    new Victor(0.679444492961, -0.727036942593),\n    new Victor(0.669607619016, -0.733287843069),\n    new Victor(0.659707713245, -0.739438576688),\n    new Victor(0.649746730121, -0.745489632069),\n    new Victor(0.639724669646, -0.751439054737),\n    new Victor(0.626066307964, -0.75960143201),\n    new Victor(0.588245257356, -0.781929357292),\n    new Victor(0.550379253818, -0.804180569421),\n    new Victor(0.512467808729, -0.826354091159),\n    new Victor(0.474510922092, -0.848449922505),\n    new Victor(0.436509082523, -0.87046806346),\n    new Victor(0.398462290023, -0.892408514024),\n    new Victor(0.360370544593, -0.914271274197),\n    new Victor(0.322234334851, -0.936056343978),\n    new Victor(0.311636192795, -0.942000391839),\n    new Victor(0.303639945919, -0.946411153865),\n    new Victor(0.301535464691, -0.947610713051),\n    new Victor(0.299393848434, -0.94874333146),\n    new Victor(0.29721754024, -0.949807054616),\n    new Victor(0.295008494586, -0.9508013939),\n    new Victor(0.292769154566, -0.951725372076),\n    new Victor(0.290501474654, -0.952577523286),\n    new Victor(0.288207897946, -0.95335784753),\n    new Victor(0.285890867534, -0.954064878953),\n    new Victor(0.282197886545, -0.955003515693),\n    new Victor(0.278465327432, -0.955768692754),\n    new Victor(0.274700519477, -0.956358455661),\n    new Victor(0.270912257819, -0.956772315796),\n    new Victor(0.267109337597, -0.957008318683),\n    new Victor(0.263299088092, -0.957066464322),\n    new Victor(0.259490304444, -0.956946752712),\n    new Victor(0.255691781792, -0.956649183855),\n    new Victor(0.251910849416, -0.956174246369),\n    new Victor(0.248156302456, -0.95552340611),\n    new Victor(0.244436447432, -0.954697640316),\n    new Victor(0.240758613626, -0.953699392081),\n    new Victor(0.240319833932, -0.953534238922),\n    new Victor(0.238502171947, -0.952568728147),\n    new Victor(0.236709918141, -0.951555821348),\n    new Victor(0.234945026988, -0.950496007142),\n    new Victor(0.233208964345, -0.949390262768),\n    new Victor(0.23150270745, -0.948239076844),\n    new Victor(0.22982723354, -0.94704293799),\n    new Victor(0.228184008471, -0.945803312061),\n    new Victor(0.226574009482, -0.944520687677),\n    new Victor(0.224074235635, -0.942570121375),\n    new Victor(0.212583875626, -0.933021043911),\n    new Victor(0.201218113415, -0.923323914947),\n    new Victor(0.189977926239, -0.913481666195),\n    new Victor(0.178866245811, -0.903494297655),\n    new Victor(0.161323853183, -0.887790577622),\n    new Victor(0.143655885521, -0.872228557044),\n    new Victor(0.125862831443, -0.856809213159),\n    new Victor(0.107946156805, -0.841533523206),\n    new Victor(0.0899073274635, -0.82640295304),\n    new Victor(0.0717468320377, -0.811418479899),\n    new Victor(0.0534666250026, -0.796580103784),\n    new Victor(0.0350671949772, -0.781890267787),\n    new Victor(0.0165500078179, -0.767348483291),\n    new Victor(-0.00208395923779, -0.752956704771),\n    new Victor(-0.0208327517145, -0.738715420845),\n    new Victor(-0.0396958809936, -0.724625608751),\n    new Victor(-0.0586718812184, -0.710688245726),\n    new Victor(-0.0777597751514, -0.69690382039),\n    new Victor(-0.0969580969362, -0.683274287218),\n    new Victor(-0.116265380716, -0.66979964621),\n    new Victor(-0.135680649254, -0.656480874603),\n    new Victor(-0.155202436693, -0.643318949635),\n    new Victor(-0.174829765796, -0.630314359925),\n    new Victor(-0.194561170706, -0.617469059948),\n    new Victor(-0.214395674185, -0.604782561085),\n    new Victor(-0.234331321759, -0.592256329193),\n    new Victor(-0.254367624808, -0.579891341509),\n    new Victor(-0.274502628858, -0.567688086652),\n    new Victor(-0.29394086248, -0.556123456584),\n    new Victor(-0.313469979201, -0.54471371868),\n    new Victor(-0.333088513165, -0.533458384321),\n    new Victor(-0.352795975753, -0.522359407981),\n    new Victor(-0.372590901108, -0.511416789662),\n    new Victor(-0.392471334756, -0.500631017982),\n    new Victor(-0.412437276696, -0.490003070179),\n    new Victor(-0.432486283835, -0.47953392349),\n    new Victor(-0.452617867553, -0.469224066534),\n    new Victor(-0.472830073375, -0.459073499311),\n    new Victor(-0.493122412682, -0.449083687678),\n    new Victor(-0.513493419618, -0.439255120252),\n    new Victor(-0.533941628327, -0.429588285654),\n    new Victor(-0.554465572951, -0.420083183884),\n    new Victor(-0.575064276254, -0.410741769415),\n    new Victor(-0.595736272379, -0.401563065011),\n    new Victor(-0.61648009547, -0.392549025148),\n    new Victor(-0.637294768288, -0.383699161205),\n    new Victor(-0.658179313597, -0.37501493904),\n    new Victor(-0.679131776921, -0.366496358653),\n    new Victor(-0.698898362385, -0.3585812225),\n    new Victor(-0.718729934152, -0.350830262268),\n    new Victor(-0.738624537745, -0.34324250072),\n    new Victor(-0.758581195928, -0.33581989233),\n    new Victor(-0.778598442844, -0.32856194848),\n    new Victor(-0.798674812635, -0.32146915779),\n    new Victor(-0.818809328066, -0.314542497496),\n    new Victor(-0.83900003466, -0.307782456217),\n    new Victor(-0.849647527216, -0.304229708827),\n    new Victor(-0.859482935305, -0.301024369413),\n    new Victor(-0.86930319621, -0.297772122593),\n    new Victor(-0.879107821313, -0.294472968367),\n    new Victor(-0.888896810615, -0.291126906735),\n    new Victor(-0.898669186876, -0.287733937697),\n    new Victor(-0.908425927336, -0.284294061253),\n    new Victor(-0.918165566137, -0.28080825464),\n    new Victor(-0.927888591898, -0.277275540622),\n    new Victor(-0.931015263683, -0.276110673371),\n    new Victor(-0.934077437785, -0.27478553915),\n    new Victor(-0.937066807683, -0.273304046909),\n    new Victor(-0.939975066859, -0.271669128361),\n    new Victor(-0.942794886029, -0.269885669693),\n    new Victor(-0.945518447293, -0.267958557094),\n    new Victor(-0.948138909988, -0.265892676752),\n    new Victor(-0.950648456212, -0.263693892093),\n    new Victor(-0.953040245302, -0.261368066543),\n    new Victor(-0.955308902451, -0.258921063527),\n    new Victor(-0.957447586996, -0.256360212328),\n    new Victor(-0.959450435511, -0.25369186499),\n    new Victor(-0.961260768213, -0.251131991028),\n    new Victor(-0.962993410524, -0.248518368997),\n    new Victor(-0.96464591935, -0.245853930609),\n    new Victor(-0.966217317453, -0.24314063034),\n    new Victor(-0.972878657732, -0.231316055063),\n    new Victor(-0.972926053757, -0.0130031238537),\n    new Victor(-0.972925565138, 0.00628803550555),\n    new Victor(-0.97291628138, 0.0249869888634),\n    new Victor(-0.972898202484, 0.0430570898088),\n    new Victor(-0.972858135742, 0.0776097691758),\n    new Victor(-0.972741844464, 0.112162448543),\n    new Victor(-0.972548351414, 0.146714639291),\n    new Victor(-0.972277656592, 0.181266341421),\n    new Victor(-0.972203875151, 0.189501034277),\n    new Victor(-0.972085629398, 0.197735727134),\n    new Victor(-0.971922919333, 0.205968954135),\n    new Victor(-0.971715256338, 0.214201692516),\n    new Victor(-0.971568670694, 0.217132916776),\n    new Victor(-0.971310679961, 0.220056811754),\n    new Victor(-0.970942749994, 0.222968491261),\n    new Victor(-0.970464880795, 0.225864534966),\n    new Victor(-0.969878049601, 0.228740056681),\n    new Victor(-0.96918274503, 0.231591636074),\n    new Victor(-0.968380432939, 0.234414875576),\n    new Victor(-0.967472090565, 0.237205866236),\n    new Victor(-0.966500716365, 0.23992551855),\n    new Victor(-0.965406210223, 0.242597774839),\n    new Victor(-0.964191015235, 0.245217260296),\n    new Victor(-0.962857085875, 0.247778600114),\n    new Victor(-0.961408331095, 0.250276908105),\n    new Victor(-0.959846705368, 0.252705832225),\n    new Victor(-0.958176117646, 0.255061463523),\n    new Victor(-0.956399499642, 0.257337938573),\n    new Victor(-0.954520760305, 0.259531348425),\n    new Victor(-0.952544297207, 0.261636318272),\n    new Victor(-0.950473530677, 0.263649427781),\n    new Victor(-0.948313346904, 0.265565790766),\n    new Victor(-0.946067654839, 0.267381009657),\n    new Victor(-0.94374134067, 0.269092641359),\n    new Victor(-0.941339779204, 0.270695799685),\n    new Victor(-0.93886736801, 0.27218804154),\n    new Victor(-0.936329481894, 0.273565946593),\n    new Victor(-0.933731007046, 0.274826094512),\n    new Victor(-0.93107829551, 0.27596701944),\n    new Victor(-0.928375744855, 0.276985301047),\n    new Victor(-0.913861323012, 0.282438287001),\n    new Victor(-0.899294130338, 0.287750550737),\n    new Victor(-0.884676121307, 0.292920137779),\n    new Victor(-0.870008761776, 0.297948025366),\n    new Victor(-0.854391527272, 0.303278856616),\n    new Victor(-0.838793348902, 0.308665390412),\n    new Victor(-0.823214226666, 0.314107138133),\n    new Victor(-0.807654649182, 0.319603611161),\n    new Victor(-0.792114127832, 0.325155298116),\n    new Victor(-0.776593639853, 0.330761710377),\n    new Victor(-0.761093185246, 0.336423336564),\n    new Victor(-0.745613252629, 0.342139688058),\n  ];\n}\n\nexport default Vicious1Vertices;\n","import Vicious1Vertices from './Vicious1Vertices'\nimport Shape from '../Shape'\n\nexport default class V1Engineering extends Shape {\n  constructor() {\n    super('V1Engineering')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'v1Engineering',\n      }\n    }\n  }\n\n  getVertices(state) {\n    return Vicious1Vertices()\n  }\n}\n","import { degToRad } from '../common/geometry'\nimport Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    wiperType: {\n      title: 'Type',\n      type: 'dropdown',\n      choices: ['Lines', 'Spiral'],\n    },\n    wiperSize: {\n      title: 'Wiper size',\n      min: 1\n    },\n    wiperAngleDeg: {\n      title: 'Wiper angle',\n      isVisible: (state) => { return state.wiperType === 'Lines' },\n    },\n  }\n}\n\nconst outOfBounds = (point, width, height) => {\n  if (point.x < -width/2.0) {\n    return true\n  }\n  if (point.y < -height/2.0) {\n    return true\n  }\n  if (point.x > width/2.0) {\n    return true\n  }\n  if (point.y > height/2.0) {\n    return true\n  }\n  return false\n}\n\n// Intersect the line with the boundary, and return the point exactly on the boundary.\n// This will keep the shape. i.e. It will follow the line segment, and return the point on that line\n// segment.\nfunction boundPoint(good, bad, size_x, size_y) {\n  var dx = good.x - bad.x\n  var dy = good.y - bad.y\n\n  var fixed = Victor(bad.x, bad.y)\n  var distance = 0\n  if (bad.x < -size_x || bad.x > size_x) {\n    if (bad.x < -size_x) {\n      // we are leaving the left\n      fixed.x = -size_x\n    } else {\n      // we are leaving the right\n      fixed.x = size_x\n    }\n    distance = (fixed.x - good.x) / dx\n    fixed.y = good.y + distance * dy\n    // We fixed x, but y might have the same problem, so we'll rerun this, with different points.\n    return boundPoint(good, fixed, size_x, size_y)\n  }\n  if (bad.y < -size_y || bad.y > size_y) {\n    if (bad.y < -size_y) {\n      // we are leaving the bottom\n      fixed.y = -size_y\n    } else {\n      // we are leaving the top\n      fixed.y = size_y\n    }\n    distance = (fixed.y - good.y) / dy\n    fixed.x = good.x + distance * dx\n  }\n  return fixed\n}\n\nfunction nearEnough(end, point) {\n  if (point.clone().subtract(end).length() < 0.01) {\n    return true\n  }\n  return false\n}\n\nfunction spiralVertices(state) {\n  // Determine the max radius\n  let maxRadius = state.machine.maxRadius\n  if (state.machine.rectangular) {\n    const halfHeight = (state.machine.maxY - state.machine.minY)/2.0\n    const halfWidth = (state.machine.maxX - state.machine.minX)/2.0\n    maxRadius = Math.sqrt(Math.pow(halfHeight, 2.0) + Math.pow(halfWidth, 2.0))\n  }\n\n  var vertices = []\n\n  let emergencyBreak = 0\n  let radius = 0.1\n  let angle = 0\n  const arcLength = 1.0\n  const radiusPerAngle = state.shape.wiperSize / (2.0 * Math.PI)\n  while (radius <= maxRadius) {\n    // Save where we are right now.\n    vertices.push(new Victor(radius * Math.cos(angle), radius * Math.sin(angle)))\n\n    // We want to have the next point be about the right arc length.\n    let deltaAngle = arcLength / radius * 2.0 * Math.PI\n\n    // Limit this at small radii\n    deltaAngle = Math.min(deltaAngle, 0.1)\n\n    // Update for the next point.\n    angle += deltaAngle\n    radius += deltaAngle * radiusPerAngle\n\n    emergencyBreak += 1\n    if (emergencyBreak > 1e9) {\n      // If we get to this point: bail. We did something terrible.\n      break\n    }\n  }\n\n  return vertices\n}\n\nfunction linearVertices(state) {\n  var outputVertices = []\n\n  // Get the angle between 0,180\n  let angle = (180.0 - (state.shape.wiperAngleDeg % 360)) % 180.0\n  if (angle < 0.0) {\n    angle += 180.0\n  }\n  angle = degToRad(angle)\n\n  // Start with the defaults for 0,45\n  let height = 1\n  let width = 1\n  let machine = state.machine\n  if (machine.rectangular) {\n    height = machine.maxY - machine.minY\n    width = machine.maxX - machine.minX\n  } else {\n    height = machine.maxRadius * 2.0\n    width = height\n  }\n\n  let startLocation = Victor(-width/2.0, height/2.0)\n  let cosa = Math.cos(angle)\n  let sina = Math.sin(angle)\n\n  // These can be zero, but infinity isn't great for out math, so let's just clip it.\n  if (Math.abs(cosa) < 1.0e-10) {\n    cosa = 1.0e-10\n  }\n  if (Math.abs(sina) < 1.0e-10) {\n    sina = 1.0e-10\n  }\n  let orig_delta_w = Victor(state.shape.wiperSize / cosa, 0.0)\n  let orig_delta_h = Victor(0.0, -state.shape.wiperSize / sina)\n\n  if (angle > Math.PI/4.0 && angle < 0.75 * Math.PI) {\n    // flip the logic of x,y\n    let temp = orig_delta_w.clone()\n    orig_delta_w = orig_delta_h.clone()\n    orig_delta_h = temp\n  }\n  if (angle > Math.PI/2.0) {\n    startLocation = Victor(-width/2.0, -height/2.0)\n    orig_delta_w = orig_delta_w.clone().multiply(Victor(-1.0, -1.0))\n    orig_delta_h = orig_delta_h.clone().multiply(Victor(-1.0, -1.0))\n  }\n  let delta_w = orig_delta_w\n  let delta_h = orig_delta_h\n  let endLocation = startLocation.clone().multiply(Victor(-1.0, -1.0))\n  outputVertices.push(startLocation)\n  let nextWidthPoint = startLocation\n  let nextHeightPoint = startLocation\n\n  let emergency_break = 0\n  while (emergency_break < 1000) {\n    emergency_break += 1\n\n    // \"right\"\n    nextWidthPoint = nextWidthPoint.clone().add(delta_w)\n    if (outOfBounds(nextWidthPoint, width, height)) {\n      let corner = boundPoint(nextWidthPoint.clone().subtract(delta_w), nextWidthPoint, width/2.0, height/2.0)\n      outputVertices.push(corner)\n      if (nearEnough(endLocation, corner)) {\n        break\n      }\n      nextWidthPoint = boundPoint(nextHeightPoint, nextWidthPoint, width/2.0, height/2.0)\n      delta_w = orig_delta_h\n    }\n    outputVertices.push(nextWidthPoint)\n    if (nearEnough(endLocation, nextWidthPoint)) {\n      break\n    }\n\n    // \"down-left\"\n    nextHeightPoint = nextHeightPoint.clone().add(delta_h)\n    if (outOfBounds(nextHeightPoint, width, height)) {\n      nextHeightPoint = boundPoint(nextWidthPoint, nextHeightPoint, width/2.0, height/2.0)\n      delta_h = orig_delta_w\n    }\n    outputVertices.push(nextHeightPoint)\n    if (nearEnough(endLocation, nextHeightPoint)) {\n      break\n    }\n\n    // \"down\"\n    nextHeightPoint = nextHeightPoint.clone().add(delta_h)\n    outputVertices.push(nextHeightPoint)\n    if (nearEnough(endLocation, nextHeightPoint)) {\n      break\n    }\n    if (outOfBounds(nextHeightPoint, width, height)) {\n      let corner = boundPoint(nextHeightPoint.clone().subtract(delta_h), nextHeightPoint, width/2.0, height/2.0)\n      outputVertices.push(corner)\n      if (nearEnough(endLocation, corner)) {\n        break\n      }\n      nextHeightPoint = boundPoint(nextWidthPoint, nextHeightPoint, width/2.0, height/2.0)\n      delta_h = orig_delta_w\n    }\n    outputVertices.push(nextHeightPoint)\n    if (nearEnough(endLocation, nextHeightPoint)) {\n      break\n    }\n\n    // \"up-right\"\n    nextWidthPoint = nextWidthPoint.clone().add(delta_w)\n    outputVertices.push(nextWidthPoint)\n    if (nearEnough(endLocation, nextWidthPoint)) {\n      break\n    }\n    if (outOfBounds(nextWidthPoint, width, height)) {\n      nextWidthPoint = boundPoint(nextHeightPoint, nextWidthPoint, width/2.0, height/2.0)\n      delta_w = orig_delta_h\n    }\n  }\n  return outputVertices\n}\n\nexport default class Wiper extends Shape {\n  constructor() {\n    super('Wiper')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'wiper',\n        wiperAngleDeg: 15,\n        wiperSize: 12,\n        wiperType: 'Lines',\n        selectGroup: 'Erasers',\n        canTransform: false,\n        shouldCache: false,\n      }\n    }\n  }\n\n  getInitialTransformState() {\n    return {\n      ...super.getInitialTransformState(),\n      ...{\n        startingSize: 1,\n        canChangeSize: false,\n        repeatEnabled: false,\n      }\n    }\n  }\n\n  getVertices(state) {\n    if (state.shape.wiperType === 'Lines') {\n      return linearVertices(state)\n    } else {\n      return spiralVertices(state)\n    }\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Circle from '../models/Circle'\nimport Epicycloid from '../models/Epicycloid'\nimport FractalSpirograph from '../models/fractal_spirograph/FractalSpirograph'\nimport Heart from '../models/Heart'\nimport Hypocycloid from '../models/Hypocycloid'\nimport InputText from '../models/input_text/InputText'\nimport LSystem from '../models/lsystem/LSystem'\nimport Polygon from '../models/Polygon'\nimport Reuleaux from '../models/Reuleaux'\nimport Rose from '../models/Rose'\nimport SpaceFiller from '../models/space_filler/SpaceFiller'\nimport Star from '../models/Star'\nimport TessellationTwist from '../models/tessellation_twist/TessellationTwist'\nimport V1Engineering from '../models/v1_engineering/V1Engineering'\nimport Wiper from '../models/Wiper'\n\n/*----------------------------------------------\nSupported input shapes\n-----------------------------------------------*/\nexport const registeredShapes = {\n  polygon: new Polygon(),\n  star: new Star(),\n  circle: new Circle(),\n  heart: new Heart(),\n  reuleaux: new Reuleaux(),\n  epicycloid: new Epicycloid(),\n  hypocycloid: new Hypocycloid(),\n  rose: new Rose(),\n  inputText: new InputText(),\n  v1Engineering: new V1Engineering(),\n  lsystem: new LSystem(),\n  fractal_spirograph: new FractalSpirograph(),\n  tessellation_twist: new TessellationTwist(),\n  wiper: new Wiper(),\n  space_filler: new SpaceFiller()\n}\n","import { createSelector } from 'reselect'\nimport { registeredShapes } from '../../common/registeredShapes'\n\nconst getShapes = state => state.shapes\nconst getTransforms = state => state.transforms\nconst getCurrentShapeId = state => state.shapes.currentId\n\nexport const getShapesSelector = createSelector(\n  [ getShapes ],\n  shapes => shapes.allIds.map(id => shapes.byId[id])\n)\nexport const getCurrentShapeSelector = createSelector(\n  [ getCurrentShapeId, getShapes ],\n  (id, shapes) => shapes.byId[id]\n)\n\nexport const getCurrentTransformSelector = createSelector(\n  [ getCurrentShapeId, getTransforms ],\n  (id, transforms) => transforms.byId[id]\n)\n\nexport const getShape = (shape) => {\n  return registeredShapes[shape.type]\n}\n\nexport const getShapeById = (id) => {\n  return registeredShapes[id]\n}\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card,\n  Col,\n  Form,\n  Row,\n  ToggleButton,\n  ToggleButtonGroup,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  updateTransform,\n  toggleGrow\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../models/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.growEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onGrowMethodChange: (value) => {\n      dispatch(updateTransform({ growMethod: value, id: id}))\n    },\n    onGrow: () => {\n      dispatch(toggleGrow({id: id}))\n    },\n  }\n}\n\nclass ScaleTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={`${activeClassName} overflow-auto`}>\n          <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onGrow}>\n            <h3>Scale</h3>\n            Grows or shrinks the shape\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={0}>\n            <Card.Body>\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"growValue\"\n                optionKey=\"growValue\"\n                index={2}\n                model={this.props.transform} />\n\n              <Row className=\"align-items-center pb-2\">\n                <Col sm={5}>\n                  <Form.Label htmlFor=\"growMethod\">\n                    Scale by\n                  </Form.Label>\n                </Col>\n                <Col sm={7}>\n                  <ToggleButtonGroup id=\"growMethod\" type=\"radio\" name=\"growMethod\" value={this.props.transform.growMethod} onChange={this.props.onGrowMethodChange}>\n                    <ToggleButton variant=\"light\" value=\"constant\">constant</ToggleButton>\n                    <ToggleButton variant=\"light\" value=\"function\">function</ToggleButton>\n                  </ToggleButtonGroup>\n                </Col>\n              </Row>\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"growMathInput\"\n                optionKey=\"growMathInput\"\n                delayKey=\"growMath\"\n                index={1}\n                model={this.props.transform} />\n\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ScaleTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card,\n  Col,\n  Form,\n  Row,\n  ToggleButton,\n  ToggleButtonGroup,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  toggleSpin,\n  updateTransform,\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../models/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.spinEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onSpinMethodChange: (value) => {\n      dispatch(updateTransform({ spinMethod: value, id: id}))\n    },\n    onSpin: () => {\n      dispatch(toggleSpin({id: id}))\n    },\n  }\n}\n\nclass RotationTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={`${activeClassName} overflow-auto`}>\n          <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onSpin}>\n            <h3>Spin</h3>\n            Spins the shape\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={0}>\n            <Card.Body>\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"spinValue\"\n                optionKey=\"spinValue\"\n                index={0}\n                model={this.props.transform} />\n\n              <Row className=\"align-items-center pb-2\">\n                <Col sm={5}>\n                  <Form.Label htmlFor=\"spinMethod\">\n                    Scale by\n                  </Form.Label>\n                </Col>\n\n                <Col sm={7}>\n                  <ToggleButtonGroup id=\"spinMethod\" type=\"radio\" name=\"spinMethod\" value={this.props.transform.spinMethod} onChange={this.props.onSpinMethodChange}>\n                    <ToggleButton variant=\"light\" value=\"constant\">constant</ToggleButton>\n                    <ToggleButton variant=\"light\" value=\"function\">function</ToggleButton>\n                  </ToggleButtonGroup>\n                </Col>\n              </Row>\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"spinMathInput\"\n                optionKey=\"spinMathInput\"\n                delayKey=\"spinMath\"\n                index={1}\n                model={this.props.transform} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"spinSwitchbacks\"\n                optionKey=\"spinSwitchbacks\"\n                index={0}\n                model={this.props.transform} />\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RotationTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  toggleTrack,\n  toggleTrackGrow,\n  updateTransform\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../models/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.trackEnabled,\n    activeGrow: transform.trackGrowEnabled,\n    options: new Transform().getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onTrack: () => {\n      dispatch(toggleTrack({id: id}))\n    },\n    onTrackGrow: () => {\n      dispatch(toggleTrackGrow({id: id}))\n    },\n  }\n}\n\nclass TrackTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n    const activeGrowClassName = this.props.activeGrow ? 'active' : ''\n    const activeGrowKey = this.props.activeGrow ? 0 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={activeClassName}>\n          <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onTrack}>\n            <h3>Track</h3>\n            Moves the shape along a track (shown in green)\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={0}>\n            <Card.Body>\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackValue\"\n                optionKey=\"trackValue\"\n                index={0}\n                model={this.props.transform} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackLength\"\n                optionKey=\"trackLength\"\n                index={0}\n                step={0.05}\n                model={this.props.transform} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackNumLoops\"\n                optionKey=\"trackNumLoops\"\n                index={0}\n                model={this.props.transform} />\n\n              <Accordion defaultActiveKey={activeGrowKey} className=\"mt-3\">\n                <Card className={activeGrowClassName}>\n                  <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onTrackGrow}>\n                    <h3>Scale track</h3>\n                    Grows or shrinks the track\n                  </Accordion.Toggle>\n\n                  <Accordion.Collapse eventKey={0}>\n                    <Card.Body>\n                      <InputOption\n                        onChange={this.props.onChange}\n                        options={this.props.options}\n                        key=\"trackGrow\"\n                        optionKey=\"trackGrow\"\n                        index={0}\n                        model={this.props.transform} />\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              </Accordion>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TrackTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card,\n  Row,\n  Col,\n  Form,\n  ToggleButton,\n  ToggleButtonGroup\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  updateTransform,\n  toggleRepeat\n} from './transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport Transform from '../../models/Transform'\nimport ScaleTransform from './ScaleTransform'\nimport RotationTransform from './RotationTransform'\nimport TrackTransform from './TrackTransform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    active: transform.repeatEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateTransform(attrs))\n    },\n    onRepeat: () => {\n      dispatch(toggleRepeat({id: id}))\n    },\n    ontransformMethodChange: (value) => {\n      dispatch(updateTransform({ transformMethod: value, id: id}))\n    }\n  }\n}\n\nclass Transforms extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 0 : null\n\n    return (\n      <div className=\"transforms\">\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"startingSize\"\n          optionKey=\"startingSize\"\n          index={0}\n          model={this.props.transform} />\n\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"offsetX\"\n          optionKey=\"offsetX\"\n          index={0}\n          model={this.props.transform} />\n\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"offsetY\"\n          optionKey=\"offsetY\"\n          index={0}\n          model={this.props.transform} />\n\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"rotation\"\n          optionKey=\"rotation\"\n          index={0}\n          model={this.props.transform} />\n\n        <Accordion className=\"mt-3\" defaultActiveKey={activeKey} activeKey={activeKey}>\n          <Card className={activeClassName}>\n            <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.onRepeat}>\n              <h3>Loop and transform</h3>\n              Draws the shape multiple times, transforming it each time.\n            </Accordion.Toggle>\n\n            <Accordion.Collapse eventKey={0}>\n              <Card.Body>\n                <InputOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  key=\"numLoops\"\n                  optionKey=\"numLoops\"\n                  index={0}\n                  model={this.props.transform} />\n\n                  <Row className=\"align-items-center pb-2\">\n                    <Col sm={5}>\n                      <Form.Label htmlFor=\"transformMethod\">\n                        When transforming shape\n                      </Form.Label>\n                    </Col>\n\n                    <Col sm={7}>\n                      <ToggleButtonGroup id=\"transformMethod\" type=\"radio\" name=\"transformMethod\" value={this.props.transform.transformMethod} onChange={this.props.ontransformMethodChange}>\n                        <ToggleButton variant=\"light\" value=\"smear\">smear</ToggleButton>\n                        <ToggleButton variant=\"light\" value=\"intact\">keep intact</ToggleButton>\n                      </ToggleButtonGroup>\n                    </Col>\n                  </Row>\n\n                  <Accordion className=\"mt-3\">\n                    <ScaleTransform id={this.props.transform.id} />\n                    <RotationTransform id={this.props.transform.id} />\n                    <TrackTransform id={this.props.transform.id} />\n                  </Accordion>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transforms)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Button,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport DropdownOption from '../../components/DropdownOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport Transforms from '../transforms/Transforms'\nimport { updateShape } from './shapesSlice'\nimport { updateTransform } from '../transforms/transformsSlice'\nimport {\n  getShape,\n  getShapeById,\n  getCurrentShapeSelector\n} from './selectors'\nimport Transform from '../../models/Transform'\nimport './Shape.css'\n\nconst mapStateToProps = (state, ownProps) => {\n  const shape = getCurrentShapeSelector(state)\n  const metashape = getShape(shape)\n\n  return {\n    shape: shape,\n    options: metashape.getOptions(),\n    link: metashape.link,\n    linkText: metashape.linkText\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n  const metashape = getShapeById(id)\n  const metatransform = new Transform()\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateShape(attrs))\n    },\n    onRestoreDefaults: (event) => {\n      let attrs = metashape.getInitialState()\n      attrs.id = id\n\n      let tAttrs = {\n        ...{id: id},\n        ...metatransform.getInitialState(),\n        ...metashape.getInitialTransformState()\n      }\n\n      dispatch(updateShape(attrs))\n      dispatch(updateTransform(tAttrs))\n    }\n  }\n}\n\nclass Shape extends Component {\n  render() {\n    const optionsRender = Object.keys(this.props.options).map((key, index) => {\n      const option = this.props.options[key]\n\n      if (option.type === 'dropdown') {\n        return  <DropdownOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.shape} />\n      } else if (option.type === 'checkbox') {\n        return <CheckboxOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.shape} />\n      } else {\n        return  <InputOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.shape} />\n      }\n    })\n\n    let optionsListRender = undefined\n    if (Object.entries(this.props.options).length > 0) {\n      const linkText = this.props.linkText || this.props.link\n      const linkRender = this.props.link ? <p className=\"mb-3\">See <a target=\"_blank\" rel=\"noopener noreferrer\" href={this.props.link}>{linkText}</a> for ideas.</p> : undefined\n\n      optionsListRender =\n        <div className=\"shape-options\">\n          {linkRender}\n          {optionsRender}\n        </div>\n    }\n\n    return (\n      <div className=\"pt-1\">\n        <div className=\"d-flex align-items-center pt-1 pb-3\">\n          <Button variant=\"outline-primary\" size=\"sm\" onClick={this.props.onRestoreDefaults}>Restore defaults</Button>\n        </div>\n        { optionsListRender }\n        { this.props.shape.canTransform && <Transforms id={this.props.shape.id} />}\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Shape)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  Card\n} from 'react-bootstrap'\nimport Select from 'react-select'\n\nimport {\n  setCurrentShape,\n} from '../shapes/shapesSlice'\nimport Shape from './Shape'\nimport {\n  getShapesSelector,\n  getCurrentShapeSelector\n} from './selectors'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    currentShape: getCurrentShapeSelector(state),\n    shapes: getShapesSelector(state)\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    setCurrentShape: (selected) => {\n      dispatch(setCurrentShape(selected.value))\n    },\n  }\n}\n\nconst customStyles = {\n  control: base => ({\n    ...base,\n    height: 55,\n    minHeight: 55\n  })\n}\n\nclass ShapeList extends Component {\n  render() {\n    const groupOptions = []\n    for (const shape of this.props.shapes) {\n      const optionLabel = { value: shape.id, label: shape.name }\n      var found = false\n      for (const group of groupOptions) {\n        if (group.label === shape.selectGroup) {\n          found = true\n          group.options.push(optionLabel)\n        }\n      }\n      if (!found) {\n        const newOptions = [ optionLabel ]\n        groupOptions.push( { label: shape.selectGroup, options: newOptions } )\n      }\n    }\n\n    const selectedOption = {\n      value: this.props.currentShape.id,\n      label: this.props.currentShape.name\n    }\n\n    return (\n      <div>\n        <Card className=\"p-3 border-0\">\n          <Select\n            value={selectedOption}\n            onChange={this.props.setCurrentShape}\n            styles={customStyles}\n            maxMenuHeight={305}\n            options={groupOptions} />\n\n          <Shape key={this.props.currentShape.id} id={this.props.currentShape.id} />\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShapeList)\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst importerSlice = createSlice({\n  name: 'importer',\n  initialState: {\n    fileName: '',\n    comments: [],\n    vertices: [],\n    zoom: 100,\n    originalAspectRatio: 1.0,\n    aspectRatio: false,\n  },\n  reducers: {\n    updateImporter(state, action) {\n      Object.assign(state, action.payload)\n    },\n    toggleFileAspectRatio(state, action) {\n      state.aspectRatio = !state.aspectRatio\n    },\n  }\n})\n\nexport const {\n  updateImporter,\n  toggleFileAspectRatio\n} = importerSlice.actions\n\nexport default importerSlice.reducer\n","export default class Importer {\n  constructor(fileName, text) {\n    this.fileName = fileName\n    this.text = text\n  }\n}\n","import Importer from './Importer'\n\nexport default class ThetaRhoImporter extends Importer {\n  constructor(fileName, text) {\n    super(fileName, text)\n    this.label = 'ThetaRho'\n  }\n\n  // calls callback, returning an object containing relevant properties\n  import(callback) {\n    let hasVertex = false\n    let props = {\n      comments: [],\n      originalAspectRatio: 1.0,\n      fileName: this.fileName\n    }\n\n    let lines = this.text.split('\\n')\n    let thetaRhos = []\n\n    for (let ii = 0; ii < lines.length; ii++) {\n      var line = lines[ii].trim()\n\n      if (line.length === 0) {\n        // blank lines\n        continue\n      }\n\n      if (line.indexOf(\"#\") === 0 && !hasVertex) {\n        props.comments.push(lines[ii])\n      }\n\n      if (line.indexOf(\"#\") !== 0) {\n        hasVertex = true\n\n        // This is a point, let's try to read it.\n        var pointStrings = line.split(/\\s+/)\n        if (pointStrings.length !== 2) {\n          continue\n        }\n\n        thetaRhos.push([parseFloat(pointStrings[0]), parseFloat(pointStrings[1])])\n      }\n    }\n\n    props.vertices = this.convertToXY(thetaRhos)\n    callback(this, props)\n  }\n\n  convertToXY(thetaRhos) {\n    var vertices = []\n    var previous = undefined\n    var max_angle = Math.PI / 64.0\n    for (let ii = 0; ii < thetaRhos.length; ii++) {\n      var next = thetaRhos[ii]\n      if (previous) {\n        if (Math.abs(next[0] - previous[0]) < max_angle) {\n          // These sin, cos elements are inverted. I'm not sure why\n          vertices.push({\n                        x: previous[1] * Math.sin(previous[0]),\n                        y: previous[1] * Math.cos(previous[0])\n          })\n        } else {\n          // We need to do some interpolating.\n          let deltaAngle = next[0] - previous[0]\n          let rhoStep = max_angle / Math.abs(deltaAngle) * (next[1] - previous[1])\n          var rho = previous[1]\n          if (deltaAngle > 0.0) {\n            var emergency_break = 0\n            for (let angle = previous[0]; angle < next[0]; angle += max_angle, rho += rhoStep) {\n              vertices.push({\n                            x: rho * Math.sin(angle),\n                            y: rho * Math.cos(angle)\n              })\n              if (emergency_break++ > 100000) {\n                break\n              }\n            }\n          } else {\n            for (let angle = previous[0]; angle > next[0]; angle -= max_angle, rho += rhoStep) {\n              vertices.push({\n                            x: rho * Math.sin(angle),\n                            y: rho * Math.cos(angle)\n              })\n              if (emergency_break++ > 100000) {\n                break\n              }\n            }\n          }\n        }\n      }\n      previous = next\n    }\n    return vertices\n  }\n}\n","import Importer from './Importer'\nimport Toolpath from 'gcode-toolpath';\n\nexport default class GCodeImporter extends Importer {\n  constructor(fileName, text) {\n    super(fileName, text)\n    this.label = 'Gcode'\n  }\n\n  // calls callback, returning an object containing relevant properties\n  import(callback) {\n    let props = {\n      comments: [],\n      vertices: [],\n      fileName: this.fileName\n    }\n    let lines = this.text.split('\\n')\n\n    // This assumes the line is already trimmed and not empty.\n    // The paranthesis isn't perfect, since it usually has a match, but I don't think anyone will\n    // care. I think there are firmwares that do this same kind of hack.\n    const isComment = (line) => {\n      return (line.indexOf(\";\") === 0) || (line.indexOf('(') === 0)\n    }\n\n    const addVertex = (x, y) => {\n      props.vertices.push({x: x,y: y})\n    }\n\n    // Read the initial comments\n    for (let ii = 0; ii < lines.length; ii++) {\n      let line = lines[ii].trim()\n      if (line.length === 0) {\n        // blank lines\n        continue\n      }\n      if (isComment(line)) {\n        props.comments.push(lines[ii])\n      } else {\n        break\n      }\n    }\n\n    // GCode reader object. More info here:\n    // https://github.com/cncjs/gcode-toolpath/blob/master/README.md\n    const toolpath = new Toolpath({\n      // @param {object} modal The modal object.\n      // @param {object} v1 A 3D vector of the start point.\n      // @param {object} v2 A 3D vector of the end point.\n      addLine: (modal, v1, v2) => {\n        if (v1.x !== v2.x || v1.y !== v2.y) {\n          addVertex(v2.x, v2.y)\n        }\n      },\n      // @param {object} modal The modal object.\n      // @param {object} v1 A 3D vector of the start point.\n      // @param {object} v2 A 3D vector of the end point.\n      // @param {object} v0 A 3D vector of the fixed point.\n      addArcCurve: (modal, v1, v2, v0) => {\n        if (v1.x !== v2.x || v1.y !== v2.y) {\n          // We can't use traceCircle, we have to go a specific direction (not the shortest path).\n          let startTheta = Math.atan2(v1.y-v0.y, v1.x-v0.x)\n          let endTheta   = Math.atan2(v2.y-v0.y, v2.x-v0.x)\n          let deltaTheta = endTheta - startTheta\n          const radius   = Math.sqrt(Math.pow(v2.x-v0.x, 2.0) + Math.pow(v2.y-v0.y, 2.0))\n          let direction  = 1.0 // Positive, so anticlockwise.\n\n          // Clockwise\n          if (modal.motion === 'G2') {\n            if (deltaTheta > 0.0) {\n              endTheta -= 2.0*Math.PI\n              deltaTheta -= 2.0*Math.PI\n            }\n            direction = -1.0\n          } else if (modal.motion === 'G3') {\n            // Anti-clockwise\n            if (deltaTheta < 0.0) {\n              endTheta += 2.0*Math.PI\n              deltaTheta += 2.0*Math.PI\n            }\n          }\n\n          // What angle do we need to have a resolution of approx. 0.5mm?\n          const arcResolution = 0.5\n          const arcLength = Math.abs(deltaTheta) * radius\n          const thetaStep = deltaTheta * arcResolution/arcLength\n          for (let theta = startTheta;\n               direction * theta <= direction * endTheta;\n               theta += thetaStep) {\n            addVertex(v0.x + radius * Math.cos(theta), v0.y + radius * Math.sin(theta))\n          }\n          // Save the final point, in case our math didn't quite get there.\n          addVertex(v2.x, v2.y)\n        }\n      }\n    });\n\n    toolpath.loadFromString(this.text, (err, results) => {\n      callback(this, this.normalizeCoords(props))\n    })\n  }\n\n  normalizeCoords(props) {\n    const vertices = props.vertices\n    let minX = 1e9\n    let minY = 1e9\n    let maxX = -1e9\n    let maxY = -1e9\n\n    vertices.forEach( (vertex) => {\n      minX = Math.min(vertex.x, minX)\n      minY = Math.min(vertex.y, minY)\n      maxX = Math.max(vertex.x, maxX)\n      maxY = Math.max(vertex.y, maxY)\n    })\n\n    const offsetX = (maxX + minX)/2.0\n    const offsetY = (maxY + minY)/2.0\n    const scaleX = 1.0/(maxX - offsetX)\n    const scaleY = 1.0/(maxY - offsetY)\n\n    props.originalAspectRatio = scaleX/scaleY\n    props.vertices = vertices.map(vertex => {\n      return {\n        x: scaleX * (vertex.x - offsetX),\n        y: scaleY * (vertex.y - offsetY)\n      }\n    })\n\n    return props\n  }\n}\n","const importerOptions = {\n  zoom: {\n    title: 'Zoom',\n    min: 1\n  },\n  aspectRatio: {\n    title: 'Keep original aspect ratio',\n    type: 'checkbox',\n  },\n}\n\nexport default class Importer {\n  getOptions() {\n    return importerOptions\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Card,\n    Form,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport {\n  updateImporter,\n  toggleFileAspectRatio\n} from './importerSlice'\nimport './Uploader.scss'\nimport ReactGA from 'react-ga'\nimport ThetaRhoImporter from './ThetaRhoImporter'\nimport GCodeImporter from './GCodeImporter'\nimport Importer from '../../models/Importer'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    fileName: state.importer.fileName,\n    comments: state.importer.comments,\n    vertices: state.importer.vertices,\n    zoom: state.importer.zoom,\n    aspectRatio: state.importer.aspectRatio,\n    options: new Importer().getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    setZoom: (event) => {\n      dispatch(updateImporter({zoom: parseFloat(event.target.value)}))\n    },\n    toggleAspectRatio: (event) => {\n      dispatch(toggleFileAspectRatio())\n    },\n    onChange: (attrs) => {\n      dispatch(updateImporter(attrs))\n    },\n  }\n}\n\nclass Uploader extends Component {\n  onFileImported(importer, importerProps) {\n    this.props.onChange(importerProps)\n\n    this.endTime = performance.now()\n    ReactGA.timing({\n      category: 'PatternImport',\n      variable: 'read' + importer.label,\n      value: this.endTime - this.startTime // in milliseconds\n    })\n  }\n\n  onFileSelected(event) {\n    let file = event.target.files[0]\n    let reader = new FileReader()\n\n    reader.onload = (event) => {\n      this.startTime = performance.now()\n      var text = reader.result\n\n      let importer\n      if (file.name.toLowerCase().endsWith('.thr')) {\n        importer = new ThetaRhoImporter(file.name, text)\n      } else if (file.name.toLowerCase().endsWith('.gcode') || file.name.toLowerCase().endsWith('.nc')) {\n        importer = new GCodeImporter(file.name, text)\n      }\n\n      importer.import(this.onFileImported.bind(this))\n    }\n\n    reader.readAsText(file)\n  }\n\n  render() {\n    var commentsRender = this.props.comments.map((comment, index) => {\n      return <span key={index}>{comment}<br/></span>\n    })\n\n    return (\n      <div>\n        <Card className=\"p-3 pb-4\">\n          <Accordion className=\"mb-4\">\n            <Card>\n              <Card.Header as={Form.Label} htmlFor=\"fileUpload\" style={{ cursor: \"pointer\" }}>\n                <h3>Import</h3>\n                Imports a pattern from a .thr, .gcode, or .nc file.\n                <Form.Control\n                    id=\"fileUpload\"\n                    type=\"file\"\n                    accept=\".thr,.gcode,.nc\"\n                    onChange={this.onFileSelected.bind(this)}\n                    style={{ display: \"none\" }} />\n              </Card.Header>\n            </Card>\n          </Accordion>\n\n          <CheckboxOption\n            onChange={this.props.onChange}\n            options={this.props.options}\n            optionKey=\"aspectRatio\"\n            key=\"aspectRatio\"\n            index={1}\n            model={this.props} />\n\n          <InputOption\n            onChange={this.props.onChange}\n            options={this.props.options}\n            key=\"zoom\"\n            optionKey=\"zoom\"\n            index={2}\n            model={this.props} />\n\n          { this.props.fileName && <div id=\"importer-comments\" className=\"mt-4 p-3\">\n            Name: {this.props.fileName} <br />\n            Number of points: {this.props.vertices.length } <br />\n            Comments:\n            <div className=\"ml-3\">\n              { commentsRender }\n            </div>\n          </div>}\n        </Card>\n\n        <div className=\"p-4\">\n          <h3>Where to get .thr files</h3>\n          Sisyphus machines use theta rho (.thr) files. There is a large community sharing them.\n          <ul className=\"list-unstyled\">\n            <li><a href=\"https://reddit.com/u/markyland\">Markyland on Reddit</a></li>\n            <li><a href=\"https://github.com/Dithermaster/sisyphus/\">Dithermaster's github</a></li>\n            <li><a href=\"https://github.com/SlightlyLoony/JSisyphus\">JSisyphus by Slightly Loony</a></li>\n            <li><a href=\"https://reddit.com/r/SisyphusIndustries\">Sisyphus on Reddit</a></li>\n            <li><a href=\"https://sisyphus-industries.com/community/community-tracks\">Sisyphus Community</a></li>\n            <li><a href=\"http://thejuggler.net/sisyphus/\">The Juggler</a></li>\n          </ul>\n\n          <h4 className=\"mt-3\">Note about copyrights</h4>\n          <p>Be careful and respectful. Understand that the original author put their labor, intensity, and ideas into this art. The creators have a right to own it (and they have a copyright, even if it doesn't say so).</p>\n          <p>If you don't have permisson (a license) to use their art, then you shouldn't be. If you do have permission to use their art, then you should be thankful, and I'm sure they would appreciate you sending them a note of thanks. A picture of your table creating their shared art would probably make them smile.</p>\n          <p>Someone posting the .thr file to a forum or subreddit probably wants it to be shared, and drawing it on your home table is probably OK. Just be careful if you want to use them for something significant without explicit permission.</p>\n          <p>I am not a lawyer.</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Uploader)\n","const machineOptions = {\n  minX: {\n    title: 'Min X (mm)',\n  },\n  maxX: {\n    title: 'Max X (mm)',\n  },\n  minY: {\n    title: 'Min Y (mm)',\n  },\n  maxY: {\n    title: 'Max Y (mm)',\n  },\n  origin: {\n    title: 'Force origin'\n  },\n  maxRadius: {\n    title: 'Max radius (mm)'\n  },\n  minimizeMoves: {\n    title: 'Try to minimize perimeter moves',\n    type: 'checkbox'\n  },\n  polarEndPoint: {\n    title: 'End point'\n  },\n  polarStartPoint: {\n    title: 'Start point'\n  }\n}\n\nexport default class Machine {\n  getOptions() {\n    return machineOptions\n  }\n}\n","import { createSlice } from \"@reduxjs/toolkit\"\n\n// accommodate old and new local storage keys\nconst localMinX = parseFloat(localStorage.getItem('minX') || localStorage.getItem('machine_min_x'))\nconst localMaxX = parseFloat(localStorage.getItem('maxX') || localStorage.getItem('machine_max_x'))\nconst localMinY = parseFloat(localStorage.getItem('minY') || localStorage.getItem('machine_min_y'))\nconst localMaxY = parseFloat(localStorage.getItem('maxY') || localStorage.getItem('machine_max_y'))\nconst localMaxRadius = parseFloat(localStorage.getItem('maxRadius') || localStorage.getItem('machine_radius'))\n\nconst machineSlice = createSlice({\n  name: 'machine',\n  initialState: {\n    rectangular: undefined !== localStorage.getItem('machine_rect_active') ? localStorage.getItem('machine_rect_active') < 2 : true,\n    rectExpanded: false,\n    polarExpanded: false,\n    minX: localMinX || 0,\n    maxX: localMaxX || 500,\n    minY: localMinY || 0,\n    maxY: localMaxY || 500,\n    maxRadius: localMaxRadius || 250,\n    minimizeMoves: JSON.parse(localStorage.getItem('minimizeMoves')) || false,\n    rectOrigin: [],\n    polarStartPoint: 'none',\n    polarEndPoint: 'none'\n  },\n  reducers: {\n    updateMachine(state, action) {\n      Object.assign(state, action.payload)\n      Object.keys(action.payload).forEach(key => {\n        localStorage.setItem(key, action.payload[key])\n      })\n    },\n    toggleMachineRectExpanded(state, action) {\n      state.rectangular = true\n      state.rectExpanded = !state.rectExpanded\n      state.polarExpanded = false\n      localStorage.setItem('machine_rect_active', 1)\n    },\n    toggleMachinePolarExpanded(state, action) {\n      state.rectangular = false\n      state.rectExpanded = false\n      state.polarExpanded = !state.polarExpanded\n      localStorage.setItem('machine_rect_active', 2)\n    },\n    setMachineRectOrigin(state, action) {\n      let newValue = []\n      let value = action.payload\n\n      for (let i = 0; i < value.length ; i++) {\n        if (!state.rectOrigin.includes(value[i])) {\n          newValue.push(value[i])\n          break\n        }\n      }\n      state.rectOrigin = newValue\n    },\n    toggleMinimizeMoves(state, action) {\n      state.minimizeMoves = !state.minimizeMoves\n      localStorage.setItem('minimizeMoves', state.minimizeMoves)\n    },\n  }\n})\n\nexport const {\n  updateMachine,\n  toggleMachineRectExpanded,\n  toggleMachinePolarExpanded,\n  setMachineRectOrigin,\n  setMachineSize,\n  toggleMinimizeMoves,\n} = machineSlice.actions\n\nexport default machineSlice.reducer\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Card,\n    Col,\n    Form,\n    Row,\n    ToggleButton,\n    ToggleButtonGroup,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport Machine from '../../models/Machine'\nimport {\n  updateMachine,\n  toggleMinimizeMoves,\n  toggleMachineRectExpanded,\n  setMachineRectOrigin\n} from './machineSlice'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    expanded: state.machine.rectExpanded,\n    active:   state.machine.rectangular,\n    minX:    state.machine.minX,\n    maxX:    state.machine.maxX,\n    minY:    state.machine.minY,\n    maxY:    state.machine.maxY,\n    origin:   state.machine.rectOrigin,\n    minimizeMoves: state.machine.minimizeMoves,\n    options: new Machine().getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    activeCallback: (event) => {\n      dispatch(toggleMachineRectExpanded())\n    },\n    onChange: (attrs) => {\n      dispatch(updateMachine(attrs))\n    },\n    onOriginChange: (value) => {\n      dispatch(setMachineRectOrigin(value))\n    },\n    toggleMinimizeMoves: () => {\n      dispatch(toggleMinimizeMoves());\n    },\n  }\n}\n\nclass RectSettings extends Component {\n  render() {\n    var activeClassName = this.props.active ? 'active' : ''\n\n    return (\n      <Card className={`${activeClassName} overflow-auto`}>\n        <Accordion.Toggle as={Card.Header} eventKey={0} onClick={this.props.activeCallback}>\n          <h3>Rectangular machine</h3>\n          Rectangular machines like Zen XY\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey={0}>\n          <Card.Body>\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"minX\"\n              optionKey=\"minX\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"maxX\"\n              optionKey=\"maxX\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"minY\"\n              optionKey=\"minY\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"maxY\"\n              optionKey=\"maxY\"\n              index={0}\n              model={this.props} />\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"origin\">\n                  Force origin\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <ToggleButtonGroup id=\"origin-bar\" type=\"checkbox\" name=\"origin\" className=\"flex-wrap\" value={this.props.origin} onChange={this.props.onOriginChange}>\n                  <ToggleButton variant=\"light\" value={1} >upper left</ToggleButton>\n                  <ToggleButton variant=\"light\" value={2} >upper right</ToggleButton>\n                  <ToggleButton variant=\"light\" value={0} >lower left</ToggleButton>\n                  <ToggleButton variant=\"light\" value={3} >lower right</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n\n            <CheckboxOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              optionKey=\"minimizeMoves\"\n              key=\"minimizeMoves\"\n              index={0}\n              model={this.props} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RectSettings)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Col,\n    Row,\n    Form,\n    Card,\n    ToggleButton,\n    ToggleButtonGroup\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport Machine from '../../models/Machine'\nimport {\n  toggleMachinePolarExpanded,\n  updateMachine,\n  toggleMinimizeMoves\n} from './machineSlice'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    expanded: state.machine.polarExpanded,\n    active: !state.machine.rectangular,\n    maxRadius: state.machine.maxRadius,\n    startPoint: state.machine.polarStartPoint,\n    endPoint: state.machine.polarEndPoint,\n    minimizeMoves: state.machine.minimizeMoves,\n    options: new Machine().getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    activeCallback: (event) => {\n      dispatch(toggleMachinePolarExpanded())\n    },\n    onChange: (attrs) => {\n      dispatch(updateMachine(attrs))\n    },\n    onStartPointChange: (value) => {\n      dispatch(updateMachine({polarStartPoint: value}))\n    },\n    onEndPointChange: (value) => {\n      dispatch(updateMachine({polarEndPoint: value}))\n    },\n    toggleMinimizeMoves: () => {\n      dispatch(toggleMinimizeMoves())\n    },\n  }\n}\n\nclass PolarSettings extends Component {\n  render() {\n    var activeClassName = this.props.active ? 'active' : ''\n\n    return (\n      <Card className={`${activeClassName} overflow-auto`}>\n        <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.activeCallback}>\n          <h3>Polar machine</h3>\n          Polar machines like Sisyphus\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey={1}>\n          <Card.Body>\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"maxRadius\"\n              optionKey=\"maxRadius\"\n              index={0}\n              model={this.props} />\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"forceStart\">\n                  Start point\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <ToggleButtonGroup id=\"startPoint\" type=\"radio\" name=\"startPoint\" value={this.props.startPoint} onChange={this.props.onStartPointChange}>\n                  <ToggleButton variant=\"light\" value=\"none\">none</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"center\">center</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"perimeter\">perimeter</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"endPoint\">\n                  End point\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <ToggleButtonGroup id=\"endPoint\" type=\"radio\" name=\"endPoint\" value={this.props.endPoint} onChange={this.props.onEndPointChange}>\n                  <ToggleButton variant=\"light\" value=\"none\">none</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"center\">center</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"perimeter\">perimeter</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n\n            <CheckboxOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              optionKey=\"minimizeMoves\"\n              key=\"minimizeMoves\"\n              index={0}\n              model={this.props} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PolarSettings)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion\n} from 'react-bootstrap'\nimport RectSettings from './RectSettings'\nimport PolarSettings from './PolarSettings'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    rectangular: state.machine.rectangular,\n  }\n}\n\nclass MachineSettings extends Component {\n  render() {\n    return (\n      <div className=\"p-3\">\n        <Accordion defaultActiveKey={this.props.rectangular ? 0 : 1}>\n          <RectSettings />\n          <PolarSettings />\n        </Accordion>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, null)(MachineSettings)\n","import React, { Component } from 'react'\n\nclass Footer extends Component {\n  render () {\n    return (\n      <footer className=\"p-4\">\n        <div>\n          <h2>About</h2>\n          <p>Sandify turns your cold, empty-hearted, emotionless sand tables into cold, empty-hearted, emotionless sand table robots with enchanting patterns.</p>\n          <p>\n            Sandify is a labor of love, but if you'd like to support me financially,\n            I do have a <a href=\"https://github.com/sponsors/jeffeb3\">Donation system set up <b>with github matching donations</b></a>. Or just <a href=\"https://www.paypal.me/jeffeb3\">PayPal</a>.\n          </p>\n        </div>\n\n        <div>\n          <h2>Sand Machine</h2>\n          <p>Anything that uses gcode can be used with Sandify. But the machine this was designed for is the ZenXY from V1Engineering.com.</p>\n          <p>\n            <a href=\"https://docs.v1engineering.com/zenxy/\">ZenXY on V1Engineering.com</a>\n            <br />\n            <a href=\"https://www.thingiverse.com/thing:2477901\">ZenXY Thingiverse Page</a>\n          </p>\n          <p>\n            ZenXY was inspired by the awesome Sisyphus kinetic art table by <a href=\"https://sisyphus-industries.com/\">Sisyphus Industries</a>, which is also now supported.\n          </p>\n          <p>\n            Sandify was created by users in the\n            <a href=\"https://forum.v1engineering.com/t/does-this-count-as-a-build/6037\"> V1Engineering.com forum</a>.\n          </p>\n        </div>\n\n        <div>\n          <h2>Github</h2>\n          <p>Sandify is hosted on Github <a href=\"https://github.com/jeffeb3/sandify\">here</a>. Please post any problems, feature requests or comments in our <a href=\"https://github.com/jeffeb3/sandify/issues\">issue tracker</a>.</p>\n          <p>Sandify is a community project. We want and need developers. <a href=\"https://github.com/jeffeb3/sandify/wiki#developer-info\">Help Sandify</a>.</p>\n        </div>\n\n        <div>\n          <h2>License</h2>\n          <p>\n            Sandify is licensed under the MIT license.\n          </p>\n          <p>\n            Patterns that you create and gcode generated with Sandify are not covered\n            under the Sandify license. They are your work and your copyright. Read our <a href=\"https://raw.githubusercontent.com/jeffeb3/sandify/master/LICENSE\">license</a>.\n          </p>\n        </div>\n      </footer>\n    )\n  }\n}\n\nexport default Footer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    sandifyVersion: '0.2.3', // Also change the version in package.json.\n    input: 'shape',\n  },\n  reducers: {\n    chooseInput(state, action) {\n      state.input = action.payload\n    },\n  }\n})\n\nexport const {\n  chooseInput\n} = appSlice.actions\n\nexport default appSlice.reducer\n","import React, { Component } from 'react'\nimport {\n    Tab,\n    Tabs,\n} from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport ShapeList from '../shapes/ShapeList'\nimport Uploader from '../importer/Uploader'\nimport MachineSettings from '../machine/MachineSettings'\nimport Footer from './Footer'\nimport { chooseInput } from '../app/appSlice'\nimport ReactGA from 'react-ga'\n\nclass InputTabs extends Component {\n  handleSelect(key) {\n    ReactGA.event({\n      category: 'InputTabs',\n      action: 'handleSelect: ' + key,\n    })\n    this.props.dispatch(chooseInput(key))\n  }\n\n  render() {\n    return (\n       <Tabs defaultActiveKey=\"shape\" onSelect={this.handleSelect.bind(this)} id=\"input-tabs\">\n         <Tab eventKey=\"shape\" title=\"Shapes\" className=\"full-page-tab\">\n           <ShapeList />\n         </Tab>\n\n         <Tab eventKey=\"machine\" title=\"Machine\" className=\"full-page-tab\">\n           <MachineSettings />\n         </Tab>\n\n         <Tab eventKey=\"code\" title=\"Import\" className=\"full-page-tab\">\n           <Uploader />\n         </Tab>\n\n         <Tab eventKey=\"about\" title=\"About\" className=\"full-page-tab\">\n           <Footer />\n         </Tab>\n       </Tabs>\n    )\n  }\n}\n\nexport default connect()(InputTabs)\n","import { createSlice } from \"@reduxjs/toolkit\"\n\nconst previewSlice = createSlice({\n  name: 'preview',\n  initialState: {\n    canvasWidth: 600,\n    canvasHeight: 600,\n    sliderValue: 0.0,\n    dragging: false\n  },\n  reducers: {\n    updatePreview(state, action) {\n      Object.assign(state, action.payload)\n    },\n    setPreviewSize(state, action) {\n      state.canvasHeight = action.payload\n      state.canvasWidth = action.payload\n    },\n  }\n})\n\nexport const {\n  updatePreview,\n  setPreviewSize,\n} = previewSlice.actions\n\nexport default previewSlice.reducer\n","import Victor from 'victor'\nimport Machine from './Machine'\nimport { distance } from '../../common/geometry'\n\nexport default class RectMachine extends Machine {\n  constructor(vertices, settings) {\n    super()\n    this.vertices = vertices\n    this.settings = settings\n    this.sizeX = Math.abs((settings.maxX - settings.minX) / 2.0)\n    this.sizeY = Math.abs((settings.maxY - settings.minY) / 2.0)\n  }\n\n  addEndpoints() {\n    if (this.settings.rectOrigin.length === 1) {\n      // OK, let's assign corners indices:\n      // [1]   [2]\n      //\n      //\n      // [0]   [3]\n      const corner = this.settings.rectOrigin[0]\n      const corners = [\n        new Victor(-this.sizeX, -this.sizeY),\n        new Victor(-this.sizeX, this.sizeY),\n        new Victor(this.sizeX, this.sizeY),\n        new Victor(this.sizeX, -this.sizeY)\n      ]\n\n      const first = this.vertices[0]\n      const last = this.vertices[this.vertices.length-1]\n      const maxRadius = Math.sqrt(Math.pow(2.0*this.sizeX, 2.0) + Math.pow(2.0*this.sizeY, 2.0)) / 2.0\n      let scale, outPoint\n\n      if (first.magnitude() <= last.magnitude()) {\n        // It's going outward\n        scale = maxRadius / last.magnitude()\n        outPoint = last\n      } else {\n        scale = maxRadius / first.magnitude()\n        outPoint = first\n      }\n\n      let clipped = this.clipLine(\n        outPoint,\n        Victor.fromObject(outPoint).multiply(new Victor(scale, scale))\n      )\n      const newPoint = clipped[clipped.length - 1]\n      if (outPoint === last) {\n        this.vertices = [this.vertices, this.tracePerimeter(newPoint, corners[corner], true)].flat()\n      } else {\n        this.vertices = [this.tracePerimeter(corners[corner], newPoint, true), this.vertices].flat()\n      }\n    }\n\n    return this\n  }\n\n  // Returns the distance along the perimeter between two points\n  perimeterDistance(v1, v2) {\n    return this.distance(this.tracePerimeter(v1, v2, true))\n  }\n\n  // Returns whether a given path lies on the perimeter of the rectangle\n  onPerimeter(v1, v2, delta=.0001) {\n    const dx = Math.abs(Math.abs(v1.x) - this.sizeX)\n    const dy = Math.abs(Math.abs(v1.y) - this.sizeY)\n    const rDx = Math.abs(v1.x - v2.x)\n    const rDy = Math.abs(v1.y - v2.y)\n\n    return (rDx < delta && dx < delta) || (rDy < delta && dy < delta)\n  }\n\n  // Given two perimeter points, traces the shortest valid path between them (stays on\n  // perimeter). Returns a list of intermediate points on that path (if any).\n  // On further consideration, this could be redone using Dijsktra's algorithm, I believe,\n  // but this works and is, I believe, reasonably efficient.\n  tracePerimeter(p1, p2, includeOriginalPoints=false) {\n    let points\n\n    if ((p1.x === p2.x && Math.abs(p1.x) === this.sizeX) || (p1.y === p2.y && (Math.abs(p1.y) === this.sizeY))) {\n      // on the same line; no connecting points needed\n      points = []\n    } else {\n      // horizontal or vertical orientation\n      let o1 = Math.abs(p1.x) === this.sizeX ? 'v' : 'h'\n      let o2 = Math.abs(p2.x) === this.sizeX ? 'v' : 'h'\n\n      if (o1 !== o2) {\n        // connects via a single corner\n        points = (o1 === 'h') ?\n          [new Victor(p2.x, p1.y)] :\n          [new Victor(p1.x, p2.y)]\n      } else {\n        // connects via two corners; find the shortest way around\n        if (o1 === 'h') {\n          let d1 = -2*this.sizeX - p1.x - p2.x\n          let d2 = 2*this.sizeX - p1.x - p2.x\n          let xSign = Math.abs(d1) > Math.abs(d2) ? 1 : -1\n\n          points = [\n            new Victor(Math.sign(xSign)*this.sizeX, Math.sign(p1.y)*this.sizeY),\n            new Victor(Math.sign(xSign)*this.sizeX, -Math.sign(p1.y)*this.sizeY)\n          ]\n        } else {\n          let d1 = -2*this.sizeY - p1.y - p2.y\n          let d2 = 2*this.sizeY - p1.y - p2.y\n          let ySign = Math.abs(d1) > Math.abs(d2) ? 1 : -1\n\n          points = [\n            new Victor(Math.sign(p1.x)*this.sizeX, Math.sign(ySign)*this.sizeY),\n            new Victor(-Math.sign(p1.x)*this.sizeX, Math.sign(ySign)*this.sizeY),\n          ]\n        }\n      }\n    }\n\n    if (includeOriginalPoints) {\n      points.unshift(p1)\n      points.push(p2)\n    }\n\n    return points\n  }\n\n  // Finds the nearest vertex that is in the bounds. This will change the shape. i.e. this\n  // doesn't care about the line segment, only about the point.\n  nearestVertex(vertex) {\n    return new Victor(\n      Math.min(this.sizeX, Math.max(-this.sizeX, vertex.x)),\n      Math.min(this.sizeY, Math.max(-this.sizeY, vertex.y))\n    )\n  }\n\n  // The guts of logic for this limits enforcer. It will take a single line (defined by\n  // start and end) and if the line goes out of bounds, returns the vertices around the\n  // outside edge to follow around without messing up the shape of the vertices.\n  clipLine(lineStart, lineEnd) {\n    var quadrantStart = this.pointLocation(lineStart)\n    var quadrantEnd = this.pointLocation(lineEnd)\n\n    if (quadrantStart === 0b0000 && quadrantEnd === 0b0000) {\n      // The line is inside the boundaries\n      return [lineStart, lineEnd]\n    }\n\n    if (quadrantStart === quadrantEnd) {\n      // We are in the same box, and we are out of bounds.\n      return [this.nearestVertex(lineStart), this.nearestVertex(lineEnd)]\n    }\n\n    if (quadrantStart & quadrantEnd) {\n      // These points are all on one side of the box.\n      return [this.nearestVertex(lineStart), this.nearestVertex(lineEnd)]\n    }\n\n    if (quadrantStart === 0b000) {\n      // We are exiting the box. Return the start, the intersection with the boundary, and the closest\n      // boundary point to the exited point.\n      var line = [lineStart]\n      line.push(this.boundPoint(lineStart, lineEnd))\n      line.push(this.nearestVertex(lineEnd))\n      return line\n    }\n\n    if (quadrantEnd === 0b000) {\n      // We are re-entering the box.\n      return [this.boundPoint(lineEnd, lineStart), lineEnd]\n    }\n\n    // We have reached a terrible place, where both points are oob, but it might intersect with the\n    // work area. First, define the boundaries as lines.\n    const sides = [\n      // left\n      [Victor(-this.sizeX, -this.sizeY), new Victor(-this.sizeX, this.sizeY)],\n      // right\n      [new Victor(this.sizeX, -this.sizeY), new Victor(this.sizeX, this.sizeY)],\n      // bottom\n      [new Victor(-this.sizeX, -this.sizeY), new Victor(this.sizeX, -this.sizeY)],\n      // top\n      [new Victor(-this.sizeX, this.sizeY), new Victor(this.sizeX, this.sizeY)],\n    ]\n\n    // Count up the number of boundary lines intersect with our line segment.\n    var intersections = []\n    for (var s=0; s<sides.length; s++) {\n      var intPoint = this.intersection(lineStart,\n                                   lineEnd,\n                                   sides[s][0],\n                                   sides[s][1])\n      if (intPoint) {\n        intersections.push(new Victor(intPoint.x, intPoint.y))\n      }\n    }\n\n    if (intersections.length !== 0) {\n      if (intersections.length !== 2) {\n        // We should never get here. How would we have something other than 2 or 0 intersections with\n        // a box?\n        console.log(intersections)\n        throw Error(\"Software Geometry Error\")\n      }\n\n      // The intersections are tested in some normal order, but the line could be going through them\n      // in any direction. This check will flip the intersections if they are reversed somehow.\n      if (Victor.fromObject(intersections[0]).subtract(lineStart).lengthSq() >\n          Victor.fromObject(intersections[1]).subtract(lineStart).lengthSq()) {\n        var temp = intersections[0]\n        intersections[0] = intersections[1]\n        intersections[1] = temp\n      }\n\n      return [...intersections, this.nearestVertex(lineEnd)]\n    }\n\n    // Damn. We got here because we have a start and end that are failing different boundary checks,\n    // and the line segment doesn't intersect the box. We have to crawl around the outside of the\n    // box until we reach the other point.\n    // Here, I'm going to split this line into two parts, and send each half line segment back\n    // through the clipLine algorithm. Eventually, that should result in only one of the other cases.\n    var midpoint = Victor.fromObject(lineStart).add(lineEnd).multiply(new Victor(0.5, 0.5))\n\n    // recurse, and find smaller segments until we don't end up in this place again.\n    return [...this.clipLine(lineStart, midpoint),\n            ...this.clipLine(midpoint, lineEnd)]\n  }\n\n  // Intersect the line with the boundary, and return the point exactly on the boundary.\n  // This will keep the shape. i.e. It will follow the line segment, and return the point on that line\n  // segment.\n  boundPoint(good, bad) {\n    const dx = good.x - bad.x\n    const dy = good.y - bad.y\n    const fixed = new Victor(bad.x, bad.y)\n    let distance = 0\n\n    if (bad.x < -this.sizeX || bad.x > this.sizeX) {\n      if (bad.x < -this.sizeX) {\n        // we are leaving the left\n        fixed.x = -this.sizeX\n      } else {\n        // we are leaving the right\n        fixed.x = this.sizeX\n      }\n\n      distance = (fixed.x - good.x) / dx\n      fixed.y = good.y + distance * dy\n\n      // We fixed x, but y might have the same problem, so we'll rerun this, with different points.\n      return this.boundPoint(good, fixed)\n    }\n\n    if (bad.y < -this.sizeY || bad.y > this.sizeY) {\n      if (bad.y < -this.sizeY) {\n        // we are leaving the bottom\n        fixed.y = -this.sizeY\n      } else {\n        // we are leaving the top\n        fixed.y = this.sizeY\n      }\n\n      distance = (fixed.y - good.y) / dy\n      fixed.x = good.x + distance * dx\n    }\n\n    return fixed\n  }\n\n  // Returns the distance walked from the first vertex to the last vertex.\n  distance(vertices) {\n    let d = 0\n    for(let i=0; i<vertices.length; i++) {\n      if (i > 0) d = d + distance(vertices[i], vertices[i-1])\n    }\n\n    return d\n  }\n\n  // Determines which of 8 neighbor areas the point is in:\n  //   https://stackoverflow.com/questions/3746274/line-intersection-with-aabb-rectangle\n  //           |          |\n  //   0b1001  |  0b0001  |  0b0101\n  //           |          |\n  // ------------------------------ y_max\n  //           |          |\n  //   0b1000  |  0b0000  |  0b0100\n  //           |          |\n  // ------------------------------ y_min\n  //           |          |\n  //   0b1010  |  0b0010  |  0b0110\n  //           |          |\n  //         x_min      x_max\n  //\n  pointLocation(point) {\n    let location = 0b0\n\n    if (point.x < -this.sizeX) {\n      location += 0b1000\n    } else if (point.x > this.sizeX) {\n      location += 0b0100\n    }\n\n    if (point.y < -this.sizeY) {\n      location += 0b0001\n    } else if (point.y > this.sizeY) {\n      location += 0b0010\n    }\n\n    return location\n  }\n\n  // Determines intersection with one of the sides.\n  intersection(lineStart, lineEnd, sideStart, sideEnd) {\n    let line = lineEnd.clone().subtract(lineStart)\n    let side = sideEnd.clone().subtract(sideStart)\n    let lineCrossSidePerp = line.x * side.y - line.y * side.x\n\n    // if line Cross side === 0, it means the lines are parallel so have infinite intersection points\n    if (lineCrossSidePerp === 0) {\n      return null\n    }\n\n    const diff = sideStart.clone().subtract(lineStart)\n    let t = (diff.x * side.y - diff.y * side.x) / lineCrossSidePerp\n    if (t < 0 || t >= 1) {\n      return null\n    }\n\n    const u = (diff.x * line.y - diff.y * line.x) / lineCrossSidePerp\n    if (u < 0 || u >= 1) {\n      return null\n    }\n\n    return lineStart.clone().add(line.clone().multiply(new Victor(t, t)))\n  }\n}\n","import ReactGA from 'react-ga'\nimport throttle from 'lodash/throttle'\nimport { evaluate } from 'mathjs'\nimport { distance, scale, rotate } from '../../common/geometry'\nimport PolarMachine from './PolarMachine'\nimport RectMachine from './RectMachine'\nimport Victor from 'victor'\n\nfunction track(vertex, data, loopIndex) {\n  const angle = data.trackLength * loopIndex / 16 * 2.0 * Math.PI\n  let radius = 1.0\n\n  if (data.trackGrowEnabled) {\n    radius = 1.0 + loopIndex / 10.0 * data.trackGrow / 100.0\n  }\n  return new Victor(\n    vertex.x + radius * data.trackValue * Math.cos(angle),\n    vertex.y + radius * data.trackValue * Math.sin(angle)\n  )\n}\n\nexport const transformShape = (data, vertex, amount, trackIndex=0, numLoops) => {\n  numLoops = numLoops || data.numLoops\n  let transformedVertex = vertex\n\n  if (data.repeatEnabled && data.growEnabled) {\n    let growAmount = 100\n    if (data.growMethod === 'function') {\n      try {\n        growAmount = data.growValue * evaluate(data.growMath, {i: amount})\n      }\n      catch (err) {\n        console.log(\"Error parsing grow function: \" + err)\n        growAmount = 200\n      }\n    } else {\n      growAmount = 100.0 + (data.growValue * amount)\n    }\n    transformedVertex = scale(transformedVertex, growAmount)\n  }\n\n  if (data.repeatEnabled && data.spinEnabled) {\n    let spinAmount = 0\n    if (data.spinMethod === 'function') {\n      try {\n        spinAmount = data.spinValue * evaluate(data.spinMath, {i: amount})\n      }\n      catch (err) {\n        console.log(\"Error parsing spin function: \" + err)\n        spinAmount = 0\n      }\n    } else {\n      const loopPeriod = numLoops / (parseInt(data.spinSwitchbacks) + 1)\n      const stage = amount/loopPeriod\n      const direction = (stage % 2 < 1 ? 1.0 : -1.0)\n      spinAmount = direction * (amount % loopPeriod) * data.spinValue\n      // Add in the amount it goes positive to the negatives, so they start at the same place.\n      if (direction < 0.0) {\n        spinAmount += loopPeriod * data.spinValue\n      }\n    }\n    transformedVertex = rotate(transformedVertex, spinAmount)\n  }\n\n  if (data.repeatEnabled && data.trackEnabled) {\n    transformedVertex = track(transformedVertex, data, trackIndex)\n  }\n\n  transformedVertex.rotateDeg(-data.rotation)\n  transformedVertex.addX({x: data.offsetX || 0}).addY({y: data.offsetY || 0})\n\n  return transformedVertex\n}\n\nfunction buildTrackLoop(vertices, transform, i, t) {\n  const numTrackLoops = transform.repeatEnabled ? transform.trackNumLoops : 1\n  const nextTrackVertex = transformShape(transform, vertices[0], 0, i + 1, numTrackLoops)\n  const backtrack = numTrackLoops > 1 && t === numTrackLoops - 1\n  let numVertices = vertices.length\n  let trackVertices = []\n  let trackDistances = []\n\n  for (var j=0; j<numVertices; j++) {\n    const amount = transform.transformMethod === 'smear' ? i + t + j/vertices.length : i + t\n    const trackVertex = transformShape(transform, vertices[j], amount, i, numTrackLoops)\n    trackVertices.push(trackVertex)\n\n    if (backtrack) {\n      trackDistances.push(distance(nextTrackVertex, trackVertex))\n    }\n  }\n\n  // backtrack to the vertex with the shortest distance to the first vertex in\n  // the next track loop; this minimizes the amount our shape draws over the\n  // previous shape, which is not visually appealing.\n  if (backtrack) {\n    let minIdx = 0\n    let minD = Number.MAX_SAFE_INTEGER\n\n    trackDistances.forEach((d, idx) => {\n      if (d <= minD) {\n        minD = d\n        minIdx = idx\n      }\n    })\n\n    if (minIdx !== 0) {\n      trackVertices = trackVertices.concat(trackVertices.slice(minIdx, trackVertices.length-1).reverse())\n    }\n  }\n\n  return trackVertices\n}\n\n// ensure vertices do not exceed machine boundary limits, and endpoints as needed\nexport const polishVertices = (vertices, machine) => {\n  vertices = vertices.map(vertex => Victor.fromObject(vertex))\n  const machineClass = machine.rectangular ? RectMachine : PolarMachine\n\n  if (vertices.length > 0) {\n    vertices = new machineClass(vertices, machine).polish().vertices\n  }\n\n  return vertices\n}\n\nexport const scaleImportedVertices = (importer, machine) => {\n  var x_scale = (machine.maxX - machine.minX)/2.0 * 0.01 * importer.zoom\n  var y_scale = (machine.maxY - machine.minY)/2.0 * 0.01 * importer.zoom\n\n  if (!machine.rectangular) {\n    x_scale = y_scale = machine.maxRadius * 0.01 * importer.zoom\n  }\n\n  if (importer.aspectRatio) {\n    const machine_aspect_ratio = y_scale / x_scale\n    if (importer.originalAspectRatio > machine_aspect_ratio) {\n      x_scale = x_scale / importer.originalAspectRatio * machine_aspect_ratio\n    } else {\n      y_scale = y_scale * importer.originalAspectRatio / machine_aspect_ratio\n    }\n  }\n\n  return importer.vertices.map( (vertex) => {\n    return {...vertex,\n      x: vertex.x * x_scale,\n      y: vertex.y * y_scale,\n    }\n  })\n}\n\nfunction reportTiming(time) {\n  time = Math.max(time, 0.01)\n  ReactGA.timing({\n    category: 'Compute',\n    variable: 'transformShapes',\n    value: time, // in milliseconds\n  });\n}\n\nconst throttledReportTiming = throttle(reportTiming, 1000, {trailing: true })\n\nexport const transformShapes = (vertices, transform) => {\n  const startTime = performance.now()\n  const numLoops = transform.repeatEnabled ? transform.numLoops : 1\n  const numTrackLoops = transform.repeatEnabled ? transform.trackNumLoops : 1\n  let outputVertices = []\n\n  let scaledVertices = vertices.map(vertex => {\n    return scale(vertex, 100.0 * transform.startingSize)\n  })\n\n  if (transform.transformMethod === 'smear' && transform.repeatEnabled) {\n    // remove last vertex; we don't want to return to our starting point when completing the shape\n    scaledVertices.pop()\n  }\n\n  if (transform.trackEnabled && numTrackLoops > 1) {\n    for (var i=0; i<numLoops; i++) {\n      for (var t=0; t<numTrackLoops; t++) {\n        outputVertices = outputVertices.concat(buildTrackLoop(scaledVertices, transform, i, t))\n      }\n    }\n  } else {\n    for (i=0; i<numLoops; i++) {\n      for (var j=0; j<scaledVertices.length; j++) {\n        let amount = transform.transformMethod === 'smear' ? i + j/scaledVertices.length : i\n        outputVertices.push(transformShape(transform, scaledVertices[j], amount, amount))\n      }\n    }\n  }\n\n  const endTime = performance.now()\n  throttledReportTiming(endTime - startTime)\n  return outputVertices\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\n// Determine default file type; this is a little fussy because we want to ensure\n// that if the user has a rectangular table, but somehow wants to export theta\n// rho (or vice versa), we'll save that setting.\nlet fileType\nif (localStorage.getItem('export_fileType')) {\n  fileType = localStorage.getItem('export_fileType')\n} else if (localStorage.getItem('machine_rect_active')) {\n  fileType = localStorage.getItem('machine_rect_active') ? 'GCode (.gcode)' : 'Theta Rho (.thr)'\n} else {\n  fileType = 'GCode (.gcode)'\n}\n\nconst exporterSlice = createSlice({\n  name: 'exporter',\n  initialState: {\n    fileName: 'sandify',\n    fileType: fileType,\n    pre: localStorage.getItem('export_pre') ? localStorage.getItem('export_pre') : '',\n    post: localStorage.getItem('export_post') ? localStorage.getItem('export_post') : '',\n    reverse: false,\n    show: false\n  },\n  reducers: {\n    updateExporter(state, action) {\n      Object.assign(state, action.payload)\n      Object.keys(action.payload).forEach(key => {\n        localStorage.setItem(\"export_\" + key, action.payload[key])\n      })\n    },\n  }\n})\n\nexport const {\n  updateExporter\n} = exporterSlice.actions\n\nexport default exporterSlice.reducer\n","import LRUCache from 'lru-cache'\nimport { createSelector } from 'reselect'\nimport Victor from 'victor'\nimport {\n  transformShapes,\n  transformShape,\n  polishVertices,\n  scaleImportedVertices\n} from './computer'\nimport { getShape } from '../shapes/selectors'\nimport { rotate, offset } from '../../common/geometry'\n\nconst cache = new LRUCache({\n  length: (n, key) => { return n.length },\n  max: 500000\n})\n\nconst getCacheKey = (state) => {\n  return JSON.stringify(state)\n}\n\nconst getApp = state => state.app\nconst getShapes = state => state.shapes\nconst getTransforms = state => state.transforms\nconst getCurrentShape = state => state.shapes.byId[state.shapes.currentId]\nconst getTransform = state => state.transforms.byId[state.shapes.currentId]\nconst getImporter = state => state.importer\nconst getMachine = state => state.machine\nconst getDragging = state => state.preview.dragging\n\n// by returning null for shapes which can change size, this selector will ensure\n// transformed vertices are not redrawn when machine settings change\nconst getTransformMachine = state => getTransform(state).canChangeSize ? null : state.machine\n\n// requires only shape, and in the case of erasers, machine state\nexport const getShapedVertices = createSelector(\n  [\n      getCurrentShape,\n      getTransformMachine\n  ],\n  (shape, machine) => {\n    const state = {\n      shape: shape,\n      machine: machine\n    }\n    const metashape = getShape(shape)\n    if (shape.shouldCache) {\n      const key = getCacheKey(state)\n      let vertices = cache.get(key)\n\n      if (!vertices) {\n        vertices = metashape.getVertices(state)\n        cache.set(key, vertices)\n        // for debugging purposes\n        // console.log('caching shape...' + cache.length + ' ' + cache.itemCount)\n      }\n\n      return vertices\n    } else {\n      return metashape.getVertices(state)\n    }\n  }\n)\n\n// requires shape and transform state\nexport const getTransformedVertices = createSelector(\n  [\n      getShapedVertices,\n      getTransform\n  ],\n  (vertices, transform) => {\n    return transformShapes(vertices, transform)\n  }\n)\n\n// requires shape, transform, and machine state\nexport const getComputedVertices = createSelector(\n  [\n      getTransformedVertices,\n      getMachine\n  ],\n  (vertices, machine) => {\n    return polishVertices(vertices, machine)\n  }\n)\n\n// requires importer and machine state\nexport const getImportedVertices = createSelector(\n  [\n    getImporter,\n    getMachine\n  ],\n  (importer, machine) => {\n    let vertices = scaleImportedVertices(importer, machine)\n    return polishVertices(vertices, machine)\n  }\n)\n\n// top-level vertex selector; makes use of Russian-doll cached selectors that are\n// only recalculated when their required states change.\nexport const getVertices = createSelector(\n  [\n      getApp,\n      getShapes,\n      getTransforms,\n      getImporter,\n      getMachine,\n      getDragging\n  ],\n  (app, shapes, transforms, importer, machine, dragging) => {\n    const state = {\n      app: app,\n      shapes: shapes,\n      transforms: transforms,\n      importer: importer,\n      machine: machine,\n      dragging: dragging\n    }\n\n    const hasImported = (state.app.input === 'code' || state.importer.fileName)\n    if (state.app.input === 'shapes' || !hasImported) {\n      if (dragging) {\n        return getTransformedVertices(state)\n      } else {\n        return getComputedVertices(state)\n      }\n    } else {\n      return getImportedVertices(state)\n    }\n  }\n)\n\nexport const getVerticesStats = createSelector(\n  [\n      getVertices\n  ],\n  (vertices) => {\n    let distance = 0.0\n    let previous = null\n\n    vertices.forEach( (vertex) => {\n      if (previous) {\n        distance += Math.sqrt(Math.pow(vertex.x - previous.x, 2.0) +\n                              Math.pow(vertex.y - previous.y, 2.0))\n      }\n      previous = vertex\n    })\n\n    return {\n      numPoints: vertices.length,\n      distance: Math.floor(distance)\n    }\n  }\n)\n\n// used by the preview window; reverses rotation and offsets because they are\n// re-added by Konva transformer.\nexport const getPreviewVertices = createSelector(\n  [\n      getApp,\n      getShapes,\n      getTransforms,\n      getTransform,\n      getImporter,\n      getMachine,\n      getDragging\n   ],\n  (app, shapes, transforms, transform, importer, machine, dragging) => {\n    const state = {\n      app: app,\n      shapes: shapes,\n      transform: transform,\n      transforms: transforms,\n      importer: importer,\n      machine: machine,\n    }\n    const hasImported = (state.app.input === 'code' || state.importer.fileName)\n    const konvaScale = 5 // our transformer is 5 times bigger than the actual starting shape\n    const konvaDelta = (konvaScale - 1)/2 * transform.startingSize\n    let vertices\n\n    if (state.app.input === 'shape' || !hasImported) {\n      if (dragging) {\n        vertices = getTransformedVertices(state)\n      } else {\n        vertices = getComputedVertices(state)\n      }\n\n      return vertices.map(vertex => {\n        return offset(rotate(offset(vertex, -transform.offsetX, -transform.offsetY), transform.rotation), konvaDelta, -konvaDelta)\n      })\n    } else {\n      vertices = getImportedVertices(state)\n      return vertices.map(vertex => {\n        return offset(vertex, konvaDelta, -konvaDelta)\n      })\n    }\n  }\n)\n\n// used by the preview window; reverses rotation and offsets because they are\n// re-added by Konva transformer.\nexport const getPreviewTrackVertices = createSelector(\n  [\n    getTransform\n  ],\n  (transform) => {\n    const numLoops = transform.numLoops\n    const konvaScale = 5 // our transformer is 5 times bigger than the actual starting shape\n    const konvaDelta = (konvaScale - 1)/2 * transform.startingSize\n    let trackVertices = []\n\n    for (var i=0; i<numLoops; i++) {\n      if (transform.trackEnabled) {\n        trackVertices.push(transformShape(transform, new Victor(0.0, 0.0), i, i))\n      }\n    }\n\n    return trackVertices.map(vertex => {\n      return offset(rotate(offset(vertex, -transform.offsetX, -transform.offsetY), transform.rotation), konvaDelta, -konvaDelta)\n    })\n  }\n)\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Shape, Transformer } from 'react-konva'\nimport Color from 'color'\nimport Victor from 'victor'\nimport { updatePreview } from './previewSlice'\nimport { getPreviewVertices, getPreviewTrackVertices } from '../machine/selectors'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport { updateTransform } from '../transforms/transformsSlice'\nimport { roundP } from '../../common/util'\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n  const hasImported = (state.app.input === 'code' || state.importer.fileName)\n\n  return {\n    use_rect: state.machine.rectangular,\n    minX: state.machine.minX,\n    maxX: state.machine.maxX,\n    minY: state.machine.minY,\n    maxY: state.machine.maxY,\n    maxRadius: state.machine.maxRadius,\n    canvasWidth: state.preview.canvasWidth,\n    canvasHeight: state.preview.canvasHeight,\n    transform: transform,\n    trackVertices: getPreviewTrackVertices(state),\n    vertices: getPreviewVertices(state),\n    selectedId: state.shapes.selectedId,\n    sliderValue: state.preview.sliderValue,\n    showTrack: state.app.input === 'shape' || !hasImported,\n  }\n}\n\n// Renders the shapes in the preview window and allows the user to interact with the shape.\nconst PreviewShape = () => {\n  const props = useSelector(mapStateToProps)\n  const dispatch = useDispatch()\n  const startingSize = props.transform.startingSize\n\n  // our transformer is 5 times bigger than the actual starting shape, so we need\n  // to account for it when drawing the preview; if you change this value, be sure\n  // to change it in machine/selectors#getPreviewVertices,getPreviewTrackVertices\n  const konvaScale = 5\n  const konvaSize = startingSize * konvaScale\n  const isSelected = props.selectedId !== null\n\n  function mmToPixels(vertex) {\n    // y for pixels starts at the top, and goes down.\n    return new Victor(vertex.x + startingSize/2, -vertex.y + startingSize/2)\n  }\n\n  function moveTo_mm(context, vertex) {\n    var in_mm = mmToPixels(vertex)\n    context.moveTo(in_mm.x, in_mm.y)\n  }\n\n  function lineTo_mm(context, vertex) {\n    var in_mm = mmToPixels(vertex)\n    context.lineTo(in_mm.x, in_mm.y)\n  }\n\n  function dot_mm(context, vertex) {\n    var in_mm = mmToPixels(vertex)\n    context.arc(in_mm.x, in_mm.y, Math.max(4.0, 1.5), 0, 2 * Math.PI, true)\n    context.fillStyle = context.strokeStyle\n    context.fill()\n  }\n\n  function sliderVertexRange(vertices, sliderValue) {\n    const slide_size = 10.0\n    if (sliderValue === 0) {\n      return [0, vertices.length - 1]\n    }\n\n    // Let's start by just assuming we want a slide_size sized window, as a percentage of the whole\n    // thing.\n    const begin_fraction = sliderValue / 100.0\n    const end_fraction = (slide_size + sliderValue) / 100.0\n    let begin_vertex = Math.round(vertices.length * begin_fraction)\n    let end_vertex = Math.round(vertices.length * end_fraction)\n\n    // never return less than two vertices; this keeps the preview slider smooth even when\n    // there are just a few vertices\n    if (begin_vertex === end_vertex) {\n      if (begin_vertex > 1) begin_vertex = begin_vertex - 2\n    } else if (begin_vertex === end_vertex - 1) {\n      if (begin_vertex > 0) begin_vertex = begin_vertex - 1\n    }\n\n    return [begin_vertex, end_vertex]\n  }\n\n  function sceneFunc(context, shape) {\n    if (props.vertices && props.vertices.length > 0) {\n      let sliderRange = sliderVertexRange(props.vertices, props.sliderValue)\n      let drawing_vertices = props.vertices.slice(sliderRange[0], sliderRange[1] + 1)\n\n      // Draw the background vertices\n      if (props.sliderValue !== 0) {\n        context.beginPath()\n        context.lineWidth = 1\n        context.strokeStyle = Color('#6E6E00')\n        moveTo_mm(context, props.vertices[0])\n\n        for (let i=0; i<props.vertices.length; i++) {\n          if (i === sliderRange[1]-1) {\n            context.stroke()\n            context.beginPath()\n            context.strokeStyle = \"rgba(204, 204, 204, 0.35)\"\n          }\n          lineTo_mm(context, props.vertices[i])\n        }\n        context.stroke()\n      }\n\n      if (props.trackVertices && props.trackVertices.length > 0 && props.showTrack) {\n        // Draw the track vertices\n        context.beginPath()\n        context.lineWidth = 4.0\n        context.strokeStyle = \"green\"\n        moveTo_mm(context, props.trackVertices[0])\n        for (let i=0; i<props.trackVertices.length; i++) {\n          lineTo_mm(context, props.trackVertices[i])\n        }\n        context.stroke()\n      }\n\n      if (drawing_vertices.length > 0) {\n        // Draw the slider path vertices\n        var startColor = Color('#6E6E00')\n        const colorStep = 200.0 / drawing_vertices.length / 100\n\n        context.beginPath()\n        context.lineWidth = 1\n        moveTo_mm(context, drawing_vertices[0])\n        context.stroke()\n\n        for (let i=1; i<drawing_vertices.length; i++) {\n          const strokeColor = props.sliderValue !== 0 ? startColor.lighten(colorStep * i).hex() : 'yellow'\n\n          context.beginPath()\n          context.strokeStyle = strokeColor\n          context.lineWidth = 1\n          moveTo_mm(context, drawing_vertices[i-1])\n          lineTo_mm(context, drawing_vertices[i])\n          context.stroke()\n        }\n      }\n\n      // Draw the start and end points\n      context.beginPath()\n      context.lineWidth = 2.0\n      context.strokeStyle = \"green\"\n      dot_mm(context, props.vertices[0])\n      context.stroke()\n      context.beginPath()\n      context.lineWidth = 2.0\n      context.strokeStyle = \"red\"\n      dot_mm(context, props.vertices[props.vertices.length-1])\n      context.stroke()\n\n      // Draw a slider path end point if sliding\n      if (drawing_vertices.length > 0 && props.sliderValue !== 0) {\n        const sliderEndPoint = drawing_vertices[drawing_vertices.length - 1]\n\n        context.beginPath()\n        context.strokeStyle = \"yellow\"\n        context.lineWidth = 6.0\n        dot_mm(context, sliderEndPoint)\n\n        // START: uncomment these lines to show slider end point coordinates\n        // context.font = \"20px Arial\"\n        // context.fillText('(' + sliderEndPoint.x.toFixed(2) + ', ' + sliderEndPoint.y.toFixed(2) + ')', 10, 50)\n        // END\n        context.stroke()\n      }\n    }\n\n    context.fillStrokeShape(shape)\n  }\n\n  function hitFunc(context) {\n    const vertices = props.vertices\n    if (vertices && vertices.length > 0) {\n      moveTo_mm(context, vertices[0])\n\n      for (let i=1; i<vertices.length; i++) {\n        moveTo_mm(context, vertices[i-1])\n        lineTo_mm(context, vertices[i])\n      }\n    }\n\n    context.fillStrokeShape(this)\n  }\n\n  function onChange(attrs) {\n    attrs.id = props.transform.id\n    dispatch(updateTransform(attrs))\n  }\n\n  function onPreviewChange(attrs) {\n    dispatch(updatePreview(attrs))\n  }\n\n  function onSelect() {\n    dispatch(updatePreview({selectedId: props.selectedId == null ? props.transform.id : null }))\n  }\n\n  const shapeRef = React.createRef()\n  const trRef = React.createRef()\n\n  React.useEffect(() => {\n    if (isSelected && props.transform.canChangeSize && props.showTrack) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current])\n      trRef.current.getLayer().batchDraw()\n    }\n  }, [isSelected, props.transform, props.showTrack, shapeRef, trRef])\n\n  return (\n    <React.Fragment>\n      <Shape\n        draggable={props.showTrack}\n        width={konvaSize}\n        height={konvaSize}\n        offsetY={konvaSize/2}\n        offsetX={konvaSize/2}\n        x={(props.showTrack && props.transform.offsetX) || 0}\n        y={(props.showTrack && -props.transform.offsetY) || 0}\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...props}\n        strokeWidth={1}\n        rotation={(props.showTrack && props.transform.rotation) || 0}\n        sceneFunc={sceneFunc}\n        hitFunc={hitFunc}\n        onDragStart={e => {\n          onPreviewChange({dragging: true})\n        }}\n        onDragEnd={e => {\n          onPreviewChange({dragging: false})\n          onChange({\n            offsetX: roundP(e.target.x(), 0),\n            offsetY: roundP(-e.target.y(), 0)\n          })\n        }}\n        onTransformStart={e => {\n          onPreviewChange({dragging: true})\n        }}\n        onTransformEnd={e => {\n          const node = shapeRef.current\n          const scaleX = node.scaleX()\n          // const scaleY = node.scaleY()\n\n          // we will reset it back\n          node.scaleX(1)\n          node.scaleY(1)\n\n          onPreviewChange({dragging: false})\n          onChange({\n            startingSize: roundP(Math.max(5, props.transform.startingSize * scaleX), 0),\n            rotation: roundP(node.rotation(), 0)\n          })\n        }}\n      />\n      {isSelected && props.transform.canChangeSize && props.showTrack && (\n        <Transformer\n          ref={trRef}\n          centeredScaling={true}\n          resizeEnabled={!props.transform.trackEnabled}\n          rotationSnaps={[0, 90, 180, 270]}\n          enabledAnchors={['top-left', 'top-right', 'bottom-left', 'bottom-right']}\n        />\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default PreviewShape\n","import React, { Component } from 'react'\nimport { connect, ReactReduxContext, Provider } from 'react-redux'\nimport { Stage, Layer, Circle, Rect } from 'react-konva'\nimport throttle from 'lodash/throttle'\nimport { setPreviewSize, updatePreview } from './previewSlice'\nimport { updateTransform } from '../transforms/transformsSlice'\nimport { getCurrentTransformSelector } from '../shapes/selectors'\nimport { roundP } from '../../common/util'\nimport PreviewShape from './PreviewShape'\n\nexport const relativeScale = (props) => {\n  let width, height\n\n  if (props.use_rect) {\n    width = props.maxX - props.minX\n    height = props.maxY - props.minY\n  } else {\n    width = height = props.maxRadius * 2.0\n  }\n\n  // keep it square\n  return Math.min(props.canvasWidth / width, props.canvasHeight / height)\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const transform = getCurrentTransformSelector(state)\n\n  return {\n    transform: transform,\n    selectedId: state.shapes.selectedId,\n    use_rect: state.machine.rectangular,\n    minX: state.machine.minX,\n    maxX: state.machine.maxX,\n    minY: state.machine.minY,\n    maxY: state.machine.maxY,\n    maxRadius: state.machine.maxRadius,\n    canvasWidth: state.preview.canvasWidth,\n    canvasHeight: state.preview.canvasHeight,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onResize: (size) => {\n      dispatch(setPreviewSize(size))\n    },\n    onChange: (attrs) => {\n      dispatch(updatePreview(attrs))\n    },\n    onTransformChange: (attrs) => {\n      dispatch(updateTransform(attrs))\n    }\n  }\n}\n\n// Contains the preview window, and any parameters for the machine.\nclass PreviewWindow extends Component {\n  componentDidMount() {\n    const wrapper = document.getElementById('preview-wrapper')\n\n    this.throttledResize = throttle(this.resize, 200, {trailing: true}).bind(this)\n    window.addEventListener('resize', () => { this.throttledResize(wrapper) }, false)\n    setTimeout(() => {\n      this.visible = true\n      this.resize(wrapper)\n    }, 250)\n  }\n\n  resize(wrapper) {\n    const width = parseInt(getComputedStyle(wrapper).getPropertyValue('width'))\n    const height = parseInt(getComputedStyle(wrapper).getPropertyValue('height'))\n    const size = Math.max(Math.min(width, height))\n\n    if (this.props.canvasWidth !== size) {\n      this.props.onResize(size)\n    }\n  }\n\n  render() {\n    const {minX, minY, maxX, maxY} = this.props\n    const radius = this.props.maxRadius\n    const scale = relativeScale(this.props)\n    const reduceScale = 0.95\n    const width = this.props.use_rect ? maxX - minX : radius * 2\n    const height = this.props.use_rect ? maxY - minY : radius * 2\n    const visibilityClass = `preview-wrapper ${this.visible ? 'd-flex align-items-center' : 'd-none'}`\n\n    const checkDeselect = e => {\n      // deselect when clicked on empty area\n      if (e.target.className !== undefined && e.target.className !== 'Rect') {\n        this.props.onChange({selectedId: null})\n      }\n     }\n\n     // define Konva clip functions that will let us clip vertices not bound by\n     // machine limits when dragging, and produce a visually seamless experience.\n     const clipCircle = ctx => {\n       ctx.arc(0, 0, radius, 0, Math.PI * 2, false)\n     }\n     const clipRect = ctx => {\n       ctx.rect(-width/2, -height/2, width, height)\n     }\n\n    const scaleByWheel = (size, deltaY) => {\n      const sign = Math.sign(deltaY)\n      const scale = 1 + Math.log(Math.abs(deltaY))/30 * sign\n      let newSize = Math.max(roundP(size * scale, 0), 1)\n      if (newSize === size) {\n        // If the log scaled value isn't big enough to move the scale.\n        newSize = Math.max(sign+size, 1)\n      }\n      return newSize\n    }\n    return (\n      // the consumer wrapper is needed to pass the store down to our shape\n      // which is not our usual React Component\n      <ReactReduxContext.Consumer>\n        {({store}) => (\n          <Stage className={visibilityClass}\n            scaleX={scale * reduceScale}\n            scaleY={scale * reduceScale}\n            height={height * scale}\n            width={width * scale}\n            onMouseDown={checkDeselect}\n            onTouchStart={checkDeselect}\n            offsetX={-width/2*(1/reduceScale)}\n            offsetY={-height/2*(1/reduceScale)}\n            onWheel={e => {\n              e.evt.preventDefault()\n              if (Math.abs(e.evt.deltaY) > 0) {\n                this.props.onTransformChange({\n                  startingSize: scaleByWheel(this.props.transform.startingSize, e.evt.deltaY),\n                  id: this.props.selectedId\n                })\n              }\n            }}\n            >\n            <Provider store={store}>\n              <Layer clipFunc={this.props.use_rect ? clipRect : clipCircle}>\n                {!this.props.use_rect && <Circle x={0} y={0} radius={radius}\n                  fill=\"transparent\"\n                  stroke=\"gray\"\n                />}\n                {this.props.use_rect && <Rect x={0} y={0} width={width} height={height}\n                  fill=\"transparent\"\n                  stroke=\"gray\"\n                  offsetX={width/2}\n                  offsetY={height/2}\n                />}\n                <PreviewShape />\n              </Layer>\n            </Provider>\n          </Stage>\n        )}\n      </ReactReduxContext.Consumer>\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(PreviewWindow)\n","export default class Exporter {\n  constructor(props) {\n    this.props = props\n    this.lines = []\n  }\n\n  export() {\n    this.header()\n    this.startComments()\n    this.props.comments.forEach( comment => this.line(comment) )\n    this.line()\n    this.keyValueLine('File name', \"'\" + this.props.fileName + \"'\")\n    this.line()\n    this.endComments()\n    if (this.props.pre !== '') {\n      this.startComments()\n      this.line('BEGIN PRE')\n      this.endComments()\n      this.line(this.props.pre, this.props.pre !== '')\n      this.startComments()\n      this.line('END PRE')\n      this.endComments()\n    }\n\n    let vertices = this.props.vertices\n    if (this.props.reverse) {\n      vertices = vertices.reverse()\n    }\n\n    this.line()\n    this.exportCode(vertices)\n    this.line()\n\n    if (this.props.post !== '') {\n      this.startComments()\n      this.line('BEGIN POST')\n      this.endComments()\n      this.line(this.props.post, this.props.post !== '')\n      this.startComments()\n      this.line('END POST')\n      this.endComments()\n    }\n    this.footer()\n    this.line()\n\n    return this.lines\n  }\n\n  header() {\n    // default does nothing\n  }\n\n  footer() {\n    // default does nothing\n  }\n\n  line(content='', add=true) {\n    if (add) {\n      let padding = ''\n      if (this.commenting) {\n        padding = this.commentChar + (content.length > 0 ? ' ' : '')\n        for (let i=0; i<this.indentLevel; i++) {\n          padding += '  '\n        }\n      }\n      this.lines.push(padding + content)\n    }\n  }\n\n  keyValueLine(key, value, add=true) {\n    this.line(key + ': ' + value, add)\n  }\n\n  optionLine(metamodel, instance, option, add=true) {\n    this.line(metamodel.getOptions()[option].title + ': ' + instance[option], add)\n  }\n\n  optionLines(metamodel, instance, options, add=true) {\n    options.forEach(option => {\n      this.optionLine(metamodel, instance, option, add)\n    })\n  }\n\n  indent() {\n    this.indentLevel++\n  }\n\n  dedent() {\n    this.indentLevel--\n  }\n\n  startComments() {\n    this.commenting = true\n  }\n\n  endComments() {\n    this.commenting = false\n  }\n}\n","import { getShape } from '../shapes/selectors'\nimport Machine from '../../models/Machine'\nimport Transform from '../../models/Transform'\nimport Exporter from './Exporter'\n\nexport default class CommentExporter extends Exporter {\n  constructor(props) {\n    super(props)\n    this.indentLevel = 0\n    this.startComments()\n    this.commentChar = ''\n  }\n\n  export() {\n    const state = this.props\n    const machine = new Machine()\n    const transform = new Transform()\n    let instance = state.machine\n\n    this.line('Created by Sandify')\n    this.line('https://sandify.org')\n    this.keyValueLine('Version', state.app.sandifyVersion)\n    this.line()\n\n    this.keyValueLine('Machine type', state.machine.rectangular ? 'Rectangular' : 'Polar')\n    this.indent()\n    this.optionLines(machine, instance, ['minX', 'maxX', 'minY', 'maxY'], state.machine.rectangular)\n    this.optionLines(machine, instance,  ['maxRadius', 'polarStartPoint', 'polarEndPoint'], !state.machine.rectangular)\n    this.dedent()\n\n    this.keyValueLine('Content type', state.app.input)\n    this.indent()\n\n    switch (state.app.input) {\n      case 'shape': // shapes\n        instance = state.shapes.byId[state.shapes.currentId]\n        const shape = getShape(instance)\n        const options = shape.getOptions()\n\n        this.keyValueLine('Selected Shape', shape.name)\n        this.optionLines(shape, instance, Object.keys(options))\n        this.optionLines(transform, state.transform, ['offsetX', 'offsetY'])\n        this.optionLines(transform, state.transform, ['numLoops', 'transformMethod', 'spinEnabled'], state.transform.repeatEnabled)\n        this.indent()\n        this.optionLines(transform, state.transform, ['spinValue', 'spinMethod'], state.transform.repeatEnabled && state.transform.spinEnabled)\n        this.indent()\n        this.optionLine(transform, state.transform, 'spinMath', state.transform.repeatEnabled && state.transform.spinEnabled && state.transform.spinMethod === 'function')\n        this.optionLine(transform, state.transform, 'spinSwitchbacks', state.transform.repeatEnabled && state.transform.spinEnabled && state.transform.spinMethod === 'constant')\n        this.dedent()\n        this.dedent()\n        this.optionLine(transform, state.transform, 'growEnabled', state.transform.repeatEnabled)\n        this.indent()\n        this.optionLine(transform, state.transform, 'growValue', state.transform.repeatEnabled && state.transform.growEnabled)\n        this.optionLine(transform, state.transform, 'growMethod', state.transform.repeatEnabled && state.transform.growEnabled)\n        this.indent()\n        this.optionLine(transform, state.transform, 'growMath', state.transform.repeatEnabled && state.transform.growEnabled && state.transform.growMethod === 'function')\n        this.dedent()\n        this.dedent()\n        this.optionLine(transform, state.transform, 'trackEnabled', state.transform.repeatEnabled)\n        this.indent()\n        this.optionLines(transform, state.transform, ['trackValue', 'trackLength', 'trackNumLoops'], state.transform.repeatEnabled && state.transform.trackEnabled)\n        this.optionLine(transform, state.transform, 'trackGrowEnabled', state.transform.repeatEnabled && state.transform.trackEnabled)\n        this.indent()\n        this.optionLine(transform, state.transform, 'trackGrow', state.transform.repeatEnabled && state.transform.trackGrowEnabled)\n        this.dedent()\n        this.dedent()\n        break\n\n      case 'code':\n        this.keyValueLine('Input file', state.importer.fileName)\n        this.keyValueLine('Zoom', state.importer.zoom)\n        this.keyValueLine('Aspect ratio', state.importer.aspectRatio)\n        break\n\n      default:\n        break\n    }\n\n    this.dedent()\n    this.keyValueLine('Path reversed', state.exporter.reverse)\n    return this.lines\n  }\n}\n","import { createSelector } from 'reselect'\nimport CommentExporter from './CommentExporter'\n\nconst getApp = state => state.app\nconst getShapes = state => state.shapes\nconst getTransforms = state => state.transforms\nconst getImporter = state => state.importer\nconst getExporter = state => state.exporter\nconst getMachine = state => state.machine\n\nexport const getComments = createSelector(\n  [\n      getApp,\n      getShapes,\n      getTransforms,\n      getImporter,\n      getExporter,\n      getMachine,\n  ],\n  (app, shapes, transforms, importer, exporter, machine) => {\n    const state = {\n      app: app,\n      shapes: shapes,\n      shape: shapes.byId[shapes.currentId],\n      transforms: transforms,\n      transform: transforms.byId[shapes.currentId],\n      importer: importer,\n      exporter: exporter,\n      machine: machine\n    }\n\n    return new CommentExporter(state).export()\n  }\n)\n","import Victor from 'victor'\nimport Exporter from './Exporter'\n\nfunction thetarho(vertex) {\n  return '' + vertex.x.toFixed(5) + ' ' + vertex.y.toFixed(5)\n}\n\nexport default class ThetaRhoExporter extends Exporter {\n  constructor(props) {\n    super(props)\n    this.fileExtension = '.thr'\n    this.label = 'ThetaRho'\n    this.commentChar = '#'\n  }\n\n  // adds lines mapping given vertices to the theta rho format\n  exportCode(vertices) {\n    // First, downsample larger lines into smaller ones.\n    const maxLength = 2.0\n    let subsampledVertices = []\n    let previous = undefined\n    let next\n\n    for (next = 0; next < vertices.length; next++) {\n      if (previous !== undefined) {\n        const start = Victor.fromObject(vertices[previous])\n        const end = Victor.fromObject(vertices[next])\n\n        const delta = end.clone().subtract(start)\n        const deltaSegment = end.clone().subtract(start).normalize().multiply(Victor(maxLength, maxLength))\n\n        // This loads up (start, end].\n        for (let step = 0; step < (delta.magnitude() / maxLength) ; step++) {\n          subsampledVertices.push(\n            new Victor(start.x + step * deltaSegment.x,\n                       start.y + step * deltaSegment.y))\n        }\n\n      }\n      previous = next\n    }\n\n    // Add in the end.\n    if (previous !== undefined) {\n      subsampledVertices.push(vertices[vertices.length - 1])\n    }\n\n    // Convert to Theta, Rho\n    let trVertices = []\n    let previousTheta = 0\n    let previousRawTheta = 0\n\n    for (next = 0; next < subsampledVertices.length; ++next) {\n      // Normalize the radius\n      const rho = Victor.fromObject(subsampledVertices[next]).magnitude() / this.props.maxRadius\n\n      // What is the basic theta for this point?\n      let rawTheta = Math.atan2(subsampledVertices[next].x,\n                                subsampledVertices[next].y)\n      // Convert to [0,2pi]\n      rawTheta = (rawTheta + 2.0 * Math.PI) % (2.0 * Math.PI)\n\n      // Compute the difference to the last point.\n      let deltaTheta = rawTheta - previousRawTheta\n\n      // Convert to [-pi,pi]\n      if (deltaTheta < -Math.PI) {\n        deltaTheta += 2.0 * Math.PI\n      }\n      if (deltaTheta > Math.PI) {\n        deltaTheta -= 2.0 * Math.PI\n      }\n\n      const theta = previousTheta + deltaTheta\n      previousRawTheta = rawTheta\n      previousTheta = theta\n      trVertices.push(new Victor(theta, rho))\n    }\n\n    trVertices.map(thetarho).forEach(line => this.line(line))\n  }\n}\n","import Exporter from './Exporter'\n\nexport default class GCodeExporter extends Exporter {\n  constructor(props) {\n    super(props)\n    this.fileExtension = '.gcode'\n    this.label = 'Gcode'\n    this.commentChar = ';'\n  }\n\n  exportCode(vertices) {\n    var centeredVertices = vertices.map( (vertex) => {\n      return {\n        ...vertex,\n        x: vertex.x + this.props.offsetX,\n        y: vertex.y + this.props.offsetY,\n      }\n    })\n\n    centeredVertices.map(this.gcode).forEach(line => this.line(line))\n  }\n\n  gcode(vertex) {\n    let command = 'G01' +\n      ' X' + vertex.x.toFixed(3) +\n      ' Y' + vertex.y.toFixed(3)\n    return command\n  }\n}\n","import Exporter from './Exporter'\nimport { path } from 'd3'\n\nexport default class SvgExporter extends Exporter {\n  constructor(props) {\n    super(props)\n    this.fileExtension = '.svg'\n    this.label = 'SVG'\n    this.indentLevel = 2\n  }\n\n  exportCode(vertices) {\n    var centeredVertices = vertices.map( (vertex) => {\n      return {\n        ...vertex,\n        x: vertex.x + this.props.width / 2,\n        y: this.props.height - (vertex.y + this.props.height / 2),\n      }\n    })\n\n    let svg = path()\n    if (centeredVertices.length > 0) {\n      const firstPoint = centeredVertices[0]\n      svg.moveTo(firstPoint.x, firstPoint.y)\n    }\n    centeredVertices.forEach(vertex => svg.lineTo(vertex.x, vertex.y))\n    this.line(\"    <desc>pwidth:\" + this.props.width + \";pheight:\" + this.props.height + \";</desc>\")\n    this.line(\"    <path\")\n    this.line(\"       stroke=\\\"#000000\\\"\")\n    this.line(\"       stroke-width=\\\"0.4mm\\\"\")\n    this.line(\"       fill=\\\"none\\\"\")\n    this.line(\"       d=\\\"\" + svg.toString() + \"\\\"/>\")\n  }\n\n  header() {\n    this.line(\"<?xml version=\\\"1.0\\\" standalone=\\\"no\\\"?>\")\n    this.line(\"<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\">\")\n    this.line(\"<svg width=\\\"\" + this.props.width + \"\\\"\" +\n                  \" height=\\\"\" + this.props.height + \"\\\"\" +\n                  \" title=\\\"polygons\\\"\" +\n                  \" version=\\\"1.1\\\"\" +\n                  \" viewBox=\\\"0 0 \" + this.props.width + \" \" + this.props.height + \"\\\"\" +\n                  \" xmlns=\\\"http://www.w3.org/2000/svg\\\"\" +\n                  \" class=\\\"svg-paper\\\">\")\n\n    this.line(\"  <g>\")\n  }\n\n  footer() {\n    this.line(\"  </g>\")\n    this.line(\"</svg>\")\n  }\n\n  line(content='', add=true) {\n    if (add) {\n      let padding = ''\n      if (this.commenting) {\n        padding = ''\n        for (let i=0; i<this.indentLevel; i++) {\n          padding += '  '\n        }\n        if (content) {\n          this.lines.push(padding + \"<!-- \" + content + \" -->\")\n        } else {\n          this.lines.push(\"\")\n        }\n      } else {\n        this.lines.push(content)\n      }\n    }\n  }\n}\n","\nexport const gcodeTypeName = 'GCode (.gcode)'\nexport const thrTypeName = 'Theta Rho (.thr)'\nexport const svgTypeName = 'SVG (.svg)'\n\nconst exporterOptions = {\n  fileName: {\n    title: 'File name',\n    type: 'string'\n  },\n  fileType: {\n    title: 'Export as',\n    type: 'dropdown',\n    choices: [gcodeTypeName, thrTypeName, svgTypeName]\n  },\n  post: {\n    title: 'Program end code',\n    type: 'textarea',\n    isVisible: (state) => { return state.fileType !== svgTypeName },\n  },\n  pre: {\n    title: 'Program start code',\n    type: 'textarea',\n    isVisible: (state) => { return state.fileType !== svgTypeName },\n  },\n  reverse: {\n    title: 'Reverse path in the code',\n  },\n}\n\nexport class Exporter {\n  getOptions() {\n    return exporterOptions\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  Button,\n  Modal\n} from 'react-bootstrap'\nimport DropdownOption from '../../components/DropdownOption'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport { updateExporter } from './exporterSlice'\nimport { getComments } from './selectors'\nimport { getVertices } from '../machine/selectors'\nimport ReactGA from 'react-ga'\nimport ThetaRhoExporter from './ThetaRhoExporter'\nimport GCodeExporter from './GCodeExporter'\nimport SvgExporter from './SvgExporter'\nimport {\n  gcodeTypeName,\n  thrTypeName,\n  svgTypeName,\n  Exporter,\n} from '../../models/Exporter'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    reverse: state.exporter.reverse,\n    show: state.exporter.show,\n    vertices: getVertices(state),\n    comments: getComments(state),\n    input: state.app.input,\n    shape: state.shapes.currentId,\n    offsetX: (state.machine.rectangular ? (state.machine.minX + state.machine.maxX) / 2.0 : state.machine.maxRadius),\n    offsetY: (state.machine.rectangular ? (state.machine.minY + state.machine.maxY) / 2.0 : state.machine.maxRadius),\n    width:   (state.machine.rectangular ? (state.machine.maxX - state.machine.minX) : (2.0 * state.machine.maxRadius)),\n    height:  (state.machine.rectangular ? (state.machine.maxY - state.machine.minY) : (2.0 * state.machine.maxRadius)),\n    maxRadius: (state.machine.rectangular ?\n      Math.sqrt(Math.pow(state.machine.maxX - state.machine.minX, 2.0) +\n                Math.pow(state.machine.maxY - state.machine.minY, 2.0)) :\n      state.machine.maxRadius),\n    fileName: state.exporter.fileName,\n    fileType: state.exporter.fileType,\n    pre: (state.exporter.fileType !== svgTypeName ? state.exporter.pre : ''),\n    post: (state.exporter.fileType !== svgTypeName ? state.exporter.post : ''),\n    options: new Exporter().getOptions()\n  }\n}\n\nconst exporters = {\n  [gcodeTypeName]: GCodeExporter,\n  [thrTypeName]: ThetaRhoExporter,\n  [svgTypeName]: SvgExporter,\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    open: () => {\n      dispatch(updateExporter({show: true}))\n    },\n    close: () => {\n      dispatch(updateExporter({show: false}))\n    },\n    onChange: (attrs) => {\n      dispatch(updateExporter(attrs))\n    },\n  }\n}\n\nclass Downloader extends Component {\n  // Record this event to google analytics.\n  gaRecord(fileType) {\n    let savedCode = 'Saved: ' + this.props.input\n    if (this.props.input === 'shape' || this.props.input === 'Shape') {\n      savedCode = savedCode + ': ' + this.props.shape\n    }\n    ReactGA.event({\n      category: fileType,\n      action: savedCode,\n    })\n  }\n\n  download() {\n    let exporter = new exporters[this.props.fileType](this.props)\n    let startTime = performance.now()\n    let fileName = this.props.fileName\n\n    exporter.export()\n\n    if (!fileName.includes('.')) {\n      fileName += exporter.fileExtension\n    }\n\n    this.gaRecord(exporter.label)\n    this.downloadFile(fileName, exporter.lines.join(\"\\n\"))\n    this.props.close()\n\n    let endTime = performance.now()\n    ReactGA.timing({\n      category: exporter.label,\n      variable: 'Save Code',\n      value: endTime - startTime, // in milliseconds\n    })\n  }\n\n  // Helper function to take a string and make the user download a text file with that text as the\n  // content. I don't really understand this, but I took it from here, and it seems to work:\n  // https://stackoverflow.com/a/18197511\n  downloadFile(fileName, text) {\n    let link = document.createElement('a')\n    link.download = fileName\n\n    let fileType = 'text/plain;charset=utf-8'\n    if (this.props.fileType === svgTypeName) {\n      fileType = 'image/svg+xml;charset=utf-8'\n    }\n    let blob = new Blob([text],{type: fileType})\n\n    // Windows Edge fix\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      window.navigator.msSaveOrOpenBlob(blob, fileName)\n    } else {\n      link.href = URL.createObjectURL(blob)\n      if (document.createEvent) {\n        var event = document.createEvent('MouseEvents')\n        event.initEvent('click', true, true)\n        link.dispatchEvent(event)\n      } else {\n        link.click()\n      }\n      URL.revokeObjectURL(link.href)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Button className=\"ml-2 mr-3\" variant=\"primary\" onClick={this.props.open}>Export</Button>\n        <Modal show={this.props.show} onHide={this.props.close}>\n          <Modal.Header closeButton>\n            <Modal.Title>Export to a file</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <DropdownOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              optionKey=\"fileType\"\n              key=\"fileType\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"fileName\"\n              optionKey=\"fileName\"\n              index={1}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"pre\"\n              optionKey=\"pre\"\n              index={2}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"post\"\n              optionKey=\"post\"\n              index={3}\n              model={this.props} />\n\n            <CheckboxOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              optionKey=\"reverse\"\n              key=\"reverse\"\n              index={4}\n              model={this.props} />\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button id=\"code-close\" variant=\"link\" onClick={this.props.close}>Close</Button>\n            <Button id=\"code-download\" variant=\"primary\" onClick={this.download.bind(this)}>Download</Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Downloader)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Slider from 'rc-slider'\nimport 'rc-slider/assets/index.css'\nimport PreviewWindow from './PreviewWindow'\nimport Downloader from '../exporter/Downloader'\nimport { updatePreview } from './previewSlice'\nimport { getVerticesStats } from '../machine/selectors'\nimport './MachinePreview.scss'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    sliderValue: state.preview.sliderValue,\n    verticesStats: getVerticesStats(state),\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onSlider: (value) => {\n      dispatch(updatePreview({sliderValue: value}))\n    },\n  }\n}\n\nclass MachinePreview extends Component {\n  render() {\n    return (\n      <div className=\"machine-preview d-flex flex-grow-1 flex-column\" id=\"machine-preview\">\n        <div className=\"flex-grow-1 d-flex flex-column\">\n          <div id=\"preview-wrapper\" className=\"preview-wrapper d-flex align-items-center\">\n            <PreviewWindow />\n          </div>\n\n          <div className=\"mt-auto pt-2 bg-white d-flex align-items-center\">\n            <div className=\"flex-grow-1\">\n              <div className=\"mx-2\">\n                Points: {this.props.verticesStats.numPoints}, Distance: {this.props.verticesStats.distance}\n              </div>\n\n              <div className=\"p-3\">\n                  <Slider\n                    value={this.props.sliderValue}\n                    step={0.1}\n                    min={0.0}\n                    max={100.0}\n                    onChange={this.props.onSlider}\n                  />\n              </div>\n            </div>\n            <Downloader />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MachinePreview)\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\"\nimport { combineReducers } from 'redux'\nimport appReducer from './appSlice'\nimport importerReducer from '../importer/importerSlice'\nimport machineReducer from '../machine/machineSlice'\nimport exporterReducer from '../exporter/exporterSlice'\nimport previewReducer from '../preview/previewSlice'\nimport shapesReducer from '../shapes/shapesSlice'\nimport transformsReducer from '../transforms/transformsSlice'\nimport { registeredShapes } from '../../common/registeredShapes'\nimport { loadState, saveState } from '../../common/localStorage'\nimport { addShape, setCurrentShape, updateShape } from '../shapes/shapesSlice'\nimport { addTransform, updateTransform } from '../transforms/transformsSlice'\n\nconst customizedMiddleware = getDefaultMiddleware({\n  immutableCheck: {\n    ignoredPaths: ['importer.vertices']\n  },\n  serializableCheck: {\n    ignoredPaths: ['importer.vertices']\n  }\n})\n\nconst store = configureStore({\n  reducer: combineReducers({\n    app: appReducer,\n    shapes: shapesReducer,\n    transforms: transformsReducer,\n    importer: importerReducer,\n    exporter: exporterReducer,\n    machine: machineReducer,\n    preview: previewReducer\n  }),\n  middleware: customizedMiddleware\n})\n\n// preload shapes into store\nObject.keys(registeredShapes).forEach(key => {\n  const shape = registeredShapes[key]\n  const state = shape.getInitialState()\n  const tState = shape.getInitialTransformState()\n\n  state.id = key\n  state.name = shape.name\n\n  store.dispatch(addShape(state))\n  store.dispatch(addTransform({\n    ...{id: state.id },\n    ...tState,\n  }))\n})\n\n// set to true when running locally if you want to preserve your shape\n// settings across page loads; don't forget to toggle false when done testing!\nconst persistState = false\nif (persistState) {\n  // override default values with saved ones\n  const persistedState = loadState()\n\n  if (persistedState) {\n    Object.keys(persistedState.shapes.byId).forEach((key) => {\n      let shape = persistedState.shapes.byId[key]\n      shape.id = key\n      store.dispatch(updateShape(shape))\n    })\n\n    Object.keys(persistedState.transforms.byId).forEach((key) => {\n      let transform = persistedState.transforms.byId[key]\n      transform.id = key\n      store.dispatch(updateTransform(transform))\n    })\n  }\n}\n\nconst storedShape = localStorage.getItem('currentShape')\nconst currentShape = storedShape && registeredShapes[storedShape] ? storedShape : 'polygon'\nstore.dispatch(setCurrentShape(currentShape))\n\nif (persistState) {\n  store.subscribe(() => {\n    const state = store.getState()\n\n    saveState({\n      shapes: state.shapes,\n      transforms: state.transforms\n    })\n  })\n}\n\nexport default store\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Row\n} from 'react-bootstrap'\nimport { Provider } from 'react-redux'\nimport Header from './Header'\nimport InputTabs from './InputTabs'\nimport MachinePreview from '../preview/MachinePreview'\nimport store from './store'\nimport './App.scss'\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Header />\n\n          <main>\n            <Row className=\"no-gutters\">\n              <Col className=\"full-page d-flex flex-column\">\n                <MachinePreview />\n              </Col>\n\n              <div id=\"sidebar\">\n                <InputTabs />\n              </div>\n            </Row>\n          </main>\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './features/app/reactGA'\nimport App from './features/app/App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}