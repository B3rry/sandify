{"version":3,"sources":["features/app/logo.svg","features/app/reactGA.js","features/app/Header.js","components/InputOption.js","components/CheckboxOption.js","models/Machine.js","features/machine/machineSlice.js","features/machine/RectSettings.js","features/machine/PolarSettings.js","features/machine/MachineSettings.js","features/app/Footer.js","components/CommentsBox.js","components/DropdownOption.js","models/Shape.js","models/Circle.js","common/util.js","models/Epicycloid.js","models/FileImport.js","models/fractal_spirograph/Orbit.js","models/fractal_spirograph/FractalSpirograph.js","models/Heart.js","models/Hypocycloid.js","models/input_text/raysol_cursive.js","models/input_text/raysol_sanserif.js","models/input_text/Fonts.js","common/geometry.js","features/machine/Machine.js","features/machine/PolarMachine.js","models/input_text/InputText.js","common/lindenmayer.js","models/lsystem/subtypes.js","models/lsystem/LSystem.js","models/Point.js","models/Polygon.js","models/Reuleaux.js","models/Rose.js","models/space_filler/subtypes.js","models/space_filler/SpaceFiller.js","models/Star.js","common/PriorityQueue.js","common/Graph.js","models/tessellation_twist/TessellationTwist.js","common/eulerianTrail.js","models/v1_engineering/Vicious1Vertices.js","models/v1_engineering/V1Engineering.js","models/Wiper.js","models/shapes.js","features/layers/layersSlice.js","features/layers/selectors.js","models/Transform.js","features/transforms/ScaleTransform.js","features/transforms/RotationTransform.js","features/transforms/TrackTransform.js","features/transforms/Transforms.js","features/layers/Layer.js","features/importer/Importer.js","features/importer/ThetaRhoImporter.js","features/importer/GCodeImporter.js","features/layers/Playlist.js","features/app/appSlice.js","features/app/InputTabs.js","features/preview/previewSlice.js","features/machine/RectMachine.js","features/machine/computer.js","features/exporter/exporterSlice.js","features/machine/selectors.js","features/preview/PreviewLayer.js","features/preview/PreviewWindow.js","features/exporter/Exporter.js","features/exporter/CommentExporter.js","features/exporter/selectors.js","features/exporter/ThetaRhoExporter.js","features/exporter/GCodeExporter.js","features/exporter/SvgExporter.js","models/Exporter.js","features/exporter/Downloader.js","features/preview/MachinePreview.js","features/app/store.js","features/app/App.js","index.js"],"names":["module","exports","ReactGA","initialize","debug","pageview","window","location","pathname","search","Header","className","src","logo","alt","Component","InputOption","props","delayedSet","debounce","value","key","onChange","attrs","option","this","options","optionKey","model","optionType","type","minimum","min","parseFloat","maximum","max","visible","undefined","isVisible","Row","Col","sm","Form","Label","htmlFor","title","Control","as","step","isNaN","plaintext","plainText","event","target","delayKey","CheckboxOption","checked","machineOptions","minX","maxX","minY","maxY","origin","maxRadius","minimizeMoves","polarEndPoint","polarStartPoint","Machine","localMinX","localStorage","getItem","localMaxX","localMinY","localMaxY","localMaxRadius","machineSlice","createSlice","name","initialState","rectangular","rectExpanded","polarExpanded","JSON","parse","rectOrigin","reducers","updateMachine","state","action","Object","assign","payload","keys","forEach","setItem","toggleMachineRectExpanded","toggleMachinePolarExpanded","setMachineRectOrigin","newValue","i","length","includes","push","toggleMinimizeMoves","actions","setMachineSize","RectSettings","activeClassName","active","Card","Accordion","Toggle","eventKey","onClick","activeCallback","Collapse","Body","index","ToggleButtonGroup","id","onOriginChange","ToggleButton","variant","connect","ownProps","expanded","machine","getOptions","dispatch","PolarSettings","startPoint","onStartPointChange","endPoint","onEndPointChange","MachineSettings","defaultActiveKey","Footer","href","CommentsBox","commentsRender","comments","map","comment","DropdownOption","currentChoice","label","choice","choices","shapeOptions","Shape","cache","repeatEnabled","canTransform","selectGroup","shouldCache","canChangeSize","usesMachine","startingSize","offsetX","offsetY","rotation","numLoops","transformMethod","growEnabled","growValue","growMethod","growMathInput","growMath","spinEnabled","spinValue","spinMethod","spinMathInput","spinMath","spinSwitchbacks","trackEnabled","trackGrowEnabled","trackValue","trackLength","trackNumLoops","trackGrow","reverse","dragging","circleLobes","Circle","points","angle","Math","PI","Victor","cos","sin","shape","roundP","n","p","round","Number","EPSILON","pow","reduce","numerator","denominator","gcd","a","b","epicycloidA","epicycloidB","Epicycloid","link","linkText","parseInt","reduced","rotations","isInteger","scale","multiply","x","y","fileName","aspectRatio","FileImport","importProps","originalAspectRatio","vertices","x_scale","y_scale","machine_aspect_ratio","vertex","Orbit","r","level","settings","parent","child","sign","alternateRotation","speed","velocity","resolution","newr","relativeSize","newx","newy","rsum","fractalSpirographVelocity","fractalSpirographResolution","fractalSpirographNumCircles","fractalSpirographRelativeSize","fractalSpirographAlternateRotation","FractalSpirograph","end","numCircles","sun","next","addChild","j","update","point","Heart","hypocycloidA","hypocycloidB","Star","raysol_cursive","raysol_sanserif","billsey","curve","Array","billseyConverter","newVertices","prevPoint","width","abs","height","concat","cv","raysolConverter","MonospaceFont","ch","upper","toUpperCase","hasOwnProperty","CursiveFont","distance","v1","v2","sqrt","atan2","onSegment","start","resizeVertices","sizeX","sizeY","size","bounds","loX","hiX","loY","hiY","findBounds","scaledBounds","deltaX","deltaY","clone","add","vertexRoundP","v","rotate","angleDeg","scalePerc","offset","getSliderBounds","sliderValue","beginFraction","endFraction","enforceLimits","cleanVertices","limitPrecision","optimizePerimeter","layerInfo","addStartPoint","addEndPoint","previous","nearestVertex","line","clipLine","pt","segments","stripExtraPerimeterVertices","minimizePerimeterMoves","connectedVertices","current","prev","tracePerimeter","flat","segment","perimeter","curr","onPerimeter","currentIndex","lastSegment","walked","shift","pop","minDist","MAX_SAFE_INTEGER","dist","perimeterDistance","splice","traceCircle","startAngle","endAngle","deltaAngle","tracePoints","PolarMachine","unshift","first","magnitude","fromObject","last","delta","rm","r1","r2","d","radStart","radEnd","intersections","getIntersections","intersection","on","otherPoint","point1","direction","subtract","normalize","t","distanceToLine","dt","point2","inputText","inputFont","rotateDir","getMaxX","InputText","prevLetter","lines","textPoints","chi","nextLetter","vi","connectorPoints","widthOffset","lastTheta","rPerY","thetaCenter","rOffset","rOffsetPerLine","thetaPerX","endTheta","onSubtypeChange","subtype","changes","maxIterations","minIterations","iterations","onMinIterations","onMaxIterations","lsystem","config","output","input","axiom","char","rules","lsystemDraw","side","lsystemPath","instructions","currVertices","startingAngle","returnPaths","slice","draw","returnPath","revChar","subtypes","F","W","X","Y","Z","A","B","6","7","8","9","LSystem","Point","polygonSides","roundCorners","roundFraction","Polygon","numberOfPoints","beta","alpha","angleStart","angleEnd","numberOfLinePoints","getLineVertices","arcAngle","reuleauxSides","Reuleaux","corners","coverageAngle","halfCoverageAngle","c","corn","roseN","roseD","Rose","thetaClose","theta","iterationsGrow","L","R","fillerSubtype","SpaceFiller","starRatio","star_scale","PriorityQueue","collection","element","isEmpty","added","mix","s","u","result","Graph","nodeMap","nodeKeys","Set","adjacencyList","edgeMap","edgeKeys","clearCachedPaths","node","toString","has","node1","node2","weight","node1Key","node2Key","edgeKey","sort","ekey1","ekey2","startNode","endNode","shortest","getCachedShortestPath","times","backtrace","pq","nodes","Infinity","enqueue","currentNode","dequeue","neighbor","time","path","lastStep","cacheShortestPath","cachedPaths","getPairedKey","vecTriangle","vecSquare","getEdges","edges","count","da","db","dc","ab","ac","bc","ap","bp","cp","tessellationTwistNumSides","tessellationTwistIterations","tessellationTwistRotate","TessellationTwist","numSides","angle2","tessellation","sides","getShapeVertices","graph","edge","addNode","addEdge","prevKey","trail","g","edgePointer","edgeUsed","idReverse","idCount","getId","pushEdge","deg","inDeg","outDeg","directed","check","oddVertex","odd","checkDirected","checkUndirected","dfs","to","eulerianTrail","values","walkedVertices","walkedEdges","missingEdges","from","filter","hash","split","hasEdge","dijkstraShortestPath","missingVertex","visited","Vicious1Vertices","V1Engineering","wiperType","wiperSize","wiperAngleDeg","outOfBounds","boundPoint","good","bad","size_x","size_y","dx","dy","fixed","nearEnough","linearVertices","outputVertices","startLocation","cosa","sina","orig_delta_w","orig_delta_h","temp","delta_w","delta_h","endLocation","nextWidthPoint","nextHeightPoint","emergency_break","corner","Wiper","halfHeight","halfWidth","emergencyBreak","radius","radiusPerAngle","spiralVertices","registeredShapes","polygon","star","circle","heart","reuleaux","epicycloid","hypocycloid","Hypocycloid","rose","v1Engineering","fractal_spirograph","tessellation_twist","wiper","space_filler","file_import","getShape","layer","getShapeSelectOptions","groupOptions","shapes","getInitialState","optionLabel","found","group","newOptions","protectedAttrs","newLayerType","newLayerName","toLowerCase","layersSlice","selected","newLayerNameOverride","copyLayerName","byId","allIds","addLayer","uniqueId","moveLayer","oldIndex","newIndex","arrayMove","copyLayer","source","removeLayer","deleteId","idx","findIndex","restoreDefaults","defaults","setCurrentLayer","setSelectedLayer","setShapeType","attr","setNewLayerType","updateLayer","updateLayers","toggleRepeat","transform","toggleGrow","toggleSpin","toggleTrack","toggleTrackGrow","toggleVisible","getLayers","layers","getCurrentLayer","createSelector","makeGetLayer","layerId","makeGetLayerIndex","getVisibleLayerIds","visibleLayerIds","getKonvaLayerIds","kIds","getLayerInfo","getNumLayers","isDragging","visibleIds","getNumVisibleLayers","transformOptions","Transform","ScaleTransform","activeKey","onGrow","onGrowMethodChange","RotationTransform","onSpin","onSpinMethodChange","TrackTransform","activeGrowClassName","activeGrow","activeGrowKey","onTrack","onTrackGrow","Transforms","onRepeat","ontransformMethodChange","Layer","selectedOption","optionsRender","linkRender","rel","optionsListRender","entries","shapeSelectRender","showShapeSelectRender","onChangeType","maxMenuHeight","selectOptions","style","borderTop","borderBottom","Button","onRestoreDefaults","Importer","text","ThetaRhoImporter","callback","hasVertex","thetaRhos","ii","trim","indexOf","pointStrings","convertToXY","max_angle","rhoStep","rho","GCodeImporter","isComment","addVertex","Toolpath","addLine","modal","addArcCurve","v0","startTheta","deltaTheta","motion","thetaStep","loadFromString","err","results","normalizeCoords","scaleX","scaleY","customStyles","control","base","minHeight","SortableItem","SortableElement","canRemove","onCopyLayer","onLayerRemoved","onLayerSelected","onToggleLayerVisible","activeClass","dragClass","ListGroup","Item","join","data-id","SortableList","SortableContainer","currentLayer","numLayers","maxHeight","Playlist","showNewLayer","showImportLayer","showCopyLayer","el","document","getElementById","scrollTop","scrollHeight","setState","file","files","reader","FileReader","onload","startTime","performance","now","importer","endsWith","import","onFileImported","bind","toggleImportModal","readAsText","importerProps","onLayerImport","endTime","timing","category","variable","select","prevProps","scrollToBottom","selectedShape","namedInputRef","React","createRef","Modal","show","onHide","toggleNewModal","closeButton","Title","onChangeNewType","styles","onFocus","handleNameFocus","onChangeNewName","onLayerAdded","cursor","accept","onFileSelected","display","toggleCopyModal","onEntered","focus","ref","onChangeCopyName","onLayerCopied","pressDelay","onSortEnd","onLayerMoved","closest","dataset","appSlice","sandifyVersion","chooseInput","InputTabs","Tabs","onSelect","handleSelect","Tab","previewSlice","canvasWidth","canvasHeight","updatePreview","setPreviewSize","RectMachine","outPoint","clipped","newPoint","rDx","rDy","p1","p2","includeOriginalPoints","o1","o2","d1","d2","xSign","ySign","lineStart","lineEnd","quadrantStart","pointLocation","quadrantEnd","intPoint","console","log","Error","lengthSq","midpoint","sideStart","sideEnd","lineCrossSidePerp","diff","track","data","loopIndex","transformShape","amount","trackIndex","transformedVertex","growAmount","evaluate","spinAmount","loopPeriod","stage","rotateDeg","addX","addY","buildTrackLoop","numTrackLoops","nextTrackVertex","backtrack","numVertices","trackVertices","trackDistances","trackVertex","minIdx","minD","fileType","throttledReportTiming","throttle","trailing","LRUCache","getState","getMachine","cachedSelectors","makeGetLayerMachine","makeGetLayerVertices","getCachedSelector","metashape","stringify","getCacheKey","get","getVertices","set","makeGetTransformedVertices","transformShapes","makeGetComputedVertices","layerIndex","machineClass","polish","polishVertices","makeGetPreviewVertices","nextLayerId","nextLayer","nextVertices","konvaDelta","fn","getAllComputedVertices","getAllPreviewVertices","getVertexOffsets","offsets","getVerticesStats","numPoints","floor","getSliderColors","preview","colors","startColor","Color","colorStep","darken","hex","makeGetPreviewTrackVertices","PreviewLayer","useSelector","allVertices","showTrack","shallowEqual","useDispatch","konvaSize","isSelected","isSliding","mmToPixels","moveTo_mm","context","in_mm","moveTo","lineTo_mm","lineTo","dot_mm","arc","fillStyle","strokeStyle","fill","lineWidth","stroke","shapeRef","trRef","useEffect","getLayer","batchDraw","Fragment","draggable","onTap","strokeWidth","sceneFunc","beginPath","drawTrackVertices","stationaryColor","defaultColor","oldColor","currentColor","absoluteI","pathColor","drawLayerVertices","endOffset","drawStartAndEndPoints","absoluteEnd","sliderEnd","drawSliderEndPoint","fillStrokeShape","hitFunc","onDragStart","e","onDragEnd","onTransformStart","onTransformEnd","centeredScaling","resizeEnabled","rotationSnaps","enabledAnchors","PreviewWindow","wrapper","throttledResize","resize","addEventListener","setTimeout","getComputedStyle","getPropertyValue","onResize","use_rect","relativeScale","visibilityClass","checkDeselect","selectedId","scaleByWheel","newSize","clipFunc","ctx","rect","Consumer","store","onMouseDown","onTouchStart","onWheel","evt","preventDefault","onLayerChange","konvaIds","exporterSlice","pre","post","updateExporter","Exporter","indentLevel","computeOutputVertices","header","startComments","keyValueLine","endComments","exportCode","footer","content","padding","commenting","commentChar","metamodel","instance","optionLine","CommentExporter","app","indent","optionLines","dedent","exporter","getComments","export","thetarho","toFixed","ThetaRhoExporter","fileExtension","subsampledVertices","deltaSegment","previousTheta","previousRawTheta","mintheta","minrho","maxtheta","maxrho","rawTheta","starttheta","startrho","endtheta","endrho","replace","GCodeExporter","gcode","minx","miny","maxx","maxy","startx","starty","endx","endy","SvgExporter","centeredVertices","svg","firstPoint","exporterOptions","exporters","Downloader","savedCode","gaRecord","downloadFile","close","createElement","download","blob","Blob","navigator","msSaveOrOpenBlob","URL","createObjectURL","createEvent","initEvent","dispatchEvent","click","revokeObjectURL","open","MachinePreview","verticesStats","onSlider","configureStore","reducer","combineReducers","appReducer","layersReducer","exporterReducer","machineReducer","previewReducer","storedShape","currentShape","App","ReactDOM","render"],"mappings":"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AAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,IAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,IAAQ,CAAC,KAAM,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,O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,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ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Q,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAChtC,EAAM,CAAE,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OACh4B,EAAM,CAAE,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OAChhC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC90B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OAChrD,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACh8C,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,OACjxB,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,GAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,GAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC/zB,KAAO,CAAE,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjmB,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACxjpB,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,GAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAChmj+C,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,OAAO,OAC1+B,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjT,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjzB,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,GAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,KAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OACt8C,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,GAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OACp8B,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,KAAQ,CAAC,OAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OACjtD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,OAAO,OAC3gC,KAAO,CAAE,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACjrC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,KAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC9iC,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,IAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,M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Q,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAC/3B,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,C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AC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CA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,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAC10B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACz1C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,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AAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OACt8C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OACllC,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MA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AQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAChuB,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OAC91C,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAA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AO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OAC7wB,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,KAAO,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OACjD,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAChY,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,OACrpD,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,GAAM,MAAQ,CAAC,KAAM,KAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OACv/B,EAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,OAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,OAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,IAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,KAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,OAAO,OACj4C,IAAM,CAAE,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,KAAM,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,MAAO,MAAQ,CAAC,KAAO,MAAQ,CAAC,KAAO,QCpFzbC,GAAU,CACZ,IAAK,CAAE,CAAC,GAAG,EAAE,IACb,EAAK,CAAE,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IACnF,EAAK,CAAE,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IACrI,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IAC1I,EAAK,CAAE,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IACnF,EAAK,CAAE,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IACzH,EAAK,CAAE,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IACvG,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,KAAK,KAAK,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IACrK,EAAK,CAAE,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IAChH,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IACrH,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IACnH,EAAK,CAAE,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IACnI,EAAK,CAAE,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IACpE,EAAK,CAAE,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IAC5G,EAAK,CAAE,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IACtF,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAK,EAAG,GAAI,CAAC,EAAG,IAAK,GAAI,CAAC,IAAK,EAAG,GAAI,CAAC,EAAK,IAAK,GAAI,CAAC,IAAK,EAAG,GAAI,CAAC,KAAM,EAAG,GAAI,CAAC,GAAI,EAAG,IAC5G,EAAK,CAAE,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IACjG,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAK,EAAG,GAAI,CAAC,EAAG,IAAK,GAAI,CAAC,IAAK,EAAG,GAAI,CAAC,EAAK,IAAK,GAAI,CAAC,IAAK,EAAG,GAAI,CAAC,MAAM,GAAI,GAAI,CAAC,MAAM,EAAE,GAAI,CAAC,EAAE,GAAI,GAAI,CAAC,MAAM,EAAE,GAAI,CAAC,MAAM,GAAI,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAM,EAAG,GAAI,CAAC,GAAI,EAAG,IAC1L,EAAK,CAAE,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IACvH,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IAC9L,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IACxF,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IACpI,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IACxF,EAAK,CAAE,CAAC,MAAM,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,MAAM,EAAE,GAAI,CAAC,GAAG,EAAE,IAC3I,EAAK,CAAE,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IAC9F,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IAC9F,EAAK,CAAE,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IACtF,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IAC5F,EAAK,CAAE,CAAC,GAAG,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IAC5H,EAAK,CAAE,CAAC,GAAG,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,EAAE,IAC/H,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IAC9L,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IAC9F,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,IAAI,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IACpL,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IAC9I,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IACtF,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IACtH,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,KAAK,GAAI,CAAC,IAAI,EAAE,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IACvH,EAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,GAAI,GAAI,CAAC,EAAE,EAAK,GAAI,CAAC,IAAI,GAAI,GAAI,CAAC,EAAE,EAAK,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,EAAK,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,EAAK,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,IAAK,EAAG,GAAI,CAAC,IAAK,EAAG,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,IAChL,IAAK,CAAE,CAAC,KAAK,EAAE,GAAI,CAAC,IAAI,GAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,IAAI,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,IAAI,GAAI,GAAI,CAAC,KAAK,EAAE,GAAI,CAAC,GAAG,EAAE,KAK1FC,GAAQ,aAAIC,MAAM,IAAI9K,QAAQiD,KAAI,SAACxB,GACvC,IAAIoE,GAASpE,EAAM,GAAKqE,KAAKC,GAAG,EAAI,GACpC,OAAO,IAAIC,KAAOF,KAAKG,IAAIJ,GAAQC,KAAKI,IAAIL,OAGxCkF,GAAmB,SAAC5C,GACxB,IAAI6C,EAAc,GACdC,EAAY,IAAIjF,KAAO,EAAE,GAC7BmC,EAASlI,SAAS,SAACsI,GACjB,OAAQA,EAAO,IACf,KAAK,EACL,QACEyC,EAAYtK,KAAK,IAAIsF,KAAOuC,EAAO,GAAK,EAAKA,EAAO,GAAK,IACzD,MACF,KAAK,EACH,GAAIA,EAAO,GAAK0C,EAAU,GAAI,CAC5B,IAAIC,EAAQpF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EAC7CG,EAAStF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EAClDD,EAAcA,EAAYK,OAAOR,GAAM5H,KAAK,SAAAqI,GAAE,OAAI,IAAItF,KAAOsF,EAAG1D,EAAIsD,EAAQD,EAAU,GAAK,EAAKK,EAAGzD,EAAIuD,EAAS7C,EAAO,GAAK,MAAM/C,eAC7H,CACL,IAAI0F,EAAQpF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EAC7CG,EAAStF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EAClDD,EAAcA,EAAYK,OAAOR,GAAM5H,KAAK,SAAAqI,GAAE,OAAI,IAAItF,KAAOsF,EAAG1D,EAAIsD,EAAQ3C,EAAO,GAAK,EAAK+C,EAAGzD,EAAIuD,EAASH,EAAU,GAAK,OAE9HD,EAAYtK,KAAK,IAAIsF,KAAOuC,EAAO,GAAK,EAAKA,EAAO,GAAK,IACzD,MACF,KAAK,EACH,GAAIA,EAAO,GAAK0C,EAAU,GAAI,CAC5B,IAAIC,EAAQpF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EAC7CG,GAAUtF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EACnDD,EAAcA,EAAYK,OAAOR,GAAM5H,KAAK,SAAAqI,GAAE,OAAI,IAAItF,KAAOsF,EAAG1D,EAAIsD,EAAQ3C,EAAO,GAAK,EAAK+C,EAAGzD,EAAIuD,EAASH,EAAU,GAAK,WACvH,CACL,IAAIC,EAAQpF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EAC7CG,GAAUtF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EACnDD,EAAcA,EAAYK,OAAOR,GAAM5H,KAAK,SAAAqI,GAAE,OAAI,IAAItF,KAAOsF,EAAG1D,EAAIsD,EAAQD,EAAU,GAAK,EAAKK,EAAGzD,EAAIuD,EAAS7C,EAAO,GAAK,MAAM/C,WAEpIwF,EAAYtK,KAAK,IAAIsF,KAAOuC,EAAO,GAAK,EAAKA,EAAO,GAAK,IACzD,MACF,KAAK,EACH,GAAIA,EAAO,GAAK0C,EAAU,GAAI,CAC5B,IAAIC,GAASpF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EAC9CG,GAAUtF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EACnDD,EAAcA,EAAYK,OAAOR,GAAM5H,KAAK,SAAAqI,GAAE,OAAI,IAAItF,KAAOsF,EAAG1D,EAAIsD,EAAQD,EAAU,GAAK,EAAKK,EAAGzD,EAAIuD,EAAS7C,EAAO,GAAK,MAAM/C,eAC7H,CACL,IAAI0F,GAASpF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EAC9CG,GAAUtF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EACnDD,EAAcA,EAAYK,OAAOR,GAAM5H,KAAK,SAAAqI,GAAE,OAAI,IAAItF,KAAOsF,EAAG1D,EAAIsD,EAAQ3C,EAAO,GAAK,EAAK+C,EAAGzD,EAAIuD,EAASH,EAAU,GAAK,OAE9HD,EAAYtK,KAAK,IAAIsF,KAAOuC,EAAO,GAAK,EAAKA,EAAO,GAAK,IACzD,MACF,KAAK,EACH,GAAIA,EAAO,GAAK0C,EAAU,GAAI,CAC5B,IAAIC,GAASpF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EAC9CG,EAAStF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EAClDD,EAAcA,EAAYK,OAAOR,GAAM5H,KAAK,SAAAqI,GAAE,OAAI,IAAItF,KAAOsF,EAAG1D,EAAIsD,EAAQ3C,EAAO,GAAK,EAAK+C,EAAGzD,EAAIuD,EAASH,EAAU,GAAK,WACvH,CACL,IAAIC,GAASpF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EAC9CG,EAAStF,KAAKqF,IAAI5C,EAAO,GAAK0C,EAAU,IAAM,EAClDD,EAAcA,EAAYK,OAAOR,GAAM5H,KAAK,SAAAqI,GAAE,OAAI,IAAItF,KAAOsF,EAAG1D,EAAIsD,EAAQD,EAAU,GAAK,EAAKK,EAAGzD,EAAIuD,EAAS7C,EAAO,GAAK,MAAM/C,WAEpIwF,EAAYtK,KAAK,IAAIsF,KAAOuC,EAAO,GAAK,EAAKA,EAAO,GAAK,IAG3D0C,EAAY1C,KAQd,MAAO,CACLxK,KA1HgB,IA2HhBoK,SALqB6C,EAAY/H,KAAK,SAAAsF,GACtC,OAAO,IAAIvC,KAHC,GAGcuC,EAAOX,EAHrB,GAGgCW,EAAOV,EAFpC,SAUb0D,GAAkB,SAACpD,GACvB,IAAI6C,EAAc,GAKlB,OAJA7C,EAASlI,SAAS,SAACsI,GACjByC,EAAYtK,KAAK,IAAIsF,KAAOuC,EAAO,GAAIA,EAAO,QAGzC,CACLxK,KAtIgB,IAuIhBoK,SAAU6C,IAIDQ,GAAgB,SAACC,GAC5B,IAAIC,EAAQD,EAAGE,cACf,OAAIf,GAAQgB,eAAeF,GAClBX,GAAiBH,GAAQc,IAEzBX,GAAiBH,GAAQ,OAIvBiB,GAAc,SAACJ,GAC1B,OAAIf,GAAekB,eAAeH,GACzBF,GAAgBb,GAAee,IAE/BF,GAAgBb,GAAe,OC/I7BoB,GAAW,SAACC,EAAIC,GAC3B,OAAOlG,KAAKmG,KAAKnG,KAAKY,IAAIqF,EAAGnE,EAAIoE,EAAGpE,EAAG,GAAO9B,KAAKY,IAAIqF,EAAGlE,EAAImE,EAAGnE,EAAG,KAQzDhC,GAAQ,SAACwE,GACpB,OAAOvE,KAAKoG,MAAM7B,EAAMxC,EAAGwC,EAAMzC,IAItBuE,GAAY,SAACC,EAAOtC,EAAKO,GACpC,OAAO+B,EAAMN,SAASzB,GAASP,EAAIgC,SAASzB,GAAS+B,EAAMN,SAAShC,GAAO,MAkChEuC,GAAiB,SAAClE,EAAUmE,EAAOC,GAC9C,IAAIC,EAAO1G,KAAKvJ,IAAI+P,EAAOC,GACvBE,EA1BoB,SAACtE,GACzB,IAAI9B,EAAI8B,EAAS3H,OAEjB,GAAU,IAAN6F,EACF,MAAO,GAQT,IALA,IAAIqG,EAAMvE,EAAS,GAAGP,EAClB+E,EAAMxE,EAAS,GAAGP,EAClBgF,EAAMzE,EAAS,GAAGN,EAClBgF,EAAM1E,EAAS,GAAGN,EAEdtH,EAAE,EAAGA,EAAE8F,IAAK9F,EAAG,CACrB,IAAI+F,EAAI6B,EAAS5H,GACjBmM,EAAM5G,KAAK1J,IAAIsQ,EAAKpG,EAAEsB,GACtB+E,EAAM7G,KAAKvJ,IAAIoQ,EAAKrG,EAAEsB,GACtBgF,EAAM9G,KAAK1J,IAAIwQ,EAAKtG,EAAEuB,GACtBgF,EAAM/G,KAAKvJ,IAAIsQ,EAAKvG,EAAEuB,GAGxB,MAAO,CAAC,IAAI7B,KAAO0G,EAAKE,GAAM,IAAI5G,KAAO2G,EAAKE,IAMjCC,CAAW3E,GAEpBT,EAAQ8E,EADI1G,KAAKvJ,IAAIkQ,EAAO,GAAG5E,EAAI4E,EAAO,GAAG5E,EAAG4E,EAAO,GAAG7E,EAAI6E,EAAO,GAAG7E,GAGxEmF,EAAe,CAACN,EAAO,GAAG9E,SAAS,CAACC,EAAGF,EAAOG,EAAGH,IAAS+E,EAAO,GAAG9E,SAAS,CAACC,EAAGF,EAAOG,EAAGH,KAC3FsF,EAASD,EAAa,GAAGnF,GAAKmF,EAAa,GAAGnF,EAAImF,EAAa,GAAGnF,GAAG,EACrEqF,EAASF,EAAa,GAAGlF,GAAKkF,EAAa,GAAGlF,EAAIkF,EAAa,GAAGlF,GAAG,EAEzE,OAAOM,EAASlF,KAAI,SAAAsF,GAAM,OAAIA,EAAO2E,QAAQvF,SAAS,CAACC,EAAGF,EAAOG,EAAGH,IAAQyF,IAAI,CAACvF,GAAIoF,EAAQnF,GAAIoF,QAItFG,GAAe,SAACC,EAAG/G,GAC9B,OAAO,IAAIN,KAAOI,GAAOiH,EAAEzF,EAAGtB,GAAIF,GAAOiH,EAAExF,EAAGvB,KAInCgH,GAAS,SAAC/E,EAAQgF,GAC7B,IAAM1H,EAAQC,KAAKC,GAAK,IAAQwH,EAChC,OAAO,IAAIvH,KACVuC,EAAOX,EAAI9B,KAAKG,IAAIJ,GAAS0C,EAAOV,EAAI/B,KAAKI,IAAIL,GACjD0C,EAAOX,EAAI9B,KAAKI,IAAIL,GAAS0C,EAAOV,EAAI/B,KAAKG,IAAIJ,KAIvC6B,GAAQ,SAACa,EAAQiF,GAC5B,IAAM9F,EAAQ8F,EAAY,IAC1B,OAAO,IAAIxH,KACTuC,EAAOX,EAAIF,EACXa,EAAOV,EAAIH,IAIF+F,GAAS,SAAClF,EAAQrE,EAASC,GACtC,OAAO,IAAI6B,KACTuC,EAAOX,EAAI1D,EACXqE,EAAOV,EAAI1D,IAMFuJ,GAAkB,SAACvF,EAAUwF,GACxC,IACMC,EAAgBD,EAAc,IAC9BE,GAFY,GAEeF,GAAe,IAC5CvB,EAAQtG,KAAKS,MAAM4B,EAAS3H,OAASoN,GACrC9D,EAAMhE,KAAKS,MAAM4B,EAAS3H,OAASqN,GAAe,EAYtD,OAVIzB,IAAUtC,EACRsC,EAAQ,IAAGA,GAAgB,GACtBA,IAAUtC,EAAM,GACrBsC,EAAQ,IAAGA,GAAgB,GAG7BtC,GAAO3B,EAAS3H,SAClBsJ,EAAM3B,EAAS3H,OAAS,GAGnB,CAAE4L,MAAOA,EAAOtC,IAAKA,ICxHTvL,G,iGAUjB,OARA1C,KAAKiS,gBACFC,gBACAC,iBACAC,oBAECpS,KAAKqS,UAAU9B,OAAOvQ,KAAKsS,gBAC3BtS,KAAKqS,UAAUpE,KAAKjO,KAAKuS,cAEtBvS,O,sCAQP,IAHA,IAAIwS,EAAW,KACXN,EAAgB,GAEXxN,EAAE,EAAGA,EAAE1E,KAAKsM,SAAS3H,OAAQD,IAAK,CACzC,GAAI8N,EAAU,CACZ,IACIvE,EAAMuE,EADExS,KAAKsM,SAAS5H,GAGhBuL,SAAShC,GAAO,MACxBiE,EAAcrN,KAAK7E,KAAKyS,cAAczS,KAAKsM,SAAS5H,UAGtDwN,EAAcrN,KAAK7E,KAAKyS,cAAczS,KAAKsM,SAAS5H,KAEtD8N,EAAWxS,KAAKsM,SAAS5H,GAI3B,OADA1E,KAAKsM,SAAW4F,EACTlS,O,sCAQP,IAHA,IAAIkS,EAAgB,GAChBM,EAAW,KAENpE,EAAK,EAAGA,EAAKpO,KAAKsM,SAAS3H,OAAQyJ,IAAQ,CAClD,IAAM1B,EAAS1M,KAAKsM,SAAS8B,GAE7B,GAAIoE,EAGF,IAFA,IAAME,EAAO1S,KAAK2S,SAASH,EAAU9F,GAE5BkG,EAAG,EAAGA,EAAGF,EAAK/N,OAAQiO,IACzBF,EAAKE,KAAQJ,GACfN,EAAcrN,KAAK6N,EAAKE,SAI5BV,EAAcrN,KAAK7E,KAAKyS,cAAc/F,IAGxC8F,EAAW9F,EAIb,OADA1M,KAAKsM,SAAW4F,EACTlS,O,0CAKP,IAAI6S,EAAW7S,KAAK8S,8BAEhB9S,KAAK8M,SAASvK,gBAChBsQ,EAAW7S,KAAK+S,uBAAuBF,IAKzC,IADA,IAAIG,EAAoB,GACf1E,EAAE,EAAGA,EAAEuE,EAASlO,OAAQ2J,IAAK,CACpC,IAAM2E,EAAUJ,EAASvE,GAEzB,GAAIA,EAAI,EAAG,CAET,IAAM4E,EAAOL,EAASvE,EAAE,GACxB0E,EAAkBnO,KAAK7E,KAAKmT,eAAeD,EAAKA,EAAKvO,OAAO,GAAIsO,EAAQ,KAE1ED,EAAkBnO,KAAKoO,GAIzB,OADAjT,KAAKsM,SAAW0G,EAAkBI,OAC3BpT,O,oDAUP,IAJA,IAAI6S,EAAW,GACXQ,EAAU,GACVC,EAAY,KAEP5O,EAAE,EAAGA,EAAE1E,KAAKsM,SAAS3H,OAAQD,IAAK,CACzC,IAAM6O,EAAOvT,KAAKsM,SAAS5H,GACrBwO,EAAOlT,KAAKsM,SAAS5H,EAAE,GAExBwO,GAASlT,KAAKwT,YAAYD,EAAML,IAK9BI,IACHT,EAAShO,KAAKwO,GACdA,EAAU,IAEZC,EAAYC,IARRD,GAAaD,EAAQxO,KAAKyO,GAC9BD,EAAQxO,KAAK0O,GACbD,EAAY,MAchB,OAJID,EAAQ1O,OAAS,GACnBkO,EAAShO,KAAKwO,GAGTR,I,6CAIcA,GAAW,IAG5BY,EACAC,EAJ2B,OAC3BC,EAAS,GACTV,EAAUJ,EAASe,QAInBf,EAASlO,OAAS,IAGpB+O,EAAcb,EAASgB,OAGzBF,EAAO9O,KAAKoO,GACZ,IAb+B,iBAe7B,IAAIa,EAAUnJ,OAAOoJ,iBACjBb,EAAOD,EAGXJ,EAASzO,SAAQ,SAACiP,EAASzN,GACzB,IAAMoO,EAAO/J,KAAK1J,IAChB,EAAK0T,kBAAkBhB,EAAQA,EAAQtO,OAAO,GAAI0O,EAAQ,IAC1D,EAAKY,kBAAkBhB,EAAQA,EAAQtO,OAAO,GAAI0O,EAAQA,EAAQ1O,OAAO,KAGvEqP,EAAOF,IACTL,EAAe7N,EACfkO,EAAUE,MAMdf,EAAUJ,EAASqB,OAAOT,EAAc,GAAG,GACvC,EAAKQ,kBAAkBf,EAAKA,EAAKvO,OAAO,GAAIsO,EAAQ,IAAM,EAAKgB,kBAAkBf,EAAKA,EAAKvO,OAAO,GAAIsO,EAAQA,EAAQtO,OAAO,MAC/HsO,EAAUA,EAAQtJ,WAEpBgK,EAAO9O,KAAKoO,IAxBPJ,EAASlO,OAAS,GAAI,IA+B7B,OAJI+O,GACFC,EAAO9O,KAAK6O,GAGPC,I,uCAOP,OADA3T,KAAKsM,SAAWtM,KAAKsM,SAASlF,KAAI,SAAAsF,GAAM,OAAI6E,GAAa7E,EAAQ,MAC1D1M,S,KC1KEmU,GAAc,SAACC,EAAYC,EAAU1D,GAChD,IAAItD,EAAsB,EAARpD,KAAKC,GAAU,IAC7BoK,GAAeD,EAAWD,EAAc,EAAMnK,KAAKC,KAAO,EAAMD,KAAKC,IAErEoK,EAAarK,KAAKC,KACpBoK,GAAc,EAAMrK,KAAKC,IAEvBoK,EAAa,IACfjH,IAAe,GAIjB,IADA,IAAIkH,EAAc,GACThT,EAAO,EAAGA,EAAQ+S,EAAWjH,EAAc9L,IAClDgT,EAAY1P,KAAKsF,KAAOwG,EAAO1G,KAAKG,IAAIiD,EAAa9L,EAAO6S,GACpCzD,EAAO1G,KAAKI,IAAIgD,EAAa9L,EAAO6S,KAE9D,OAAOG,GAGYC,G,kDACnB,WAAYlI,EAAUQ,EAAUuF,GAAY,IAAD,8BACzC,gBACK/F,SAAWA,EAChB,EAAKQ,SAAWA,EAChB,EAAKuF,UAAYA,EAJwB,E,4DAQzC,IAAM/P,EAAYtC,KAAK8M,SAASxK,UAEhC,GAAsC,SAAlCtC,KAAK8M,SAASrK,gBAChB,GAAsC,WAAlCzC,KAAK8M,SAASrK,gBAChBzC,KAAKsM,SAASmI,QAAQ,IAAItK,KAAO,EAAK,QACjC,CACL,IAAMuK,EAAQ1U,KAAKsM,SAAS,GACtBT,EAAQvJ,EAAYoS,EAAMC,YAC1BlO,EAAa0D,KAAOyK,WAAWF,GAAO5I,SAAS,IAAI3B,KAAO0B,EAAOA,IACvE7L,KAAKsM,SAASmI,QAAQ,IAAItK,KAAO1D,EAAWsF,EAAGtF,EAAWuF,O,oCAM9D,IAAM1J,EAAYtC,KAAK8M,SAASxK,UAEhC,GAAoC,SAAhCtC,KAAK8M,SAAStK,cAChB,GAAoC,WAAhCxC,KAAK8M,SAAStK,cAChBxC,KAAKsM,SAASzH,KAAK,IAAIsF,KAAO,EAAK,QAC9B,CACL,IAAM0K,EAAO7U,KAAKsM,SAAStM,KAAKsM,SAAS3H,OAAO,GAC1CkH,EAAQvJ,EAAYuS,EAAKF,YACzBhO,EAAYwD,KAAOyK,WAAWC,GAAM/I,SAAS,IAAI3B,KAAO0B,EAAOA,IACrE7L,KAAKsM,SAASzH,KAAK,IAAIsF,KAAOxD,EAASoF,EAAGpF,EAASqF,O,oCAO3CU,GACZ,IAAMiE,EAAO3Q,KAAK8M,SAASxK,UAE3B,GAAKoK,EAAO/H,SAAWgM,EAAM,CAC3B,IAAM9E,EAAQ8E,EAAOjE,EAAO/H,SAC5B,OAAO+H,EAAOZ,SAAS,IAAI3B,KAAO0B,EAAOA,IAEzC,OAAOa,I,wCAKOwD,EAAIC,GACpB,IAAMiE,EAAapK,GAAMkG,GACnBmE,EAAWrK,GAAMmG,GACnBmE,EAAarK,KAAKqF,IAAI+E,EAAWD,GAMrC,OAJIE,EAAarK,KAAKC,KACpBoK,GAAc,EAAMrK,KAAKC,IAGpBD,KAAKqF,IAAIgF,GAActU,KAAK8M,SAASxK,Y,qCAI/BiO,EAAOtC,GACpB,OAAOkG,GAAY5D,EAAMvG,QAASiE,EAAIjE,QAAShK,KAAK8M,SAASxK,a,kCAInD4N,EAAIC,GAAc,IAAV2E,EAAS,uDAAH,EACpBC,EAAK9K,KAAKY,IAAI7K,KAAK8M,SAASxK,UAAW,GACvC0S,EAAK/K,KAAKY,IAAIqF,EAAGnE,EAAG,GAAK9B,KAAKY,IAAIqF,EAAGlE,EAAG,GACxCiJ,EAAKhL,KAAKY,IAAIsF,EAAGpE,EAAG,GAAK9B,KAAKY,IAAIsF,EAAGnE,EAAG,GACxCkJ,EAAIlV,KAAKiU,kBAAkB/D,EAAIC,GASnC,OAAOlG,KAAKqF,IAAI0F,EAAKD,GAAMD,GAAS7K,KAAKqF,IAAI2F,EAAKF,GAAMD,GAASI,EAAI,EAAElV,KAAK8M,SAASxK,UAAU,K,+BAMxFiO,EAAOtC,GAiBd,IAAM0C,EAAO3Q,KAAK8M,SAASxK,UACrB6S,EAAW5E,EAAMoE,YACjBS,EAASnH,EAAI0G,YAEnB,GAAIQ,GAAYxE,GAAQyE,GAAUzE,EAEhC,MAAO,CAACJ,EAAOtC,GAIjB,GAAIsC,EAAMN,SAAShC,GAAO,KACvB,MAAO,CAACjO,KAAKyS,cAAclC,IAG9B,IAAI8E,EAAgBrV,KAAKsV,iBAAiB/E,EAAOtC,GACjD,IAAKoH,EAAcE,aAEjB,OAAOvV,KAAKmT,eAAe5C,EAAOtC,GAIpC,IAAKoH,EAActL,OAAO,GAAGyL,KAAOH,EAActL,OAAO,GAAGyL,GAC1D,OAAOxV,KAAKmT,eAAe5C,EAAOtC,GAIpC,GAAIkH,EAAWxE,EAAO,MAAUyE,EAASzE,EAAO,KAAQ,CACtD,IAAInC,EAAQ6G,EAActL,OAAO,GAAGyE,MAChCiH,EAAaJ,EAActL,OAAO,GAAGyE,MAEzC,MAAM,GAAN,oBACKxO,KAAKmT,eAAe5C,EAAO/B,IADhC,CAEEA,GAFF,aAGKxO,KAAKmT,eAAesC,EAAYxH,KAKvC,GAAIkH,GAAYxE,EAAM,CACpB,IAAI+E,EAAUL,EAActL,OAAO,GAAGyL,IAAMvL,KAAKqF,IAAI+F,EAActL,OAAO,GAAGyE,MAAQ+B,GAAS,KAAU8E,EAActL,OAAO,GAAGyE,MAAQ6G,EAActL,OAAO,GAAGyE,MAEhK,MAAM,CACJ+B,GADF,oBAEKvQ,KAAKmT,eAAeuC,EAAQzH,IAFjC,CAGEA,IAGF,IAAMyH,EAASL,EAActL,OAAO,GAAGyL,GAAKH,EAActL,OAAO,GAAGyE,MAAQ6G,EAActL,OAAO,GAAGyE,MAEpG,MAAM,GAAN,oBACKxO,KAAKmT,eAAe5C,EAAOmF,IADhC,CAEEA,EACAzH,M,uCAKWsC,EAAOtC,GACtB,IAAM0C,EAAO3Q,KAAK8M,SAASxK,UACvBqT,EAAY1H,EAAIoD,QAAQuE,SAASrF,GAAOc,QAAQwE,YAChDC,GAAmB,EAAfH,EAAU5J,EAAWwE,EAAMxE,GAAmB,EAAf4J,EAAU3J,EAAWuE,EAAMvE,EAE9D+J,EADIJ,EAAUtE,QAAQvF,SAAS3B,KAAO2L,EAAEA,IAAIxE,IAAIf,GAC7BoE,YAEvB,GAAIoB,GAAkBpF,EACpB,MAAO,CACL4E,cAAc,EACdxL,OAAQ,IAIZ,IAAIiM,EAAK/L,KAAKmG,KAAKO,EAAKA,EAAOoF,EAAeA,GAC1CL,EAASC,EAAUtE,QAAQvF,SAAS3B,KAAO2L,EAAIE,EAAGF,EAAIE,IAAK1E,IAAIf,GAC/D0F,EAASN,EAAUtE,QAAQvF,SAAS3B,KAAO2L,EAAIE,EAAGF,EAAIE,IAAK1E,IAAIf,GAEnE,MAAO,CACLgF,cAAc,EACdxL,OAAQ,CACN,CACEyE,MAAOkH,EACPF,GAAIlF,GAAUC,EAAOtC,EAAKyH,IAE5B,CACElH,MAAOyH,EACPT,GAAIlF,GAAUC,EAAOtC,EAAKgI,U,GA9LMvT,IClBpCzC,GAAO,6BACR0H,IACA,CACDuO,UAAW,CACT9U,MAAO,OACPf,KAAM,YAER8V,UAAW,CACT/U,MAAO,OACPf,KAAM,WACNqH,QAAS,CAAC,UAAW,aAAc,cAErC0O,UAAW,CACThV,MAAO,SACPf,KAAM,WACNqH,QAAS,CAAC,MAAO,SAAU,aAKjC,SAAS2O,GAAQtM,GAEf,IAAI7H,EAAO,EAMX,OALA6H,EAAO3F,SAAS,SAACoK,GACXA,EAAMzC,EAAI7J,IACZA,EAAOsM,EAAMzC,MAGV7J,E,IAGYoU,G,kDACnB,aAAe,uCACP,Q,8DAIN,OAAO,wGAEF,CACDjW,KAAM,YACN6V,UAAW,UACXC,UAAW,UACXC,UAAW,SACXtO,eAAe,M,kCAKThE,GAOV,IANA,IJyG0B8L,EIzGtB7F,EAAS,GACTwM,EAAa,GACbxK,EAAI,EACJyK,EAAQ,GACRC,EAAa,GAERC,EAAM,EAAGA,EAAM5S,EAAMwG,MAAM4L,UAAUvR,OAAQ+R,IAAO,CAC3D,IAAIC,EAAa7S,EAAMwG,MAAM4L,UAAUQ,GAavC,GAZmB,MAAfH,GAAqC,MAAfA,GAAqC,MAAfA,GAAqC,MAAfA,GAEpEA,EAAaI,GACwB,IAAjCA,EAAW3X,OAAO,WAA8C,YAA1B8E,EAAMwG,MAAM6L,YAEpDQ,GAA0B,MAI5BJ,EAAaI,EAGI,OAAfA,EAAJ,CAQA,IAAIrM,OAAQ1J,EACkB,YAA1BkD,EAAMwG,MAAM6L,UACd7L,EAAQ0F,GAAY2G,GACe,eAA1B7S,EAAMwG,MAAM6L,WJ0ECvG,EIzEA+G,EAAtBrM,EJ0EFuE,GAAekB,eAAeH,GACzBF,GAAgBZ,GAAgBc,IAEhCF,GAAgBZ,GAAgB,OI3EnCxE,EADmC,cAA1BxG,EAAMwG,MAAM6L,UACbxG,GAAcgH,GAGd3G,GAAY2G,GAItB,IAAK,IAAIC,EAAK,EAAGA,EAAKtM,EAAMgC,SAAS3H,OAAQiS,IAC3C7M,EAAOlF,KAAK,IAAIsF,KAAOG,EAAMgC,SAASsK,GAAI7K,EAAIA,EAAGzB,EAAMgC,SAASsK,GAAI5K,IAEtED,GAAKzB,EAAMgC,SAAShC,EAAMgC,SAAS3H,OAAO,GAAGoH,OAtB3CyK,EAAM3R,KAAKkF,GACXA,EAAS,GACTgC,EAAI,EAuBRyK,EAAM3R,KAAKkF,GAKX,GAA8B,WAA1BjG,EAAMwG,MAAM8L,UAAwB,CAEtC,IAAIpK,EAJO,KAIFwK,EAAM7R,OAAS,GAAY,EAGhCkS,EAAkB,GACtBL,EAAMpS,SAAS,SAAC2F,GACd,IACI+M,EADOT,GAAQtM,GACM,EAGzB0M,EAAU,uBAAOA,GAAP,aAAsBI,IAChCA,EAAkB,GAGlBJ,EAAU,uBAAOA,GAAP,aAAsB1M,EAAO3C,KAAK,SAACoH,GAC3C,OAAO,IAAIrE,KAAOqE,EAAMzC,EAAI+K,EAAatI,EAAMxC,EAAIA,QAIrD6K,EAAgBhS,KAAK,IAAIsF,KAAO,IAAK6B,IACrC6K,EAAgBhS,KAAK,IAAIsF,KAAO,KAAM,MACtC0M,EAAgBhS,KAAK,IAAIsF,MAAQ,KAAM,MACvC6B,GAzBS,IA0BT6K,EAAgBhS,KAAK,IAAIsF,MAAQ,IAAK6B,WAEnC,CAEL,IAAI2J,EAAY,EACc,WAA1B7R,EAAMwG,MAAM8L,YACdT,GAAa,EACba,EAAM7M,WAsBR,IASIoN,EARAC,EADa,GACLrB,EACRsB,EAActB,EAAY1L,KAAKC,GAAK,EAEpCgN,EADe9U,IAEb+U,EAAiBD,EAAUV,EAAM7R,OACnCyS,GAAaJ,EAAQE,EAKzBV,EAAMpS,SAAS,SAAC2F,GAEd,IAAI7H,EAAOmU,GAAQtM,GAEf+M,EAAc5U,EAAO,EAUzB,GAPc,EAAV+H,KAAKC,GAAWD,KAAKqF,IAAI8H,EAAYlV,KAEvCkV,EAAYzB,GAAa1L,KAAKC,GAAK,EAAMhI,EACzC8U,GAASI,EAAYF,GAInBH,EAAW,CACb,IAAIM,EAAWJ,EAAcG,GAAaN,EAGtClK,EAAIsK,EAAkB,EAARF,EACdjN,EAAOpF,OAAS,IAClBiI,EAAIsK,EAAUF,EAAQjN,EAAO,GAAGiC,GAGlCyK,EAAU,uBAAOA,GAAP,aAAsBtC,GAAY4C,EAAWM,EAAUzK,KAInE6J,EAAU,uBAAOA,GAAP,aAAsB1M,EAAO3C,KAAK,SAACoH,GAC3C,IAAM5B,EAAIsK,EAAUF,EAAQxI,EAAMxC,EAElC,OADA+K,EAAYE,EAAcG,GAAa5I,EAAMzC,EAAI+K,GAC1C,IAAI3M,KAAOyC,EAAI3C,KAAKG,IAAI2M,GAAYnK,EAAI3C,KAAKI,IAAI0M,SAI1DG,GAAWC,EACXH,EAAQrB,EAAY1L,KAAKmG,KA9CV,GA8C0B8G,EA3CxB9U,KA4CjBgV,GAAaJ,EAAQE,KAMzB,OADAT,EAAWrS,SAAQ,SAAAoK,GAAK,OAAIA,EAAM1C,SAAS,CAACC,EAD9B,IACwCC,EADxC,SAEPyK,I,mCAIP,OAAOxW,O,GArL4B2H,ICjC1B0P,GAAkB,SAACC,EAASC,EAAS1X,GAGhD,GAAIyX,EAAS,CACX,IAAI7W,EAAM6W,EAAQE,cACdlX,EAAMgX,EAAQG,cACdC,EAAa7X,EAAM6X,YAAc,EAEjCjX,IACFiX,EAAa1N,KAAK1J,IAAIoX,EAAYjX,IAGhCH,IACFoX,EAAa1N,KAAKvJ,IAAIiX,EAAYpX,IAGpCiX,EAAQG,WAAaA,EAGvB,OAAOH,GAGII,GAAkB,SAACL,EAASzT,GACvC,OAAQyT,GAAWA,EAAQG,eAAkB,GAGlCG,GAAkB,SAACN,EAASzT,GACvC,OAAQyT,GAAWA,EAAQE,eAAkB,GAKlCK,GAAU,SAACC,GAItB,IAHA,IACIC,EADAC,EAAQF,EAAOG,MAGVxT,EAAE,EAAGA,EAAEqT,EAAOJ,WAAYjT,IAAK,CACtCsT,EAAS,GAET,IAAK,IAAI1J,EAAE,EAAGA,EAAE2J,EAAMtT,OAAQ2J,IAAK,CACjC,IAAI6J,EAAOF,EAAM3J,QAEU1N,IAAvBmX,EAAOK,MAAMD,GACfH,GAAUD,EAAOK,MAAMD,GAEvBH,GAAUG,EAGdF,EAAQD,EAEV,OAAOA,GAGHK,GAAc,SAAC3L,EAAQ1C,EAAO+N,GAClC,OAAOxG,GAAa7E,EAAO2E,QAAQC,IAAI,CAACvF,GAAIgM,EAAOO,KAAOrO,KAAKG,IAAIJ,GAAQgC,GAAI+L,EAAOO,KAAOrO,KAAKI,IAAIL,KAAU,IAGrGuO,GAAc,SAACC,EAAcT,GACxC,IAAIrL,EAAS,IAAIvC,KAAO,EAAG,GACvBsO,EAAe,CAAC/L,GAChB1C,GAASC,KAAKC,GAAG,EAEjB6N,EAAOW,gBACT1O,EAAwC,oBAAzB+N,EAAOW,cACpBX,EAAOW,cAAcX,EAAOJ,YAC5BI,EAAOW,eAKX,IADA,IAAIC,EAAc,GACTjU,EAAE,EAAGA,EAAE8T,EAAa7T,OAAQD,IAAK,CACxC,IAAIyT,EAAOK,EAAa9T,GAExB,GAAa,MAATyT,EACFnO,GAAS+N,EAAO/N,MACZ2O,EAAYhU,QACdgU,EAAYC,OAAO,GAAG,GAAG/T,KAAK,UAE3B,GAAa,MAATsT,EACTnO,GAAS+N,EAAO/N,MACZ2O,EAAYhU,QACdgU,EAAYC,OAAO,GAAG,GAAG/T,KAAK,UAE3B,GAAIkT,EAAOc,KAAKjU,SAASuT,GAC9BzL,EAAS2L,GAAY3L,EAAQ1C,EAAO+N,GACpCU,EAAa5T,KAAK6H,GACdiM,EAAYhU,QACdgU,EAAYC,OAAO,GAAG,GAAG/T,KAAK,UAE3B,GAAa,MAATsT,EAETQ,EAAY9T,KAAK,SAEZ,GAAa,MAATsT,EAIT,IAFA,IAAIW,EAAaH,EAAY9E,MAAMlK,UAE1B2E,EAAE,EAAGA,EAAEwK,EAAWnU,OAAQ2J,IAAK,CACtC,IAAIyK,EAAUD,EAAWxK,GAET,MAAZyK,EACF/O,GAAS+N,EAAO/N,MACK,MAAZ+O,EACT/O,GAAS+N,EAAO/N,MACK,MAAZ+O,IAETrM,EAAS2L,GAAY3L,EAAQ1C,EAAQC,KAAKC,GAAI6N,GAC9CU,EAAa5T,KAAK6H,KAM1B,OAAO+L,GCnHIO,GAAW,CAEtB,aAAc,CACZd,MAAO,UACPW,KAAM,CAAC,KACPT,MAAQ,CACNa,EAAG,8DAELP,cAAezO,KAAKC,GACpBuN,cAAe,GAGjB,eAAgB,CACdS,MAAO,cACPW,KAAM,CAAC,KACPT,MAAQ,CACNc,EAAG,gBACHC,EAAG,gBACHC,EAAG,gBACHC,EAAG,iBAELrP,MAAOC,KAAKC,GAAG,EACfwN,cAAe,EACfD,cAAe,GAGjB,eAAgB,CACdS,MAAO,IACPW,KAAM,CAAC,KACPT,MAAQ,CACNa,EAAG,yBAELjP,MAAOC,KAAKC,GAAG,EACfuN,cAAe,GAGjB,iBAAkB,CAChBS,MAAO,IACPW,KAAM,CAAC,KACPT,MAAQ,CACNa,EAAG,aAELjP,MAAO,GAAGC,KAAKC,GAAG,GAClBuN,cAAe,GAGjB,iBAAkB,CAChBS,MAAO,IACPW,KAAM,CAAC,KACPT,MAAQ,CACNa,EAAG,KACHE,EAAG,qCAELnP,MAAOC,KAAKC,GAAG,EACfuN,cAAe,GAGjB,iBAAkB,CAChBS,MAAO,IACPW,KAAM,CAAC,KACPT,MAAQ,CACNa,EAAG,cACHE,EAAG,6BACHE,EAAG,kBAELrP,MAAOC,KAAKC,GAAG,EACfuN,cAAe,GAGjB,iBAAkB,CAChBS,MAAO,IACPW,KAAM,CAAC,KACPT,MAAQ,CACNe,EAAG,eACHF,EAAG,MAELjP,MAAOC,KAAKC,GAAG,EACfuN,cAAe,GAGjB,qBAAsB,CACpBS,MAAO,IACPW,KAAM,CAAC,IAAK,KACZT,MAAQ,CACNkB,EAAG,kBACHC,EAAG,mBAELvP,MAAOC,KAAKC,GAAK,EACjBuN,cAAe,GAGjB,IAAO,CACLS,MAAO,UACPW,KAAM,CAAC,KACPT,MAAQ,CACNa,EAAG,aAELP,cAAezO,KAAKC,GACpBuN,cAAe,GAGjB,cAAe,CACbS,MAAO,UACPW,KAAM,CAAC,KACPT,MAAQ,CACNa,EAAG,eAELxB,cAAe,GAGjB,cAAe,CACbS,MAAO,UACPW,KAAM,CAAC,KACPT,MAAQ,CACNa,EAAG,eAELxB,cAAe,GAGjB,aAAc,CACZS,MAAO,IACPW,KAAM,CAAC,KACPT,MAAQ,CACNa,EAAG,YAELjP,MAAO,EAAEC,KAAKC,GAAG,EACjBwO,cAAezO,KAAKC,GACpBuN,cAAe,GAGjB,cAAe,CACbS,MAAO,UACPW,KAAM,CAAC,KACPT,MAAQ,CACNa,EAAG,kBAELxB,cAAe,GAGjB,cAAe,CACbS,MAAO,UACPW,KAAM,CAAC,KACPT,MAAQ,CACNa,EAAG,kBAELP,cAAezO,KAAKC,GACpBuN,cAAe,GAEjB,iBAAkB,CAChBS,MAAO,YACPW,KAAM,CAAC,KACPT,MAAQ,CACNa,EAAG,YAELjP,MAAOC,KAAKC,GAAK,EACjBwO,eAAgBzO,KAAKC,GAAK,EAC1BuN,cAAe,GAGjB,2BAA6B,CAC3BS,MAAO,YACPW,KAAM,CAAC,KACPT,MAAQ,CACNa,EAAG,gBAELjP,MAAO,EAAEC,KAAKC,GAAG,EACjBuN,cAAe,GAGjB,eAAgB,CACbS,MAAO,0BACPW,KAAM,CAAC,IAAK,IAAK,IAAK,KACvBT,MAAO,CACLoB,EAAG,uBACHC,EAAG,kBACHC,EAAG,kBACHC,EAAG,wBAEL3P,MAAOC,KAAKC,GAAG,EACfuN,cAAe,GAEjB,QAAW,CACTS,MAAO,kCACPW,KAAM,CAAC,KACPT,MAAQ,CACNe,EAAG,iBACHC,EAAG,kBAEL3B,cAAe,GAGjB,aAAc,CACZS,MAAO,KACPW,KAAM,CAAC,KACPT,MAAQ,CACNkB,EAAG,QACHC,EAAG,SAEL7B,cAAe,EACfD,cAAe,GACfiB,cAAezO,KAAKC,IAGtB,kCAAmC,CACjCgO,MAAO,IACPW,KAAM,CAAC,IAAK,KACZT,MAAQ,CACNe,EAAG,QACHC,EAAG,SAELpP,MAAOC,KAAKC,GAAK,EACjBwO,cAAe,SAAChU,GACd,OAAIA,EAAI,IAAM,EACL,GAECuF,KAAKC,GAAG,GAGpBuN,cAAe,IChNbxX,GAAO,6BACR0H,IACA,CACD4P,QAAS,CACPnW,MAAO,OACPf,KAAM,WACNqH,QAAS1D,OAAOG,KAAK6U,IACrBnZ,SAAU,SAAC2X,EAAS1X,GAClB,OAAOwX,GAAgB0B,GAASxB,EAAQD,SAAUC,EAAS1X,KAG/D6X,WAAY,CACVvW,MAAO,aACPb,IAAK,SAACuD,GACJ,OAAO8T,GAAgBoB,GAASlV,EAAMyT,WAExC7W,IAAK,SAACoD,GACJ,OAAO+T,GAAgBmB,GAASlV,EAAMyT,cAMzBqC,G,kDACnB,aAAe,IAAD,8BACZ,cAAM,wBACDrO,KAAO,yCACZ,EAAKC,SAAW,yBAHJ,E,8DAOZ,OAAO,wGAEF,CACDnL,KAAM,UACNsX,WAAY,EACZJ,QAAS,2BACTzP,eAAe,M,kCAKThE,GACV,IAAMwG,EAAQxG,EAAMwG,MACdqN,EAAarN,EAAMqN,YAAc,EAGnCI,EAASiB,GAAS1O,EAAMiN,SAC5BQ,EAAOJ,WAAaA,EACpBI,EAAOO,KAAO,OAEO1X,IAAjBmX,EAAO/N,QAAuB+N,EAAO/N,MAAQC,KAAKC,GAAG,GAEzD,IAAI8E,EAAQuJ,GAAYT,GAAQC,GAASA,GAEzC,OAAOvH,GAAexB,EADR,S,mCAKd,OAAO/O,O,GApC0B2H,IC/BhBiS,G,kDACnB,aAAe,uCACP,S,8DAIN,OAAO,wGAEF,CACDxZ,KAAM,QACN0H,cAAc,EACdE,aAAa,EACbC,eAAe,EACfJ,eAAe,M,kCAKThE,GACV,MAAO,CAAC,IAAIqG,KAAO,EAAK,GAAM,IAAIA,KAAO,EAAK,S,GAnBfvC,ICA7B3H,GAAO,6BACR0H,IACA,CACDmS,aAAc,CACZ1Y,MAAO,kBACPb,IAAK,GAEPwZ,aAAc,CACZ3Y,MAAO,gBACPf,KAAM,YAER2Z,cAAe,CACb5Y,MAAO,iBACPb,IAAK,IACLG,IAAK,GACLa,KAAM,KACNV,UAAW,SAACiD,GAAY,OAAOA,EAAMiW,iBAKtBE,G,kDACnB,aAAe,uCACP,W,8DAIN,OAAO,wGAEF,CACD5Z,KAAM,UACNyZ,aAAc,EACdC,cAAc,EACdC,cAAe,Q,sCAMLvT,EAAYE,EAAUuT,GAGpC,IAFA,IAAM7M,EAAa,EAAI6M,EACnBnQ,EAAS,GACJmL,EAAE7H,EAAY6H,GAAG,EAAKA,GAAG7H,EAChCtD,EAAOlF,KAAK,IAAIsF,KAAO1D,EAAWsF,GAAKpF,EAASoF,EAAItF,EAAWsF,GAAGmJ,EAC3CzO,EAAWuF,GAAKrF,EAASqF,EAAIvF,EAAWuF,GAAGkJ,IAEpE,OAAOnL,I,kCAGGjG,GAMV,IAJA,IAAMqW,EAAOrW,EAAMwG,MAAM0P,cAEnBI,EAAS,EAAID,EACfpQ,EAAS,GACJrF,EAAE,EAAGA,GAAGZ,EAAMwG,MAAMwP,aAAcpV,IAAK,CAC9C,IAAMsF,EAAkB,EAAVC,KAAKC,GAAWpG,EAAMwG,MAAMwP,cAAgB,GAAMpV,GAChE,GAAIZ,EAAMwG,MAAMyP,cAAyB,IAATI,EAAc,CAE5C,IAAME,EAAuB,EAAVpQ,KAAKC,GAAWpG,EAAMwG,MAAMwP,aAAepV,EACxD4V,EAAqB,EAAVrQ,KAAKC,GAAWpG,EAAMwG,MAAMwP,cAAgBpV,EAAI,GAEjE,GAAIqF,EAAOpF,OAAS,EAAG,CAGrB,IAAM4V,GAAsBD,EAAWD,GAJjB,GAI6CF,EACnEpQ,EAASA,EAAOyF,OAAOxP,KAAKwa,gBAAgBzQ,EAAOA,EAAOpF,OAAO,GACrB,IAAIwF,KAAOiQ,EAAQnQ,KAAKG,IAAIJ,GAASmQ,EAAOlQ,KAAKG,IAAIiQ,GAC1CD,EAAQnQ,KAAKI,IAAIL,GAASmQ,EAAOlQ,KAAKI,IAAIgQ,IACrDE,IAE9C,GAAI7V,IAAMZ,EAAMwG,MAAMwP,aAEpB,IAAK,IAAIW,EAASJ,EAZI,GAY0BI,GAAUH,EAAUG,GAZ9C,GAapB1Q,EAAOlF,KAAK,IAAIsF,KAAOiQ,EAAQnQ,KAAKG,IAAIJ,GAASmQ,EAAOlQ,KAAKG,IAAIqQ,GAAWL,EAAQnQ,KAAKI,IAAIL,GAASmQ,EAAOlQ,KAAKI,IAAIoQ,UAK1H1Q,EAAOlF,KAAK,IAAIsF,KAAOF,KAAKG,IAAIJ,GAAQC,KAAKI,IAAIL,KAGrD,OAAOD,I,mCAIP,OAAO9J,O,GAjE0B2H,ICrB/B3H,GAAO,6BACR0H,IACA,CACD+S,cAAe,CACbtZ,MAAO,kBACPG,KAAM,EACNhB,IAAK,KAKUoa,G,kDACnB,aAAe,uCACP,Y,8DAIN,OAAO,wGAEF,CACDta,KAAM,WACNqa,cAAe,M,kCAKT5W,GASV,IARA,IAAIiG,EAAS,GAET6Q,EAAU,GAEV5Q,EAAQC,KAAKC,GAAG,EAEhB2Q,EAAgB5Q,KAAKC,GAAGpG,EAAMwG,MAAMoQ,cACpCI,EAAoB,GAAMD,EACrBE,EAAE,EAAGA,EAAEjX,EAAMwG,MAAMoQ,cAAeK,IAAK,CAC9C,IAAI3G,EAAapK,EAAQC,KAAKC,GAAK4Q,EACnCF,EAAQ/V,KAAM,CAAC,IAAIsF,KAAOF,KAAKG,IAAIJ,GAAQC,KAAKI,IAAIL,IAASoK,IAC7DpK,GAAS,EAAMC,KAAKC,GAAKpG,EAAMwG,MAAMoQ,cAIvC,IAFA,IAAI/V,EAAS,GAAMsF,KAAKG,IAAIH,KAAKC,GAAG,EAAIpG,EAAMwG,MAAMoQ,eAE3CM,EAAK,EAAGA,EAAOJ,EAAQjW,OAAQqW,IACtC,IAAK,IAAItW,EAAE,EAAGA,EAAE,IAAKA,IAAK,CACxB,IAAIsF,EAAQ6Q,GAAkBnW,EAAI,KAASkW,EAAQI,GAAM,GACzDjR,EAAOlF,KAAK,IAAIsF,KAJN,KAIsBxF,EAASiW,EAAQI,GAAM,GAAGjP,EAAI9B,KAAKG,IAAIJ,IAJ7D,KAKkBrF,EAASiW,EAAQI,GAAM,GAAGhP,EAAI/B,KAAKI,IAAIL,MAGvE,OAAOD,I,mCAIP,OAAO9J,O,GA1C2B2H,ICXhC3H,GAAO,6BACR0H,IACA,CACDsT,MAAO,CACL7Z,MAAO,YACPG,KAAM,EACNhB,IAAK,GAEP2a,MAAO,CACL9Z,MAAO,cACPG,KAAM,EACNhB,IAAK,KAKU4a,G,kDACnB,aAAe,IAAD,8BACZ,cAAM,SACD5P,KAAO,yCACZ,EAAKC,SAAW,oBAHJ,E,8DAOZ,OAAO,wGAEF,CACDnL,KAAM,OACN4a,MAAO,EACPC,MAAO,EACPzS,gBAAiB,a,kCAKX3E,GASV,IARA,IAAIiG,EAAS,GAETS,EAAIiB,SAAS3H,EAAMwG,MAAM2Q,OACzB/F,EAAIzJ,SAAS3H,EAAMwG,MAAM4Q,OAEzBE,EAAalG,GADR1K,EAAI0K,EAAI,IAAM,EAAK,EAAI,GACP,GAAK1K,EAC1B6C,EAAa,GAAK7C,EAEb9F,EAAE,EAAGA,EAAE0W,EAAW,EAAG1W,IAAK,CACjC,IAAI2W,EAAkB,EAAVpR,KAAKC,GAAYmD,EAAc3I,EACvCkI,EAAI,EAAU3C,KAAKI,IAAKG,EAAI0K,EAAKmG,GACrCtR,EAAOlF,KAAK,IAAIsF,KAAOyC,EAAI3C,KAAKG,IAAIiR,GAAQzO,EAAI3C,KAAKI,IAAIgR,KAE3D,OAAOtR,I,mCAIP,OAAO9J,O,GArCuB2H,IClBrBoR,GAAW,CAEtB,qBAAsB,CACpBd,MAAO,IACPW,KAAM,CAAC,IAAK,KACZT,MAAQ,CACNkB,EAAG,kBACHC,EAAG,mBAELvP,MAAOC,KAAKC,GAAK,EACjBoR,eAAgB,SAACvD,GACf,OAAOA,EAAOJ,YAEhBF,cAAe,GAGjB,QAAW,CACTS,MAAO,IACPW,KAAM,IACNT,MAAO,CACLmD,EAAG,cACHC,EAAG,eAEL9C,cAAezO,KAAKC,GACpBwN,cAAe,GAGjB,YAAa,CACXQ,MAAO,IACPW,KAAM,IACNT,MAAO,CACLe,EAAG,wBACHC,EAAG,yBAELV,cAAezO,KAAKC,GACpBuN,cAAe,GAGjB,WAAc,CACZS,MAAO,eACPW,KAAM,CAAC,IAAK,KACZT,MAAO,CACLe,EAAG,sBAELT,cAAezO,KAAKC,GAAG,EACvBF,MAAOC,KAAKC,GAAG,EACfuN,cAAe,GAGjB,eAAgB,CACbS,MAAO,0BACPW,KAAM,CAAC,IAAK,IAAK,IAAK,KACvBT,MAAO,CACLoB,EAAG,uBACHC,EAAG,kBACHC,EAAG,kBACHC,EAAG,wBAEL3P,MAAOC,KAAKC,GAAG,EACfuN,cAAe,EACf6D,eAAgB,SAACvD,GACf,OAAO,EAAI9N,KAAKvJ,IAAI,EAAG,EAAEqX,EAAOJ,cAIpC,oBAAqB,CACnBO,MAAO,YACPW,KAAM,IACNT,MAAO,CACLe,EAAG,wBAELT,cAAezO,KAAKC,GAAG,EACvBuN,cAAe,IC9DbxX,GAAO,6BACR0H,IACA,CACD8T,cAAe,CACbra,MAAO,OACPf,KAAM,WACNqH,QAAS1D,OAAOG,KAAK6U,IACrBnZ,SAAU,SAAC2X,EAAS1X,GAClB,OAAOwX,GAAgB0B,GAASxB,EAAQiE,eAAgBjE,EAAS1X,KAGrE6X,WAAY,CACVvW,MAAO,aACPb,IAAK,SAACuD,GACJ,OAAO8T,GAAgBoB,GAASlV,EAAM2X,iBAExC/a,IAAK,SAACoD,GACJ,OAAO+T,GAAgBmB,GAASlV,EAAM2X,oBAMzBC,G,kDACnB,aAAe,IAAD,8BACZ,cAAM,iBACDlQ,SAAW,sCAChB,EAAKD,KAAO,8CAHA,E,8DAOZ,OAAO,wGAEF,CACDlL,KAAM,eACN2H,YAAa,UACbD,cAAc,EACd4P,WAAY,EACZ8D,cAAe,UACf3T,eAAe,EACfI,eAAe,EACfC,aAAa,M,kCAKPrE,GACV,IAGI2M,EAAOC,EAHLrK,EAAUvC,EAAMuC,QAChBsR,EAAa7T,EAAMwG,MAAMqN,YAAc,EAGzCtR,EAAQ/C,aACVmN,EAAQpK,EAAQnE,KAAOmE,EAAQpE,KAC/ByO,EAAQrK,EAAQjE,KAAOiE,EAAQlE,MAE/BsO,EAAQC,EAA4B,EAApBrK,EAAQ/D,UAI1B,IAAIyV,EAASiB,GAASlV,EAAMwG,MAAMmR,eAClC1D,EAAOJ,WAAaA,OAEA/W,IAAhBmX,EAAOO,OAAsBP,EAAOO,KAAO,QAC1B1X,IAAjBmX,EAAO/N,QAAuB+N,EAAO/N,MAAQC,KAAKC,GAAG,GAEzD,IAAI8E,EAAQuJ,GAAYT,GAAQC,GAASA,GACrClM,EAAQ,EAMZ,OAJIkM,EAAOuD,iBACTzP,EAA0C,oBAA1BkM,EAAOuD,eAAiCvD,EAAOuD,eAAevD,GAAUA,EAAOuD,gBAG1F9K,GAAexB,EAAOyB,EAAM5E,EAAO6E,EAAM7E,K,mCAIhD,OAAO5L,O,GArD8B2H,IC/BnC3H,GAAO,6BACR0H,IACA,CACDoC,OAAQ,CACN3I,MAAO,mBACPb,IAAK,GAEPob,UAAW,CACTva,MAAO,iBACPG,KAAM,IACNhB,IAAK,OAKUqO,G,kDACnB,aAAe,uCACP,Q,8DAIN,OAAO,wGAEF,CACDvO,KAAM,OACN0J,OAAQ,EACR4R,UAAW,O,kCAKL7X,GAEV,IADA,IAAIiG,EAAS,GACJrF,EAAE,EAAGA,GAAwB,EAArBZ,EAAMwG,MAAMP,OAAYrF,IAAK,CAC5C,IAAIsF,EAAkB,EAAVC,KAAKC,IAAY,EAAMpG,EAAMwG,MAAMP,QAAUrF,EACrDkX,EAAa,EACblX,EAAI,IAAM,IACZkX,GAAc9X,EAAMwG,MAAMqR,WAE5B5R,EAAOlF,KAAK,IAAIsF,KAAOyR,EAAa3R,KAAKG,IAAIJ,GAAQ4R,EAAa3R,KAAKI,IAAIL,KAE7E,OAAOD,I,mCAIP,OAAO9J,O,GA9BuB2H,IClBrBiU,GAAb,WACE,aAAe,oBACb7b,KAAK8b,WAAa,GAFtB,oDAKUC,GACN,GAAI/b,KAAKgc,UACPhc,KAAK8b,WAAWjX,KAAKkX,OAChB,CAEL,IADA,IAAIE,GAAQ,EACHvX,EAAI,EAAGA,GAAK1E,KAAK8b,WAAWnX,OAAQD,IAC3C,GAAIqX,EAAQ,GAAK/b,KAAK8b,WAAWpX,EAAE,GAAG,GAAG,CACvC1E,KAAK8b,WAAW5H,OAAOxP,EAAE,EAAG,EAAGqX,GAC/BE,GAAQ,EACR,MAICA,GACHjc,KAAK8b,WAAWjX,KAAKkX,MAnB7B,gCA0BI,OADY/b,KAAK8b,WAAWlI,UAzBhC,gCA8BI,OAAmC,IAA3B5T,KAAK8b,WAAWnX,WA9B5B,KCGauX,GAAM,SAAChM,EAAIC,EAAIgM,GAK1B,IAJA,IAAIC,EAAI,CAAClM,EAAGnE,EAAGmE,EAAGlE,GACdwF,EAAI,CAACrB,EAAGpE,EAAGoE,EAAGnE,GACdqQ,EAAS,GAEJ3X,EAAI,EAAGA,EAAI0X,EAAEzX,SAAUD,EAC9B2X,EAAOxX,MAAM,EAAMsX,GAAKC,EAAE1X,GAAKyX,EAAI3K,EAAE9M,IAGvC,OAAO,IAAIyF,KAAOkS,EAAO,GAAIA,EAAO,KAIjBC,G,WACnB,aAAe,oBACbtc,KAAKuc,QAAU,GACfvc,KAAKwc,SAAW,IAAIC,IACpBzc,KAAK0c,cAAgB,GACrB1c,KAAK2c,QAAU,GACf3c,KAAK4c,SAAW,IAAIH,IACpBzc,KAAK6c,mB,oDAGCC,GACN,IAAIld,EAAMkd,EAAKC,WAEV/c,KAAKwc,SAASQ,IAAIpd,KACrBI,KAAKwc,SAASlL,IAAI1R,GAClBI,KAAKuc,QAAQ3c,GAAOkd,EACpB9c,KAAK0c,cAAc9c,GAAO,GAC1BI,KAAK6c,sB,8BAIDI,EAAOC,GAAkB,IAAXC,EAAU,uDAAH,EACvBC,EAAWH,EAAMF,WACjBM,EAAWH,EAAMH,WACjBO,EAAU,CAACF,EAAUC,GAAUE,OAAOR,WAErC/c,KAAK4c,SAASI,IAAIM,KACrBtd,KAAK0c,cAAcU,GAAUvY,KAAK,CAACiY,KAAMI,EAAOC,OAAQA,IACxDnd,KAAK0c,cAAcW,GAAUxY,KAAK,CAACiY,KAAMG,EAAOE,OAAQA,IACxDnd,KAAK4c,SAAStL,IAAIgM,GAClBtd,KAAK2c,QAAQW,GAAW,CAACL,EAAMF,WAAYG,EAAMH,YACjD/c,KAAK6c,sB,8BAIDW,EAAOC,GACb,IAAIH,EAAU,CAACE,EAAOC,GAAOF,OAAOR,WACpC,OAAO/c,KAAK2c,QAAQW,K,2CAGDI,EAAWC,GAAU,IAAD,OACnCC,EAAW5d,KAAK6d,sBAAsBH,EAAWC,GA4CrD,YA1CiB/c,IAAbgd,GAAyB,WAC3B,IAAIE,EAAQ,GACRC,EAAY,GACZC,EAAK,IAAInC,GACToC,EAAQ,EAAKzB,SAEjBsB,EAAMJ,GAAa,EAEnBO,EAAM7Z,SAAQ,SAAA0Y,GACRA,IAASY,IACXI,EAAMhB,GAAQoB,QAIlBF,EAAGG,QAAQ,CAACT,EAAW,IAEvB,IAhB0B,iBAiBxB,IACIU,EADeJ,EAAGK,UACS,GAC/B,EAAK3B,cAAc0B,EAAYrB,YAAY3Y,SAAQ,SAAAka,GACjD,IAAIC,EAAOT,EAAMM,GAAeE,EAASnB,OAErCoB,EAAOT,EAAMQ,EAASxB,QACxBgB,EAAMQ,EAASxB,MAAQyB,EACvBR,EAAUO,EAASxB,MAAQsB,EAC3BJ,EAAGG,QAAQ,CAACG,EAASxB,KAAMyB,UATzBP,EAAGhC,WAAY,IAiBvB,IAHA,IAAIwC,EAAO,CAACb,EAAQZ,YAChB0B,EAAWd,EAETc,IAAaf,GACjBc,EAAK/J,QAAQsJ,EAAUU,GAAU1B,YACjC0B,EAAWV,EAAUU,GAGvBb,EAAWY,EAAKpX,KAAI,SAAA0V,GAAI,OAAI,EAAKP,QAAQO,MACzC,EAAK4B,kBAAkBhB,EAAWC,EAASC,GAvChB,GA0CtBA,I,yCAIP5d,KAAK2e,YAAc,K,wCAGH1B,EAAOC,EAAOsB,GAC9Bxe,KAAK2e,YAAY3e,KAAK4e,aAAa3B,EAAOC,IAA1C,aAAwDsB,GACxDxe,KAAK2e,YAAY3e,KAAK4e,aAAa1B,EAAOD,IAAU,aAAIuB,GAAM7U,Y,4CAG1CsT,EAAOC,GAC3B,IAAIU,EAAW5d,KAAK2e,YAAY3e,KAAK4e,aAAa3B,EAAOC,IACzD,YAAoBtc,IAAbgd,OAAyBhd,EAAzB,aAAyCgd,K,mCAGrCX,EAAOC,GAClB,OAAOD,EAAMF,WAAa,IAAMG,EAAMH,e,KCjHpC8B,GAAc,CAClB,IAAI1U,MAAQ,KAAO,aACnB,IAAIA,KAAO,KAAO,aAClB,IAAIA,KAAO,EAAM,cAGb2U,GAAY,CAChB,IAAI3U,MAAQ,IAAM,IAClB,IAAIA,KAAQ,GAAM,IAClB,IAAIA,MAAQ,GAAM,IAElB,IAAIA,MAAQ,IAAM,IAClB,IAAIA,KAAO,GAAM,IACjB,IAAIA,KAAO,IAAM,KAGnB,SAAS4U,GAASC,EAAO9T,EAAGC,EAAG4P,EAAGkE,EAAOnS,GACvC,IAAIoS,EAAIC,EAAIC,EAEZ,GAAc,IAAVH,EAAJ,CAyBA,IAAII,EAAKnD,GAAIhR,EAAGC,EAAG,IACfmU,EAAKpD,GAAIhR,EAAG6P,EAAG,IACfwE,EAAKrD,GAAI/Q,EAAG4P,EAAG,IAEnBgE,GAASC,EAAOK,EAAIC,EAAIC,EAAIN,EAAQ,EAAGnS,GACvCiS,GAASC,EAAOjE,EAAGuE,EAAIC,EAAIN,EAAQ,EAAGnS,GACtCiS,GAASC,EAAO7T,EAAGoU,EAAIF,EAAIJ,EAAQ,EAAGnS,GACtCiS,GAASC,EAAO9T,EAAGmU,EAAIC,EAAIL,EAAQ,EAAGnS,OAhCtC,CACMA,EAAS2E,OAAS,GACpByN,EAAKjV,KAAKmG,KAAKnG,KAAKY,IAAIK,EAAEa,EAAG,GAAK9B,KAAKY,IAAIK,EAAEc,EAAG,KAAOc,EAAS2E,OAASxH,KAAKC,GAAK,KACnFiV,EAAKlV,KAAKmG,KAAKnG,KAAKY,IAAIM,EAAEY,EAAG,GAAK9B,KAAKY,IAAIM,EAAEa,EAAG,KAAOc,EAAS2E,OAASxH,KAAKC,GAAK,KACnFkV,EAAKnV,KAAKmG,KAAKnG,KAAKY,IAAIkQ,EAAEhP,EAAG,GAAK9B,KAAKY,IAAIkQ,EAAE/O,EAAG,KAAOc,EAAS2E,OAASxH,KAAKC,GAAK,OAEnFgV,EAAMpS,EAAS2E,OAASxH,KAAKC,GAAK,IAClCiV,EAAMrS,EAAS2E,OAASxH,KAAKC,GAAK,IAClCkV,EAAMtS,EAAS2E,OAASxH,KAAKC,GAAK,KAGpC,IAAIsV,EAAK,IAAIrV,KACVe,EAAEa,EAAI9B,KAAKG,IAAI8U,GAAQhU,EAAEc,EAAI/B,KAAKI,IAAI6U,GACtChU,EAAEa,EAAI9B,KAAKI,IAAI6U,GAAQhU,EAAEc,EAAI/B,KAAKG,IAAI8U,IACrCO,EAAK,IAAItV,KACVgB,EAAEY,EAAI9B,KAAKG,IAAI+U,GAAQhU,EAAEa,EAAI/B,KAAKI,IAAI8U,GACtChU,EAAEY,EAAI9B,KAAKI,IAAI8U,GAAQhU,EAAEa,EAAI/B,KAAKG,IAAI+U,IACrCO,EAAK,IAAIvV,KACV4Q,EAAEhP,EAAI9B,KAAKG,IAAIgV,GAAQrE,EAAE/O,EAAI/B,KAAKI,IAAI+U,GACtCrE,EAAEhP,EAAI9B,KAAKI,IAAI+U,GAAQrE,EAAE/O,EAAI/B,KAAKG,IAAIgV,IAEzCJ,EAAMna,KAAK,CAAC2a,EAAIC,GAAK,CAACD,EAAIE,GAAK,CAACD,EAAIC,KAcxC,IAAMzf,GAAO,6BACR0H,IACA,CACDgY,0BAA2B,CACzBve,MAAO,kBACPb,IAAK,GAEPqf,4BAA6B,CAC3Bxe,MAAO,aACPb,IAAK,EACLG,IAAK,GAEPmf,wBAAyB,CACvBze,MAAO,mBACPG,KAAM,EACNhB,IAAK,KAMUuf,G,kDACnB,aAAe,uCACP,sB,8DAIN,OAAO,wGAEF,CACDzf,KAAM,qBACNsf,0BAA2B,EAC3BC,4BAA6B,EAC7BC,wBAAyB,EACzB/X,eAAe,M,uCAKJiY,GAEf,IADA,IAAIzT,EAAW,GACN5H,EAAE,EAAGA,GAAGqb,EAAUrb,IAAK,CAC9B,IAAIsF,EAAkB,EAAVC,KAAKC,GAAW6V,GAAY,GAAMrb,GAC1Csb,EAAmB,EAAV/V,KAAKC,GAAW6V,GAAY,IAAQrb,EAAI,GAAKqb,GAE1DzT,EAASzH,KAAK,IAAIsF,KAAO,EAAG,IAC5BmC,EAASzH,KAAK,IAAIsF,KAAOF,KAAKG,IAAIJ,GAAQC,KAAKI,IAAIL,KACnDsC,EAASzH,KAAK,IAAIsF,KAAOF,KAAKG,IAAI4V,GAAS/V,KAAKI,IAAI2V,KAEtD,OAAO1T,I,kCAGGxI,GACV,IAAIwI,EACA0S,EAAQ,GACNiB,EAAexU,SAAS3H,EAAMwG,MAAMsV,6BACpCM,EAAQzU,SAAS3H,EAAMwG,MAAMqV,2BAEnC,OAAQO,GACN,KAAK,EACH5T,EAAWuS,GAAYjG,MAAM,GAC7B,MACF,KAAK,EACHtM,EAAWwS,GAAUlG,MAAM,GAC3B,MACF,QACEtM,EAAWtM,KAAKmgB,iBAAiBD,GAKrC,IAAK,IAAIxb,EAAI,EAAGA,EAAI4H,EAAS3H,OAAQD,GAAK,EACxCqa,GAASC,EAAO1S,EAAS5H,EAAI,GAAI4H,EAAS5H,EAAI,GAAI4H,EAAS5H,EAAI,GAC7Dub,EAAc,CAAExO,OAAQhG,SAAS3H,EAAMwG,MAAMuV,2BAMjD,IAAIO,EAAQ,IAAI9D,GAEhB0C,EAAM5a,SAAQ,SAACic,GACb,IAAInQ,EAAKmQ,EAAK,GACVlQ,EAAKkQ,EAAK,GAEdD,EAAME,QAAQpQ,GACdkQ,EAAME,QAAQnQ,GACdiQ,EAAMG,QAAQrQ,EAAIC,MAKpB,IAEIqQ,EAFAC,ECtJO,SAASxgB,GACtB,IACIyE,EADAgc,EAAI,GAEJC,EAAc,GACdC,EAAW,GACXH,EAAQ,GAER3a,EAAK,GACL+a,EAAY,GACZC,EAAU,EAEd,SAASC,EAAMhV,GAMb,OALKjG,EAAGiK,eAAehE,KACrB4U,EAAYG,GAAW,EACvBD,EAAUC,GAAW/U,EACrBjG,EAAGiG,GAAK+U,KAEHhb,EAAGiG,GAgBZ,SAASiV,EAAS5E,EAAG5K,EAAG1L,GACtB4a,EAAEtE,GAAKsE,EAAEtE,IAAM,GACfsE,EAAElP,GAAKkP,EAAElP,IAAM,GACfkP,EAAEtE,GAAGvX,KAAK,CAAC2M,EAAG1L,IAGhB,IAAImb,EAAM,GACNC,EAAQ,GAAIC,EAAS,GAEzB,IAAKzc,EAAI,EAAGA,EAAIzE,EAAQ+e,MAAMra,OAAQD,GAAK,EAAG,CAC5C,IAAI2b,EAAOpgB,EAAQ+e,MAAMta,GACrB0X,EAAI2E,EAAMV,EAAK,IACf7O,EAAIuP,EAAMV,EAAK,IAEnBW,EAAS5E,EAAG5K,EAAG9M,GACVzE,EAAQmhB,UACXJ,EAASxP,EAAG4K,EAAG1X,GAGbzE,EAAQmhB,UACVD,EAAO/E,GAAK+E,EAAO/E,IAAM,EACzB8E,EAAM9E,GAAK8E,EAAM9E,IAAM,EACvB+E,EAAO3P,GAAK2P,EAAO3P,IAAM,EACzB0P,EAAM1P,GAAK0P,EAAM1P,IAAM,EACvB2P,EAAO/E,IAAM,EACb8E,EAAM1P,IAAM,IAEZyP,EAAI7E,GAAK6E,EAAI7E,IAAM,EACnB6E,EAAIzP,GAAKyP,EAAIzP,IAAM,EACnByP,EAAI7E,IAAM,EACV6E,EAAIzP,IAAM,GAgCd,IAAI6P,EAAQphB,EAAQmhB,SA5BpB,WACE,IAAIE,EAAY,EACZ/Q,EAAQ,EAEZ,IAAK7L,EAAI,EAAGA,EAAIoc,EAASpc,GAAK,EACxByc,EAAOzc,GAAKwc,EAAMxc,KAAO,IACvByc,EAAOzc,GAAKwc,EAAMxc,KACpB6L,EAAQ7L,GAEV4c,GAAa,GAGjB,MAAO,CAACC,IAAKD,EAAW/Q,MAAOA,GAgBFiR,GAb/B,WACE,IAAIF,EAAY,EACZ/Q,EAAQ,EAEZ,IAAK7L,EAAI,EAAGA,EAAIoc,EAASpc,GAAK,EACxBuc,EAAIvc,GAAK,IAAM,IACjB6L,EAAQ7L,EACR4c,GAAa,GAGjB,MAAO,CAACC,IAAKD,EAAW/Q,MAAOA,GAGgBkR,GAajD,OAZIJ,EAAME,IAAM,IAAM,GAAKF,EAAME,IA5EjC,SAASG,EAAIlQ,GACX,KAAOmP,EAAYnP,GAAKkP,EAAElP,GAAG7M,OAAQgc,EAAYnP,IAAM,EAAG,CACxD,IAAI6O,EAAOK,EAAElP,GAAGmP,EAAYnP,IACxBmQ,EAAKtB,EAAK,GACVva,EAAKua,EAAK,GACTO,EAAS9a,KACZ8a,EAAS9a,IAAM,EACf4b,EAAIC,IAGRlB,EAAM5b,KAAK2M,GAqEbkQ,CAAIL,EAAM9Q,OAENkQ,EAAM9b,OAAW1E,EAAQ+e,MAAMra,OAInC8b,EAAM9W,UAGC8W,EAAMrZ,KAAI,SAAUtB,GACzB,OAAO+a,EAAU/a,MDyCL8b,CAAc,CAAC5C,MAAOhb,OAAO6d,OAAOzB,EAAMzD,WAGlDmF,EAAiB,GACjBC,EAAc,GAOlB,IAAKrd,EAAI,EAAGA,EAAI+b,EAAM9b,OAAO,EAAGD,IAAK,CACnC,IAAI2b,EAAO,CAACI,EAAM/b,GAAI+b,EAAM/b,EAAE,IAAI6Y,OAAOR,WACzCgF,EAAYld,KAAKwb,GAEnB0B,EAAc,IAAItF,IAAIsF,GAEtB,I1BzKuB7W,EAAGC,E0ByKtB6W,EAAe/S,MAAMgT,M1BzKF/W,E0ByKkB6W,E1BzKf5W,E0ByK4BiV,EAAMxD,S1BxKvD,IAAIH,IAAJ,uBAEA,aAAIvR,GAAGgX,QAAO,SAAAnW,GAAC,OAAKZ,EAAE6R,IAAIjR,OAF1B,aAGA,aAAIZ,GAAG+W,QAAO,SAAAnW,GAAC,OAAKb,EAAE8R,IAAIjR,W0BqKwCjB,QAAO,SAACqX,EAAMjN,GAGnF,OADAiN,GADAjN,EAAIA,EAAEkN,MAAM,MACL,GAAK,IAAMlN,EAAE,IAAMA,EAAE,GAAK,IAAMA,EAAE,GAClCiN,IACN,IAEH1B,EAAMrc,SAAQ,SAACxE,EAAKgG,GAClB,IAAI8G,EAAS0T,EAAM7D,QAAQ3c,GAE3B,GAAI4gB,EACF,GAAKJ,EAAMiC,QAAQziB,EAAK4gB,GAOtBsB,EAAejd,KAAK6H,OAPY,CAEhC,IAAI8R,EAAO4B,EAAMkC,qBAAqB9B,EAAS5gB,GAC/C4e,EAAK5K,QACL4K,EAAKpa,SAAQ,SAAA0Y,GAAI,OAAIgF,EAAejd,KAAKiY,MACzCgF,EAAejd,KAAK6H,QAKtBoV,EAAejd,KAAK6H,GAItB,GAAIsV,EAAapiB,GAAM,CACrB,IAAI2iB,EAAgBnC,EAAM7D,QAAQyF,EAAapiB,IAC3C0d,EAAU,CAAC1d,EAAKoiB,EAAapiB,IAAM2d,OAAOR,WAE1CqD,EAAMzD,QAAQW,KAEhBwE,EAAejd,KAAK0d,GACpBT,EAAejd,KAAK6H,WAEfsV,EAAapiB,GAGtB4gB,EAAU5gB,KAUZ,OANAkiB,EAAe1d,SAAQ,SAAAoK,GAChBA,EAAMgU,UACThU,EAAM1C,SAAS,CAACC,EAHN,KAGgBC,EAHhB,OAIVwC,EAAMgU,SAAU,MAGbV,I,mCAIP,OAAO7hB,O,GA1IoC2H,IEuVhC6a,GAtaQ,WACrB,MAAO,CACL,IAAItY,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,aAAe,eAC3B,IAAIA,MAAQ,aAAe,eAC3B,IAAIA,MAAQ,cAAgB,cAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,cAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,cAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,cAC5B,IAAIA,MAAQ,cAAgB,cAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,cAAgB,eAC5B,IAAIA,MAAQ,eAAiB,eAC7B,IAAIA,MAAQ,eAAiB,eAC7B,IAAIA,MAAQ,eAAiB,eAC7B,IAAIA,MAAQ,eAAiB,eAC7B,IAAIA,MAAQ,eAAiB,eAC7B,IAAIA,MAAQ,eAAiB,eAC7B,IAAIA,KAAO,gBAAkB,eAC7B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,YAAc,cACzB,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,aAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,gBAC3B,IAAIA,KAAO,cAAgB,gBAC3B,IAAIA,KAAO,cAAgB,gBAC3B,IAAIA,KAAO,aAAe,gBAC1B,IAAIA,KAAO,cAAgB,kBAC3B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,eAAiB,gBAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,cAC3B,IAAIA,KAAO,aAAe,eAC1B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,cAAgB,eAC3B,IAAIA,KAAO,eAAiB,aAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,cAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,KAAO,eAAiB,eAC5B,IAAIA,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","file":"static/js/main.b0ee4798.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a6ab37e6.svg\";","import ReactGA from 'react-ga'\n\nReactGA.initialize('UA-126702426-1', {\n  debug: false // Set to true to see debug info in the console\n})\nReactGA.pageview(window.location.pathname + window.location.search)\n","import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './Header.scss'\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <img src={logo} className=\"app-logo mr-2\" alt=\"logo\" />\n          <h1 className=\"d-inline m-0\">sandify</h1>\n          <p className=\"ml-4 d-none d-lg-block\">create patterns for robots that draw in sand with ball bearings</p>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default Header\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Form,\n  Row\n} from 'react-bootstrap'\nimport debounce from 'lodash/debounce'\n\nclass InputOption extends Component {\n  constructor(props) {\n    super(props);\n    this.delayedSet = debounce( (value, key, onChange) => {\n      let attrs = {}\n      attrs[key] = value\n      onChange(attrs)\n    }, 1500)\n  }\n\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n    const optionType = option.type || 'number'\n    const minimum = (typeof option.min === 'function') ? option.min(model) : parseFloat(option.min)\n    const maximum = (typeof option.max === 'function') ? option.max(model) : parseFloat(option.max)\n    const visible = option.isVisible === undefined ? true : option.isVisible(model)\n\n    return (\n      <Row className={\"align-items-center pb-1\" + (visible ? '' : ' d-none')}>\n        <Col sm={5}>\n        <Form.Label htmlFor=\"options-step\">\n          {option.title}\n        </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Form.Control\n            as={optionType===\"textarea\" ? \"textarea\" : \"input\"}\n            type={optionType}\n            step={option.step ? option.step : 1}\n            min={!isNaN(minimum) ? minimum : ''}\n            max={!isNaN(maximum) ? maximum : ''}\n            value={model[this.props.optionKey]}\n            plaintext={option.plainText}\n            onChange={(event) => {\n              let attrs = {}\n              let value = event.target.value\n\n              if (optionType === 'number') {\n                value = value === '' ? '' : parseFloat(value)\n              }\n\n              attrs[this.props.optionKey] = value\n              if (option.onChange !== undefined) {\n                attrs = option.onChange(attrs, model)\n              }\n              this.props.onChange(attrs)\n              if (this.props.delayKey !== undefined) {\n                this.delayedSet(value, this.props.delayKey, this.props.onChange)\n              }\n            }}\n            />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default InputOption\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Row,\n  Form,\n} from 'react-bootstrap'\nimport Switch from 'react-switch'\n\nclass CheckboxOption extends Component {\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n\n    return (\n      <Row className=\"align-items-center\">\n        <Col sm={5}>\n        <Form.Label htmlFor=\"options-step\">\n          {option.title}\n        </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Switch\n            checked={model[this.props.optionKey]}\n            onChange={(checked) => {\n              let attrs = {}\n              attrs[this.props.optionKey] = checked\n\n              if (option.onChange !== undefined) {\n                attrs = option.onChange(attrs, model)\n              }\n\n              this.props.onChange(attrs)\n            }} />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default CheckboxOption\n","const machineOptions = {\n  minX: {\n    title: 'Min X (mm)',\n  },\n  maxX: {\n    title: 'Max X (mm)',\n  },\n  minY: {\n    title: 'Min Y (mm)',\n  },\n  maxY: {\n    title: 'Max Y (mm)',\n  },\n  origin: {\n    title: 'Force origin'\n  },\n  maxRadius: {\n    title: 'Max radius (mm)'\n  },\n  minimizeMoves: {\n    title: 'Try to minimize perimeter moves',\n    type: 'checkbox'\n  },\n  polarEndPoint: {\n    title: 'End point'\n  },\n  polarStartPoint: {\n    title: 'Start point'\n  }\n}\n\nexport default class Machine {\n  getOptions() {\n    return machineOptions\n  }\n}\n","import { createSlice } from \"@reduxjs/toolkit\"\n\n// accommodate old and new local storage keys\nconst localMinX = parseFloat(localStorage.getItem('minX') || localStorage.getItem('machine_min_x'))\nconst localMaxX = parseFloat(localStorage.getItem('maxX') || localStorage.getItem('machine_max_x'))\nconst localMinY = parseFloat(localStorage.getItem('minY') || localStorage.getItem('machine_min_y'))\nconst localMaxY = parseFloat(localStorage.getItem('maxY') || localStorage.getItem('machine_max_y'))\nconst localMaxRadius = parseFloat(localStorage.getItem('maxRadius') || localStorage.getItem('machine_radius'))\n\nconst machineSlice = createSlice({\n  name: 'machine',\n  initialState: {\n    rectangular: undefined !== localStorage.getItem('machine_rect_active') ? localStorage.getItem('machine_rect_active') < 2 : true,\n    rectExpanded: false,\n    polarExpanded: false,\n    minX: localMinX || 0,\n    maxX: localMaxX || 500,\n    minY: localMinY || 0,\n    maxY: localMaxY || 500,\n    maxRadius: localMaxRadius || 250,\n    minimizeMoves: JSON.parse(localStorage.getItem('minimizeMoves')) || false,\n    rectOrigin: [],\n    polarStartPoint: 'none',\n    polarEndPoint: 'none'\n  },\n  reducers: {\n    updateMachine(state, action) {\n      Object.assign(state, action.payload)\n      Object.keys(action.payload).forEach(key => {\n        localStorage.setItem(key, action.payload[key])\n      })\n    },\n    toggleMachineRectExpanded(state, action) {\n      state.rectangular = true\n      state.rectExpanded = !state.rectExpanded\n      state.polarExpanded = false\n      localStorage.setItem('machine_rect_active', 1)\n    },\n    toggleMachinePolarExpanded(state, action) {\n      state.rectangular = false\n      state.rectExpanded = false\n      state.polarExpanded = !state.polarExpanded\n      localStorage.setItem('machine_rect_active', 2)\n    },\n    setMachineRectOrigin(state, action) {\n      let newValue = []\n      let value = action.payload\n\n      for (let i = 0; i < value.length ; i++) {\n        if (!state.rectOrigin.includes(value[i])) {\n          newValue.push(value[i])\n          break\n        }\n      }\n      state.rectOrigin = newValue\n    },\n    toggleMinimizeMoves(state, action) {\n      state.minimizeMoves = !state.minimizeMoves\n      localStorage.setItem('minimizeMoves', state.minimizeMoves)\n    },\n  }\n})\n\nexport const {\n  updateMachine,\n  toggleMachineRectExpanded,\n  toggleMachinePolarExpanded,\n  setMachineRectOrigin,\n  setMachineSize,\n  toggleMinimizeMoves,\n} = machineSlice.actions\n\nexport default machineSlice.reducer\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Card,\n    Col,\n    Form,\n    Row,\n    ToggleButton,\n    ToggleButtonGroup,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport Machine from '../../models/Machine'\nimport {\n  updateMachine,\n  toggleMinimizeMoves,\n  toggleMachineRectExpanded,\n  setMachineRectOrigin\n} from './machineSlice'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    expanded: state.machine.rectExpanded,\n    active:   state.machine.rectangular,\n    minX:    state.machine.minX,\n    maxX:    state.machine.maxX,\n    minY:    state.machine.minY,\n    maxY:    state.machine.maxY,\n    origin:   state.machine.rectOrigin,\n    minimizeMoves: state.machine.minimizeMoves,\n    options: new Machine().getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    activeCallback: (event) => {\n      dispatch(toggleMachineRectExpanded())\n    },\n    onChange: (attrs) => {\n      dispatch(updateMachine(attrs))\n    },\n    onOriginChange: (value) => {\n      dispatch(setMachineRectOrigin(value))\n    },\n    toggleMinimizeMoves: () => {\n      dispatch(toggleMinimizeMoves());\n    },\n  }\n}\n\nclass RectSettings extends Component {\n  render() {\n    var activeClassName = this.props.active ? 'active' : ''\n\n    return (\n      <Card className={`${activeClassName} overflow-auto`}>\n        <Accordion.Toggle as={Card.Header} eventKey={2} onClick={this.props.activeCallback}>\n          <h3>Rectangular machine</h3>\n          Rectangular machines like Zen XY\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey={2}>\n          <Card.Body>\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"minX\"\n              optionKey=\"minX\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"maxX\"\n              optionKey=\"maxX\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"minY\"\n              optionKey=\"minY\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"maxY\"\n              optionKey=\"maxY\"\n              index={0}\n              model={this.props} />\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"origin\">\n                  Force origin\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <ToggleButtonGroup id=\"origin-bar\" type=\"checkbox\" name=\"origin\" className=\"flex-wrap\" value={this.props.origin} onChange={this.props.onOriginChange}>\n                  <ToggleButton variant=\"light\" value={1} >upper left</ToggleButton>\n                  <ToggleButton variant=\"light\" value={2} >upper right</ToggleButton>\n                  <ToggleButton variant=\"light\" value={0} >lower left</ToggleButton>\n                  <ToggleButton variant=\"light\" value={3} >lower right</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n\n            <CheckboxOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              optionKey=\"minimizeMoves\"\n              key=\"minimizeMoves\"\n              index={0}\n              model={this.props} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RectSettings)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion,\n    Col,\n    Row,\n    Form,\n    Card,\n    ToggleButton,\n    ToggleButtonGroup\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport Machine from '../../models/Machine'\nimport {\n  toggleMachinePolarExpanded,\n  updateMachine,\n  toggleMinimizeMoves\n} from './machineSlice'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    expanded: state.machine.polarExpanded,\n    active: !state.machine.rectangular,\n    maxRadius: state.machine.maxRadius,\n    startPoint: state.machine.polarStartPoint,\n    endPoint: state.machine.polarEndPoint,\n    minimizeMoves: state.machine.minimizeMoves,\n    options: new Machine().getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    activeCallback: (event) => {\n      dispatch(toggleMachinePolarExpanded())\n    },\n    onChange: (attrs) => {\n      dispatch(updateMachine(attrs))\n    },\n    onStartPointChange: (value) => {\n      dispatch(updateMachine({polarStartPoint: value}))\n    },\n    onEndPointChange: (value) => {\n      dispatch(updateMachine({polarEndPoint: value}))\n    },\n    toggleMinimizeMoves: () => {\n      dispatch(toggleMinimizeMoves())\n    },\n  }\n}\n\nclass PolarSettings extends Component {\n  render() {\n    var activeClassName = this.props.active ? 'active' : ''\n\n    return (\n      <Card className={`${activeClassName} overflow-auto`}>\n        <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.activeCallback}>\n          <h3>Polar machine</h3>\n          Polar machines like Sisyphus\n        </Accordion.Toggle>\n\n        <Accordion.Collapse eventKey={1}>\n          <Card.Body>\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"maxRadius\"\n              optionKey=\"maxRadius\"\n              index={0}\n              model={this.props} />\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"forceStart\">\n                  Start point\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <ToggleButtonGroup id=\"startPoint\" type=\"radio\" name=\"startPoint\" value={this.props.startPoint} onChange={this.props.onStartPointChange}>\n                  <ToggleButton variant=\"light\" value=\"none\">none</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"center\">center</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"perimeter\">perimeter</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n\n            <Row className=\"align-items-center pb-2\">\n              <Col sm={5}>\n                <Form.Label htmlFor=\"endPoint\">\n                  End point\n                </Form.Label>\n              </Col>\n\n              <Col sm={7}>\n                <ToggleButtonGroup id=\"endPoint\" type=\"radio\" name=\"endPoint\" value={this.props.endPoint} onChange={this.props.onEndPointChange}>\n                  <ToggleButton variant=\"light\" value=\"none\">none</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"center\">center</ToggleButton>\n                  <ToggleButton variant=\"light\" value=\"perimeter\">perimeter</ToggleButton>\n                </ToggleButtonGroup>\n              </Col>\n            </Row>\n\n            <CheckboxOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              optionKey=\"minimizeMoves\"\n              key=\"minimizeMoves\"\n              index={0}\n              model={this.props} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PolarSettings)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport {\n    Accordion\n} from 'react-bootstrap'\nimport RectSettings from './RectSettings'\nimport PolarSettings from './PolarSettings'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    rectangular: state.machine.rectangular,\n  }\n}\n\nclass MachineSettings extends Component {\n  render() {\n    return (\n      <div className=\"p-3\">\n        <Accordion defaultActiveKey={this.props.rectangular ? 2 : 1}>\n          <RectSettings />\n          <PolarSettings />\n        </Accordion>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, null)(MachineSettings)\n","import React, { Component } from 'react'\n\nclass Footer extends Component {\n  render () {\n    return (\n      <footer className=\"p-4\">\n        <div>\n          <h2>About</h2>\n          <p>Sandify turns your cold, empty-hearted, emotionless sand tables into cold, empty-hearted, emotionless sand table robots with enchanting patterns.</p>\n          <p>\n            Sandify is a labor of love, but if you'd like to support me financially,\n            I do have a <a href=\"https://github.com/sponsors/jeffeb3\">Donation system set up <b>with github matching donations</b></a>. Or just <a href=\"https://www.paypal.me/jeffeb3\">PayPal</a>.\n          </p>\n        </div>\n\n        <div>\n          <h2>Instructions</h2>\n          <p>\n            Part of the fun of Sandify is playing it like you would a xylophone.\n            <br/>\n            Try it out first. The goal is to make it easy to make your first pattern by just clicking and scrolling, finding something you like.\n            <br/>\n            Check out <a href=\"https://github.com/jeffeb3/sandify/wiki\">the wiki</a> for some features that you might miss the first time through.\n          </p>\n        </div>\n\n        <div>\n          <h2>Sand Machine</h2>\n          <p>Anything that uses gcode can be used with Sandify. But the machine this was designed for is the ZenXY from V1Engineering.com.</p>\n          <p>\n            <a href=\"https://docs.v1engineering.com/zenxy/\">ZenXY on V1Engineering.com</a>\n          </p>\n          <p>\n            ZenXY was inspired by the awesome Sisyphus kinetic art table by <a href=\"https://sisyphus-industries.com/\">Sisyphus Industries</a>, which is also now supported.\n          </p>\n          <p>\n            Sandify was created by users in the\n            <a href=\"https://forum.v1engineering.com/t/does-this-count-as-a-build/6037\"> V1Engineering.com forum</a>.\n          </p>\n        </div>\n\n        <div>\n          <h2>Github</h2>\n          <p>Sandify is hosted on Github <a href=\"https://github.com/jeffeb3/sandify\">here</a>. Please post any problems, feature requests or comments in our <a href=\"https://github.com/jeffeb3/sandify/issues\">issue tracker</a>.</p>\n          <p>Sandify is a community project. We want and need collaborators. <a href=\"https://github.com/jeffeb3/sandify/blob/master/CONTRIBUTING.md\">Help Sandify</a>.</p>\n        </div>\n\n        <div>\n          <h2>License</h2>\n          <p>\n            Sandify is licensed under the MIT license.\n          </p>\n          <p>\n            Patterns that you create and gcode generated with Sandify are not covered\n            under the Sandify license. They are your work and your copyright. Read our <a href=\"https://raw.githubusercontent.com/jeffeb3/sandify/master/LICENSE\">license</a>.\n          </p>\n        </div>\n      </footer>\n    )\n  }\n}\n\nexport default Footer\n","import React, { Component } from 'react'\n\nclass CommentsBox extends Component {\n\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const commentsRender = this.props.comments.map((comment, index) => {\n      return <span key={index}>{comment}<br/></span>\n    })\n\n    return <div id=\"comments\" className=\"mt-4 p-3\">\n             {option.title}:\n             <div className=\"ml-3\">\n               { commentsRender }\n             </div>\n           </div>\n  }\n}\n\nexport default CommentsBox\n","import React, { Component } from 'react'\nimport {\n  Col,\n  Form,\n  Row\n} from 'react-bootstrap'\nimport Select from 'react-select'\n\nclass DropdownOption extends Component {\n  render() {\n    const option = this.props.options[this.props.optionKey]\n    const model = this.props.model\n    const currentChoice = model[this.props.optionKey]\n\n    return (\n      <Row className=\"align-items-center pb-2\" key={this.props.index}>\n        <Col sm={5}>\n          <Form.Label htmlFor=\"options-dropdown\">\n            {option.title}\n          </Form.Label>\n        </Col>\n\n        <Col sm={7}>\n          <Select\n            value={{value: currentChoice, label: currentChoice}}\n            onChange={(choice) => {\n              const value = choice.value\n              let attrs = {}\n              attrs[this.props.optionKey] = value\n\n              if (option.onChange !== undefined) {\n                attrs = option.onChange(attrs, model)\n              }\n\n              this.props.onChange(attrs)\n            }}\n            options={option.choices.map((choice) => {\n              return { value: choice, label: choice}\n            })}\n            />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nexport default DropdownOption\n","export const shapeOptions = {\n  name: {\n    title: 'Name',\n    type: 'text'\n  }\n}\n\nexport default class Shape {\n  constructor(name) {\n    this.name = name\n    this.cache = []\n  }\n\n  getInitialState() {\n    return {\n      repeatEnabled: true,\n      canTransform: true,\n      selectGroup: 'Shapes',\n      shouldCache: true,\n      canChangeSize: true,\n      usesMachine: false,\n      startingSize: 10,\n      offsetX: 0.0,\n      offsetY: 0.0,\n      rotation: 0,\n      numLoops: 10,\n      transformMethod: 'smear',\n      growEnabled: true,\n      growValue: 100,\n      growMethod: 'constant',\n      growMathInput: 'i+cos(i/2)',\n      growMath: 'i+cos(i/2)',\n      spinEnabled: false,\n      spinValue: 2,\n      spinMethod: 'constant',\n      spinMathInput: '10*sin(i/4)',\n      spinMath: '10*sin(i/4)',\n      spinSwitchbacks: 0,\n      trackEnabled: false,\n      trackGrowEnabled: false,\n      trackValue: 10,\n      trackLength: 0.2,\n      trackNumLoops: 1,\n      trackGrow: 50.0,\n      reverse: false,\n      dragging: false,\n      visible: true\n    }\n  }\n\n  getOptions() {\n    return shapeOptions\n  }\n\n  getVertices(state) {\n    return []\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    circleLobes: {\n      title: 'Number of lobes',\n      min: 1\n    }\n  }\n}\n\nexport default class Circle extends Shape {\n  constructor() {\n    super('Circle')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'circle',\n        circleLobes: 1\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<=128; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      points.push(new Victor(Math.cos(angle), Math.sin(state.shape.circleLobes * angle)/state.shape.circleLobes))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export const difference = (a, b) => {\n  return new Set(\n    [\n      ...[...a].filter(x => !b.has(x)),\n      ...[...b].filter(x => !a.has(x))\n    ]\n  )\n}\n\n// round a given number n to p number of digits\nexport const roundP = (n, p) => {\n  return Math.round((n + Number.EPSILON) * Math.pow(10, p)) / Math.pow(10, p)\n}\n\n// https://stackoverflow.com/a/4652513\nexport const reduce = (numerator, denominator) => {\n  let gcd = (a,b) => {\n    return b ? gcd(b, a%b) : a;\n  }\n\n  gcd = gcd(numerator, denominator)\n  return [numerator/gcd, denominator/gcd]\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\nimport { reduce } from '../common/util'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    epicycloidA: {\n      title: \"Large circle radius\",\n      min: 1\n    },\n    epicycloidB: {\n      title: \"Small circle radius\",\n      min: 1\n    },\n  }\n}\n\nexport default class Epicycloid extends Shape {\n  constructor() {\n    super('Clover')\n    this.link = 'http://mathworld.wolfram.com/Epicycloid.html'\n    this.linkText = 'Wolfram Mathworld'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'epicycloid',\n        epicycloidA: 4,\n        epicycloidB: 1\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = parseInt(state.shape.epicycloidA)\n    let b = parseInt(state.shape.epicycloidB)\n    let reduced = reduce(a, b)\n    a = reduced[0]\n    b = reduced[1]\n    let rotations = Number.isInteger(a/b) ? 1 : b\n    let scale = 1/(a + 2*b)\n\n    for (let i=0; i<128*rotations; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      points.push(\n        new Victor(\n          (a + b) * Math.cos(angle) - b * Math.cos(((a + b) / b) * angle),\n          (a + b) * Math.sin(angle) - b * Math.sin(((a + b) / b) * angle)\n        ).multiply({x: scale, y: scale})\n      )\n    }\n\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    fileName: {\n      title: 'From file:',\n      type: 'inputText',\n      plainText: 'true'\n    },\n    aspectRatio: {\n      title: 'Aspect Ratio',\n      type: 'checkbox'\n    },\n    comments: {\n      title: 'Comments',\n      type: 'comments'\n    },\n  }\n}\n\nexport default class FileImport extends Shape {\n  constructor() {\n    super('FileImport')\n  }\n\n  getInitialState(importProps) {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'file_import',\n        aspectRatio: true,\n        originalAspectRatio: 1.0,\n        vertices: [],\n        comments: [],\n        selectGroup: 'import',\n        canTransform: false,\n        canChangeSize: true,\n        usesMachine: true,\n        repeatEnabled: false\n      },\n      ...(importProps === undefined ? {} : {\n        fileName: importProps.fileName,\n        vertices: importProps.vertices,\n        originalAspectRatio: importProps.originalAspectRatio,\n        comments: importProps.comments\n      })\n    }\n  }\n\n  getVertices(state) {\n    if (state.shape.vertices.length < 1)\n    {\n      // During initialization, this function gets called, but the machine isn't created right yet.\n      return [new Victor(0.0, 0.0), new Victor(0.0, 0.1)]\n    }\n\n    let x_scale = (state.machine.maxX - state.machine.minX)/2.0 * 0.1\n    let y_scale = (state.machine.maxY - state.machine.minY)/2.0 * 0.1\n\n    if (!state.machine.rectangular) {\n      x_scale = y_scale = state.machine.maxRadius * 0.1\n    }\n\n    if (state.shape.aspectRatio) {\n      const machine_aspect_ratio = y_scale / x_scale\n      if (state.shape.originalAspectRatio > machine_aspect_ratio) {\n        x_scale = x_scale / state.shape.originalAspectRatio * machine_aspect_ratio\n      } else {\n        y_scale = y_scale * state.shape.originalAspectRatio / machine_aspect_ratio\n      }\n    }\n\n    return state.shape.vertices.map( (vertex) => {\n      return Victor(vertex.x * x_scale, vertex.y * y_scale)\n    })\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export default class Orbit {\n  constructor(x, y, r, level, settings, parent) {\n    this.x = x\n    this.y = y\n    this.r = r\n    this.child = null\n    this.angle = Math.PI/2\n    this.level = level\n    this.settings = settings\n\n    let sign = this.settings.alternateRotation ? -1 : 1\n    this.speed = Math.pow(settings.velocity * sign, this.level - 1) * Math.PI / 180 / settings.resolution\n    this.parent = parent\n  }\n\n  addChild() {\n    let newr = this.r / this.settings.relativeSize\n    let newx = this.x + this.r + newr\n    let newy = this.y\n    this.child = new Orbit(newx, newy, newr, this.level + 1, this.settings, this)\n    return this.child\n  }\n\n  update() {\n    if (this.parent) {\n      this.angle += this.speed\n\n      let rsum = this.r + this.parent.r\n      this.x = this.parent.x + rsum * Math.cos(this.angle)\n      this.y = this.parent.y + rsum * Math.sin(this.angle)\n    }\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from '../Shape'\nimport Orbit from './Orbit'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    fractalSpirographVelocity: {\n      title: 'Velocity',\n      min: 2\n    },\n    fractalSpirographResolution: {\n      title: 'Resolution',\n      min: 1\n    },\n    fractalSpirographNumCircles: {\n      title: 'Number of circles',\n      min: 1,\n      max: 6\n    },\n    fractalSpirographRelativeSize: {\n      title: 'Relative size (parent to child circle)',\n      min: 2,\n      max: 6\n    },\n    fractalSpirographAlternateRotation: {\n      title: 'Alternate rotation direction',\n      type: 'checkbox'\n    },\n  }\n}\n\n// Inspired/adapted from https://thecodingtrain.com/CodingChallenges/061-fractal-spirograph\nexport default class FractalSpirograph extends Shape {\n  constructor() {\n    super('Fractal Spirograph')\n    this.link = 'https://benice-equation.blogspot.com/2012/01/fractal-spirograph.html'\n    this.linkText = 'Fun math art (pictures) - benice equation'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'fractal_spirograph',\n        fractalSpirographVelocity: 8,\n        fractalSpirographResolution: 2,\n        fractalSpirographNumCircles: 5,\n        fractalSpirographRelativeSize: 3,\n        fractalSpirographAlternateRotation: true,\n        repeatEnabled: false,\n      }\n    }\n  }\n\n  getVertices(state) {\n    let resolution = parseInt(state.shape.fractalSpirographResolution)\n    let settings = {\n      resolution: resolution,\n      velocity: parseInt(state.shape.fractalSpirographVelocity),\n      numCircles: parseInt(state.shape.fractalSpirographNumCircles),\n      relativeSize: parseInt(state.shape.fractalSpirographRelativeSize),\n      alternateRotation: state.shape.fractalSpirographAlternateRotation\n    }\n\n    let sun = new Orbit(0, 0, 1, 0, settings)\n    let next = sun\n    let end\n    let points = []\n\n    for (var i=0; i<settings.numCircles; i++) {\n      next = next.addChild()\n    }\n    end = next\n\n    for (let i=0; i<resolution; i++) {\n      for (let j=0; j<361; j++) {\n        let next = sun\n\n        while (next != null) {\n          next.update()\n          next = next.child\n        }\n\n        points.push(new Victor(end.x, end.y))\n      }\n    }\n\n    const scale = 5 // to normalize starting size\n    points.forEach(point => point.multiply({x: scale, y: scale }))\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape from './Shape'\n\nexport default class Heart extends Shape {\n  constructor() {\n    super('Heart')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'heart',\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<128; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      let scale = 0.9\n      // heart equation from: http://mathworld.wolfram.com/HeartCurve.html\n      points.push(new Victor(scale * 1.0 * Math.pow(Math.sin(angle), 3),\n                         scale * (13.0/16.0 * Math.cos(angle) +\n                                    -5.0/16.0 * Math.cos(2.0 * angle) +\n                                    -2.0/16.0 * Math.cos(3.0 * angle) +\n                                    -1.0/16.0 * Math.cos(4.0 * angle))))\n    }\n    return points\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\nimport { reduce } from '../common/util'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    hypocycloidA: {\n      title: 'Large circle radius',\n      min: 1\n    },\n    hypocycloidB: {\n      title: 'Small circle radius',\n      min: 1\n    },\n  }\n}\n\nexport default class Star extends Shape {\n  constructor() {\n    super('Web')\n    this.link = 'http://mathworld.wolfram.com/Hypocycloid.html'\n    this.linkText = 'Wolfram Mathworld'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'hypocycloid',\n        hypocycloidA: 6,\n        hypocycloidB: 1\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = parseInt(state.shape.hypocycloidA)\n    let b = parseInt(state.shape.hypocycloidB)\n    let reduced = reduce(a, b)\n    a = reduced[0]\n    b = reduced[1]\n    let rotations = Number.isInteger(a/b) ? 1 : b\n    let scale = b < a ? 1/a : 1/(2*(b - a/2))\n\n    for (let i=0; i<128*rotations; i++) {\n      let angle = Math.PI * 2.0 / 128.0 * i\n      points.push(\n        new Victor(\n          (a - b) * Math.cos(angle) + b * Math.cos(((a - b) / b) * angle),\n          (a - b) * Math.sin(angle) - b * Math.sin(((a - b) / b) * angle)\n        ).multiply({x: scale, y: scale})\n      )\n    }\n\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export let raysol_cursive = {\n  ' ' : [ [0.000,-0.786], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786],  ],\n  '0' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.549,-0.786], [0.570,-0.779], [0.641,-0.741], [0.729,-0.673], [0.754,-0.642], [0.799,-0.548], [0.833,-0.422], [0.833,-0.317], [0.833,-0.211], [0.833,-0.106], [0.833,-0.001], [0.833,0.105], [0.833,0.210], [0.833,0.315], [0.833,0.421], [0.833,0.531], [0.810,0.599], [0.779,0.645], [0.749,0.690], [0.711,0.738], [0.629,0.786], [0.570,0.786], [0.513,0.786], [0.442,0.738], [0.374,0.690], [0.340,0.645], [0.315,0.599], [0.289,0.531], [0.289,0.422], [0.289,0.313], [0.289,0.204], [0.289,0.095], [0.289,-0.014], [0.289,-0.123], [0.289,-0.232], [0.289,-0.341], [0.289,-0.450], [0.315,-0.559], [0.351,-0.655], [0.388,-0.701], [0.449,-0.742], [0.489,-0.762], [0.549,-0.786], [0.655,-0.786], [0.731,-0.786], [0.816,-0.786], [0.901,-0.786], [0.986,-0.786], [1.071,-0.786], [1.156,-0.786],  ],\n  '1' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.629], [0.340,-0.472], [0.340,-0.315], [0.340,-0.157], [0.340,-0.000], [0.340,0.157], [0.340,0.314], [0.340,0.472], [0.340,0.629], [0.340,0.786], [0.340,0.629], [0.340,0.472], [0.340,0.314], [0.340,0.157], [0.340,-0.000], [0.340,-0.157], [0.340,-0.315], [0.340,-0.472], [0.340,-0.629], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786],  ],\n  '2' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.702], [0.442,-0.537], [0.544,-0.330], [0.624,-0.174], [0.660,0.032], [0.687,0.212], [0.698,0.295], [0.708,0.427], [0.714,0.514], [0.708,0.595], [0.690,0.659], [0.677,0.702], [0.663,0.726], [0.629,0.752], [0.587,0.769], [0.544,0.760], [0.493,0.744], [0.442,0.727], [0.374,0.701], [0.306,0.625], [0.247,0.574], [0.306,0.625], [0.374,0.701], [0.442,0.727], [0.493,0.744], [0.544,0.760], [0.587,0.769], [0.629,0.752], [0.663,0.726], [0.677,0.702], [0.690,0.659], [0.708,0.595], [0.714,0.514], [0.708,0.427], [0.698,0.295], [0.687,0.212], [0.660,0.032], [0.624,-0.174], [0.544,-0.330], [0.442,-0.537], [0.340,-0.702], [0.425,-0.701], [0.544,-0.633], [0.612,-0.599], [0.680,-0.574], [0.765,-0.591], [0.850,-0.616], [0.935,-0.667], [1.020,-0.744], [1.105,-0.786],  ],\n  '3' : [ [0.085,-0.786], [0.170,-0.786], [0.272,-0.786], [0.330,-0.786], [0.405,-0.786], [0.442,-0.786], [0.493,-0.772], [0.559,-0.752], [0.612,-0.718], [0.648,-0.683], [0.677,-0.653], [0.707,-0.618], [0.731,-0.548], [0.764,-0.473], [0.782,-0.396], [0.784,-0.312], [0.775,-0.241], [0.765,-0.181], [0.751,-0.123], [0.700,-0.029], [0.620,0.021], [0.544,0.038], [0.425,0.056], [0.557,0.087], [0.586,0.111], [0.640,0.165], [0.697,0.234], [0.734,0.337], [0.749,0.431], [0.741,0.516], [0.726,0.600], [0.712,0.659], [0.672,0.740], [0.641,0.777], [0.586,0.786], [0.537,0.777], [0.485,0.769], [0.412,0.744], [0.331,0.710], [0.412,0.744], [0.485,0.769], [0.537,0.777], [0.586,0.786], [0.641,0.777], [0.672,0.740], [0.712,0.659], [0.726,0.600], [0.741,0.516], [0.749,0.431], [0.734,0.337], [0.697,0.234], [0.640,0.165], [0.586,0.111], [0.557,0.087], [0.484,0.056], [0.544,0.038], [0.620,0.021], [0.700,-0.029], [0.751,-0.123], [0.765,-0.181], [0.775,-0.241], [0.784,-0.312], [0.782,-0.396], [0.764,-0.473], [0.731,-0.548], [0.707,-0.618], [0.677,-0.653], [0.648,-0.683], [0.612,-0.718], [0.559,-0.752], [0.493,-0.772], [0.425,-0.761], [0.357,-0.744], [0.289,-0.718], [0.221,-0.616], [0.289,-0.718], [0.357,-0.744], [0.425,-0.761], [0.493,-0.772], [0.559,-0.752], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  '4' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.765,-0.629], [0.765,-0.472], [0.765,-0.315], [0.765,-0.157], [0.765,-0.000], [0.765,0.157], [0.765,0.314], [0.765,0.472], [0.765,0.629], [0.765,0.786], [0.680,0.655], [0.595,0.524], [0.510,0.393], [0.425,0.262], [0.340,0.131], [0.255,-0.000], [0.356,-0.000], [0.457,-0.000], [0.558,-0.000], [0.659,-0.000], [0.760,-0.000], [0.861,-0.000], [0.962,-0.000], [1.062,-0.000], [1.139,-0.000], [1.062,-0.000], [0.962,-0.000], [0.861,-0.000], [0.760,-0.000], [0.765,-0.157], [0.765,-0.315], [0.765,-0.472], [0.765,-0.629], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786],  ],\n  '5' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.438,-0.786], [0.520,-0.786], [0.607,-0.786], [0.659,-0.783], [0.730,-0.749], [0.796,-0.698], [0.853,-0.612], [0.884,-0.497], [0.892,-0.319], [0.887,-0.167], [0.850,-0.064], [0.795,0.038], [0.744,0.100], [0.680,0.122], [0.608,0.144], [0.540,0.123], [0.441,0.081], [0.378,0.043], [0.302,-0.014], [0.302,0.145], [0.302,0.303], [0.302,0.461], [0.302,0.619], [0.302,0.727], [0.359,0.727], [0.415,0.727], [0.471,0.727], [0.528,0.727], [0.584,0.727], [0.640,0.727], [0.731,0.727], [0.850,0.727], [0.731,0.727], [0.640,0.727], [0.584,0.727], [0.528,0.727], [0.471,0.727], [0.415,0.727], [0.359,0.727], [0.302,0.727], [0.302,0.619], [0.302,0.461], [0.302,0.303], [0.302,0.145], [0.302,-0.014], [0.378,0.043], [0.441,0.081], [0.540,0.123], [0.608,0.144], [0.680,0.122], [0.744,0.100], [0.795,0.038], [0.850,-0.064], [0.887,-0.167], [0.892,-0.319], [0.884,-0.497], [0.853,-0.612], [0.796,-0.698], [0.730,-0.749], [0.659,-0.783], [0.607,-0.786], [0.520,-0.786], [0.425,-0.752], [0.357,-0.701], [0.289,-0.616], [0.238,-0.531], [0.187,-0.489], [0.153,-0.472], [0.187,-0.489], [0.238,-0.531], [0.289,-0.616], [0.357,-0.701], [0.425,-0.752], [0.520,-0.786], [0.607,-0.786], [0.659,-0.786], [0.816,-0.786], [0.901,-0.786], [0.986,-0.786], [1.071,-0.786], [1.156,-0.786], [1.241,-0.786], [1.326,-0.786],  ],\n  '6' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.449,-0.742], [0.489,-0.762], [0.549,-0.786], [0.655,-0.779], [0.726,-0.741], [0.814,-0.673], [0.839,-0.642], [0.866,-0.607], [0.924,-0.422], [0.926,-0.323], [0.911,-0.213], [0.895,-0.168], [0.864,-0.099], [0.834,-0.053], [0.796,-0.005], [0.720,0.034], [0.619,0.042], [0.557,0.034], [0.513,0.025], [0.453,-0.002], [0.332,-0.071], [0.373,0.033], [0.414,0.137], [0.455,0.241], [0.496,0.345], [0.538,0.449], [0.579,0.553], [0.620,0.657], [0.661,0.761], [0.620,0.657], [0.579,0.553], [0.538,0.449], [0.496,0.345], [0.455,0.241], [0.414,0.137], [0.373,0.033], [0.332,-0.071], [0.276,-0.200], [0.263,-0.274], [0.255,-0.347], [0.274,-0.489], [0.306,-0.559], [0.351,-0.655], [0.391,-0.701], [0.489,-0.762], [0.549,-0.786], [0.655,-0.779], [0.731,-0.786], [0.816,-0.786], [0.901,-0.786], [0.986,-0.786], [1.071,-0.786], [1.156,-0.786],  ],\n  '7' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.391,-0.629], [0.442,-0.472], [0.493,-0.315], [0.544,-0.157], [0.595,-0.000], [0.646,0.157], [0.697,0.314], [0.748,0.472], [0.799,0.629], [0.850,0.786], [0.776,0.786], [0.701,0.786], [0.627,0.786], [0.552,0.786], [0.478,0.786], [0.404,0.786], [0.329,0.786], [0.255,0.786], [0.329,0.786], [0.404,0.786], [0.478,0.786], [0.552,0.786], [0.627,0.786], [0.701,0.786], [0.776,0.786], [0.850,0.786], [0.799,0.629], [0.748,0.472], [0.697,0.314], [0.646,0.157], [0.595,-0.000], [0.544,-0.157], [0.493,-0.315], [0.442,-0.472], [0.391,-0.629], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '8' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.556,-0.784], [0.618,-0.786], [0.695,-0.763], [0.756,-0.733], [0.795,-0.664], [0.853,-0.560], [0.878,-0.429], [0.870,-0.334], [0.846,-0.267], [0.797,-0.132], [0.740,-0.033], [0.674,0.065], [0.643,0.098], [0.611,0.132], [0.561,0.166], [0.527,0.200], [0.493,0.247], [0.459,0.293], [0.425,0.361], [0.391,0.446], [0.408,0.545], [0.459,0.644], [0.510,0.701], [0.570,0.734], [0.643,0.760], [0.716,0.734], [0.777,0.701], [0.828,0.644], [0.879,0.545], [0.896,0.446], [0.862,0.361], [0.828,0.293], [0.794,0.247], [0.760,0.200], [0.726,0.166], [0.676,0.132], [0.579,0.098], [0.548,0.065], [0.481,-0.033], [0.425,-0.132], [0.376,-0.267], [0.352,-0.334], [0.344,-0.429], [0.369,-0.560], [0.427,-0.664], [0.466,-0.733], [0.527,-0.763], [0.603,-0.786], [0.666,-0.784], [0.695,-0.763], [0.756,-0.733], [0.795,-0.664], [0.853,-0.560], [0.878,-0.429], [0.870,-0.334], [0.846,-0.267], [0.797,-0.132], [0.740,-0.033], [0.797,-0.132], [0.846,-0.267], [0.870,-0.334], [0.878,-0.429], [0.853,-0.560], [0.795,-0.664], [0.756,-0.733], [0.695,-0.763], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '9' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.714,-0.786], [0.717,-0.612], [0.717,-0.455], [0.717,-0.297], [0.717,-0.139], [0.717,0.019], [0.717,0.177], [0.717,0.335], [0.717,0.493], [0.717,0.650], [0.717,0.786], [0.648,0.786], [0.521,0.786], [0.415,0.744], [0.340,0.659], [0.306,0.523], [0.292,0.364], [0.299,0.230], [0.317,0.147], [0.339,0.086], [0.387,-0.030], [0.442,-0.063], [0.509,-0.055], [0.558,-0.030], [0.618,-0.004], [0.663,0.013], [0.717,0.019], [0.717,-0.139], [0.717,-0.297], [0.717,-0.455], [0.717,-0.612], [0.714,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  'A' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.459,-0.781], [0.534,-0.759], [0.623,-0.711], [0.715,-0.601], [0.793,-0.507], [0.715,-0.601], [0.623,-0.711], [0.534,-0.759], [0.459,-0.781], [0.383,-0.743], [0.308,-0.661], [0.250,-0.586], [0.206,-0.475], [0.173,-0.322], [0.170,-0.191], [0.187,-0.003], [0.227,0.147], [0.284,0.286], [0.339,0.375], [0.435,0.509], [0.521,0.596], [0.637,0.685], [0.790,0.761], [0.865,0.786], [0.863,0.706], [0.861,0.583], [0.859,0.460], [0.857,0.337], [0.855,0.213], [0.853,0.090], [0.851,-0.033], [0.849,-0.156], [0.848,-0.280], [0.846,-0.403], [0.847,-0.466], [0.868,-0.563], [0.954,-0.635], [1.033,-0.701], [1.109,-0.744], [1.213,-0.786],  ],\n  'B' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.255,-0.629], [0.255,-0.471], [0.255,-0.313], [0.255,-0.155], [0.255,0.002], [0.255,0.160], [0.255,0.318], [0.255,0.476], [0.255,0.633], [0.281,0.659], [0.327,0.701], [0.380,0.744], [0.445,0.773], [0.501,0.777], [0.552,0.777], [0.589,0.761], [0.646,0.726], [0.699,0.680], [0.733,0.630], [0.764,0.556], [0.761,0.455], [0.748,0.389], [0.723,0.285], [0.689,0.191], [0.621,0.106], [0.517,0.064], [0.476,0.064], [0.517,0.064], [0.596,0.025], [0.650,-0.037], [0.680,-0.062], [0.748,-0.148], [0.791,-0.248], [0.809,-0.312], [0.814,-0.452], [0.811,-0.490], [0.796,-0.566], [0.780,-0.620], [0.697,-0.718], [0.622,-0.762], [0.572,-0.786], [0.476,-0.786], [0.374,-0.786], [0.255,-0.786], [0.374,-0.786], [0.476,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  'C' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.752], [0.459,-0.693], [0.397,-0.605], [0.357,-0.548], [0.332,-0.452], [0.306,-0.327], [0.298,-0.208], [0.298,-0.106], [0.298,0.016], [0.318,0.183], [0.338,0.310], [0.385,0.442], [0.462,0.585], [0.548,0.675], [0.652,0.746], [0.776,0.786], [0.872,0.767], [0.963,0.643], [1.019,0.491], [1.040,0.351], [1.019,0.491], [0.963,0.643], [0.872,0.767], [0.776,0.786], [0.652,0.746], [0.548,0.675], [0.462,0.585], [0.385,0.442], [0.338,0.310], [0.318,0.183], [0.298,0.016], [0.298,-0.106], [0.298,-0.208], [0.306,-0.327], [0.332,-0.452], [0.397,-0.605], [0.459,-0.693], [0.544,-0.748], [0.682,-0.786], [0.777,-0.786], [0.850,-0.786], [0.884,-0.786], [0.953,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786],  ],\n  'D' : [ [0.123,-0.786], [0.213,-0.786], [0.321,-0.786], [0.401,-0.786], [0.465,-0.786], [0.544,-0.786], [0.639,-0.786], [0.772,-0.764], [0.918,-0.711], [0.955,-0.676], [1.020,-0.592], [1.072,-0.460], [1.090,-0.357], [1.104,-0.199], [1.103,-0.111], [1.082,0.035], [1.062,0.183], [1.037,0.271], [1.009,0.356], [0.982,0.435], [0.899,0.546], [0.816,0.633], [0.748,0.684], [0.646,0.741], [0.566,0.766], [0.496,0.761], [0.425,0.733], [0.425,0.604], [0.425,0.526], [0.425,0.343], [0.425,0.149], [0.425,-0.030], [0.425,-0.156], [0.425,-0.442], [0.425,-0.544], [0.425,-0.701], [0.465,-0.786], [0.544,-0.786], [0.639,-0.786], [0.748,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786],  ],\n  'E' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.701], [0.381,-0.614], [0.317,-0.487], [0.277,-0.361], [0.274,-0.221], [0.309,-0.157], [0.356,-0.115], [0.405,-0.072], [0.493,-0.030], [0.563,0.006], [0.629,0.027], [0.714,0.027], [0.629,0.027], [0.570,0.064], [0.509,0.120], [0.474,0.143], [0.386,0.229], [0.331,0.313], [0.291,0.438], [0.293,0.552], [0.320,0.660], [0.383,0.743], [0.478,0.786], [0.564,0.786], [0.629,0.786], [0.675,0.786], [0.723,0.786], [0.799,0.786], [0.723,0.786], [0.675,0.786], [0.629,0.786], [0.564,0.786], [0.478,0.786], [0.383,0.743], [0.320,0.660], [0.293,0.552], [0.291,0.438], [0.331,0.313], [0.386,0.229], [0.474,0.143], [0.509,0.120], [0.570,0.064], [0.629,0.027], [0.714,0.027], [0.629,0.027], [0.563,0.006], [0.493,-0.030], [0.405,-0.072], [0.356,-0.115], [0.309,-0.157], [0.274,-0.221], [0.277,-0.361], [0.317,-0.487], [0.381,-0.614], [0.443,-0.698], [0.500,-0.735], [0.583,-0.769], [0.695,-0.781], [0.786,-0.780], [0.864,-0.780], [0.935,-0.779],  ],\n  'F' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.578,-0.786], [0.663,-0.786], [0.724,-0.767], [0.792,-0.699], [0.852,-0.558], [0.853,-0.440], [0.854,-0.321], [0.855,-0.203], [0.856,-0.085], [0.857,0.034], [0.858,0.152], [0.859,0.270], [0.860,0.389], [0.861,0.507], [0.863,0.625], [0.969,0.608], [1.076,0.588], [1.173,0.616], [1.282,0.654], [1.394,0.701], [1.282,0.654], [1.173,0.616], [1.076,0.588], [0.969,0.608], [0.863,0.625], [0.763,0.663], [0.633,0.713], [0.466,0.713], [0.317,0.628], [0.247,0.404], [0.317,0.628], [0.466,0.713], [0.633,0.713], [0.763,0.663], [0.863,0.625], [0.861,0.507], [0.860,0.389], [0.859,0.270], [0.858,0.152], [0.857,0.034], [0.742,0.037], [0.631,0.054], [0.442,0.071], [0.631,0.054], [0.742,0.037], [0.857,0.034], [0.960,0.035], [1.075,0.043], [1.224,0.052], [1.075,0.043], [0.960,0.035], [0.857,0.034], [0.856,-0.085], [0.855,-0.203], [0.854,-0.321], [0.854,-0.395], [0.850,-0.506], [0.852,-0.558], [0.833,-0.650], [0.773,-0.713], [0.663,-0.769], [0.591,-0.766], [0.564,-0.774], [0.537,-0.774], [0.501,-0.766], [0.452,-0.701], [0.420,-0.650], [0.413,-0.583], [0.422,-0.519], [0.474,-0.465], [0.511,-0.442], [0.573,-0.438], [0.653,-0.442], [0.740,-0.496], [0.866,-0.616], [0.927,-0.687], [1.035,-0.756], [1.079,-0.803], [1.211,-0.837], [1.310,-0.829], [1.406,-0.820], [1.491,-0.786],  ],\n  'G' : [ [0.085,-0.786], [0.171,-0.761], [0.245,-0.712], [0.316,-0.660], [0.389,-0.609], [0.489,-0.507], [0.573,-0.398], [0.610,-0.341], [0.658,-0.254], [0.708,-0.125], [0.757,0.004], [0.782,0.082], [0.819,0.177], [0.837,0.274], [0.857,0.392], [0.880,0.508], [0.884,0.597], [0.881,0.711], [0.842,0.799], [0.762,0.772], [0.720,0.745], [0.697,0.705], [0.640,0.590], [0.631,0.560], [0.612,0.445], [0.607,0.395], [0.628,0.243], [0.653,0.178], [0.695,0.088], [0.834,-0.031], [0.931,-0.028], [1.047,0.038], [1.117,0.106], [1.179,0.236], [1.262,0.405], [1.246,0.225], [1.209,-0.096], [1.181,-0.235], [1.140,-0.389], [1.103,-0.495], [1.032,-0.625], [0.956,-0.707], [0.865,-0.758], [0.770,-0.787], [0.681,-0.782], [0.598,-0.762], [0.500,-0.710], [0.455,-0.632], [0.427,-0.556], [0.380,-0.481], [0.324,-0.330], [0.465,-0.389], [0.637,-0.468], [0.784,-0.548], [0.909,-0.586], [1.032,-0.625], [1.141,-0.663], [1.245,-0.677], [1.351,-0.699], [1.489,-0.744], [1.611,-0.786],  ],\n  'H' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.496,-0.786], [0.496,-0.609], [0.496,-0.479], [0.496,-0.348], [0.496,-0.217], [0.496,-0.086], [0.496,0.044], [0.496,0.175], [0.496,0.306], [0.496,0.404], [0.496,0.508], [0.476,0.604], [0.453,0.687], [0.391,0.744], [0.272,0.786], [0.391,0.744], [0.453,0.687], [0.476,0.604], [0.496,0.508], [0.496,0.404], [0.496,0.306], [0.496,0.175], [0.496,0.044], [0.635,0.071], [0.774,0.097], [0.913,0.123], [1.051,0.149], [1.105,0.175], [1.105,0.306], [1.105,0.404], [1.105,0.508], [1.105,0.616], [1.122,0.701], [1.165,0.760], [1.275,0.786], [1.165,0.760], [1.122,0.701], [1.105,0.616], [1.105,0.508], [1.105,0.404], [1.105,0.306], [1.105,0.175], [1.105,0.044], [1.105,-0.086], [1.105,-0.217], [1.105,-0.348], [1.105,-0.479], [1.105,-0.609], [1.139,-0.701], [1.190,-0.761], [1.275,-0.778], [1.360,-0.786], [1.445,-0.786], [1.530,-0.786],  ],\n  'I' : [ [0.085,-0.786], [0.170,-0.786], [0.289,-0.786], [0.425,-0.786], [0.515,-0.773], [0.596,-0.794], [0.685,-0.801], [0.782,-0.773], [0.838,-0.602], [0.914,-0.473], [0.876,-0.349], [0.832,-0.152], [0.789,0.006], [0.773,0.196], [0.765,0.298], [0.773,0.517], [0.799,0.650], [0.833,0.740], [0.884,0.802], [1.020,0.804], [1.071,0.800], [1.120,0.702], [1.151,0.628], [1.189,0.387], [1.198,0.208], [1.180,-0.065], [1.165,-0.166], [1.100,-0.403], [1.046,-0.509], [1.007,-0.577], [0.899,-0.681], [0.782,-0.773], [0.685,-0.801], [0.596,-0.794], [0.515,-0.773], [0.420,-0.719], [0.381,-0.640], [0.357,-0.564], [0.317,-0.488], [0.271,-0.336], [0.408,-0.397], [0.574,-0.479], [0.716,-0.562], [0.838,-0.602], [0.958,-0.643], [1.064,-0.683], [1.168,-0.699], [1.271,-0.722], [1.408,-0.761], [1.529,-0.786],  ],\n  'J' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.457,-0.733], [0.593,-0.715], [0.428,-0.508], [0.343,-0.336], [0.301,-0.096], [0.292,0.057], [0.286,0.286], [0.316,0.532], [0.382,0.703], [0.439,0.754], [0.506,0.780], [0.591,0.790], [0.690,0.782], [0.734,0.739], [0.789,0.616], [0.802,0.553], [0.814,0.386], [0.818,0.209], [0.808,-0.059], [0.799,-0.253], [0.787,-0.441], [0.780,-0.614], [0.767,-0.807], [0.752,-0.952], [0.760,-1.127], [0.737,-1.292], [0.712,-1.438], [0.661,-1.505], [0.604,-1.531], [0.426,-1.533], [0.365,-1.508], [0.310,-1.439], [0.298,-1.296], [0.310,-1.143], [0.346,-0.955], [0.397,-0.844], [0.457,-0.733], [0.588,-0.715], [0.675,-0.731], [0.762,-0.748], [0.849,-0.764], [0.935,-0.780], [1.021,-0.779], [1.106,-0.779], [1.188,-0.786],  ],\n  'K' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.540,-0.627], [0.551,-0.494], [0.562,-0.360], [0.574,-0.227], [0.585,-0.094], [0.596,0.040], [0.580,0.158], [0.563,0.276], [0.547,0.393], [0.530,0.511], [0.514,0.629], [0.497,0.747], [0.442,0.744], [0.382,0.736], [0.317,0.679], [0.268,0.607], [0.223,0.532], [0.268,0.607], [0.317,0.679], [0.382,0.736], [0.442,0.744], [0.497,0.747], [0.514,0.629], [0.530,0.511], [0.547,0.393], [0.563,0.276], [0.580,0.158], [0.596,0.040], [0.689,0.087], [0.752,0.165], [0.815,0.242], [0.878,0.320], [0.941,0.397], [1.004,0.475], [1.067,0.553], [1.130,0.630], [1.149,0.740], [1.130,0.630], [1.067,0.553], [1.004,0.475], [0.941,0.397], [0.878,0.320], [0.815,0.242], [0.752,0.165], [0.689,0.087], [0.626,0.010], [0.675,-0.067], [0.725,-0.143], [0.775,-0.219], [0.825,-0.295], [0.875,-0.371], [0.925,-0.448], [0.974,-0.524], [1.024,-0.600], [1.074,-0.676], [1.124,-0.761], [1.220,-0.786], [1.299,-0.786], [1.363,-0.786], [1.442,-0.786], [1.526,-0.786],  ],\n  'L' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.323,-0.778], [0.370,-0.766], [0.406,-0.774], [0.433,-0.774], [0.460,-0.766], [0.520,-0.743], [0.558,-0.713], [0.629,-0.650], [0.681,-0.570], [0.717,-0.506], [0.723,-0.395], [0.739,-0.305], [0.748,-0.179], [0.751,-0.045], [0.743,0.148], [0.741,0.224], [0.757,0.263], [0.749,0.353], [0.776,0.537], [0.788,0.600], [0.824,0.711], [0.872,0.783], [0.894,0.827], [0.968,0.850], [1.027,0.795], [1.061,0.723], [1.082,0.596], [1.071,0.517], [1.050,0.464], [0.971,0.366], [0.940,0.343], [0.848,0.288], [0.808,0.275], [0.660,0.257], [0.624,0.259], [0.500,0.288], [0.386,0.343], [0.285,0.410], [0.386,0.343], [0.500,0.288], [0.624,0.259], [0.660,0.257], [0.808,0.275], [0.848,0.288], [0.940,0.343], [0.971,0.366], [1.050,0.464], [1.071,0.517], [1.082,0.596], [1.061,0.723], [1.027,0.795], [0.968,0.850], [0.894,0.827], [0.872,0.783], [0.824,0.711], [0.788,0.600], [0.776,0.537], [0.749,0.353], [0.757,0.263], [0.741,0.224], [0.743,0.148], [0.751,-0.045], [0.748,-0.179], [0.739,-0.305], [0.723,-0.395], [0.717,-0.506], [0.681,-0.570], [0.629,-0.650], [0.558,-0.713], [0.520,-0.743], [0.460,-0.766], [0.433,-0.774], [0.406,-0.774], [0.370,-0.766], [0.320,-0.701], [0.289,-0.650], [0.282,-0.583], [0.291,-0.519], [0.343,-0.465], [0.379,-0.442], [0.442,-0.438], [0.521,-0.442], [0.609,-0.496], [0.734,-0.616], [0.796,-0.687], [0.904,-0.756], [0.948,-0.786], [1.080,-0.786], [1.179,-0.786], [1.275,-0.786], [1.360,-0.786],  ],\n  'M' : [ [0.085,-0.786], [0.213,-0.786], [0.340,-0.786], [0.468,-0.786], [0.583,-0.736], [0.593,-0.622], [0.603,-0.507], [0.613,-0.393], [0.623,-0.278], [0.633,-0.164], [0.643,-0.049], [0.653,0.065], [0.663,0.180], [0.673,0.294], [0.683,0.409], [0.655,0.534], [0.628,0.634], [0.592,0.749], [0.500,0.795], [0.412,0.754], [0.321,0.685], [0.238,0.576], [0.321,0.685], [0.412,0.754], [0.500,0.795], [0.592,0.749], [0.628,0.634], [0.655,0.534], [0.683,0.409], [0.673,0.294], [0.663,0.180], [0.653,0.065], [0.643,-0.049], [0.633,-0.164], [0.623,-0.278], [0.613,-0.393], [0.603,-0.507], [0.593,-0.622], [0.583,-0.736], [0.593,-0.622], [0.603,-0.507], [0.613,-0.393], [0.623,-0.278], [0.633,-0.164], [0.643,-0.049], [0.653,0.065], [0.663,0.180], [0.673,0.294], [0.683,0.409], [0.727,0.575], [0.800,0.719], [0.921,0.793], [1.057,0.807], [1.122,0.730], [1.162,0.644], [1.188,0.569], [1.233,0.406], [1.223,0.292], [1.214,0.178], [1.205,0.063], [1.196,-0.051], [1.187,-0.166], [1.177,-0.280], [1.168,-0.394], [1.159,-0.509], [1.150,-0.623], [1.140,-0.737], [1.150,-0.623], [1.159,-0.509], [1.168,-0.394], [1.177,-0.280], [1.187,-0.166], [1.196,-0.051], [1.205,0.063], [1.214,0.178], [1.223,0.292], [1.233,0.406], [1.281,0.599], [1.354,0.743], [1.398,0.797], [1.480,0.835], [1.620,0.831], [1.673,0.767], [1.711,0.694], [1.737,0.619], [1.750,0.543], [1.747,0.420], [1.743,0.297], [1.740,0.174], [1.737,0.051], [1.733,-0.072], [1.730,-0.195], [1.726,-0.318], [1.723,-0.441], [1.719,-0.564], [1.716,-0.687], [1.815,-0.746], [1.921,-0.786], [2.001,-0.786], [2.085,-0.786], [2.186,-0.786],  ],\n  'N' : [ [0.128,-0.786], [0.255,-0.786], [0.425,-0.786], [0.568,-0.765], [0.577,-0.710], [0.580,-0.603], [0.584,-0.497], [0.587,-0.390], [0.590,-0.283], [0.593,-0.177], [0.597,-0.070], [0.600,0.037], [0.603,0.143], [0.607,0.250], [0.610,0.357], [0.582,0.537], [0.557,0.637], [0.528,0.747], [0.471,0.804], [0.406,0.800], [0.333,0.745], [0.282,0.665], [0.234,0.577], [0.282,0.665], [0.333,0.745], [0.406,0.800], [0.471,0.804], [0.528,0.747], [0.557,0.637], [0.582,0.537], [0.610,0.357], [0.607,0.250], [0.603,0.143], [0.600,0.037], [0.597,-0.070], [0.593,-0.177], [0.590,-0.283], [0.587,-0.390], [0.584,-0.497], [0.580,-0.603], [0.577,-0.710], [0.568,-0.765], [0.577,-0.710], [0.580,-0.603], [0.584,-0.497], [0.587,-0.390], [0.590,-0.283], [0.593,-0.177], [0.597,-0.070], [0.600,0.037], [0.603,0.143], [0.607,0.250], [0.610,0.357], [0.635,0.471], [0.659,0.604], [0.712,0.723], [0.759,0.795], [0.841,0.825], [0.947,0.826], [1.010,0.775], [1.078,0.692], [1.108,0.617], [1.130,0.465], [1.141,0.300], [1.141,0.199], [1.140,0.099], [1.139,-0.001], [1.138,-0.101], [1.137,-0.201], [1.136,-0.302], [1.136,-0.402], [1.135,-0.502], [1.134,-0.602], [1.133,-0.703], [1.197,-0.754], [1.234,-0.786], [1.306,-0.786], [1.355,-0.786], [1.420,-0.786], [1.505,-0.786],  ],\n  'O' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.565,-0.770], [0.621,-0.775], [0.714,-0.769], [0.806,-0.733], [0.867,-0.701], [0.912,-0.644], [0.959,-0.587], [1.028,-0.429], [1.061,-0.246], [1.067,-0.145], [1.065,0.024], [1.046,0.265], [1.037,0.379], [0.986,0.518], [0.918,0.668], [0.782,0.786], [0.714,0.786], [0.649,0.760], [0.572,0.699], [0.502,0.656], [0.435,0.572], [0.380,0.494], [0.332,0.378], [0.295,0.296], [0.271,0.169], [0.255,0.064], [0.255,-0.026], [0.255,-0.106], [0.266,-0.206], [0.307,-0.371], [0.340,-0.446], [0.373,-0.519], [0.417,-0.592], [0.451,-0.668], [0.509,-0.727], [0.565,-0.770], [0.621,-0.775], [0.714,-0.769], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786],  ],\n  'P' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.786], [0.289,-0.786], [0.289,-0.641], [0.289,-0.495], [0.289,-0.349], [0.289,-0.204], [0.289,-0.058], [0.314,-0.055], [0.410,-0.085], [0.476,-0.099], [0.603,-0.071], [0.676,-0.039], [0.777,0.051], [0.800,0.075], [0.856,0.217], [0.862,0.248], [0.866,0.337], [0.862,0.388], [0.856,0.463], [0.829,0.525], [0.776,0.636], [0.749,0.673], [0.688,0.748], [0.655,0.772], [0.603,0.786], [0.561,0.786], [0.493,0.769], [0.439,0.737], [0.400,0.701], [0.354,0.651], [0.323,0.599], [0.289,0.525], [0.289,0.379], [0.289,0.234], [0.289,0.088], [0.289,-0.058], [0.289,-0.204], [0.289,-0.349], [0.289,-0.495], [0.289,-0.641], [0.289,-0.786], [0.374,-0.786], [0.459,-0.786], [0.544,-0.786], [0.629,-0.786], [0.714,-0.786], [0.799,-0.786], [0.884,-0.786], [0.969,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  'Q' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.621,-0.786], [0.565,-0.770], [0.509,-0.727], [0.451,-0.668], [0.417,-0.592], [0.373,-0.519], [0.340,-0.446], [0.307,-0.371], [0.266,-0.206], [0.255,-0.106], [0.255,-0.026], [0.255,0.064], [0.271,0.169], [0.295,0.296], [0.332,0.378], [0.380,0.494], [0.435,0.572], [0.502,0.656], [0.572,0.710], [0.649,0.760], [0.714,0.786], [0.816,0.777], [0.918,0.668], [0.986,0.518], [1.037,0.379], [1.062,0.191], [1.065,0.024], [1.067,-0.145], [1.061,-0.246], [1.028,-0.429], [0.959,-0.587], [0.912,-0.644], [0.867,-0.701], [0.806,-0.733], [0.714,-0.769], [0.621,-0.786], [0.565,-0.770], [0.509,-0.727], [0.451,-0.668], [0.417,-0.592], [0.443,-0.531], [0.479,-0.481], [0.550,-0.430], [0.674,-0.430], [0.773,-0.472], [0.860,-0.532], [0.914,-0.595], [1.011,-0.667], [1.092,-0.732], [1.182,-0.786], [1.260,-0.786], [1.351,-0.786],  ],\n  'R' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.323,-0.786], [0.408,-0.786], [0.408,-0.640], [0.408,-0.494], [0.408,-0.348], [0.408,-0.201], [0.408,-0.055], [0.408,0.091], [0.408,0.237], [0.408,0.384], [0.408,0.530], [0.408,0.727], [0.480,0.744], [0.552,0.744], [0.648,0.744], [0.731,0.744], [0.816,0.744], [0.895,0.703], [0.966,0.616], [1.005,0.544], [1.026,0.494], [1.054,0.378], [1.051,0.276], [1.036,0.191], [0.998,0.132], [0.940,0.069], [0.850,0.004], [0.738,-0.016], [0.629,-0.030], [0.561,-0.034], [0.509,-0.037], [0.433,-0.032], [0.450,-0.091], [0.527,-0.191], [0.595,-0.319], [0.655,-0.400], [0.681,-0.437], [0.719,-0.487], [0.757,-0.536], [0.795,-0.585], [0.850,-0.650], [0.892,-0.710], [0.932,-0.769], [0.969,-0.803], [1.008,-0.820], [1.082,-0.829], [1.131,-0.820], [1.190,-0.786], [1.275,-0.786],  ],\n  'S' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.761], [0.306,-0.718], [0.357,-0.676], [0.391,-0.599], [0.433,-0.497], [0.493,-0.327], [0.544,-0.191], [0.620,-0.064], [0.689,0.064], [0.790,0.154], [0.833,0.234], [0.876,0.335], [0.909,0.429], [0.919,0.520], [0.922,0.614], [0.905,0.690], [0.871,0.749], [0.825,0.777], [0.739,0.786], [0.654,0.777], [0.584,0.760], [0.549,0.734], [0.525,0.681], [0.514,0.605], [0.507,0.548], [0.509,0.463], [0.517,0.404], [0.544,0.306], [0.587,0.174], [0.689,0.064], [0.790,-0.021], [0.872,-0.190], [0.944,-0.302], [0.918,-0.440], [0.884,-0.506], [0.850,-0.574], [0.765,-0.684], [0.680,-0.748], [0.579,-0.761], [0.519,-0.766], [0.476,-0.774], [0.425,-0.774], [0.344,-0.766], [0.298,-0.718], [0.264,-0.650], [0.256,-0.583], [0.265,-0.519], [0.313,-0.465], [0.354,-0.442], [0.423,-0.429], [0.501,-0.429], [0.581,-0.442], [0.669,-0.496], [0.794,-0.616], [0.855,-0.687], [0.963,-0.756], [1.046,-0.803], [1.140,-0.837], [1.239,-0.829], [1.335,-0.786],  ],\n  'T' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.440,-0.786], [0.514,-0.786], [0.578,-0.769], [0.621,-0.750], [0.683,-0.702], [0.717,-0.659], [0.759,-0.567], [0.790,-0.489], [0.809,-0.361], [0.820,-0.229], [0.830,-0.097], [0.840,0.035], [0.851,0.168], [0.861,0.300], [0.871,0.432], [0.882,0.564], [0.882,0.697], [0.920,0.681], [0.986,0.659], [1.052,0.655], [1.123,0.659], [1.188,0.681], [1.275,0.718], [1.394,0.759], [1.275,0.718], [1.188,0.681], [1.123,0.659], [1.052,0.655], [0.986,0.659], [0.920,0.681], [0.882,0.697], [0.785,0.730], [0.731,0.747], [0.679,0.762], [0.595,0.769], [0.471,0.728], [0.340,0.652], [0.471,0.728], [0.595,0.769], [0.679,0.762], [0.731,0.747], [0.785,0.730], [0.882,0.697], [0.882,0.564], [0.871,0.432], [0.861,0.300], [0.851,0.168], [0.840,0.035], [0.830,-0.097], [0.820,-0.229], [0.809,-0.361], [0.790,-0.489], [0.579,-0.761], [0.519,-0.766], [0.476,-0.774], [0.425,-0.774], [0.344,-0.766], [0.298,-0.718], [0.264,-0.650], [0.256,-0.583], [0.265,-0.519], [0.313,-0.465], [0.354,-0.442], [0.423,-0.429], [0.501,-0.429], [0.581,-0.442], [0.669,-0.496], [0.794,-0.616], [0.855,-0.687], [0.963,-0.756], [1.046,-0.803], [1.140,-0.837], [1.239,-0.829], [1.335,-0.820], [1.419,-0.803], [1.504,-0.786], [1.589,-0.786],  ],\n  'U' : [ [0.085,-0.786], [0.170,-0.785], [0.255,-0.783], [0.340,-0.781], [0.421,-0.745], [0.502,-0.709], [0.549,-0.661], [0.521,-0.621], [0.492,-0.535], [0.487,-0.355], [0.503,-0.237], [0.518,-0.119], [0.534,-0.001], [0.549,0.117], [0.565,0.234], [0.581,0.352], [0.596,0.470], [0.612,0.588], [0.594,0.643], [0.539,0.730], [0.499,0.755], [0.403,0.729], [0.349,0.658], [0.289,0.554], [0.252,0.493], [0.195,0.440], [0.252,0.493], [0.289,0.554], [0.349,0.658], [0.403,0.729], [0.499,0.755], [0.539,0.730], [0.594,0.643], [0.612,0.588], [0.596,0.470], [0.581,0.352], [0.565,0.234], [0.549,0.117], [0.534,-0.001], [0.518,-0.119], [0.503,-0.237], [0.487,-0.355], [0.492,-0.535], [0.521,-0.621], [0.549,-0.661], [0.591,-0.715], [0.678,-0.759], [0.764,-0.770], [0.837,-0.738], [0.902,-0.687], [0.936,-0.651], [0.967,-0.594], [1.005,-0.551], [1.061,-0.494], [1.073,-0.316], [1.088,-0.195], [1.103,-0.073], [1.117,0.049], [1.132,0.170], [1.147,0.292], [1.162,0.413], [1.177,0.535], [1.192,0.657], [1.217,0.817], [1.192,0.657], [1.177,0.535], [1.162,0.413], [1.147,0.292], [1.132,0.170], [1.117,0.049], [1.103,-0.073], [1.088,-0.195], [1.073,-0.316], [1.066,-0.418], [1.061,-0.494], [1.073,-0.609], [1.096,-0.659], [1.126,-0.710], [1.202,-0.752], [1.275,-0.761], [1.357,-0.786], [1.442,-0.786], [1.530,-0.786],  ],\n  'V' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.778], [0.425,-0.769], [0.510,-0.744], [0.595,-0.718], [0.646,-0.659], [0.682,-0.590], [0.717,-0.650], [0.751,-0.689], [0.790,-0.735], [0.867,-0.786], [0.969,-0.761], [1.022,-0.716], [1.085,-0.571], [1.118,-0.425], [1.135,-0.300], [1.152,-0.175], [1.169,-0.049], [1.186,0.076], [1.202,0.202], [1.219,0.327], [1.236,0.452], [1.253,0.578], [1.270,0.703], [1.287,0.786], [1.343,0.744], [1.420,0.688], [1.486,0.674], [1.543,0.699], [1.615,0.735], [1.543,0.699], [1.486,0.674], [1.420,0.688], [1.343,0.744], [1.287,0.786], [1.270,0.703], [1.253,0.578], [1.236,0.452], [1.219,0.327], [1.202,0.202], [1.186,0.076], [1.169,-0.049], [1.152,-0.175], [1.135,-0.300], [1.118,-0.425], [1.085,-0.571], [1.022,-0.716], [0.969,-0.761], [0.867,-0.786], [0.790,-0.735], [0.751,-0.689], [0.717,-0.650], [0.682,-0.590], [0.642,-0.426], [0.642,-0.262], [0.642,-0.097], [0.642,0.067], [0.642,0.231], [0.642,0.395], [0.626,0.588], [0.592,0.664], [0.552,0.735], [0.505,0.786], [0.459,0.760], [0.414,0.718], [0.371,0.667], [0.323,0.621], [0.255,0.542], [0.323,0.621], [0.371,0.667], [0.414,0.718], [0.459,0.760], [0.505,0.786], [0.552,0.735], [0.592,0.664], [0.626,0.588], [0.642,0.395], [0.642,0.231], [0.642,0.067], [0.642,-0.097], [0.642,-0.262], [0.642,-0.426], [0.682,-0.590], [0.717,-0.650], [0.751,-0.689], [0.790,-0.735], [0.867,-0.786], [0.969,-0.761], [1.022,-0.716], [1.105,-0.752], [1.190,-0.769], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786], [1.530,-0.786], [1.615,-0.786], [1.700,-0.786], [1.785,-0.786],  ],\n  'W' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.552,-0.739], [0.516,-0.647], [0.487,-0.569], [0.458,-0.430], [0.454,-0.354], [0.450,-0.252], [0.456,-0.096], [0.463,0.061], [0.469,0.218], [0.475,0.374], [0.481,0.531], [0.478,0.660], [0.459,0.724], [0.413,0.803], [0.357,0.775], [0.306,0.659], [0.238,0.531], [0.306,0.659], [0.357,0.775], [0.413,0.803], [0.459,0.724], [0.478,0.660], [0.481,0.531], [0.475,0.374], [0.469,0.218], [0.463,0.061], [0.456,-0.096], [0.450,-0.252], [0.454,-0.354], [0.458,-0.430], [0.487,-0.569], [0.516,-0.647], [0.552,-0.739], [0.599,-0.760], [0.652,-0.766], [0.726,-0.753], [0.788,-0.724], [0.856,-0.681], [0.912,-0.581], [0.949,-0.494], [0.987,-0.275], [0.990,-0.164], [0.993,-0.052], [0.996,0.060], [0.999,0.172], [1.002,0.283], [1.005,0.395], [1.008,0.507], [1.011,0.619], [1.014,0.730], [1.018,0.786], [1.014,0.730], [1.011,0.619], [1.008,0.507], [1.005,0.395], [1.002,0.283], [0.999,0.172], [0.996,0.060], [0.993,-0.052], [0.990,-0.164], [0.987,-0.275], [0.990,-0.543], [1.025,-0.644], [1.080,-0.695], [1.158,-0.761], [1.249,-0.761], [1.335,-0.718], [1.401,-0.672], [1.437,-0.622], [1.446,-0.474], [1.455,-0.326], [1.464,-0.179], [1.473,-0.031], [1.482,0.117], [1.491,0.265], [1.500,0.413], [1.509,0.561], [1.518,0.708], [1.527,0.786], [1.518,0.708], [1.509,0.561], [1.500,0.413], [1.491,0.265], [1.482,0.117], [1.473,-0.031], [1.464,-0.179], [1.455,-0.326], [1.446,-0.474], [1.437,-0.622], [1.514,-0.678], [1.602,-0.718], [1.688,-0.752], [1.774,-0.786], [1.861,-0.786], [1.945,-0.786],  ],\n  'X' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.321,-0.682], [0.388,-0.578], [0.454,-0.473], [0.520,-0.369], [0.586,-0.264], [0.653,-0.160], [0.719,-0.055], [0.785,0.049], [0.852,0.154], [0.918,0.258], [0.984,0.363], [1.050,0.467], [1.117,0.572], [1.183,0.676], [1.249,0.781], [1.183,0.676], [1.117,0.572], [1.050,0.467], [0.984,0.363], [0.918,0.258], [0.852,0.154], [0.781,0.144], [0.761,0.265], [0.741,0.387], [0.721,0.508], [0.701,0.629], [0.637,0.768], [0.512,0.730], [0.425,0.642], [0.370,0.577], [0.308,0.475], [0.370,0.577], [0.425,0.642], [0.512,0.730], [0.637,0.768], [0.701,0.629], [0.721,0.508], [0.741,0.387], [0.761,0.265], [0.781,0.144], [0.801,0.023], [0.821,-0.099], [0.841,-0.220], [0.861,-0.341], [0.881,-0.463], [0.901,-0.584], [0.947,-0.685], [0.984,-0.782], [1.037,-0.786], [1.036,-0.786], [1.117,-0.786], [1.214,-0.786], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786],  ],\n  'Y' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.365,-0.701], [0.387,-0.581], [0.375,-0.466], [0.383,-0.340], [0.404,-0.134], [0.426,0.071], [0.447,0.276], [0.468,0.481], [0.473,0.634], [0.445,0.749], [0.410,0.786], [0.340,0.777], [0.255,0.752], [0.340,0.777], [0.410,0.786], [0.445,0.749], [0.473,0.634], [0.468,0.481], [0.447,0.276], [0.426,0.071], [0.404,-0.134], [0.383,-0.340], [0.375,-0.466], [0.387,-0.581], [0.423,-0.684], [0.467,-0.750], [0.521,-0.756], [0.573,-0.733], [0.628,-0.686], [0.685,-0.624], [0.731,-0.548], [0.790,-0.489], [0.866,-0.430], [0.886,-0.303], [0.906,-0.176], [0.927,-0.050], [0.947,0.077], [0.968,0.204], [0.988,0.331], [1.009,0.458], [1.029,0.585], [1.050,0.701], [1.070,0.786], [1.050,0.701], [1.029,0.585], [1.009,0.458], [0.988,0.331], [0.968,0.204], [0.947,0.077], [0.927,-0.050], [0.906,-0.176], [0.886,-0.303], [0.866,-0.430], [0.847,-0.571], [0.829,-0.712], [0.810,-0.852], [0.792,-0.993], [0.773,-1.134], [0.755,-1.275], [0.724,-1.403], [0.679,-1.484], [0.620,-1.509], [0.562,-1.522], [0.476,-1.534], [0.408,-1.484], [0.376,-1.419], [0.367,-1.306], [0.392,-1.217], [0.442,-1.109], [0.510,-0.999], [0.570,-0.891], [0.626,-0.833], [0.714,-0.786], [0.782,-0.786], [0.833,-0.786], [0.929,-0.786], [0.986,-0.786], [1.054,-0.786], [1.139,-0.786], [1.224,-0.786],  ],\n  'Z' : [ [0.085,-0.786], [0.170,-0.786], [0.245,-0.786], [0.323,-0.701], [0.395,-0.577], [0.488,-0.462], [0.626,-0.240], [0.699,-0.091], [0.750,0.051], [0.784,0.192], [0.797,0.370], [0.762,0.534], [0.748,0.571], [0.701,0.657], [0.628,0.747], [0.561,0.752], [0.446,0.715], [0.342,0.625], [0.314,0.592], [0.255,0.530], [0.314,0.592], [0.342,0.625], [0.446,0.715], [0.561,0.752], [0.628,0.747], [0.701,0.657], [0.748,0.571], [0.762,0.534], [0.797,0.370], [0.784,0.192], [0.750,0.051], [0.699,-0.091], [0.626,-0.240], [0.488,-0.462], [0.395,-0.577], [0.323,-0.701], [0.384,-0.684], [0.417,-0.665], [0.532,-0.661], [0.562,-0.686], [0.666,-0.950], [0.652,-1.118], [0.645,-1.167], [0.586,-1.385], [0.570,-1.429], [0.499,-1.570], [0.379,-1.580], [0.305,-1.560], [0.274,-1.523], [0.251,-1.475], [0.234,-1.358], [0.247,-1.211], [0.311,-1.087], [0.375,-0.970], [0.442,-0.871], [0.502,-0.799], [0.595,-0.761], [0.646,-0.769], [0.714,-0.786], [0.792,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786],  ],\n  'a' : [ [0.085,-0.718], [0.146,-0.557], [0.146,-0.500], [0.153,-0.455], [0.180,-0.395], [0.204,-0.353], [0.219,-0.319], [0.246,-0.276], [0.272,-0.234], [0.298,-0.191], [0.333,-0.157], [0.379,-0.132], [0.432,-0.098], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.561,-0.718], [0.501,-0.773], [0.425,-0.801], [0.357,-0.820], [0.279,-0.801], [0.230,-0.754], [0.213,-0.731], [0.184,-0.681], [0.151,-0.616], [0.146,-0.557], [0.146,-0.500], [0.153,-0.455], [0.180,-0.395], [0.204,-0.353], [0.219,-0.319], [0.246,-0.276], [0.272,-0.234], [0.298,-0.191], [0.333,-0.157], [0.379,-0.132], [0.432,-0.098], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.678,-0.744], [0.729,-0.801], [0.781,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  'b' : [ [0.043,-0.786], [0.085,-0.761], [0.128,-0.727], [0.170,-0.693], [0.199,-0.667], [0.227,-0.625], [0.256,-0.574], [0.285,-0.497], [0.313,-0.429], [0.342,-0.361], [0.371,-0.268], [0.399,-0.191], [0.428,-0.106], [0.457,-0.004], [0.485,0.064], [0.514,0.140], [0.543,0.241], [0.571,0.320], [0.587,0.399], [0.588,0.510], [0.572,0.602], [0.529,0.674], [0.473,0.743], [0.432,0.750], [0.397,0.739], [0.367,0.724], [0.343,0.686], [0.323,0.627], [0.318,0.497], [0.316,0.368], [0.315,0.238], [0.313,0.108], [0.316,-0.022], [0.318,-0.152], [0.320,-0.282], [0.321,-0.412], [0.323,-0.542], [0.333,-0.672], [0.352,-0.718], [0.381,-0.771], [0.412,-0.786], [0.463,-0.786], [0.500,-0.782], [0.537,-0.764], [0.564,-0.746], [0.590,-0.688], [0.604,-0.634], [0.622,-0.573], [0.636,-0.514], [0.655,-0.446], [0.662,-0.377], [0.670,-0.293], [0.672,-0.200], [0.674,-0.112], [0.743,-0.140], [0.790,-0.157], [0.842,-0.149],  ],\n  'c' : [ [0.034,-0.769], [0.051,-0.735], [0.076,-0.676], [0.097,-0.599], [0.113,-0.565], [0.136,-0.514], [0.163,-0.446], [0.210,-0.344], [0.246,-0.268], [0.272,-0.222], [0.296,-0.191], [0.329,-0.152], [0.360,-0.123], [0.396,-0.094], [0.442,-0.081], [0.485,-0.072], [0.529,-0.064], [0.595,-0.064], [0.646,-0.106], [0.680,-0.191], [0.646,-0.106], [0.595,-0.064], [0.529,-0.064], [0.485,-0.072], [0.442,-0.081], [0.396,-0.094], [0.360,-0.123], [0.329,-0.152], [0.296,-0.191], [0.272,-0.222], [0.246,-0.268], [0.199,-0.407], [0.199,-0.497], [0.202,-0.565], [0.220,-0.657], [0.246,-0.708], [0.263,-0.731], [0.279,-0.754], [0.306,-0.795], [0.355,-0.829], [0.446,-0.846], [0.561,-0.829], [0.637,-0.820], [0.697,-0.812], [0.765,-0.803], [0.850,-0.795], [0.935,-0.786],  ],\n  'd' : [ [0.085,-0.786], [0.136,-0.769], [0.181,-0.701], [0.238,-0.616], [0.279,-0.557], [0.282,-0.500], [0.289,-0.455], [0.298,-0.395], [0.313,-0.319], [0.333,-0.242], [0.357,-0.191], [0.425,-0.123], [0.469,-0.089], [0.515,-0.072], [0.629,-0.043], [0.697,-0.036], [0.782,-0.036], [0.697,-0.036], [0.629,-0.043], [0.515,-0.072], [0.469,-0.089], [0.425,-0.123], [0.357,-0.191], [0.333,-0.242], [0.313,-0.319], [0.298,-0.395], [0.289,-0.455], [0.282,-0.500], [0.279,-0.557], [0.287,-0.616], [0.320,-0.681], [0.366,-0.754], [0.415,-0.801], [0.459,-0.810], [0.510,-0.808], [0.561,-0.801], [0.637,-0.773], [0.697,-0.718], [0.799,-0.650], [0.867,-0.639], [0.867,-0.592], [0.867,-0.489], [0.867,-0.404], [0.867,-0.293], [0.867,-0.149], [0.867,0.064], [0.867,0.234], [0.867,0.404], [0.867,0.574], [0.867,0.744], [0.867,0.574], [0.867,0.404], [0.867,0.234], [0.867,0.064], [0.867,-0.149], [0.867,-0.293], [0.867,-0.404], [0.867,-0.489], [0.867,-0.592], [0.867,-0.639], [0.875,-0.701], [0.899,-0.744], [0.950,-0.801], [1.002,-0.824], [1.068,-0.815], [1.122,-0.812], [1.190,-0.786],  ],\n  'e' : [ [0.085,-0.786], [0.170,-0.786], [0.290,-0.744], [0.378,-0.693], [0.459,-0.659], [0.503,-0.616], [0.537,-0.548], [0.561,-0.497], [0.571,-0.446], [0.576,-0.404], [0.579,-0.336], [0.576,-0.276], [0.568,-0.229], [0.559,-0.191], [0.551,-0.160], [0.534,-0.106], [0.517,-0.072], [0.486,-0.047], [0.444,-0.030], [0.401,-0.021], [0.359,-0.030], [0.316,-0.047], [0.286,-0.072], [0.269,-0.106], [0.252,-0.160], [0.243,-0.191], [0.235,-0.229], [0.226,-0.276], [0.223,-0.336], [0.226,-0.404], [0.231,-0.446], [0.241,-0.497], [0.265,-0.548], [0.299,-0.616], [0.342,-0.659], [0.422,-0.701], [0.510,-0.744], [0.605,-0.761], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786],  ],\n  'f' : [ [0.043,-0.786], [0.076,-0.779], [0.107,-0.773], [0.145,-0.744], [0.192,-0.710], [0.225,-0.684], [0.264,-0.667], [0.321,-0.642], [0.374,-0.592], [0.425,-0.548], [0.451,-0.446], [0.468,-0.361], [0.485,-0.276], [0.501,-0.191], [0.518,-0.106], [0.535,-0.038], [0.552,0.047], [0.565,0.131], [0.582,0.212], [0.605,0.299], [0.619,0.402], [0.632,0.506], [0.614,0.607], [0.578,0.667], [0.535,0.680], [0.485,0.684], [0.425,0.671], [0.374,0.652], [0.329,0.619], [0.298,0.531], [0.294,0.428], [0.292,0.299], [0.294,0.169], [0.296,-0.000], [0.296,-0.172], [0.296,-0.276], [0.298,-0.385], [0.297,-0.489], [0.296,-0.598], [0.295,-0.710], [0.295,-0.829], [0.292,-0.931], [0.289,-1.041], [0.286,-1.126], [0.281,-1.254], [0.281,-1.356], [0.279,-1.466], [0.272,-1.602], [0.323,-1.602], [0.374,-1.601], [0.423,-1.594], [0.474,-1.551], [0.510,-1.509], [0.542,-1.466], [0.550,-1.381], [0.542,-1.296], [0.533,-1.211], [0.522,-1.126], [0.508,-1.041], [0.491,-0.956], [0.468,-0.888], [0.442,-0.846], [0.383,-0.752], [0.420,-0.769], [0.468,-0.803], [0.510,-0.829], [0.567,-0.812], [0.639,-0.803], [0.723,-0.795], [0.807,-0.786], [0.892,-0.786],  ],\n  'g' : [ [0.033,-0.778], [0.067,-0.761], [0.117,-0.727], [0.145,-0.706], [0.204,-0.662], [0.238,-0.633], [0.284,-0.592], [0.317,-0.557], [0.350,-0.506], [0.384,-0.458], [0.400,-0.430], [0.434,-0.384], [0.467,-0.337], [0.500,-0.291], [0.527,-0.251], [0.559,-0.217], [0.601,-0.175], [0.633,-0.149], [0.678,-0.132], [0.729,-0.115], [0.780,-0.098], [0.831,-0.086], [0.883,-0.089], [0.901,-0.123], [0.898,-0.191], [0.894,-0.259], [0.891,-0.327], [0.887,-0.395], [0.884,-0.463], [0.881,-0.531], [0.877,-0.599], [0.874,-0.667], [0.870,-0.735], [0.816,-0.761], [0.763,-0.786], [0.678,-0.812], [0.610,-0.824], [0.527,-0.812], [0.457,-0.786], [0.400,-0.754], [0.355,-0.676], [0.334,-0.592], [0.317,-0.557], [0.350,-0.506], [0.384,-0.458], [0.400,-0.430], [0.434,-0.384], [0.467,-0.337], [0.500,-0.291], [0.527,-0.251], [0.559,-0.217], [0.601,-0.175], [0.633,-0.149], [0.678,-0.132], [0.729,-0.115], [0.780,-0.098], [0.831,-0.086], [0.883,-0.089], [0.901,-0.123], [0.898,-0.191], [0.894,-0.259], [0.891,-0.327], [0.887,-0.395], [0.884,-0.463], [0.881,-0.531], [0.877,-0.599], [0.874,-0.667], [0.870,-0.735], [0.867,-0.803], [0.864,-0.871], [0.860,-0.939], [0.857,-1.007], [0.853,-1.075], [0.850,-1.143], [0.847,-1.211], [0.843,-1.279], [0.840,-1.347], [0.836,-1.415], [0.833,-1.484], [0.830,-1.551], [0.826,-1.619], [0.765,-1.615], [0.697,-1.608], [0.646,-1.598], [0.595,-1.568], [0.544,-1.526], [0.493,-1.466], [0.459,-1.398], [0.442,-1.347], [0.425,-1.279], [0.433,-1.228], [0.459,-1.186], [0.500,-1.125], [0.530,-1.084], [0.567,-1.041], [0.627,-0.990], [0.695,-0.948], [0.746,-0.914], [0.800,-0.871], [0.873,-0.829], [0.949,-0.820], [1.037,-0.812], [1.105,-0.803], [1.190,-0.786],  ],\n  'h' : [ [0.046,-0.710], [0.072,-0.666], [0.110,-0.611], [0.134,-0.564], [0.169,-0.515], [0.197,-0.467], [0.221,-0.419], [0.250,-0.374], [0.277,-0.327], [0.303,-0.276], [0.326,-0.242], [0.349,-0.200], [0.383,-0.155], [0.432,-0.083], [0.483,-0.038], [0.508,0.013], [0.549,0.064], [0.575,0.131], [0.602,0.202], [0.617,0.249], [0.641,0.297], [0.651,0.370], [0.660,0.438], [0.662,0.523], [0.651,0.616], [0.641,0.693], [0.599,0.742], [0.542,0.769], [0.483,0.769], [0.406,0.738], [0.355,0.702], [0.321,0.636], [0.295,0.511], [0.295,0.425], [0.295,0.339], [0.295,0.227], [0.295,0.114], [0.295,0.001], [0.295,-0.111], [0.295,-0.224], [0.295,-0.336], [0.295,-0.449], [0.295,-0.561], [0.295,-0.674], [0.295,-0.786], [0.299,-0.674], [0.302,-0.561], [0.329,-0.514], [0.368,-0.447], [0.392,-0.386], [0.420,-0.307], [0.447,-0.255], [0.475,-0.185], [0.507,-0.149], [0.564,-0.132], [0.625,-0.123], [0.678,-0.132], [0.743,-0.166], [0.767,-0.229], [0.760,-0.307], [0.755,-0.375], [0.748,-0.453], [0.748,-0.533], [0.761,-0.623], [0.786,-0.717], [0.845,-0.766], [0.920,-0.794], [1.005,-0.786],  ],\n  'i' : [ [0.085,-0.791], [0.173,-0.803], [0.256,-0.811], [0.289,-0.765], [0.316,-0.712], [0.331,-0.635], [0.333,-0.550], [0.335,-0.508], [0.341,-0.431], [0.346,-0.372], [0.352,-0.287], [0.352,-0.202], [0.354,-0.143], [0.357,-0.032], [0.357,-0.143], [0.358,-0.202], [0.356,-0.287], [0.360,-0.372], [0.364,-0.432], [0.368,-0.508], [0.369,-0.551], [0.370,-0.636], [0.384,-0.712], [0.409,-0.765], [0.441,-0.811], [0.518,-0.829], [0.585,-0.795], [0.677,-0.786],  ],\n  'j' : [ [0.042,-0.761], [0.098,-0.734], [0.131,-0.693], [0.159,-0.658], [0.188,-0.613], [0.199,-0.589], [0.225,-0.548], [0.250,-0.516], [0.272,-0.468], [0.295,-0.420], [0.317,-0.360], [0.334,-0.299], [0.343,-0.264], [0.360,-0.195], [0.373,-0.100], [0.383,-0.049], [0.383,-0.099], [0.383,-0.167], [0.383,-0.276], [0.383,-0.395], [0.383,-0.513], [0.383,-0.632], [0.383,-0.751], [0.383,-0.869], [0.383,-0.988], [0.383,-1.107], [0.383,-1.225], [0.383,-1.344], [0.368,-1.405], [0.349,-1.466], [0.326,-1.514], [0.296,-1.530], [0.255,-1.534], [0.218,-1.518], [0.196,-1.496], [0.172,-1.406], [0.162,-1.296], [0.159,-1.211], [0.173,-1.126], [0.196,-1.053], [0.218,-1.005], [0.241,-0.957], [0.263,-0.909], [0.286,-0.861], [0.301,-0.837], [0.328,-0.808], [0.356,-0.780], [0.384,-0.753], [0.408,-0.742], [0.439,-0.734], [0.473,-0.733], [0.509,-0.750], [0.552,-0.767], [0.595,-0.786],  ],\n  'k' : [ [0.043,-0.744], [0.076,-0.701], [0.106,-0.659], [0.136,-0.616], [0.170,-0.548], [0.206,-0.500], [0.239,-0.453], [0.272,-0.407], [0.298,-0.384], [0.337,-0.305], [0.384,-0.226], [0.431,-0.147], [0.479,-0.069], [0.526,0.010], [0.555,0.056], [0.584,0.103], [0.605,0.149], [0.622,0.195], [0.659,0.261], [0.677,0.309], [0.695,0.356], [0.713,0.404], [0.732,0.451], [0.750,0.499], [0.765,0.565], [0.771,0.635], [0.737,0.676], [0.695,0.684], [0.654,0.684], [0.603,0.684], [0.552,0.676], [0.501,0.659], [0.451,0.612], [0.400,0.562], [0.357,0.466], [0.340,0.369], [0.340,0.273], [0.340,0.176], [0.340,0.079], [0.340,0.010], [0.340,-0.066], [0.340,-0.143], [0.340,-0.219], [0.340,-0.296], [0.340,-0.372], [0.340,-0.449], [0.340,-0.525], [0.340,-0.601], [0.340,-0.678], [0.340,-0.754], [0.340,-0.847], [0.340,-0.754], [0.340,-0.678], [0.340,-0.601], [0.340,-0.525], [0.340,-0.449], [0.354,-0.372], [0.397,-0.361], [0.465,-0.353], [0.533,-0.344], [0.618,-0.327], [0.686,-0.302], [0.754,-0.276], [0.797,-0.234], [0.822,-0.198], [0.812,-0.140], [0.788,-0.089], [0.758,-0.059], [0.720,-0.032], [0.652,-0.055], [0.601,-0.106], [0.516,-0.191], [0.465,-0.276], [0.431,-0.336], [0.383,-0.378], [0.414,-0.421], [0.455,-0.453], [0.489,-0.500], [0.522,-0.546], [0.554,-0.592], [0.577,-0.639], [0.591,-0.662], [0.622,-0.708], [0.655,-0.754], [0.688,-0.801], [0.729,-0.846], [0.771,-0.871], [0.814,-0.863], [0.856,-0.846], [0.899,-0.829], [0.941,-0.812], [0.971,-0.803], [1.011,-0.786], [1.065,-0.803], [1.105,-0.786],  ],\n  'l' : [ [0.060,-0.744], [0.097,-0.694], [0.124,-0.646], [0.145,-0.616], [0.171,-0.574], [0.194,-0.526], [0.224,-0.477], [0.255,-0.429], [0.289,-0.381], [0.306,-0.332], [0.340,-0.286], [0.377,-0.238], [0.403,-0.191], [0.435,-0.115], [0.459,-0.055], [0.483,0.013], [0.501,0.056], [0.510,0.095], [0.524,0.140], [0.534,0.190], [0.548,0.237], [0.554,0.284], [0.566,0.351], [0.578,0.404], [0.585,0.480], [0.594,0.566], [0.595,0.613], [0.585,0.682], [0.550,0.734], [0.515,0.771], [0.480,0.782], [0.451,0.786], [0.400,0.781], [0.347,0.767], [0.324,0.719], [0.315,0.672], [0.308,0.632], [0.304,0.574], [0.304,0.488], [0.304,0.401], [0.304,0.314], [0.304,0.227], [0.304,0.141], [0.304,0.054], [0.304,-0.033], [0.304,-0.119], [0.303,-0.206], [0.303,-0.293], [0.303,-0.380], [0.303,-0.466], [0.303,-0.553], [0.303,-0.640], [0.311,-0.702], [0.343,-0.752], [0.383,-0.778], [0.434,-0.784], [0.483,-0.807], [0.538,-0.821], [0.603,-0.803], [0.677,-0.795], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  'm' : [ [0.066,-0.744], [0.100,-0.708], [0.116,-0.685], [0.150,-0.639], [0.166,-0.615], [0.200,-0.569], [0.216,-0.546], [0.233,-0.523], [0.250,-0.500], [0.270,-0.463], [0.295,-0.412], [0.316,-0.384], [0.324,-0.361], [0.334,-0.337], [0.349,-0.314], [0.372,-0.276], [0.389,-0.251], [0.416,-0.222], [0.449,-0.175], [0.466,-0.152], [0.482,-0.129], [0.499,-0.106], [0.527,-0.081], [0.567,-0.069], [0.603,-0.055], [0.649,-0.059], [0.665,-0.083], [0.669,-0.103], [0.674,-0.154], [0.679,-0.205], [0.685,-0.256], [0.690,-0.307], [0.695,-0.358], [0.686,-0.402], [0.676,-0.447], [0.666,-0.491], [0.657,-0.535], [0.647,-0.579], [0.637,-0.624], [0.628,-0.668], [0.618,-0.712], [0.608,-0.756], [0.599,-0.801], [0.608,-0.756], [0.618,-0.712], [0.628,-0.668], [0.637,-0.624], [0.647,-0.579], [0.657,-0.535], [0.666,-0.491], [0.676,-0.447], [0.686,-0.402], [0.695,-0.358], [0.715,-0.314], [0.743,-0.276], [0.765,-0.245], [0.782,-0.222], [0.798,-0.198], [0.815,-0.175], [0.832,-0.152], [0.848,-0.129], [0.882,-0.089], [0.916,-0.064], [0.966,-0.044], [1.015,-0.036], [1.031,-0.059], [1.048,-0.083], [1.065,-0.106], [1.075,-0.143], [1.085,-0.180], [1.095,-0.217], [1.105,-0.254], [1.114,-0.291], [1.103,-0.340], [1.091,-0.388], [1.080,-0.437], [1.068,-0.486], [1.056,-0.534], [1.045,-0.583], [1.033,-0.632], [1.021,-0.680], [1.010,-0.729], [1.009,-0.777], [1.010,-0.729], [1.021,-0.680], [1.033,-0.632], [1.045,-0.583], [1.056,-0.534], [1.068,-0.486], [1.080,-0.437], [1.091,-0.388], [1.103,-0.340], [1.114,-0.291], [1.131,-0.268], [1.156,-0.234], [1.181,-0.198], [1.198,-0.175], [1.215,-0.140], [1.248,-0.106], [1.264,-0.083], [1.290,-0.059], [1.358,-0.038], [1.431,-0.059], [1.464,-0.106], [1.480,-0.129], [1.497,-0.175], [1.489,-0.224], [1.480,-0.272], [1.472,-0.320], [1.464,-0.369], [1.455,-0.417], [1.447,-0.466], [1.439,-0.514], [1.431,-0.562], [1.422,-0.611], [1.414,-0.659], [1.414,-0.708], [1.447,-0.754], [1.464,-0.777], [1.496,-0.803], [1.580,-0.812], [1.630,-0.812], [1.677,-0.799], [1.730,-0.795], [1.785,-0.786],  ],\n  'n' : [ [0.033,-0.786], [0.067,-0.786], [0.085,-0.744], [0.102,-0.701], [0.119,-0.625], [0.145,-0.531], [0.170,-0.446], [0.196,-0.361], [0.221,-0.234], [0.255,-0.106], [0.292,0.010], [0.332,0.064], [0.374,0.038], [0.400,-0.013], [0.414,-0.059], [0.423,-0.106], [0.431,-0.149], [0.435,-0.198], [0.430,-0.254], [0.430,-0.310], [0.430,-0.365], [0.430,-0.421], [0.430,-0.476], [0.430,-0.532], [0.430,-0.588], [0.430,-0.643], [0.430,-0.699], [0.430,-0.754], [0.430,-0.699], [0.430,-0.643], [0.430,-0.588], [0.430,-0.532], [0.430,-0.476], [0.430,-0.421], [0.430,-0.365], [0.430,-0.310], [0.430,-0.254], [0.459,-0.242], [0.485,-0.217], [0.508,-0.198], [0.525,-0.175], [0.542,-0.152], [0.558,-0.129], [0.587,-0.098], [0.620,-0.059], [0.656,-0.013], [0.691,0.010], [0.741,0.010], [0.774,-0.013], [0.791,-0.036], [0.808,-0.059], [0.816,-0.106], [0.825,-0.149], [0.825,-0.234], [0.825,-0.293], [0.825,-0.361], [0.825,-0.421], [0.825,-0.480], [0.825,-0.523], [0.825,-0.574], [0.825,-0.616], [0.825,-0.662], [0.825,-0.708], [0.833,-0.761], [0.865,-0.812], [0.924,-0.820], [0.967,-0.812], [1.024,-0.786],  ],\n  'o' : [ [0.085,-0.727], [0.134,-0.659], [0.162,-0.608], [0.187,-0.557], [0.204,-0.514], [0.214,-0.480], [0.238,-0.430], [0.256,-0.395], [0.267,-0.361], [0.289,-0.319], [0.314,-0.268], [0.331,-0.245], [0.346,-0.222], [0.372,-0.183], [0.397,-0.152], [0.414,-0.129], [0.431,-0.106], [0.447,-0.083], [0.482,-0.072], [0.525,-0.055], [0.584,-0.055], [0.627,-0.072], [0.647,-0.083], [0.669,-0.106], [0.685,-0.123], [0.697,-0.149], [0.714,-0.175], [0.720,-0.224], [0.719,-0.272], [0.724,-0.320], [0.723,-0.368], [0.716,-0.417], [0.711,-0.465], [0.702,-0.513], [0.689,-0.562], [0.671,-0.610], [0.654,-0.658], [0.643,-0.701], [0.620,-0.752], [0.595,-0.795], [0.552,-0.829], [0.510,-0.846], [0.459,-0.854], [0.397,-0.842], [0.372,-0.820], [0.347,-0.791], [0.314,-0.754], [0.298,-0.731], [0.281,-0.708], [0.264,-0.685], [0.253,-0.659], [0.236,-0.616], [0.219,-0.574], [0.207,-0.531], [0.214,-0.480], [0.238,-0.430], [0.256,-0.395], [0.267,-0.361], [0.289,-0.319], [0.314,-0.268], [0.331,-0.245], [0.346,-0.222], [0.372,-0.183], [0.397,-0.152], [0.414,-0.129], [0.431,-0.106], [0.447,-0.083], [0.482,-0.072], [0.524,-0.106], [0.544,-0.149], [0.570,-0.183], [0.595,-0.200], [0.629,-0.217], [0.663,-0.225], [0.697,-0.225], [0.731,-0.225], [0.765,-0.225], [0.799,-0.221], [0.833,-0.217], [0.867,-0.208], [0.901,-0.191], [0.935,-0.174], [0.969,-0.149],  ],\n  'p' : [ [0.069,-0.801], [0.130,-0.767], [0.181,-0.693], [0.211,-0.610], [0.232,-0.524], [0.253,-0.438], [0.274,-0.352], [0.291,-0.300], [0.316,-0.257], [0.337,-0.179], [0.364,-0.136], [0.372,-0.215], [0.370,-0.323], [0.368,-0.431], [0.367,-0.539], [0.365,-0.646], [0.363,-0.754], [0.361,-0.862], [0.359,-0.970], [0.357,-1.078], [0.355,-1.186], [0.353,-1.294], [0.352,-1.402], [0.350,-1.510], [0.352,-1.402], [0.353,-1.294], [0.355,-1.186], [0.357,-1.078], [0.359,-0.970], [0.361,-0.862], [0.363,-0.754], [0.365,-0.646], [0.367,-0.539], [0.368,-0.431], [0.370,-0.323], [0.372,-0.215], [0.374,-0.107], [0.364,-0.136], [0.407,-0.091], [0.438,-0.048], [0.478,-0.020], [0.510,-0.002], [0.534,0.007], [0.564,0.017], [0.610,0.010], [0.662,-0.011], [0.709,-0.077], [0.722,-0.104], [0.753,-0.170], [0.771,-0.282], [0.771,-0.357], [0.774,-0.469], [0.760,-0.538], [0.748,-0.616], [0.726,-0.654], [0.691,-0.694], [0.651,-0.714], [0.589,-0.754], [0.531,-0.747], [0.476,-0.744], [0.425,-0.727], [0.476,-0.744], [0.531,-0.747], [0.589,-0.754], [0.625,-0.748], [0.678,-0.763], [0.763,-0.777], [0.814,-0.783], [0.878,-0.803], [0.935,-0.803], [0.996,-0.795], [1.054,-0.786],  ],\n  'q' : [ [0.033,-0.778], [0.067,-0.761], [0.117,-0.727], [0.145,-0.706], [0.183,-0.662], [0.216,-0.615], [0.233,-0.592], [0.275,-0.548], [0.299,-0.506], [0.333,-0.458], [0.349,-0.430], [0.383,-0.384], [0.416,-0.337], [0.449,-0.291], [0.476,-0.251], [0.508,-0.217], [0.550,-0.175], [0.582,-0.149], [0.627,-0.132], [0.678,-0.115], [0.729,-0.098], [0.780,-0.086], [0.832,-0.089], [0.850,-0.123], [0.847,-0.191], [0.843,-0.259], [0.840,-0.327], [0.836,-0.395], [0.833,-0.463], [0.830,-0.531], [0.826,-0.599], [0.823,-0.667], [0.819,-0.735], [0.765,-0.761], [0.712,-0.786], [0.627,-0.812], [0.559,-0.824], [0.476,-0.812], [0.406,-0.786], [0.349,-0.754], [0.304,-0.676], [0.283,-0.592], [0.299,-0.506], [0.333,-0.458], [0.349,-0.430], [0.383,-0.384], [0.416,-0.337], [0.449,-0.291], [0.476,-0.251], [0.508,-0.217], [0.550,-0.175], [0.582,-0.149], [0.627,-0.132], [0.678,-0.115], [0.729,-0.098], [0.780,-0.086], [0.832,-0.089], [0.850,-0.123], [0.847,-0.191], [0.843,-0.259], [0.840,-0.327], [0.836,-0.395], [0.833,-0.463], [0.830,-0.531], [0.826,-0.599], [0.823,-0.667], [0.819,-0.735], [0.816,-0.803], [0.813,-0.871], [0.809,-0.939], [0.806,-1.007], [0.802,-1.075], [0.799,-1.143], [0.796,-1.211], [0.792,-1.279], [0.789,-1.347], [0.785,-1.415], [0.782,-1.484], [0.779,-1.551], [0.775,-1.619], [0.816,-1.615], [0.867,-1.608], [0.901,-1.598], [0.935,-1.568], [0.969,-1.526], [1.003,-1.466], [1.037,-1.398], [1.054,-1.347], [1.062,-1.279], [1.054,-1.228], [1.037,-1.186], [1.003,-1.125], [0.969,-1.084], [0.935,-1.041], [0.901,-0.990], [0.867,-0.948], [0.850,-0.914], [0.850,-0.854], [0.898,-0.829], [0.952,-0.812], [1.003,-0.795], [1.054,-0.786], [1.139,-0.786], [1.224,-0.786],  ],\n  'r' : [ [0.085,-0.786], [0.170,-0.752], [0.221,-0.701], [0.255,-0.659], [0.289,-0.616], [0.309,-0.531], [0.332,-0.446], [0.349,-0.353], [0.362,-0.293], [0.374,-0.234], [0.389,-0.166], [0.400,-0.106], [0.527,-0.106], [0.612,-0.106], [0.697,-0.106], [0.782,-0.106], [0.867,-0.106], [0.867,-0.149], [0.859,-0.234], [0.850,-0.319], [0.833,-0.404], [0.816,-0.489], [0.807,-0.574], [0.833,-0.659], [0.867,-0.701], [0.935,-0.744], [1.020,-0.769], [1.122,-0.786], [1.241,-0.786],  ],\n  's' : [ [0.066,-0.769], [0.134,-0.731], [0.168,-0.701], [0.200,-0.667], [0.255,-0.615], [0.313,-0.531], [0.383,-0.446], [0.417,-0.378], [0.442,-0.319], [0.451,-0.242], [0.451,-0.191], [0.425,-0.064], [0.510,-0.140], [0.561,-0.191], [0.612,-0.234], [0.653,-0.276], [0.697,-0.319], [0.731,-0.402], [0.748,-0.446], [0.756,-0.490], [0.765,-0.534], [0.756,-0.578], [0.739,-0.622], [0.714,-0.666], [0.680,-0.710], [0.632,-0.747], [0.567,-0.786], [0.517,-0.801], [0.468,-0.803], [0.417,-0.801], [0.374,-0.786], [0.306,-0.761], [0.238,-0.727], [0.306,-0.761], [0.374,-0.786], [0.417,-0.801], [0.468,-0.803], [0.517,-0.801], [0.567,-0.786], [0.632,-0.747], [0.678,-0.769], [0.720,-0.786], [0.763,-0.786], [0.805,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  't' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.786], [0.298,-0.786], [0.374,-0.786], [0.445,-0.786], [0.484,-0.759], [0.499,-0.605], [0.514,-0.452], [0.529,-0.299], [0.543,-0.146], [0.558,0.008], [0.573,0.161], [0.588,0.314], [0.552,0.314], [0.522,0.314], [0.467,0.314], [0.411,0.314], [0.340,0.314], [0.255,0.314], [0.170,0.314], [0.255,0.314], [0.340,0.314], [0.411,0.314], [0.467,0.314], [0.522,0.314], [0.552,0.314], [0.633,0.314], [0.688,0.314], [0.729,0.314], [0.784,0.314], [0.840,0.314], [0.895,0.314], [0.978,0.314], [1.062,0.314], [0.978,0.314], [0.895,0.314], [0.840,0.314], [0.784,0.314], [0.729,0.314], [0.688,0.314], [0.633,0.314], [0.588,0.314], [0.602,0.467], [0.617,0.621], [0.632,0.774], [0.632,0.621], [0.632,0.467], [0.632,0.314], [0.632,0.161], [0.632,0.008], [0.632,-0.146], [0.632,-0.299], [0.632,-0.452], [0.632,-0.605], [0.632,-0.759], [0.659,-0.805], [0.720,-0.816], [0.807,-0.799], [0.894,-0.791], [0.978,-0.786], [1.062,-0.786], [1.147,-0.786], [1.232,-0.786],  ],\n  'u' : [ [0.043,-0.761], [0.085,-0.744], [0.128,-0.727], [0.156,-0.710], [0.179,-0.690], [0.204,-0.646], [0.221,-0.602], [0.238,-0.557], [0.255,-0.506], [0.286,-0.491], [0.293,-0.442], [0.299,-0.392], [0.306,-0.343], [0.312,-0.294], [0.319,-0.245], [0.325,-0.195], [0.332,-0.146], [0.338,-0.097], [0.344,-0.048], [0.338,-0.097], [0.332,-0.146], [0.325,-0.195], [0.319,-0.245], [0.312,-0.294], [0.306,-0.343], [0.299,-0.392], [0.293,-0.442], [0.286,-0.491], [0.280,-0.540], [0.273,-0.589], [0.267,-0.639], [0.260,-0.688], [0.254,-0.737], [0.260,-0.786], [0.289,-0.803], [0.332,-0.812], [0.383,-0.803], [0.425,-0.795], [0.461,-0.778], [0.501,-0.761], [0.544,-0.744], [0.583,-0.727], [0.616,-0.710], [0.646,-0.684], [0.671,-0.650], [0.682,-0.605], [0.686,-0.558], [0.689,-0.511], [0.693,-0.464], [0.697,-0.416], [0.700,-0.369], [0.704,-0.322], [0.708,-0.275], [0.711,-0.228], [0.715,-0.180], [0.719,-0.133], [0.723,-0.074], [0.726,-0.023], [0.723,-0.074], [0.719,-0.133], [0.715,-0.180], [0.711,-0.228], [0.708,-0.275], [0.704,-0.322], [0.700,-0.369], [0.697,-0.416], [0.693,-0.464], [0.712,-0.529], [0.719,-0.582], [0.731,-0.633], [0.748,-0.684], [0.756,-0.735], [0.790,-0.786], [0.845,-0.803], [0.901,-0.803], [0.944,-0.795], [1.020,-0.786],  ],\n  'v' : [ [0.030,-0.784], [0.050,-0.735], [0.070,-0.687], [0.091,-0.639], [0.111,-0.591], [0.131,-0.543], [0.151,-0.494], [0.172,-0.431], [0.184,-0.375], [0.204,-0.327], [0.224,-0.279], [0.245,-0.231], [0.265,-0.182], [0.285,-0.134], [0.321,-0.085], [0.348,-0.060], [0.388,-0.046], [0.430,-0.054], [0.455,-0.076], [0.476,-0.097], [0.488,-0.134], [0.498,-0.176], [0.508,-0.212], [0.509,-0.244], [0.505,-0.280], [0.503,-0.321], [0.501,-0.363], [0.498,-0.404], [0.496,-0.446], [0.493,-0.487], [0.491,-0.528], [0.488,-0.570], [0.486,-0.611], [0.493,-0.657], [0.509,-0.707], [0.525,-0.749], [0.554,-0.790], [0.593,-0.814], [0.635,-0.793], [0.674,-0.766], [0.689,-0.723], [0.703,-0.680], [0.718,-0.637], [0.733,-0.594], [0.737,-0.547], [0.753,-0.502], [0.759,-0.450], [0.769,-0.408], [0.780,-0.331], [0.791,-0.255], [0.803,-0.179], [0.814,-0.102], [0.886,-0.110], [0.960,-0.130], [1.015,-0.143], [1.058,-0.149],  ],\n  'w' : [ [0.030,-0.781], [0.050,-0.754], [0.083,-0.708], [0.102,-0.684], [0.123,-0.659], [0.146,-0.611], [0.170,-0.564], [0.193,-0.516], [0.216,-0.468], [0.240,-0.420], [0.262,-0.361], [0.284,-0.290], [0.306,-0.219], [0.328,-0.148], [0.350,-0.077], [0.361,-0.041], [0.356,-0.126], [0.352,-0.210], [0.348,-0.294], [0.343,-0.379], [0.339,-0.463], [0.342,-0.517], [0.351,-0.602], [0.359,-0.670], [0.390,-0.738], [0.433,-0.783], [0.495,-0.799], [0.565,-0.776], [0.589,-0.728], [0.612,-0.680], [0.636,-0.632], [0.655,-0.585], [0.673,-0.537], [0.689,-0.490], [0.704,-0.442], [0.711,-0.358], [0.719,-0.274], [0.726,-0.190], [0.734,-0.105], [0.741,-0.064], [0.753,-0.120], [0.765,-0.219], [0.777,-0.317], [0.789,-0.416], [0.801,-0.515], [0.812,-0.614], [0.824,-0.712], [0.867,-0.780], [0.911,-0.786], [0.952,-0.775], [0.988,-0.723], [1.014,-0.682], [1.037,-0.634], [1.061,-0.587], [1.073,-0.530], [1.085,-0.448], [1.091,-0.403], [1.101,-0.314], [1.112,-0.224], [1.122,-0.135], [1.133,-0.064], [1.188,-0.072], [1.244,-0.089], [1.298,-0.106], [1.356,-0.149],  ],\n  'x' : [ [0.085,-0.786], [0.170,-0.786], [0.220,-0.721], [0.262,-0.667], [0.304,-0.614], [0.346,-0.560], [0.388,-0.506], [0.430,-0.452], [0.471,-0.398], [0.522,-0.337], [0.555,-0.291], [0.597,-0.237], [0.639,-0.183], [0.681,-0.129], [0.723,-0.075], [0.765,-0.021], [0.799,0.021], [0.765,-0.021], [0.723,-0.075], [0.681,-0.129], [0.639,-0.183], [0.597,-0.237], [0.555,-0.291], [0.522,-0.337], [0.445,-0.429], [0.417,-0.383], [0.380,-0.315], [0.343,-0.248], [0.306,-0.181], [0.269,-0.114], [0.232,-0.046], [0.196,0.021], [0.232,-0.046], [0.269,-0.114], [0.306,-0.181], [0.343,-0.248], [0.380,-0.315], [0.417,-0.383], [0.445,-0.429], [0.491,-0.517], [0.528,-0.585], [0.565,-0.652], [0.602,-0.719], [0.639,-0.786], [0.680,-0.824], [0.718,-0.830], [0.763,-0.846], [0.799,-0.842], [0.834,-0.837], [0.863,-0.820], [0.901,-0.808], [0.935,-0.795], [0.986,-0.786],  ],\n  'y' : [ [0.033,-0.778], [0.066,-0.760], [0.099,-0.739], [0.124,-0.720], [0.145,-0.684], [0.166,-0.648], [0.187,-0.612], [0.208,-0.576], [0.229,-0.540], [0.251,-0.504], [0.272,-0.468], [0.293,-0.431], [0.314,-0.395], [0.335,-0.359], [0.357,-0.323], [0.378,-0.287], [0.399,-0.251], [0.420,-0.215], [0.441,-0.179], [0.462,-0.143], [0.513,-0.123], [0.547,-0.123], [0.586,-0.138], [0.604,-0.161], [0.611,-0.198], [0.606,-0.241], [0.601,-0.279], [0.585,-0.358], [0.570,-0.437], [0.554,-0.515], [0.539,-0.594], [0.523,-0.672], [0.521,-0.735], [0.531,-0.788], [0.549,-0.811], [0.568,-0.834], [0.586,-0.857], [0.609,-0.878], [0.635,-0.895], [0.669,-0.902], [0.703,-0.902], [0.773,-0.893], [0.838,-0.857], [0.870,-0.823], [0.943,-0.745], [0.950,-0.674], [0.957,-0.603], [0.964,-0.533], [0.971,-0.462], [0.977,-0.391], [0.984,-0.320], [0.991,-0.249], [0.998,-0.179], [1.005,-0.132], [0.998,-0.179], [0.991,-0.249], [0.984,-0.320], [0.977,-0.391], [0.971,-0.462], [0.964,-0.533], [0.957,-0.603], [0.950,-0.674], [0.943,-0.745], [0.936,-0.816], [0.929,-0.887], [0.923,-0.957], [0.916,-1.028], [0.909,-1.099], [0.902,-1.170], [0.895,-1.241], [0.888,-1.311], [0.881,-1.382], [0.875,-1.453], [0.868,-1.524], [0.838,-1.571], [0.787,-1.584], [0.720,-1.593], [0.652,-1.601], [0.590,-1.593], [0.543,-1.576], [0.524,-1.553], [0.506,-1.530], [0.488,-1.507], [0.472,-1.476], [0.466,-1.438], [0.473,-1.387], [0.497,-1.348], [0.511,-1.314], [0.534,-1.275], [0.548,-1.241], [0.567,-1.205], [0.582,-1.181], [0.597,-1.158], [0.612,-1.134], [0.627,-1.111], [0.642,-1.087], [0.657,-1.064], [0.698,-1.038], [0.747,-1.012], [0.796,-0.986], [0.846,-0.959], [0.983,-0.897], [1.038,-0.858], [1.094,-0.827], [1.151,-0.809], [1.207,-0.791], [1.258,-0.786],  ],\n  'z' : [ [0.034,-0.752], [0.067,-0.708], [0.083,-0.685], [0.116,-0.639], [0.133,-0.615], [0.166,-0.569], [0.183,-0.546], [0.216,-0.500], [0.233,-0.476], [0.266,-0.430], [0.287,-0.395], [0.316,-0.353], [0.333,-0.327], [0.366,-0.285], [0.389,-0.251], [0.440,-0.191], [0.491,-0.123], [0.516,-0.083], [0.549,-0.047], [0.576,-0.030], [0.615,-0.036], [0.649,-0.059], [0.665,-0.083], [0.682,-0.106], [0.699,-0.129], [0.708,-0.191], [0.699,-0.245], [0.678,-0.319], [0.652,-0.386], [0.615,-0.453], [0.582,-0.500], [0.542,-0.574], [0.499,-0.639], [0.466,-0.685], [0.449,-0.708], [0.399,-0.777], [0.383,-0.801], [0.399,-0.777], [0.449,-0.708], [0.466,-0.685], [0.499,-0.639], [0.549,-0.639], [0.576,-0.667], [0.599,-0.708], [0.615,-0.731], [0.642,-0.769], [0.665,-0.824], [0.669,-0.847], [0.665,-0.870], [0.665,-0.916], [0.665,-0.963], [0.652,-1.084], [0.627,-1.169], [0.602,-1.243], [0.582,-1.287], [0.566,-1.310], [0.532,-1.380], [0.516,-1.403], [0.493,-1.432], [0.459,-1.495], [0.432,-1.519], [0.401,-1.534], [0.366,-1.519], [0.349,-1.495], [0.304,-1.441], [0.283,-1.403], [0.270,-1.356], [0.283,-1.310], [0.303,-1.267], [0.333,-1.218], [0.349,-1.194], [0.366,-1.171], [0.383,-1.148], [0.399,-1.125], [0.416,-1.102], [0.432,-1.079], [0.449,-1.055], [0.466,-1.032], [0.501,-1.002], [0.536,-0.965], [0.571,-0.931], [0.605,-0.897], [0.640,-0.871], [0.675,-0.846], [0.710,-0.829], [0.745,-0.812], [0.780,-0.803], [0.815,-0.791], [0.850,-0.786], [0.892,-0.778], [0.935,-0.778], [0.978,-0.786],  ],\n  'a*' : [ [0.068,-0.174], [0.136,-0.149], [0.204,-0.132], [0.272,-0.098], [0.340,-0.089], [0.432,-0.081], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.561,-0.718], [0.501,-0.773], [0.425,-0.801], [0.357,-0.820], [0.279,-0.801], [0.230,-0.754], [0.213,-0.731], [0.184,-0.681], [0.151,-0.616], [0.146,-0.557], [0.146,-0.500], [0.153,-0.455], [0.180,-0.395], [0.204,-0.353], [0.219,-0.319], [0.246,-0.276], [0.272,-0.234], [0.298,-0.191], [0.333,-0.157], [0.379,-0.132], [0.432,-0.081], [0.527,-0.055], [0.629,-0.036], [0.679,-0.036], [0.697,-0.149], [0.689,-0.293], [0.680,-0.404], [0.663,-0.489], [0.654,-0.592], [0.646,-0.639], [0.678,-0.744], [0.729,-0.801], [0.781,-0.786], [0.850,-0.786],  ],\n  'b*' : [ [0.043,-0.157], [0.085,-0.166], [0.128,-0.157], [0.179,-0.157], [0.230,-0.162], [0.281,-0.157], [0.332,-0.140], [0.365,-0.115], [0.391,-0.064], [0.414,-0.004], [0.443,0.064], [0.472,0.140], [0.500,0.241], [0.529,0.320], [0.544,0.399], [0.546,0.510], [0.530,0.602], [0.487,0.674], [0.431,0.743], [0.390,0.750], [0.355,0.739], [0.324,0.724], [0.300,0.686], [0.281,0.627], [0.275,0.497], [0.274,0.368], [0.272,0.238], [0.270,0.108], [0.274,-0.022], [0.275,-0.152], [0.277,-0.282], [0.279,-0.412], [0.281,-0.542], [0.291,-0.672], [0.309,-0.718], [0.339,-0.771], [0.369,-0.786], [0.420,-0.786], [0.457,-0.782], [0.494,-0.764], [0.522,-0.746], [0.548,-0.688], [0.562,-0.634], [0.580,-0.573], [0.594,-0.514], [0.613,-0.446], [0.619,-0.377], [0.628,-0.293], [0.630,-0.200], [0.631,-0.112], [0.701,-0.140], [0.748,-0.157], [0.799,-0.149],  ],\n  'c*' : [ [0.085,-0.140], [0.175,-0.132], [0.243,-0.123], [0.311,-0.106], [0.367,-0.089], [0.413,-0.081], [0.456,-0.072], [0.500,-0.064], [0.566,-0.064], [0.617,-0.106], [0.651,-0.191], [0.617,-0.106], [0.566,-0.064], [0.500,-0.064], [0.456,-0.072], [0.413,-0.081], [0.367,-0.094], [0.331,-0.123], [0.300,-0.152], [0.267,-0.191], [0.243,-0.222], [0.217,-0.268], [0.170,-0.407], [0.170,-0.497], [0.173,-0.565], [0.191,-0.657], [0.217,-0.708], [0.234,-0.731], [0.251,-0.754], [0.277,-0.795], [0.326,-0.829], [0.417,-0.846], [0.532,-0.829], [0.609,-0.820], [0.668,-0.812], [0.736,-0.803], [0.821,-0.795], [0.906,-0.786],  ],\n  'd*' : [ [0.068,-0.157], [0.136,-0.166], [0.204,-0.157], [0.272,-0.140], [0.340,-0.123], [0.425,-0.123], [0.469,-0.089], [0.515,-0.072], [0.629,-0.043], [0.697,-0.036], [0.782,-0.036], [0.697,-0.036], [0.629,-0.043], [0.515,-0.072], [0.469,-0.089], [0.425,-0.123], [0.357,-0.191], [0.333,-0.242], [0.313,-0.319], [0.298,-0.395], [0.289,-0.455], [0.282,-0.500], [0.279,-0.557], [0.287,-0.616], [0.320,-0.681], [0.366,-0.754], [0.415,-0.801], [0.459,-0.810], [0.510,-0.808], [0.561,-0.801], [0.637,-0.773], [0.697,-0.718], [0.799,-0.650], [0.867,-0.639], [0.867,-0.592], [0.867,-0.489], [0.867,-0.404], [0.867,-0.293], [0.867,-0.149], [0.867,0.064], [0.867,0.234], [0.867,0.404], [0.867,0.574], [0.867,0.744], [0.867,0.574], [0.867,0.404], [0.867,0.234], [0.867,0.064], [0.867,-0.149], [0.867,-0.293], [0.867,-0.404], [0.867,-0.489], [0.867,-0.592], [0.867,-0.639], [0.875,-0.701], [0.899,-0.744], [0.950,-0.801], [1.002,-0.824], [1.068,-0.815], [1.122,-0.812], [1.190,-0.795], [1.275,-0.786],  ],\n  'e*' : [ [0.085,-0.149], [0.136,-0.162], [0.170,-0.174], [0.204,-0.191], [0.231,-0.208], [0.264,-0.242], [0.315,-0.276], [0.383,-0.327], [0.451,-0.344], [0.501,-0.336], [0.552,-0.268], [0.566,-0.229], [0.568,-0.191], [0.559,-0.160], [0.542,-0.106], [0.525,-0.072], [0.495,-0.047], [0.452,-0.030], [0.410,-0.021], [0.367,-0.030], [0.325,-0.047], [0.294,-0.072], [0.260,-0.106], [0.235,-0.149], [0.231,-0.208], [0.231,-0.268], [0.231,-0.327], [0.235,-0.404], [0.240,-0.446], [0.250,-0.497], [0.260,-0.548], [0.281,-0.616], [0.298,-0.667], [0.332,-0.701], [0.365,-0.735], [0.417,-0.761], [0.485,-0.769], [0.552,-0.778], [0.620,-0.786], [0.680,-0.786], [0.765,-0.786],  ],\n  'f*' : [ [0.043,-0.191], [0.076,-0.234], [0.111,-0.310], [0.145,-0.395], [0.179,-0.446], [0.213,-0.489], [0.247,-0.531], [0.281,-0.574], [0.321,-0.642], [0.374,-0.592], [0.425,-0.548], [0.451,-0.446], [0.468,-0.361], [0.485,-0.276], [0.501,-0.191], [0.518,-0.106], [0.535,-0.038], [0.552,0.047], [0.565,0.131], [0.582,0.212], [0.605,0.299], [0.619,0.402], [0.632,0.506], [0.614,0.607], [0.578,0.667], [0.535,0.680], [0.485,0.684], [0.425,0.671], [0.374,0.652], [0.329,0.619], [0.298,0.531], [0.294,0.428], [0.292,0.299], [0.294,0.169], [0.296,-0.000], [0.296,-0.172], [0.296,-0.276], [0.298,-0.385], [0.297,-0.489], [0.296,-0.598], [0.295,-0.710], [0.295,-0.829], [0.292,-0.931], [0.289,-1.041], [0.286,-1.126], [0.281,-1.254], [0.281,-1.356], [0.279,-1.466], [0.272,-1.602], [0.323,-1.602], [0.374,-1.601], [0.423,-1.594], [0.474,-1.551], [0.510,-1.509], [0.542,-1.466], [0.550,-1.381], [0.542,-1.296], [0.533,-1.211], [0.522,-1.126], [0.508,-1.041], [0.491,-0.956], [0.468,-0.888], [0.442,-0.846], [0.383,-0.752], [0.420,-0.769], [0.468,-0.803], [0.510,-0.829], [0.567,-0.812], [0.639,-0.803], [0.723,-0.795], [0.807,-0.786],  ],\n  'g*' : [ [0.068,-0.157], [0.136,-0.166], [0.204,-0.174], [0.272,-0.183], [0.340,-0.174], [0.391,-0.179], [0.448,-0.175], [0.480,-0.149], [0.525,-0.132], [0.576,-0.115], [0.627,-0.098], [0.678,-0.086], [0.730,-0.089], [0.748,-0.123], [0.745,-0.191], [0.741,-0.259], [0.738,-0.327], [0.734,-0.395], [0.731,-0.463], [0.728,-0.531], [0.724,-0.599], [0.721,-0.667], [0.717,-0.735], [0.663,-0.761], [0.610,-0.786], [0.525,-0.812], [0.457,-0.824], [0.374,-0.812], [0.304,-0.786], [0.247,-0.754], [0.202,-0.676], [0.181,-0.592], [0.177,-0.548], [0.197,-0.506], [0.231,-0.458], [0.247,-0.430], [0.281,-0.384], [0.314,-0.337], [0.347,-0.291], [0.374,-0.251], [0.406,-0.217], [0.448,-0.175], [0.480,-0.149], [0.525,-0.132], [0.576,-0.115], [0.627,-0.098], [0.678,-0.086], [0.730,-0.089], [0.748,-0.123], [0.745,-0.191], [0.741,-0.259], [0.738,-0.327], [0.734,-0.395], [0.731,-0.463], [0.728,-0.531], [0.724,-0.599], [0.721,-0.667], [0.717,-0.735], [0.714,-0.803], [0.711,-0.871], [0.707,-0.939], [0.704,-1.007], [0.700,-1.075], [0.697,-1.143], [0.694,-1.211], [0.690,-1.279], [0.687,-1.347], [0.683,-1.415], [0.680,-1.484], [0.677,-1.551], [0.673,-1.619], [0.612,-1.615], [0.544,-1.608], [0.493,-1.598], [0.442,-1.568], [0.391,-1.526], [0.340,-1.466], [0.306,-1.398], [0.289,-1.347], [0.272,-1.279], [0.281,-1.228], [0.306,-1.186], [0.347,-1.125], [0.377,-1.084], [0.414,-1.041], [0.474,-0.990], [0.542,-0.948], [0.593,-0.914], [0.647,-0.871], [0.720,-0.829], [0.796,-0.820], [0.884,-0.812], [0.969,-0.803], [1.054,-0.786],  ],\n  'h*' : [ [0.068,-0.174], [0.136,-0.200], [0.204,-0.217], [0.272,-0.225], [0.323,-0.217], [0.303,-0.276], [0.326,-0.242], [0.349,-0.200], [0.383,-0.155], [0.432,-0.083], [0.483,-0.038], [0.508,0.013], [0.549,0.064], [0.575,0.131], [0.602,0.202], [0.617,0.249], [0.641,0.297], [0.651,0.370], [0.660,0.438], [0.662,0.523], [0.651,0.616], [0.641,0.693], [0.599,0.742], [0.542,0.769], [0.483,0.769], [0.406,0.738], [0.355,0.702], [0.321,0.636], [0.295,0.511], [0.295,0.425], [0.295,0.339], [0.295,0.227], [0.295,0.114], [0.295,0.001], [0.295,-0.111], [0.295,-0.224], [0.295,-0.336], [0.295,-0.449], [0.295,-0.561], [0.295,-0.674], [0.295,-0.786], [0.299,-0.674], [0.302,-0.561], [0.329,-0.514], [0.368,-0.447], [0.392,-0.386], [0.420,-0.307], [0.447,-0.255], [0.475,-0.185], [0.507,-0.149], [0.564,-0.132], [0.625,-0.123], [0.678,-0.132], [0.743,-0.166], [0.767,-0.229], [0.760,-0.307], [0.755,-0.375], [0.748,-0.453], [0.748,-0.533], [0.761,-0.623], [0.786,-0.717], [0.845,-0.766], [0.920,-0.794], [1.005,-0.786],  ],\n  'i*' : [ [0.051,-0.166], [0.084,-0.167], [0.118,-0.160], [0.154,-0.143], [0.192,-0.084], [0.233,-0.026], [0.227,-0.136], [0.224,-0.195], [0.218,-0.280], [0.216,-0.365], [0.216,-0.425], [0.216,-0.501], [0.216,-0.544], [0.214,-0.629], [0.219,-0.706], [0.241,-0.759], [0.271,-0.806], [0.347,-0.827], [0.431,-0.803],  ],\n  'j*' : [ [0.034,-0.155], [0.061,-0.162], [0.095,-0.166], [0.129,-0.174], [0.163,-0.157], [0.197,-0.140], [0.231,-0.115], [0.265,-0.089], [0.299,-0.072], [0.316,-0.055], [0.333,-0.050], [0.357,-0.038], [0.383,-0.049], [0.383,-0.099], [0.383,-0.167], [0.383,-0.276], [0.383,-0.395], [0.383,-0.513], [0.383,-0.632], [0.383,-0.751], [0.383,-0.869], [0.383,-0.988], [0.383,-1.107], [0.383,-1.225], [0.383,-1.344], [0.368,-1.405], [0.349,-1.466], [0.326,-1.514], [0.296,-1.530], [0.255,-1.534], [0.218,-1.518], [0.196,-1.496], [0.172,-1.406], [0.162,-1.296], [0.159,-1.211], [0.173,-1.126], [0.196,-1.053], [0.218,-1.005], [0.241,-0.957], [0.263,-0.909], [0.286,-0.861], [0.301,-0.837], [0.328,-0.808], [0.356,-0.780], [0.384,-0.753], [0.408,-0.742], [0.439,-0.734], [0.473,-0.733], [0.509,-0.750], [0.552,-0.767], [0.595,-0.786],  ],\n  'k*' : [ [0.043,-0.166], [0.085,-0.191], [0.119,-0.208], [0.153,-0.251], [0.187,-0.276], [0.221,-0.276], [0.272,-0.259], [0.323,-0.234], [0.337,-0.305], [0.384,-0.226], [0.431,-0.147], [0.479,-0.069], [0.526,0.010], [0.555,0.056], [0.584,0.103], [0.605,0.149], [0.622,0.195], [0.659,0.261], [0.677,0.309], [0.695,0.356], [0.713,0.404], [0.732,0.451], [0.750,0.499], [0.765,0.565], [0.771,0.635], [0.737,0.676], [0.695,0.684], [0.654,0.684], [0.603,0.684], [0.552,0.676], [0.501,0.659], [0.451,0.612], [0.400,0.562], [0.357,0.466], [0.340,0.369], [0.340,0.273], [0.340,0.176], [0.340,0.079], [0.340,0.010], [0.340,-0.066], [0.340,-0.143], [0.340,-0.219], [0.340,-0.296], [0.340,-0.372], [0.340,-0.449], [0.340,-0.525], [0.340,-0.601], [0.340,-0.678], [0.340,-0.754], [0.340,-0.847], [0.340,-0.754], [0.340,-0.678], [0.340,-0.601], [0.340,-0.525], [0.340,-0.449], [0.354,-0.372], [0.397,-0.361], [0.465,-0.353], [0.533,-0.344], [0.618,-0.327], [0.686,-0.302], [0.754,-0.276], [0.797,-0.234], [0.822,-0.198], [0.812,-0.140], [0.788,-0.089], [0.758,-0.059], [0.720,-0.032], [0.652,-0.055], [0.601,-0.106], [0.516,-0.191], [0.465,-0.276], [0.431,-0.336], [0.383,-0.378], [0.414,-0.421], [0.455,-0.453], [0.489,-0.500], [0.522,-0.546], [0.554,-0.592], [0.577,-0.639], [0.591,-0.662], [0.622,-0.708], [0.655,-0.754], [0.688,-0.801], [0.729,-0.846], [0.771,-0.871], [0.814,-0.863], [0.856,-0.846], [0.899,-0.829], [0.941,-0.812], [0.971,-0.803], [1.011,-0.786], [1.065,-0.786], [1.105,-0.786],  ],\n  'l*' : [ [0.031,-0.157], [0.054,-0.174], [0.088,-0.191], [0.122,-0.234], [0.156,-0.276], [0.207,-0.302], [0.241,-0.319], [0.284,-0.327], [0.306,-0.332], [0.340,-0.286], [0.377,-0.238], [0.403,-0.191], [0.435,-0.115], [0.459,-0.055], [0.483,0.013], [0.501,0.056], [0.510,0.095], [0.524,0.140], [0.534,0.190], [0.548,0.237], [0.554,0.284], [0.566,0.351], [0.578,0.404], [0.585,0.480], [0.594,0.566], [0.595,0.613], [0.585,0.682], [0.550,0.734], [0.515,0.771], [0.480,0.782], [0.451,0.786], [0.400,0.781], [0.347,0.767], [0.324,0.719], [0.315,0.672], [0.308,0.632], [0.304,0.574], [0.304,0.488], [0.304,0.401], [0.304,0.314], [0.304,0.227], [0.304,0.141], [0.304,0.054], [0.304,-0.033], [0.304,-0.119], [0.303,-0.206], [0.303,-0.293], [0.303,-0.380], [0.303,-0.466], [0.303,-0.553], [0.303,-0.640], [0.311,-0.702], [0.343,-0.752], [0.383,-0.778], [0.434,-0.784], [0.483,-0.807], [0.538,-0.821], [0.603,-0.803], [0.677,-0.795], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n  'm*' : [ [0.034,-0.149], [0.085,-0.140], [0.136,-0.140], [0.187,-0.132], [0.238,-0.123], [0.272,-0.106], [0.315,-0.072], [0.349,-0.055], [0.394,-0.059], [0.410,-0.083], [0.414,-0.103], [0.419,-0.154], [0.424,-0.205], [0.430,-0.256], [0.435,-0.307], [0.440,-0.358], [0.431,-0.402], [0.421,-0.447], [0.411,-0.491], [0.402,-0.535], [0.392,-0.579], [0.382,-0.624], [0.373,-0.668], [0.363,-0.712], [0.353,-0.756], [0.344,-0.801], [0.353,-0.756], [0.363,-0.712], [0.373,-0.668], [0.382,-0.624], [0.392,-0.579], [0.402,-0.535], [0.411,-0.491], [0.421,-0.447], [0.431,-0.402], [0.440,-0.358], [0.460,-0.314], [0.488,-0.276], [0.510,-0.245], [0.527,-0.222], [0.543,-0.198], [0.560,-0.175], [0.577,-0.152], [0.593,-0.129], [0.627,-0.089], [0.661,-0.064], [0.711,-0.044], [0.760,-0.036], [0.776,-0.059], [0.793,-0.083], [0.810,-0.106], [0.820,-0.143], [0.830,-0.180], [0.840,-0.217], [0.850,-0.254], [0.859,-0.291], [0.848,-0.340], [0.836,-0.388], [0.825,-0.437], [0.813,-0.486], [0.801,-0.534], [0.790,-0.583], [0.778,-0.632], [0.766,-0.680], [0.755,-0.729], [0.754,-0.777], [0.755,-0.729], [0.766,-0.680], [0.778,-0.632], [0.790,-0.583], [0.801,-0.534], [0.813,-0.486], [0.825,-0.437], [0.836,-0.388], [0.848,-0.340], [0.859,-0.291], [0.876,-0.268], [0.901,-0.234], [0.926,-0.198], [0.943,-0.175], [0.961,-0.140], [0.993,-0.106], [1.009,-0.083], [1.035,-0.059], [1.103,-0.038], [1.176,-0.059], [1.209,-0.106], [1.225,-0.129], [1.242,-0.175], [1.234,-0.224], [1.225,-0.272], [1.217,-0.320], [1.209,-0.369], [1.200,-0.417], [1.192,-0.466], [1.184,-0.514], [1.176,-0.562], [1.167,-0.611], [1.159,-0.659], [1.159,-0.708], [1.192,-0.754], [1.209,-0.777], [1.241,-0.803], [1.325,-0.812], [1.375,-0.812], [1.422,-0.803], [1.475,-0.799], [1.564,-0.795], [1.649,-0.786],  ],\n  'n*' : [ [0.051,-0.132], [0.102,-0.115], [0.153,-0.098], [0.204,-0.047], [0.238,-0.004], [0.264,0.021], [0.291,0.038], [0.332,0.064], [0.374,0.038], [0.400,-0.013], [0.414,-0.059], [0.423,-0.106], [0.431,-0.149], [0.435,-0.198], [0.430,-0.254], [0.430,-0.310], [0.430,-0.365], [0.430,-0.421], [0.430,-0.476], [0.430,-0.532], [0.430,-0.588], [0.430,-0.643], [0.430,-0.699], [0.430,-0.754], [0.430,-0.699], [0.430,-0.643], [0.430,-0.588], [0.430,-0.532], [0.430,-0.476], [0.430,-0.421], [0.430,-0.365], [0.430,-0.310], [0.430,-0.254], [0.459,-0.242], [0.485,-0.217], [0.508,-0.198], [0.525,-0.175], [0.542,-0.152], [0.558,-0.129], [0.587,-0.098], [0.620,-0.059], [0.656,-0.013], [0.691,0.010], [0.741,0.010], [0.774,-0.013], [0.791,-0.036], [0.808,-0.059], [0.816,-0.106], [0.825,-0.149], [0.825,-0.234], [0.825,-0.293], [0.825,-0.361], [0.825,-0.421], [0.825,-0.480], [0.825,-0.523], [0.825,-0.574], [0.825,-0.616], [0.825,-0.662], [0.825,-0.708], [0.833,-0.761], [0.865,-0.812], [0.924,-0.820], [0.967,-0.812], [1.024,-0.786], [1.088,-0.786],  ],\n  'o*' : [ [0.051,-0.170], [0.102,-0.174], [0.153,-0.166], [0.204,-0.157], [0.255,-0.149], [0.306,-0.140], [0.346,-0.152], [0.363,-0.129], [0.380,-0.106], [0.396,-0.083], [0.431,-0.072], [0.474,-0.055], [0.533,-0.055], [0.576,-0.072], [0.596,-0.083], [0.618,-0.106], [0.634,-0.123], [0.646,-0.149], [0.663,-0.175], [0.669,-0.224], [0.668,-0.272], [0.673,-0.320], [0.671,-0.368], [0.665,-0.417], [0.660,-0.465], [0.651,-0.513], [0.637,-0.562], [0.620,-0.610], [0.603,-0.658], [0.592,-0.701], [0.570,-0.752], [0.544,-0.795], [0.501,-0.829], [0.459,-0.846], [0.408,-0.854], [0.346,-0.842], [0.321,-0.820], [0.296,-0.791], [0.263,-0.754], [0.247,-0.731], [0.230,-0.708], [0.213,-0.685], [0.202,-0.659], [0.185,-0.616], [0.168,-0.574], [0.156,-0.531], [0.163,-0.480], [0.187,-0.430], [0.205,-0.395], [0.216,-0.361], [0.238,-0.319], [0.263,-0.268], [0.280,-0.245], [0.295,-0.222], [0.321,-0.183], [0.346,-0.152], [0.363,-0.129], [0.380,-0.106], [0.396,-0.083], [0.431,-0.072], [0.473,-0.106], [0.493,-0.149], [0.518,-0.183], [0.544,-0.200], [0.578,-0.217], [0.612,-0.225], [0.646,-0.225], [0.680,-0.225], [0.714,-0.225], [0.748,-0.221], [0.782,-0.217], [0.816,-0.208], [0.850,-0.191], [0.884,-0.174], [0.918,-0.149],  ],\n  'p*' : [ [0.043,-0.153], [0.085,-0.157], [0.136,-0.157], [0.187,-0.157], [0.238,-0.140], [0.279,-0.136], [0.287,-0.215], [0.285,-0.323], [0.283,-0.431], [0.282,-0.539], [0.280,-0.646], [0.278,-0.754], [0.276,-0.862], [0.274,-0.970], [0.272,-1.078], [0.270,-1.186], [0.268,-1.294], [0.267,-1.402], [0.265,-1.510], [0.267,-1.402], [0.268,-1.294], [0.270,-1.186], [0.272,-1.078], [0.274,-0.970], [0.276,-0.862], [0.278,-0.754], [0.280,-0.646], [0.282,-0.539], [0.283,-0.431], [0.285,-0.323], [0.287,-0.215], [0.289,-0.107], [0.279,-0.136], [0.322,-0.091], [0.353,-0.048], [0.393,-0.020], [0.425,-0.002], [0.449,0.007], [0.479,0.017], [0.525,0.010], [0.577,-0.011], [0.624,-0.077], [0.637,-0.104], [0.668,-0.170], [0.686,-0.282], [0.686,-0.357], [0.689,-0.469], [0.675,-0.538], [0.663,-0.616], [0.641,-0.654], [0.606,-0.694], [0.566,-0.714], [0.504,-0.754], [0.446,-0.747], [0.391,-0.744], [0.340,-0.727], [0.391,-0.744], [0.446,-0.747], [0.504,-0.754], [0.540,-0.748], [0.593,-0.763], [0.678,-0.777], [0.729,-0.783], [0.793,-0.803], [0.850,-0.803], [0.911,-0.795], [0.969,-0.786],  ],\n  'q*' : [ [0.051,-0.153], [0.102,-0.157], [0.153,-0.162], [0.204,-0.166], [0.255,-0.183], [0.306,-0.200], [0.357,-0.191], [0.408,-0.183], [0.459,-0.166], [0.514,-0.149], [0.559,-0.132], [0.610,-0.115], [0.661,-0.098], [0.712,-0.086], [0.764,-0.089], [0.782,-0.123], [0.779,-0.191], [0.775,-0.259], [0.772,-0.327], [0.768,-0.395], [0.765,-0.463], [0.762,-0.531], [0.758,-0.599], [0.755,-0.667], [0.751,-0.735], [0.697,-0.761], [0.644,-0.786], [0.559,-0.812], [0.491,-0.824], [0.408,-0.812], [0.338,-0.786], [0.281,-0.754], [0.236,-0.676], [0.215,-0.592], [0.207,-0.548], [0.231,-0.506], [0.265,-0.458], [0.281,-0.430], [0.315,-0.384], [0.348,-0.337], [0.381,-0.291], [0.408,-0.251], [0.440,-0.217], [0.482,-0.175], [0.514,-0.149], [0.559,-0.132], [0.610,-0.115], [0.661,-0.098], [0.712,-0.086], [0.764,-0.089], [0.782,-0.123], [0.779,-0.191], [0.775,-0.259], [0.772,-0.327], [0.768,-0.395], [0.765,-0.463], [0.762,-0.531], [0.758,-0.599], [0.755,-0.667], [0.751,-0.735], [0.748,-0.803], [0.745,-0.871], [0.741,-0.939], [0.738,-1.007], [0.734,-1.075], [0.731,-1.143], [0.728,-1.211], [0.724,-1.279], [0.721,-1.347], [0.717,-1.415], [0.714,-1.484], [0.711,-1.551], [0.707,-1.619], [0.748,-1.615], [0.799,-1.608], [0.833,-1.598], [0.867,-1.568], [0.901,-1.526], [0.935,-1.466], [0.969,-1.398], [0.986,-1.347], [0.995,-1.279], [0.986,-1.228], [0.969,-1.186], [0.935,-1.125], [0.901,-1.084], [0.867,-1.041], [0.833,-0.990], [0.799,-0.948], [0.782,-0.914], [0.782,-0.854], [0.830,-0.829], [0.884,-0.812], [0.935,-0.803], [0.986,-0.799], [1.020,-0.795], [1.105,-0.791], [1.207,-0.786],  ],\n  'r*' : [ [0.085,-0.174], [0.170,-0.183], [0.170,-0.064], [0.255,-0.064], [0.340,-0.064], [0.425,-0.064], [0.510,-0.064], [0.510,-0.149], [0.501,-0.234], [0.493,-0.319], [0.476,-0.404], [0.459,-0.489], [0.451,-0.574], [0.476,-0.659], [0.510,-0.701], [0.578,-0.744], [0.663,-0.769], [0.765,-0.786],  ],\n  's*' : [ [0.085,-0.149], [0.170,-0.157], [0.221,-0.174], [0.272,-0.200], [0.323,-0.234], [0.374,-0.234], [0.425,-0.225], [0.476,-0.217], [0.527,-0.200], [0.561,-0.191], [0.603,-0.166], [0.663,-0.145], [0.748,-0.119], [0.819,-0.106], [0.820,-0.174], [0.830,-0.222], [0.842,-0.289], [0.855,-0.353], [0.867,-0.402], [0.867,-0.446], [0.867,-0.490], [0.859,-0.534], [0.850,-0.578], [0.842,-0.622], [0.825,-0.666], [0.782,-0.710], [0.657,-0.769], [0.611,-0.757], [0.547,-0.735], [0.497,-0.684], [0.447,-0.616], [0.397,-0.531], [0.354,-0.446], [0.332,-0.361], [0.323,-0.276], [0.332,-0.361], [0.354,-0.446], [0.397,-0.531], [0.447,-0.616], [0.497,-0.684], [0.547,-0.735], [0.611,-0.757], [0.657,-0.769], [0.700,-0.786], [0.742,-0.795], [0.785,-0.803], [0.850,-0.812], [0.935,-0.803], [1.020,-0.795], [1.105,-0.786],  ],\n  't*' : [ [0.085,-0.191], [0.170,-0.234], [0.255,-0.276], [0.340,-0.259], [0.425,-0.191], [0.510,-0.106], [0.558,0.008], [0.573,0.161], [0.588,0.314], [0.552,0.314], [0.522,0.314], [0.467,0.314], [0.411,0.314], [0.340,0.314], [0.255,0.314], [0.170,0.314], [0.255,0.314], [0.340,0.314], [0.411,0.314], [0.467,0.314], [0.522,0.314], [0.552,0.314], [0.633,0.314], [0.688,0.314], [0.729,0.314], [0.784,0.314], [0.840,0.314], [0.895,0.314], [0.978,0.314], [1.062,0.314], [0.978,0.314], [0.895,0.314], [0.840,0.314], [0.784,0.314], [0.729,0.314], [0.688,0.314], [0.633,0.314], [0.588,0.314], [0.602,0.467], [0.617,0.621], [0.632,0.774], [0.632,0.621], [0.632,0.467], [0.632,0.314], [0.632,0.161], [0.632,0.008], [0.632,-0.146], [0.632,-0.299], [0.632,-0.452], [0.632,-0.605], [0.632,-0.759], [0.659,-0.805], [0.720,-0.816], [0.807,-0.799], [0.894,-0.791], [0.978,-0.786], [1.062,-0.786], [1.147,-0.786], [1.232,-0.786],  ],\n  'u*' : [ [0.043,-0.157], [0.085,-0.166], [0.128,-0.157], [0.162,-0.157], [0.196,-0.140], [0.230,-0.106], [0.272,-0.081], [0.306,-0.055], [0.344,-0.048], [0.338,-0.097], [0.332,-0.146], [0.325,-0.195], [0.319,-0.245], [0.312,-0.294], [0.306,-0.343], [0.299,-0.392], [0.293,-0.442], [0.286,-0.491], [0.280,-0.540], [0.273,-0.589], [0.267,-0.639], [0.260,-0.688], [0.254,-0.737], [0.260,-0.786], [0.289,-0.803], [0.332,-0.812], [0.383,-0.803], [0.425,-0.795], [0.461,-0.778], [0.501,-0.761], [0.544,-0.744], [0.583,-0.727], [0.616,-0.710], [0.646,-0.684], [0.671,-0.650], [0.682,-0.605], [0.686,-0.558], [0.689,-0.511], [0.693,-0.464], [0.697,-0.416], [0.700,-0.369], [0.704,-0.322], [0.708,-0.275], [0.711,-0.228], [0.715,-0.180], [0.719,-0.133], [0.723,-0.074], [0.726,-0.023], [0.723,-0.074], [0.719,-0.133], [0.715,-0.180], [0.711,-0.228], [0.708,-0.275], [0.704,-0.322], [0.700,-0.369], [0.697,-0.416], [0.693,-0.464], [0.712,-0.529], [0.719,-0.582], [0.731,-0.633], [0.748,-0.684], [0.756,-0.735], [0.790,-0.786], [0.845,-0.803], [0.901,-0.803], [0.944,-0.795], [1.020,-0.786],  ],\n  'v*' : [ [0.051,-0.157], [0.102,-0.140], [0.136,-0.123], [0.162,-0.098], [0.187,-0.081], [0.211,-0.055], [0.243,-0.054], [0.268,-0.076], [0.289,-0.097], [0.301,-0.134], [0.311,-0.176], [0.321,-0.212], [0.322,-0.244], [0.318,-0.280], [0.316,-0.321], [0.314,-0.363], [0.311,-0.404], [0.309,-0.446], [0.306,-0.487], [0.304,-0.528], [0.301,-0.570], [0.299,-0.611], [0.306,-0.657], [0.322,-0.707], [0.338,-0.749], [0.367,-0.790], [0.406,-0.814], [0.448,-0.793], [0.487,-0.766], [0.502,-0.723], [0.516,-0.680], [0.531,-0.637], [0.546,-0.594], [0.550,-0.547], [0.566,-0.502], [0.572,-0.450], [0.582,-0.408], [0.593,-0.331], [0.604,-0.255], [0.616,-0.179], [0.627,-0.102], [0.699,-0.110], [0.773,-0.130], [0.828,-0.143], [0.871,-0.149],  ],\n  'w*' : [ [0.051,-0.128], [0.102,-0.115], [0.153,-0.081], [0.187,-0.064], [0.225,-0.041], [0.220,-0.126], [0.216,-0.210], [0.212,-0.294], [0.207,-0.379], [0.203,-0.463], [0.206,-0.517], [0.215,-0.602], [0.223,-0.670], [0.254,-0.738], [0.297,-0.783], [0.359,-0.799], [0.429,-0.776], [0.453,-0.728], [0.476,-0.680], [0.500,-0.632], [0.519,-0.585], [0.537,-0.537], [0.553,-0.490], [0.568,-0.442], [0.575,-0.358], [0.583,-0.274], [0.590,-0.190], [0.598,-0.105], [0.605,-0.064], [0.617,-0.120], [0.629,-0.219], [0.641,-0.317], [0.653,-0.416], [0.665,-0.515], [0.676,-0.614], [0.688,-0.712], [0.731,-0.780], [0.775,-0.786], [0.816,-0.775], [0.852,-0.723], [0.878,-0.682], [0.901,-0.634], [0.925,-0.587], [0.937,-0.530], [0.949,-0.448], [0.955,-0.403], [0.965,-0.314], [0.976,-0.224], [0.986,-0.135], [0.997,-0.064], [1.052,-0.072], [1.108,-0.089], [1.162,-0.106], [1.220,-0.149],  ],\n  'x*' : [ [0.043,-0.106], [0.085,-0.064], [0.128,-0.004], [0.196,0.021], [0.232,-0.046], [0.269,-0.114], [0.306,-0.181], [0.343,-0.248], [0.380,-0.315], [0.417,-0.383], [0.445,-0.429], [0.430,-0.452], [0.388,-0.506], [0.346,-0.560], [0.304,-0.614], [0.262,-0.667], [0.220,-0.721], [0.170,-0.786], [0.220,-0.721], [0.262,-0.667], [0.304,-0.614], [0.346,-0.560], [0.388,-0.506], [0.430,-0.452], [0.471,-0.398], [0.522,-0.337], [0.555,-0.291], [0.597,-0.237], [0.639,-0.183], [0.681,-0.129], [0.723,-0.075], [0.765,-0.021], [0.799,0.021], [0.765,-0.021], [0.723,-0.075], [0.681,-0.129], [0.639,-0.183], [0.597,-0.237], [0.555,-0.291], [0.522,-0.337], [0.471,-0.398], [0.445,-0.429], [0.491,-0.517], [0.528,-0.585], [0.565,-0.652], [0.602,-0.719], [0.639,-0.786], [0.680,-0.824], [0.718,-0.830], [0.763,-0.846], [0.799,-0.842], [0.834,-0.837], [0.863,-0.820], [0.901,-0.808], [0.935,-0.795], [0.986,-0.786],  ],\n  'y*' : [ [0.043,-0.157], [0.085,-0.166], [0.128,-0.157], [0.162,-0.157], [0.196,-0.149], [0.230,-0.140], [0.264,-0.123], [0.306,-0.123], [0.340,-0.123], [0.379,-0.138], [0.397,-0.161], [0.405,-0.198], [0.399,-0.241], [0.394,-0.279], [0.378,-0.358], [0.363,-0.437], [0.347,-0.515], [0.332,-0.594], [0.317,-0.672], [0.315,-0.735], [0.325,-0.788], [0.343,-0.811], [0.361,-0.834], [0.379,-0.857], [0.402,-0.878], [0.428,-0.895], [0.462,-0.902], [0.496,-0.902], [0.566,-0.893], [0.632,-0.857], [0.663,-0.823], [0.737,-0.745], [0.743,-0.674], [0.750,-0.603], [0.757,-0.533], [0.764,-0.462], [0.771,-0.391], [0.778,-0.320], [0.785,-0.249], [0.791,-0.179], [0.799,-0.132], [0.791,-0.179], [0.785,-0.249], [0.778,-0.320], [0.771,-0.391], [0.764,-0.462], [0.757,-0.533], [0.750,-0.603], [0.743,-0.674], [0.737,-0.745], [0.730,-0.816], [0.723,-0.887], [0.716,-0.957], [0.709,-1.028], [0.702,-1.099], [0.695,-1.170], [0.689,-1.241], [0.682,-1.311], [0.675,-1.382], [0.668,-1.453], [0.661,-1.524], [0.631,-1.571], [0.580,-1.584], [0.513,-1.593], [0.446,-1.601], [0.383,-1.593], [0.336,-1.576], [0.318,-1.553], [0.300,-1.530], [0.281,-1.507], [0.265,-1.476], [0.260,-1.438], [0.267,-1.387], [0.291,-1.348], [0.304,-1.314], [0.327,-1.275], [0.342,-1.241], [0.360,-1.205], [0.375,-1.181], [0.390,-1.158], [0.405,-1.134], [0.420,-1.111], [0.435,-1.087], [0.450,-1.064], [0.491,-1.038], [0.541,-1.012], [0.590,-0.986], [0.639,-0.959], [0.777,-0.897], [0.832,-0.858], [0.888,-0.827], [0.944,-0.809], [1.001,-0.791], [1.052,-0.786],  ],\n  'z*' : [ [0.043,-0.157], [0.085,-0.166], [0.136,-0.174], [0.187,-0.174], [0.238,-0.174], [0.289,-0.174], [0.340,-0.157], [0.374,-0.140], [0.406,-0.115], [0.431,-0.083], [0.464,-0.047], [0.491,-0.030], [0.530,-0.036], [0.564,-0.059], [0.595,-0.083], [0.612,-0.106], [0.629,-0.149], [0.623,-0.191], [0.614,-0.245], [0.593,-0.319], [0.567,-0.386], [0.530,-0.453], [0.497,-0.500], [0.457,-0.574], [0.414,-0.639], [0.381,-0.685], [0.364,-0.708], [0.314,-0.777], [0.298,-0.801], [0.314,-0.777], [0.364,-0.708], [0.381,-0.685], [0.414,-0.639], [0.464,-0.639], [0.491,-0.667], [0.514,-0.708], [0.530,-0.731], [0.557,-0.769], [0.580,-0.824], [0.584,-0.847], [0.580,-0.870], [0.580,-0.916], [0.580,-0.963], [0.567,-1.084], [0.542,-1.169], [0.517,-1.243], [0.497,-1.287], [0.481,-1.310], [0.447,-1.380], [0.431,-1.403], [0.408,-1.432], [0.374,-1.495], [0.347,-1.519], [0.316,-1.534], [0.281,-1.519], [0.264,-1.495], [0.219,-1.441], [0.198,-1.403], [0.185,-1.356], [0.198,-1.310], [0.218,-1.267], [0.248,-1.218], [0.264,-1.194], [0.281,-1.171], [0.298,-1.148], [0.314,-1.125], [0.331,-1.102], [0.347,-1.079], [0.364,-1.055], [0.381,-1.032], [0.416,-1.002], [0.451,-0.965], [0.486,-0.931], [0.520,-0.897], [0.555,-0.871], [0.590,-0.846], [0.625,-0.829], [0.660,-0.812], [0.695,-0.803], [0.730,-0.791], [0.765,-0.786], [0.816,-0.778], [0.867,-0.778], [0.918,-0.786],  ],\n  ',' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.357,-0.701], [0.391,-0.616], [0.459,-0.701], [0.476,-0.786], [0.493,-0.871], [0.493,-0.956], [0.459,-1.041], [0.425,-1.126], [0.357,-1.211], [0.255,-1.296], [0.357,-1.211], [0.425,-1.126], [0.459,-1.041], [0.493,-0.956], [0.493,-0.871], [0.476,-0.786], [0.459,-0.701], [0.391,-0.616], [0.459,-0.701], [0.476,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786],  ],\n  '?' : [ [0.085,-0.786], [0.170,-0.786], [0.272,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.786], [0.425,-0.701], [0.425,-0.616], [0.425,-0.531], [0.425,-0.446], [0.425,-0.361], [0.425,-0.276], [0.425,-0.191], [0.425,-0.064], [0.527,-0.038], [0.586,-0.021], [0.640,0.004], [0.697,0.080], [0.734,0.149], [0.749,0.252], [0.748,0.387], [0.741,0.516], [0.726,0.600], [0.712,0.659], [0.672,0.740], [0.641,0.777], [0.586,0.786], [0.537,0.794], [0.485,0.786], [0.412,0.744], [0.340,0.701], [0.213,0.616], [0.340,0.701], [0.412,0.744], [0.485,0.786], [0.537,0.794], [0.586,0.786], [0.641,0.777], [0.672,0.740], [0.712,0.659], [0.726,0.600], [0.741,0.516], [0.748,0.387], [0.749,0.252], [0.734,0.149], [0.697,0.080], [0.640,0.004], [0.586,-0.021], [0.527,-0.038], [0.425,-0.064], [0.425,-0.191], [0.425,-0.276], [0.425,-0.361], [0.425,-0.446], [0.425,-0.531], [0.425,-0.616], [0.425,-0.701], [0.425,-0.786], [0.612,-0.786], [0.561,-0.659], [0.425,-0.574], [0.289,-0.659], [0.238,-0.786], [0.289,-0.914], [0.425,-0.999], [0.561,-0.914], [0.612,-0.786], [0.425,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '&' : [ [0.085,-0.786], [0.170,-0.786], [0.238,-0.786], [0.344,-0.778], [0.425,-0.774], [0.501,-0.774], [0.630,-0.761], [0.731,-0.748], [0.816,-0.684], [0.901,-0.574], [0.969,-0.506], [1.020,-0.440], [1.105,-0.319], [1.207,-0.191], [1.105,-0.319], [1.020,-0.440], [0.969,-0.506], [0.901,-0.574], [0.816,-0.684], [0.731,-0.748], [0.630,-0.761], [0.501,-0.774], [0.425,-0.774], [0.344,-0.778], [0.298,-0.718], [0.272,-0.676], [0.255,-0.599], [0.247,-0.497], [0.255,-0.327], [0.306,-0.191], [0.408,-0.064], [0.493,0.004], [0.544,0.047], [0.663,0.089], [0.756,0.154], [0.799,0.234], [0.842,0.335], [0.875,0.429], [0.885,0.520], [0.888,0.614], [0.871,0.690], [0.837,0.749], [0.790,0.777], [0.706,0.786], [0.637,0.786], [0.570,0.777], [0.499,0.760], [0.464,0.734], [0.440,0.681], [0.429,0.605], [0.422,0.548], [0.424,0.463], [0.432,0.404], [0.459,0.306], [0.501,0.174], [0.578,0.064], [0.646,-0.106], [0.714,-0.276], [0.765,-0.446], [0.816,-0.616], [0.867,-0.786], [0.935,-0.829], [1.020,-0.829], [1.097,-0.803], [1.191,-0.786], [1.290,-0.786], [1.385,-0.786], [1.462,-0.786],  ],\n  '$' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-1.041], [0.510,-0.786], [0.510,-0.531], [0.510,-0.276], [0.510,-0.021], [0.510,0.234], [0.510,0.489], [0.510,0.829], [0.544,0.829], [0.544,0.489], [0.544,0.234], [0.544,-0.021], [0.544,-0.276], [0.544,-0.531], [0.544,-0.786], [0.544,-1.041], [0.544,-0.786], [0.652,-0.786], [0.729,-0.778], [0.790,-0.733], [0.829,-0.664], [0.887,-0.560], [0.912,-0.429], [0.904,-0.334], [0.880,-0.267], [0.831,-0.191], [0.774,-0.140], [0.708,-0.140], [0.629,-0.140], [0.544,-0.140], [0.475,-0.140], [0.408,-0.132], [0.340,-0.098], [0.306,-0.072], [0.272,-0.030], [0.221,0.038], [0.187,0.115], [0.170,0.242], [0.187,0.341], [0.238,0.440], [0.289,0.497], [0.349,0.530], [0.425,0.548], [0.510,0.548], [0.592,0.548], [0.680,0.548], [0.765,0.548], [0.850,0.548], [0.765,0.548], [0.680,0.548], [0.592,0.548], [0.510,0.548], [0.425,0.548], [0.349,0.530], [0.289,0.497], [0.238,0.440], [0.187,0.341], [0.170,0.242], [0.187,0.115], [0.221,0.038], [0.272,-0.030], [0.306,-0.072], [0.340,-0.098], [0.408,-0.132], [0.475,-0.140], [0.544,-0.140], [0.629,-0.140], [0.708,-0.140], [0.774,-0.140], [0.831,-0.191], [0.880,-0.267], [0.904,-0.334], [0.912,-0.429], [0.887,-0.560], [0.829,-0.664], [0.790,-0.733], [0.729,-0.778], [0.652,-0.786], [0.510,-0.786], [0.425,-0.786], [0.340,-0.786], [0.255,-0.786], [0.170,-0.786], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786],  ],\n  '!' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.531], [0.510,-0.276], [0.510,-0.021], [0.510,0.234], [0.510,0.489], [0.510,0.786], [0.510,0.489], [0.510,0.234], [0.510,-0.021], [0.510,-0.276], [0.510,-0.531], [0.510,-0.786], [0.697,-0.786], [0.646,-0.659], [0.510,-0.574], [0.374,-0.659], [0.323,-0.786], [0.374,-0.914], [0.510,-0.999], [0.646,-0.914], [0.697,-0.786], [0.510,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786],  ],\n}\n","export let raysol_sanserif = {\n  ' ' : [ [0.000,-0.786], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '0' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.544,-0.691], [0.629,-0.595], [0.680,-0.500], [0.723,-0.404], [0.765,-0.308], [0.799,-0.213], [0.833,-0.117], [0.840,-0.009], [0.833,0.117], [0.799,0.212], [0.765,0.308], [0.723,0.404], [0.680,0.499], [0.629,0.595], [0.544,0.690], [0.425,0.786], [0.306,0.690], [0.221,0.595], [0.170,0.499], [0.128,0.404], [0.085,0.308], [0.051,0.212], [0.017,0.117], [0.010,-0.009], [0.017,-0.117], [0.051,-0.213], [0.085,-0.308], [0.128,-0.404], [0.170,-0.500], [0.221,-0.595], [0.306,-0.691], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  '1' : [ [0.085,-0.786], [0.085,-0.629], [0.085,-0.472], [0.085,-0.315], [0.085,-0.157], [0.085,-0.000], [0.085,0.157], [0.085,0.314], [0.085,0.472], [0.085,0.629], [0.085,0.786], [0.085,0.629], [0.085,0.472], [0.085,0.314], [0.085,0.157], [0.085,-0.000], [0.085,-0.157], [0.085,-0.315], [0.085,-0.472], [0.085,-0.629], [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  '2' : [ [0.085,-0.786], [0.170,-0.786], [0.085,-0.786], [0.177,-0.599], [0.269,-0.412], [0.360,-0.225], [0.452,-0.038], [0.544,0.149], [0.612,0.276], [0.654,0.404], [0.663,0.531], [0.637,0.616], [0.587,0.701], [0.527,0.752], [0.451,0.782], [0.383,0.786], [0.315,0.782], [0.238,0.752], [0.179,0.701], [0.128,0.616], [0.085,0.531], [0.128,0.616], [0.179,0.701], [0.238,0.752], [0.315,0.782], [0.383,0.786], [0.451,0.782], [0.527,0.752], [0.587,0.701], [0.637,0.616], [0.663,0.531], [0.654,0.404], [0.612,0.276], [0.544,0.149], [0.452,-0.038], [0.360,-0.225], [0.269,-0.412], [0.177,-0.599], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.765,-0.786], [0.850,-0.574], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  '3' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.786], [0.408,-0.782], [0.485,-0.752], [0.544,-0.701], [0.595,-0.616], [0.620,-0.531], [0.612,-0.404], [0.570,-0.276], [0.476,-0.149], [0.340,0.064], [0.255,0.064], [0.340,0.064], [0.501,0.149], [0.570,0.276], [0.612,0.404], [0.620,0.531], [0.595,0.616], [0.544,0.701], [0.485,0.752], [0.408,0.782], [0.340,0.786], [0.272,0.782], [0.196,0.752], [0.136,0.701], [0.085,0.616], [0.043,0.531], [0.085,0.616], [0.136,0.701], [0.196,0.752], [0.272,0.782], [0.340,0.786], [0.408,0.782], [0.485,0.752], [0.544,0.701], [0.595,0.616], [0.620,0.531], [0.612,0.404], [0.570,0.276], [0.501,0.149], [0.340,0.064], [0.255,0.064], [0.340,0.064], [0.476,-0.149], [0.570,-0.276], [0.612,-0.404], [0.620,-0.531], [0.595,-0.616], [0.544,-0.701], [0.485,-0.752], [0.408,-0.782], [0.340,-0.786], [0.272,-0.782], [0.196,-0.752], [0.136,-0.701], [0.085,-0.616], [0.043,-0.531], [0.000,-0.438], [0.043,-0.531], [0.085,-0.616], [0.136,-0.701], [0.196,-0.752], [0.272,-0.782], [0.340,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '4' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.595,-0.616], [0.595,-0.446], [0.595,-0.276], [0.595,-0.106], [0.595,-0.000], [0.510,-0.000], [0.425,-0.000], [0.340,-0.000], [0.255,-0.000], [0.170,-0.000], [0.068,-0.000], [0.085,0.064], [0.085,0.234], [0.085,0.404], [0.085,0.574], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.574], [0.085,0.404], [0.085,0.234], [0.085,0.064], [0.085,-0.000], [0.170,-0.000], [0.255,-0.000], [0.340,-0.000], [0.425,-0.000], [0.510,-0.000], [0.595,-0.000], [0.680,-0.000], [0.807,-0.000], [0.935,-0.000], [0.807,-0.000], [0.680,-0.000], [0.595,-0.000], [0.595,0.064], [0.595,0.234], [0.595,0.404], [0.595,0.574], [0.595,0.744], [0.595,0.786], [0.595,0.744], [0.595,0.574], [0.595,0.404], [0.595,0.234], [0.595,0.064], [0.595,-0.000], [0.595,-0.106], [0.595,-0.276], [0.595,-0.446], [0.595,-0.616], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  '5' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.744], [0.493,-0.740], [0.570,-0.710], [0.629,-0.659], [0.680,-0.574], [0.706,-0.489], [0.714,-0.361], [0.697,-0.191], [0.654,-0.064], [0.561,0.064], [0.425,0.174], [0.272,0.166], [0.136,0.140], [0.153,0.302], [0.170,0.463], [0.187,0.625], [0.204,0.786], [0.289,0.786], [0.374,0.786], [0.459,0.786], [0.544,0.786], [0.680,0.786], [0.799,0.786], [0.680,0.786], [0.544,0.786], [0.459,0.786], [0.374,0.786], [0.289,0.786], [0.204,0.786], [0.187,0.625], [0.170,0.463], [0.153,0.302], [0.136,0.140], [0.272,0.166], [0.425,0.174], [0.561,0.064], [0.654,-0.064], [0.697,-0.191], [0.714,-0.361], [0.706,-0.489], [0.680,-0.574], [0.629,-0.659], [0.570,-0.710], [0.493,-0.740], [0.425,-0.744], [0.357,-0.740], [0.281,-0.710], [0.221,-0.659], [0.170,-0.616], [0.128,-0.548], [0.076,-0.421], [0.128,-0.548], [0.170,-0.616], [0.221,-0.659], [0.281,-0.710], [0.357,-0.740], [0.425,-0.744], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  '6' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.357,-0.744], [0.425,-0.740], [0.501,-0.710], [0.561,-0.659], [0.612,-0.574], [0.637,-0.489], [0.629,-0.361], [0.587,-0.234], [0.510,-0.106], [0.442,-0.038], [0.357,-0.021], [0.272,-0.038], [0.442,-0.038], [0.357,-0.021], [0.272,-0.038], [0.204,-0.106], [0.128,-0.234], [0.085,-0.361], [0.112,-0.247], [0.139,-0.132], [0.167,-0.017], [0.194,0.098], [0.221,0.212], [0.248,0.327], [0.275,0.442], [0.303,0.557], [0.330,0.671], [0.357,0.786], [0.330,0.671], [0.303,0.557], [0.275,0.442], [0.248,0.327], [0.221,0.212], [0.194,0.098], [0.167,-0.017], [0.139,-0.132], [0.112,-0.247], [0.085,-0.361], [0.076,-0.489], [0.102,-0.574], [0.153,-0.659], [0.213,-0.710], [0.289,-0.740], [0.357,-0.744], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '7' : [ [0.085,-0.786], [0.170,-0.786], [0.221,-0.629], [0.272,-0.472], [0.323,-0.315], [0.374,-0.157], [0.425,-0.000], [0.476,0.157], [0.527,0.314], [0.578,0.472], [0.629,0.629], [0.680,0.786], [0.606,0.786], [0.531,0.786], [0.457,0.786], [0.383,0.786], [0.308,0.786], [0.234,0.786], [0.159,0.786], [0.043,0.786], [0.159,0.786], [0.234,0.786], [0.308,0.786], [0.383,0.786], [0.457,0.786], [0.531,0.786], [0.606,0.786], [0.680,0.786], [0.629,0.629], [0.578,0.472], [0.527,0.314], [0.476,0.157], [0.425,-0.000], [0.374,-0.157], [0.323,-0.315], [0.272,-0.472], [0.221,-0.629], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  '8' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.744], [0.408,-0.740], [0.485,-0.710], [0.544,-0.659], [0.595,-0.574], [0.620,-0.489], [0.612,-0.361], [0.570,-0.234], [0.493,-0.106], [0.425,0.021], [0.340,0.021], [0.255,0.021], [0.179,0.149], [0.111,0.276], [0.068,0.404], [0.060,0.531], [0.085,0.616], [0.136,0.701], [0.196,0.752], [0.272,0.782], [0.340,0.786], [0.408,0.782], [0.485,0.752], [0.544,0.701], [0.595,0.616], [0.620,0.531], [0.612,0.404], [0.570,0.276], [0.501,0.149], [0.425,0.021], [0.340,0.021], [0.255,0.021], [0.187,-0.106], [0.111,-0.234], [0.068,-0.361], [0.060,-0.489], [0.085,-0.574], [0.136,-0.659], [0.196,-0.710], [0.272,-0.740], [0.340,-0.744], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '9' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.646,-0.786], [0.646,-0.616], [0.646,-0.446], [0.646,-0.276], [0.646,-0.106], [0.646,0.064], [0.646,0.234], [0.646,0.404], [0.595,0.276], [0.527,0.149], [0.365,0.064], [0.204,0.149], [0.136,0.276], [0.093,0.404], [0.085,0.531], [0.111,0.616], [0.162,0.701], [0.221,0.752], [0.298,0.782], [0.365,0.786], [0.433,0.782], [0.510,0.752], [0.570,0.701], [0.620,0.616], [0.646,0.531], [0.646,0.404], [0.646,0.234], [0.646,0.064], [0.646,-0.106], [0.646,-0.276], [0.646,-0.446], [0.646,-0.616], [0.646,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'A' : [ [0.085,-0.786], [0.128,-0.629], [0.170,-0.472], [0.213,-0.315], [0.255,-0.157], [0.298,-0.000], [0.340,0.157], [0.383,0.314], [0.425,0.472], [0.468,0.629], [0.510,0.786], [0.552,0.629], [0.595,0.472], [0.637,0.314], [0.680,0.157], [0.723,-0.000], [0.765,-0.157], [0.680,-0.157], [0.595,-0.157], [0.510,-0.157], [0.425,-0.157], [0.340,-0.157], [0.255,-0.157], [0.340,-0.157], [0.425,-0.157], [0.510,-0.157], [0.595,-0.157], [0.680,-0.157], [0.765,-0.157], [0.807,-0.315], [0.850,-0.472], [0.892,-0.629], [0.935,-0.786], [1.275,-0.786],  ],\n  'B' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.459,0.777], [0.510,0.752], [0.561,0.701], [0.595,0.667], [0.629,0.616], [0.663,0.531], [0.697,0.446], [0.697,0.404], [0.663,0.319], [0.629,0.234], [0.595,0.183], [0.561,0.149], [0.510,0.098], [0.459,0.072], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.459,0.055], [0.510,0.030], [0.561,-0.021], [0.595,-0.055], [0.629,-0.106], [0.663,-0.191], [0.697,-0.276], [0.714,-0.361], [0.697,-0.446], [0.663,-0.531], [0.629,-0.616], [0.595,-0.667], [0.561,-0.701], [0.510,-0.752], [0.459,-0.778], [0.425,-0.786], [0.357,-0.786], [0.289,-0.786], [0.221,-0.786], [0.153,-0.786], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.561,-0.786], [0.646,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'C' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.442,-0.740], [0.365,-0.710], [0.306,-0.659], [0.255,-0.574], [0.213,-0.489], [0.170,-0.395], [0.136,-0.276], [0.102,-0.132], [0.085,0.021], [0.102,0.174], [0.136,0.319], [0.170,0.438], [0.213,0.531], [0.255,0.616], [0.306,0.701], [0.365,0.752], [0.442,0.782], [0.510,0.786], [0.578,0.782], [0.654,0.752], [0.714,0.701], [0.765,0.616], [0.807,0.531], [0.765,0.616], [0.714,0.701], [0.654,0.752], [0.578,0.782], [0.510,0.786], [0.442,0.782], [0.365,0.752], [0.306,0.701], [0.255,0.616], [0.213,0.531], [0.170,0.438], [0.136,0.319], [0.102,0.174], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.765,-0.574], [0.714,-0.659], [0.654,-0.710], [0.578,-0.740], [0.510,-0.744], [0.510,-0.786], [0.425,-0.786], [0.374,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'D' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.408,-0.740], [0.485,-0.710], [0.544,-0.659], [0.595,-0.574], [0.637,-0.489], [0.680,-0.395], [0.714,-0.276], [0.748,-0.132], [0.765,0.021], [0.748,0.174], [0.714,0.319], [0.680,0.438], [0.637,0.531], [0.595,0.616], [0.544,0.701], [0.485,0.752], [0.408,0.782], [0.340,0.786], [0.272,0.786], [0.196,0.786], [0.136,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'E' : [ [0.085,-0.786], [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.629,0.064], [0.561,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.493,0.786], [0.561,0.786], [0.629,0.786], [0.629,0.701], [0.629,0.531], [0.629,0.701], [0.561,0.786], [0.493,0.786], [0.425,0.786], [0.357,0.786], [0.289,0.786], [0.221,0.786], [0.153,0.786], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.493,-0.786], [0.561,-0.786], [0.629,-0.701], [0.629,-0.531], [0.629,-0.701], [0.629,-0.786], [0.714,-0.786], [1.054,-0.786],  ],\n  'F' : [ [0.085,-0.786], [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.085,0.064], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.493,0.786], [0.561,0.786], [0.629,0.786], [0.561,0.786], [0.493,0.786], [0.425,0.786], [0.357,0.786], [0.289,0.786], [0.221,0.786], [0.153,0.786], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.493,-0.786], [0.561,-0.786], [0.629,-0.786], [0.969,-0.786],  ],\n  'G' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.744], [0.493,-0.740], [0.570,-0.710], [0.629,-0.659], [0.680,-0.574], [0.723,-0.489], [0.765,-0.395], [0.799,-0.276], [0.833,-0.132], [0.850,0.021], [0.765,0.021], [0.680,0.021], [0.595,0.021], [0.510,0.021], [0.425,0.021], [0.510,0.021], [0.595,0.021], [0.680,0.021], [0.765,0.021], [0.850,0.021], [0.833,-0.132], [0.799,-0.276], [0.765,-0.395], [0.723,-0.489], [0.680,-0.574], [0.629,-0.659], [0.570,-0.710], [0.493,-0.740], [0.425,-0.744], [0.357,-0.740], [0.281,-0.710], [0.221,-0.659], [0.170,-0.574], [0.128,-0.489], [0.085,-0.395], [0.051,-0.276], [0.017,-0.132], [0.000,0.021], [0.017,0.174], [0.051,0.319], [0.085,0.438], [0.128,0.531], [0.170,0.616], [0.221,0.701], [0.281,0.752], [0.357,0.782], [0.425,0.786], [0.493,0.782], [0.570,0.752], [0.629,0.701], [0.680,0.616], [0.629,0.701], [0.570,0.752], [0.493,0.782], [0.425,0.786], [0.357,0.782], [0.281,0.752], [0.221,0.701], [0.170,0.616], [0.128,0.531], [0.085,0.438], [0.051,0.319], [0.017,0.174], [0.000,0.021], [0.017,-0.132], [0.051,-0.276], [0.085,-0.395], [0.128,-0.489], [0.170,-0.574], [0.221,-0.659], [0.281,-0.710], [0.357,-0.740], [0.425,-0.744], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'H' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.629,0.064], [0.697,0.064], [0.765,0.064], [0.765,0.149], [0.765,0.234], [0.765,0.319], [0.765,0.404], [0.765,0.489], [0.765,0.574], [0.765,0.659], [0.765,0.744], [0.765,0.786], [0.765,0.744], [0.765,0.659], [0.765,0.574], [0.765,0.489], [0.765,0.404], [0.765,0.319], [0.765,0.234], [0.765,0.149], [0.765,0.064], [0.697,0.064], [0.629,0.064], [0.561,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.629,0.064], [0.697,0.064], [0.765,0.064], [0.765,-0.021], [0.765,-0.106], [0.765,-0.191], [0.765,-0.276], [0.765,-0.361], [0.765,-0.446], [0.765,-0.531], [0.765,-0.616], [0.765,-0.701], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'I' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.340,-0.701], [0.340,-0.616], [0.340,-0.531], [0.340,-0.446], [0.340,-0.361], [0.340,-0.276], [0.340,-0.191], [0.340,-0.106], [0.340,-0.021], [0.340,0.064], [0.340,0.149], [0.340,0.234], [0.340,0.319], [0.340,0.404], [0.340,0.489], [0.340,0.574], [0.340,0.659], [0.340,0.744], [0.340,0.786], [0.255,0.786], [0.170,0.786], [0.085,0.786], [0.170,0.786], [0.255,0.786], [0.340,0.786], [0.425,0.786], [0.510,0.786], [0.595,0.786], [0.510,0.786], [0.425,0.786], [0.340,0.744], [0.340,0.659], [0.340,0.574], [0.340,0.489], [0.340,0.404], [0.340,0.319], [0.340,0.234], [0.340,0.149], [0.340,0.064], [0.340,-0.021], [0.340,-0.106], [0.340,-0.191], [0.340,-0.276], [0.340,-0.361], [0.340,-0.446], [0.340,-0.531], [0.340,-0.616], [0.340,-0.701], [0.340,-0.786], [0.255,-0.701], [0.170,-0.701], [0.085,-0.701], [0.170,-0.701], [0.255,-0.701], [0.340,-0.701], [0.425,-0.701], [0.510,-0.701], [0.595,-0.701], [0.510,-0.701], [0.425,-0.701], [0.340,-0.701], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  'J' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.391,-0.786], [0.425,-0.778], [0.476,-0.752], [0.527,-0.701], [0.561,-0.667], [0.595,-0.616], [0.629,-0.531], [0.663,-0.446], [0.680,-0.361], [0.680,-0.276], [0.680,-0.191], [0.680,-0.106], [0.680,-0.021], [0.680,0.064], [0.680,0.149], [0.680,0.234], [0.680,0.319], [0.680,0.404], [0.680,0.489], [0.680,0.574], [0.680,0.659], [0.680,0.744], [0.680,0.786], [0.680,0.744], [0.680,0.659], [0.680,0.574], [0.680,0.489], [0.680,0.404], [0.680,0.319], [0.680,0.234], [0.680,0.149], [0.680,0.064], [0.680,-0.021], [0.680,-0.106], [0.680,-0.191], [0.680,-0.276], [0.680,-0.361], [0.663,-0.446], [0.629,-0.531], [0.595,-0.616], [0.561,-0.667], [0.527,-0.701], [0.476,-0.752], [0.425,-0.778], [0.391,-0.786], [0.340,-0.786], [0.289,-0.786], [0.255,-0.778], [0.204,-0.752], [0.153,-0.701], [0.119,-0.667], [0.085,-0.616], [0.051,-0.531], [0.017,-0.446], [0.000,-0.361], [0.017,-0.446], [0.051,-0.531], [0.085,-0.616], [0.119,-0.667], [0.153,-0.701], [0.204,-0.752], [0.255,-0.778], [0.289,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'K' : [ [0.085,-0.786], [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.224,0.136], [0.279,0.208], [0.333,0.280], [0.388,0.353], [0.442,0.425], [0.496,0.497], [0.551,0.569], [0.605,0.642], [0.660,0.714], [0.714,0.786], [0.660,0.714], [0.605,0.642], [0.551,0.569], [0.496,0.497], [0.442,0.425], [0.388,0.353], [0.333,0.280], [0.279,0.208], [0.224,0.136], [0.170,0.064], [0.224,-0.021], [0.279,-0.106], [0.333,-0.191], [0.388,-0.276], [0.442,-0.361], [0.496,-0.446], [0.551,-0.531], [0.605,-0.616], [0.660,-0.701], [0.714,-0.786], [0.799,-0.786], [1.139,-0.786],  ],\n  'L' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.765,-0.574], [0.765,-0.446], [0.765,-0.574], [0.765,-0.701], [0.765,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  'M' : [ [0.085,-0.786], [0.085,-0.786], [0.119,-0.629], [0.153,-0.472], [0.187,-0.315], [0.221,-0.157], [0.255,-0.000], [0.289,0.157], [0.323,0.314], [0.357,0.472], [0.391,0.629], [0.425,0.786], [0.459,0.629], [0.493,0.472], [0.527,0.314], [0.561,0.157], [0.595,-0.000], [0.629,-0.157], [0.663,-0.315], [0.697,-0.472], [0.731,-0.629], [0.765,-0.786], [0.799,-0.629], [0.833,-0.472], [0.867,-0.315], [0.901,-0.157], [0.935,-0.000], [0.969,0.157], [1.003,0.314], [1.037,0.472], [1.071,0.629], [1.105,0.786], [1.139,0.629], [1.173,0.472], [1.207,0.314], [1.241,0.157], [1.275,-0.000], [1.309,-0.157], [1.343,-0.315], [1.377,-0.472], [1.411,-0.629], [1.445,-0.786], [1.530,-0.786], [1.870,-0.786],  ],\n  'N' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.170,0.629], [0.255,0.472], [0.340,0.314], [0.425,0.157], [0.510,-0.000], [0.595,-0.157], [0.680,-0.315], [0.765,-0.472], [0.850,-0.629], [0.935,-0.786], [0.935,-0.701], [0.935,-0.616], [0.935,-0.531], [0.935,-0.446], [0.935,-0.361], [0.935,-0.276], [0.935,-0.191], [0.935,-0.106], [0.935,-0.021], [0.935,0.064], [0.935,0.149], [0.935,0.234], [0.935,0.319], [0.935,0.404], [0.935,0.489], [0.935,0.574], [0.935,0.659], [0.935,0.744], [0.935,0.786], [0.935,0.744], [0.935,0.659], [0.935,0.574], [0.935,0.489], [0.935,0.404], [0.935,0.319], [0.935,0.234], [0.935,0.149], [0.935,0.064], [0.935,-0.021], [0.935,-0.106], [0.935,-0.191], [0.935,-0.276], [0.935,-0.361], [0.935,-0.446], [0.935,-0.531], [0.935,-0.616], [0.935,-0.701], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'O' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.850,-0.395], [0.884,-0.276], [0.918,-0.132], [0.935,0.021], [0.918,0.174], [0.884,0.319], [0.850,0.438], [0.807,0.531], [0.765,0.616], [0.714,0.701], [0.654,0.752], [0.578,0.782], [0.510,0.786], [0.442,0.782], [0.365,0.752], [0.306,0.701], [0.255,0.616], [0.213,0.531], [0.170,0.438], [0.136,0.319], [0.102,0.174], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'P' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.459,0.072], [0.510,0.098], [0.561,0.149], [0.595,0.183], [0.629,0.234], [0.663,0.319], [0.697,0.404], [0.697,0.446], [0.663,0.531], [0.629,0.616], [0.595,0.667], [0.561,0.701], [0.510,0.752], [0.459,0.777], [0.425,0.786], [0.357,0.786], [0.289,0.786], [0.221,0.786], [0.153,0.786], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.493,-0.786], [0.561,-0.786], [0.629,-0.786], [0.697,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'Q' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.850,-0.395], [0.884,-0.276], [0.918,-0.132], [0.935,0.021], [0.918,0.174], [0.884,0.319], [0.850,0.438], [0.807,0.531], [0.765,0.616], [0.714,0.701], [0.654,0.752], [0.578,0.782], [0.510,0.786], [0.442,0.782], [0.365,0.752], [0.306,0.701], [0.255,0.616], [0.213,0.531], [0.170,0.438], [0.136,0.319], [0.102,0.174], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.799,-0.854], [0.833,-0.922], [0.867,-0.990], [0.765,-0.786], [0.765,-0.786], [0.867,-0.990], [0.833,-0.922], [0.799,-0.854], [0.765,-0.786], [0.731,-0.718], [0.697,-0.650], [0.663,-0.582], [0.629,-0.514], [0.595,-0.446], [0.629,-0.514], [0.663,-0.582], [0.697,-0.650], [0.731,-0.718], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'R' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.153,0.786], [0.221,0.786], [0.289,0.786], [0.357,0.786], [0.425,0.786], [0.459,0.777], [0.510,0.752], [0.561,0.701], [0.595,0.667], [0.629,0.616], [0.663,0.531], [0.697,0.446], [0.697,0.404], [0.663,0.319], [0.629,0.234], [0.595,0.183], [0.561,0.149], [0.510,0.098], [0.459,0.072], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.153,0.064], [0.221,0.064], [0.289,0.064], [0.357,0.064], [0.391,-0.021], [0.425,-0.106], [0.459,-0.191], [0.493,-0.276], [0.527,-0.361], [0.561,-0.446], [0.595,-0.531], [0.629,-0.616], [0.663,-0.701], [0.697,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'S' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.744], [0.493,-0.740], [0.570,-0.710], [0.629,-0.659], [0.680,-0.574], [0.706,-0.489], [0.697,-0.361], [0.654,-0.234], [0.561,-0.106], [0.425,0.021], [0.289,0.149], [0.196,0.276], [0.153,0.404], [0.145,0.531], [0.170,0.616], [0.221,0.701], [0.281,0.752], [0.357,0.782], [0.425,0.786], [0.493,0.782], [0.570,0.752], [0.629,0.701], [0.680,0.616], [0.723,0.531], [0.680,0.616], [0.629,0.701], [0.570,0.752], [0.493,0.782], [0.425,0.786], [0.357,0.782], [0.281,0.752], [0.221,0.701], [0.170,0.616], [0.145,0.531], [0.153,0.404], [0.196,0.276], [0.289,0.149], [0.425,0.021], [0.561,-0.106], [0.654,-0.234], [0.697,-0.361], [0.706,-0.489], [0.680,-0.574], [0.629,-0.659], [0.570,-0.710], [0.493,-0.740], [0.425,-0.744], [0.357,-0.740], [0.281,-0.710], [0.221,-0.659], [0.170,-0.574], [0.128,-0.489], [0.085,-0.395], [0.128,-0.489], [0.170,-0.574], [0.221,-0.659], [0.281,-0.710], [0.357,-0.740], [0.425,-0.744], [0.425,-0.786], [0.425,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'T' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.595,-0.701], [0.595,-0.616], [0.595,-0.531], [0.595,-0.446], [0.595,-0.361], [0.595,-0.276], [0.595,-0.191], [0.595,-0.106], [0.595,-0.021], [0.595,0.064], [0.595,0.149], [0.595,0.234], [0.595,0.319], [0.595,0.404], [0.595,0.489], [0.595,0.574], [0.595,0.659], [0.595,0.744], [0.595,0.786], [0.510,0.786], [0.425,0.786], [0.340,0.786], [0.255,0.786], [0.170,0.786], [0.085,0.786], [0.170,0.786], [0.255,0.786], [0.340,0.786], [0.425,0.786], [0.510,0.786], [0.595,0.786], [0.680,0.786], [0.765,0.786], [0.850,0.786], [0.935,0.786], [1.020,0.786], [1.105,0.786], [1.020,0.786], [0.935,0.786], [0.850,0.786], [0.765,0.786], [0.680,0.786], [0.595,0.744], [0.595,0.659], [0.595,0.574], [0.595,0.489], [0.595,0.404], [0.595,0.319], [0.595,0.234], [0.595,0.149], [0.595,0.064], [0.595,-0.021], [0.595,-0.106], [0.595,-0.191], [0.595,-0.276], [0.595,-0.361], [0.595,-0.446], [0.595,-0.531], [0.595,-0.616], [0.595,-0.701], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.445,-0.786],  ],\n  'U' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.510,-0.744], [0.578,-0.740], [0.654,-0.710], [0.714,-0.659], [0.765,-0.574], [0.807,-0.489], [0.850,-0.395], [0.884,-0.276], [0.918,-0.132], [0.935,0.021], [0.935,0.106], [0.935,0.191], [0.935,0.276], [0.935,0.361], [0.935,0.446], [0.935,0.531], [0.935,0.616], [0.935,0.701], [0.935,0.786], [0.935,0.701], [0.935,0.616], [0.935,0.531], [0.935,0.446], [0.935,0.361], [0.935,0.276], [0.935,0.191], [0.935,0.106], [0.935,0.021], [0.918,-0.132], [0.884,-0.276], [0.850,-0.395], [0.807,-0.489], [0.765,-0.574], [0.714,-0.659], [0.654,-0.710], [0.578,-0.740], [0.510,-0.744], [0.442,-0.740], [0.365,-0.710], [0.306,-0.659], [0.255,-0.574], [0.213,-0.489], [0.170,-0.395], [0.136,-0.276], [0.102,-0.132], [0.085,0.021], [0.085,0.106], [0.085,0.191], [0.085,0.276], [0.085,0.361], [0.085,0.446], [0.085,0.531], [0.085,0.616], [0.085,0.701], [0.085,0.786], [0.085,0.701], [0.085,0.616], [0.085,0.531], [0.085,0.446], [0.085,0.361], [0.085,0.276], [0.085,0.191], [0.085,0.106], [0.085,0.021], [0.102,-0.132], [0.136,-0.276], [0.170,-0.395], [0.213,-0.489], [0.255,-0.574], [0.306,-0.659], [0.365,-0.710], [0.442,-0.740], [0.510,-0.744], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'V' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.646,-0.629], [0.697,-0.472], [0.748,-0.315], [0.799,-0.157], [0.850,-0.000], [0.901,0.157], [0.952,0.314], [1.003,0.472], [1.054,0.629], [1.105,0.786], [1.054,0.629], [1.003,0.472], [0.952,0.314], [0.901,0.157], [0.850,-0.000], [0.799,-0.157], [0.748,-0.315], [0.697,-0.472], [0.646,-0.629], [0.595,-0.786], [0.544,-0.629], [0.493,-0.472], [0.442,-0.315], [0.391,-0.157], [0.340,-0.000], [0.289,0.157], [0.238,0.314], [0.187,0.472], [0.136,0.629], [0.085,0.786], [0.136,0.629], [0.187,0.472], [0.238,0.314], [0.289,0.157], [0.340,-0.000], [0.391,-0.157], [0.442,-0.315], [0.493,-0.472], [0.544,-0.629], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'W' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.786], [0.391,-0.629], [0.357,-0.472], [0.323,-0.315], [0.289,-0.157], [0.255,-0.000], [0.221,0.157], [0.187,0.314], [0.153,0.472], [0.119,0.629], [0.085,0.786], [0.119,0.629], [0.153,0.472], [0.187,0.314], [0.221,0.157], [0.255,-0.000], [0.289,-0.157], [0.323,-0.315], [0.357,-0.472], [0.391,-0.629], [0.425,-0.786], [0.459,-0.629], [0.493,-0.472], [0.527,-0.315], [0.561,-0.157], [0.595,-0.000], [0.629,0.157], [0.663,0.314], [0.697,0.472], [0.731,0.629], [0.765,0.786], [0.799,0.629], [0.833,0.472], [0.867,0.314], [0.901,0.157], [0.935,-0.000], [0.969,-0.157], [1.003,-0.315], [1.037,-0.472], [1.071,-0.629], [1.105,-0.786], [1.139,-0.629], [1.173,-0.472], [1.207,-0.315], [1.241,-0.157], [1.275,-0.000], [1.309,0.157], [1.343,0.314], [1.377,0.472], [1.411,0.629], [1.445,0.786], [1.411,0.629], [1.377,0.472], [1.343,0.314], [1.309,0.157], [1.275,-0.000], [1.241,-0.157], [1.207,-0.315], [1.173,-0.472], [1.139,-0.629], [1.105,-0.786], [1.190,-0.786], [1.275,-0.786], [1.360,-0.786], [1.445,-0.786], [1.530,-0.786], [1.870,-0.786],  ],\n  'X' : [ [0.085,-0.786], [0.187,-0.629], [0.289,-0.472], [0.391,-0.315], [0.493,-0.157], [0.595,-0.000], [0.697,0.157], [0.799,0.314], [0.901,0.472], [1.003,0.629], [1.105,0.786], [1.003,0.629], [0.901,0.472], [0.799,0.314], [0.697,0.157], [0.595,-0.000], [0.493,0.157], [0.391,0.314], [0.289,0.472], [0.187,0.629], [0.085,0.786], [0.187,0.629], [0.289,0.472], [0.391,0.314], [0.493,0.157], [0.595,-0.000], [0.697,-0.157], [0.799,-0.315], [0.901,-0.472], [1.003,-0.629], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'Y' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.595,-0.701], [0.595,-0.616], [0.595,-0.531], [0.595,-0.446], [0.595,-0.361], [0.595,-0.276], [0.595,-0.191], [0.595,-0.106], [0.595,-0.021], [0.595,-0.000], [0.697,0.157], [0.799,0.314], [0.901,0.472], [1.003,0.629], [1.105,0.786], [1.003,0.629], [0.901,0.472], [0.799,0.314], [0.697,0.157], [0.595,-0.000], [0.493,0.157], [0.391,0.314], [0.289,0.472], [0.187,0.629], [0.085,0.786], [0.187,0.629], [0.289,0.472], [0.391,0.314], [0.493,0.157], [0.595,-0.000], [0.595,-0.021], [0.595,-0.106], [0.595,-0.191], [0.595,-0.276], [0.595,-0.361], [0.595,-0.446], [0.595,-0.531], [0.595,-0.616], [0.595,-0.701], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'Z' : [ [0.085,-0.786], [0.187,-0.629], [0.289,-0.472], [0.391,-0.315], [0.493,-0.157], [0.595,-0.000], [0.697,0.157], [0.799,0.314], [0.901,0.472], [1.003,0.629], [1.105,0.786], [0.935,0.786], [0.765,0.786], [0.595,0.786], [0.425,0.786], [0.255,0.786], [0.085,0.786], [0.255,0.786], [0.425,0.786], [0.595,0.786], [0.765,0.786], [0.935,0.786], [1.105,0.786], [1.003,0.629], [0.901,0.472], [0.799,0.314], [0.697,0.157], [0.595,-0.000], [0.493,-0.157], [0.391,-0.315], [0.289,-0.472], [0.187,-0.629], [0.085,-0.769], [0.255,-0.769], [0.425,-0.769], [0.595,-0.769], [0.765,-0.769], [0.935,-0.769], [1.105,-0.769], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'a' : [ [0.068,-0.786], [0.153,-0.786], [0.238,-0.786], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.646,-0.701], [0.646,-0.616], [0.646,-0.531], [0.646,-0.446], [0.646,-0.361], [0.646,-0.276], [0.646,-0.191], [0.646,-0.106], [0.646,-0.021], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.731,-0.786], [1.071,-0.786],  ],\n  'b' : [ [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.459,-0.778], [0.510,-0.752], [0.561,-0.701], [0.595,-0.667], [0.629,-0.616], [0.663,-0.531], [0.697,-0.446], [0.714,-0.361], [0.697,-0.276], [0.663,-0.191], [0.629,-0.106], [0.595,-0.055], [0.561,-0.021], [0.510,0.030], [0.459,0.055], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.786], [0.085,0.744], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.017,-0.786], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.425,-0.786], [0.561,-0.786], [0.646,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'c' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.340,-0.778], [0.289,-0.752], [0.238,-0.701], [0.204,-0.667], [0.170,-0.616], [0.136,-0.531], [0.102,-0.446], [0.085,-0.361], [0.102,-0.276], [0.136,-0.191], [0.170,-0.106], [0.204,-0.055], [0.238,-0.021], [0.289,0.030], [0.340,0.055], [0.374,0.064], [0.442,0.064], [0.510,0.064], [0.578,0.064], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.986,-0.786],  ],\n  'd' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.714,-0.786], [0.714,-0.701], [0.714,-0.616], [0.714,-0.531], [0.714,-0.446], [0.714,-0.361], [0.714,-0.276], [0.714,-0.191], [0.714,-0.106], [0.714,-0.021], [0.714,0.064], [0.714,0.149], [0.714,0.234], [0.714,0.319], [0.714,0.404], [0.714,0.489], [0.714,0.574], [0.714,0.659], [0.714,0.744], [0.714,0.786], [0.714,0.744], [0.714,0.659], [0.714,0.574], [0.714,0.489], [0.714,0.404], [0.714,0.319], [0.714,0.234], [0.714,0.149], [0.714,0.064], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.714,-0.786], [0.799,-0.786], [1.139,-0.786],  ],\n  'e' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.340,-0.778], [0.289,-0.752], [0.238,-0.701], [0.204,-0.667], [0.170,-0.616], [0.128,-0.531], [0.102,-0.446], [0.094,-0.361], [0.179,-0.361], [0.255,-0.361], [0.332,-0.361], [0.408,-0.361], [0.476,-0.361], [0.518,-0.361], [0.595,-0.361], [0.671,-0.361], [0.748,-0.361], [0.723,-0.276], [0.706,-0.191], [0.663,-0.106], [0.629,-0.055], [0.595,-0.021], [0.544,0.030], [0.493,0.055], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.128,-0.191], [0.102,-0.276], [0.102,-0.446], [0.128,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.714,-0.786], [0.816,-0.786], [1.156,-0.786],  ],\n  'f' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.701], [0.425,-0.616], [0.425,-0.531], [0.425,-0.446], [0.425,-0.361], [0.425,-0.276], [0.425,-0.191], [0.425,-0.106], [0.425,-0.021], [0.425,0.064], [0.510,0.064], [0.595,0.064], [0.680,0.064], [0.807,0.064], [0.680,0.064], [0.595,0.064], [0.510,0.064], [0.425,0.064], [0.340,0.064], [0.255,0.064], [0.170,0.064], [0.043,0.064], [0.170,0.064], [0.255,0.064], [0.340,0.064], [0.425,0.064], [0.425,0.149], [0.425,0.234], [0.425,0.319], [0.442,0.446], [0.468,0.531], [0.510,0.616], [0.544,0.667], [0.578,0.701], [0.629,0.752], [0.680,0.777], [0.714,0.786], [0.782,0.786], [0.850,0.786], [0.782,0.786], [0.714,0.786], [0.680,0.777], [0.629,0.752], [0.578,0.701], [0.544,0.667], [0.510,0.616], [0.468,0.531], [0.442,0.446], [0.425,0.319], [0.425,0.234], [0.425,0.149], [0.425,0.064], [0.425,-0.021], [0.425,-0.106], [0.425,-0.191], [0.425,-0.276], [0.425,-0.361], [0.425,-0.446], [0.425,-0.531], [0.425,-0.616], [0.425,-0.701], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'g' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.646,-0.871], [0.646,-0.956], [0.646,-1.041], [0.646,-1.126], [0.629,-1.254], [0.603,-1.339], [0.561,-1.424], [0.527,-1.475], [0.493,-1.509], [0.442,-1.560], [0.391,-1.585], [0.357,-1.594], [0.289,-1.594], [0.221,-1.594], [0.153,-1.594], [0.221,-1.594], [0.289,-1.594], [0.357,-1.594], [0.391,-1.585], [0.442,-1.560], [0.493,-1.509], [0.527,-1.475], [0.561,-1.424], [0.603,-1.339], [0.629,-1.254], [0.646,-1.126], [0.646,-1.041], [0.646,-0.956], [0.646,-0.871], [0.646,-0.786], [0.646,-0.701], [0.646,-0.616], [0.646,-0.531], [0.646,-0.446], [0.646,-0.361], [0.646,-0.276], [0.646,-0.191], [0.646,-0.106], [0.646,-0.021], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.714,-0.786], [1.054,-0.786],  ],\n  'h' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.744], [0.085,0.786], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.106], [0.102,-0.064], [0.153,-0.030], [0.238,0.021], [0.323,0.064], [0.425,0.064], [0.510,0.021], [0.595,-0.030], [0.646,-0.064], [0.663,-0.106], [0.663,-0.191], [0.663,-0.276], [0.663,-0.361], [0.663,-0.446], [0.663,-0.531], [0.663,-0.616], [0.663,-0.701], [0.663,-0.786], [0.748,-0.786], [1.088,-0.786],  ],\n  'i' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'j' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.493,-0.786], [0.493,-0.701], [0.493,-0.616], [0.493,-0.531], [0.493,-0.446], [0.493,-0.361], [0.493,-0.276], [0.493,-0.191], [0.493,-0.106], [0.493,-0.021], [0.493,0.064], [0.493,-0.021], [0.493,-0.106], [0.493,-0.191], [0.493,-0.276], [0.493,-0.361], [0.493,-0.446], [0.493,-0.531], [0.493,-0.616], [0.493,-0.701], [0.493,-0.786], [0.493,-0.871], [0.493,-0.956], [0.493,-1.041], [0.493,-1.126], [0.476,-1.254], [0.451,-1.339], [0.408,-1.424], [0.374,-1.475], [0.340,-1.509], [0.289,-1.560], [0.238,-1.585], [0.204,-1.594], [0.136,-1.594], [0.068,-1.594], [0.000,-1.594], [0.068,-1.594], [0.136,-1.594], [0.204,-1.594], [0.238,-1.585], [0.289,-1.560], [0.340,-1.509], [0.374,-1.475], [0.408,-1.424], [0.451,-1.339], [0.476,-1.254], [0.493,-1.126], [0.493,-1.041], [0.493,-0.956], [0.493,-0.871], [0.493,-0.786], [0.442,-0.786], [0.493,-0.786], [0.578,-0.786], [0.918,-0.786],  ],\n  'k' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.744], [0.085,0.786], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.184,-0.295], [0.283,-0.228], [0.383,-0.162], [0.482,-0.095], [0.581,-0.029], [0.680,0.038], [0.581,-0.029], [0.482,-0.095], [0.383,-0.162], [0.283,-0.228], [0.184,-0.295], [0.085,-0.361], [0.184,-0.432], [0.283,-0.503], [0.383,-0.574], [0.482,-0.645], [0.581,-0.716], [0.680,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'l' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,0.149], [0.085,0.234], [0.085,0.319], [0.085,0.404], [0.085,0.489], [0.085,0.574], [0.085,0.659], [0.085,0.744], [0.085,0.744], [0.085,0.786], [0.085,0.659], [0.085,0.574], [0.085,0.489], [0.085,0.404], [0.085,0.319], [0.085,0.234], [0.085,0.149], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'm' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.153,0.004], [0.255,0.030], [0.323,0.047], [0.391,0.047], [0.459,0.030], [0.561,0.004], [0.612,-0.021], [0.629,-0.106], [0.629,-0.191], [0.629,-0.276], [0.629,-0.361], [0.629,-0.446], [0.629,-0.531], [0.629,-0.616], [0.629,-0.701], [0.629,-0.808], [0.629,-0.701], [0.629,-0.616], [0.629,-0.531], [0.629,-0.446], [0.629,-0.361], [0.629,-0.276], [0.629,-0.191], [0.629,-0.106], [0.646,-0.021], [0.697,0.004], [0.799,0.030], [0.867,0.047], [0.935,0.047], [1.003,0.030], [1.105,0.004], [1.156,-0.021], [1.173,-0.106], [1.173,-0.191], [1.173,-0.276], [1.173,-0.361], [1.173,-0.446], [1.173,-0.531], [1.173,-0.616], [1.173,-0.701], [1.173,-0.786], [1.258,-0.786], [1.598,-0.786],  ],\n  'n' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.153,0.004], [0.255,0.030], [0.323,0.047], [0.391,0.047], [0.459,0.030], [0.561,0.004], [0.612,-0.021], [0.629,-0.106], [0.629,-0.191], [0.629,-0.276], [0.629,-0.361], [0.629,-0.446], [0.629,-0.531], [0.629,-0.616], [0.629,-0.701], [0.629,-0.786], [0.714,-0.786], [1.054,-0.786],  ],\n  'o' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.646,-0.786], [0.680,-0.778], [0.731,-0.752], [0.782,-0.701], [0.816,-0.667], [0.850,-0.616], [0.884,-0.531], [0.918,-0.446], [0.935,-0.361], [0.918,-0.276], [0.884,-0.191], [0.850,-0.106], [0.816,-0.055], [0.782,-0.021], [0.731,0.030], [0.680,0.055], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.360,-0.786],  ],\n  'p' : [ [0.085,-0.786], [0.085,-0.871], [0.085,-0.956], [0.085,-1.041], [0.085,-1.126], [0.085,-1.211], [0.085,-1.296], [0.085,-1.381], [0.085,-1.466], [0.085,-1.551], [0.085,-1.211], [0.085,-1.551], [0.085,-1.466], [0.085,-1.381], [0.085,-1.296], [0.085,-1.211], [0.085,-1.126], [0.085,-1.041], [0.085,-0.956], [0.085,-0.871], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.391,-0.778], [0.442,-0.752], [0.493,-0.701], [0.527,-0.667], [0.561,-0.616], [0.595,-0.531], [0.629,-0.446], [0.646,-0.361], [0.629,-0.276], [0.595,-0.191], [0.561,-0.106], [0.527,-0.055], [0.493,-0.021], [0.442,0.030], [0.391,0.055], [0.357,0.064], [0.289,0.064], [0.221,0.064], [0.153,0.064], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.153,-0.786], [0.221,-0.786], [0.289,-0.786], [0.357,-0.786], [0.493,-0.786], [0.578,-0.786], [0.663,-0.786], [0.731,-0.786], [1.071,-0.786],  ],\n  'q' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.646,-0.786], [0.646,-0.871], [0.646,-0.956], [0.646,-1.041], [0.646,-1.126], [0.663,-1.254], [0.689,-1.339], [0.731,-1.424], [0.765,-1.475], [0.799,-1.509], [0.850,-1.560], [0.901,-1.585], [0.935,-1.594], [1.003,-1.594], [1.071,-1.594], [1.139,-1.594], [1.071,-1.594], [1.003,-1.594], [0.935,-1.594], [0.901,-1.585], [0.850,-1.560], [0.799,-1.509], [0.765,-1.475], [0.731,-1.424], [0.689,-1.339], [0.663,-1.254], [0.646,-1.126], [0.646,-1.041], [0.646,-0.956], [0.646,-0.871], [0.646,-0.786], [0.646,-0.701], [0.646,-0.616], [0.646,-0.531], [0.646,-0.446], [0.646,-0.361], [0.646,-0.276], [0.646,-0.191], [0.646,-0.106], [0.646,-0.021], [0.646,0.064], [0.578,0.064], [0.510,0.064], [0.442,0.064], [0.374,0.064], [0.340,0.055], [0.289,0.030], [0.238,-0.021], [0.204,-0.055], [0.170,-0.106], [0.136,-0.191], [0.102,-0.276], [0.085,-0.361], [0.102,-0.446], [0.136,-0.531], [0.170,-0.616], [0.204,-0.667], [0.238,-0.701], [0.289,-0.752], [0.340,-0.778], [0.374,-0.786], [0.442,-0.786], [0.510,-0.786], [0.578,-0.786], [0.714,-0.786], [0.816,-0.786], [0.918,-0.786], [1.020,-0.786], [1.105,-0.786], [1.224,-0.786], [1.564,-0.786],  ],\n  'r' : [ [0.085,-0.786], [0.085,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,-0.021], [0.085,0.149], [0.085,0.191], [0.085,0.149], [0.085,-0.021], [0.153,0.004], [0.255,0.030], [0.323,0.055], [0.391,0.064], [0.459,0.055], [0.527,0.030], [0.595,-0.021], [0.527,0.030], [0.459,0.055], [0.391,0.064], [0.323,0.055], [0.255,0.030], [0.153,0.004], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.085,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  's' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.561,-0.786], [0.595,-0.778], [0.646,-0.752], [0.697,-0.701], [0.731,-0.667], [0.765,-0.616], [0.756,-0.565], [0.731,-0.531], [0.663,-0.489], [0.595,-0.446], [0.510,-0.404], [0.425,-0.361], [0.340,-0.319], [0.255,-0.276], [0.187,-0.234], [0.119,-0.191], [0.102,-0.115], [0.119,-0.055], [0.153,-0.021], [0.204,0.030], [0.255,0.055], [0.289,0.064], [0.357,0.064], [0.425,0.064], [0.493,0.064], [0.561,0.064], [0.595,0.055], [0.646,0.030], [0.697,-0.021], [0.731,-0.055], [0.697,-0.021], [0.646,0.030], [0.595,0.055], [0.561,0.064], [0.493,0.064], [0.425,0.064], [0.357,0.064], [0.289,0.064], [0.255,0.055], [0.204,0.030], [0.153,-0.021], [0.119,-0.055], [0.102,-0.115], [0.119,-0.191], [0.187,-0.234], [0.255,-0.276], [0.340,-0.319], [0.425,-0.361], [0.510,-0.404], [0.595,-0.446], [0.663,-0.489], [0.731,-0.531], [0.756,-0.565], [0.765,-0.616], [0.731,-0.667], [0.697,-0.701], [0.646,-0.752], [0.595,-0.778], [0.561,-0.786], [0.510,-0.786], [0.425,-0.786], [0.340,-0.786], [0.289,-0.786], [0.255,-0.778], [0.204,-0.752], [0.153,-0.701], [0.119,-0.667], [0.060,-0.616], [0.119,-0.667], [0.153,-0.701], [0.204,-0.752], [0.255,-0.778], [0.289,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [1.190,-0.786],  ],\n  't' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.374,-0.786], [0.374,-0.701], [0.374,-0.616], [0.374,-0.531], [0.374,-0.446], [0.374,-0.361], [0.374,-0.276], [0.374,-0.191], [0.374,-0.106], [0.374,-0.021], [0.374,0.064], [0.374,0.149], [0.374,0.234], [0.374,0.319], [0.374,0.361], [0.374,0.446], [0.306,0.446], [0.238,0.446], [0.170,0.446], [0.043,0.446], [0.170,0.446], [0.238,0.446], [0.306,0.446], [0.374,0.446], [0.442,0.446], [0.510,0.446], [0.578,0.446], [0.706,0.446], [0.578,0.446], [0.510,0.446], [0.442,0.446], [0.374,0.446], [0.374,0.531], [0.374,0.616], [0.374,0.701], [0.374,0.786], [0.374,0.701], [0.374,0.616], [0.374,0.531], [0.374,0.446], [0.374,0.361], [0.374,0.319], [0.374,0.234], [0.374,0.149], [0.374,0.064], [0.374,-0.021], [0.374,-0.106], [0.374,-0.191], [0.374,-0.276], [0.374,-0.361], [0.374,-0.446], [0.374,-0.531], [0.374,-0.616], [0.374,-0.701], [0.374,-0.786], [0.459,-0.786], [0.544,-0.786], [0.663,-0.786], [0.765,-0.786], [1.105,-0.786],  ],\n  'u' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.323,-0.769], [0.255,-0.752], [0.153,-0.727], [0.102,-0.701], [0.085,-0.616], [0.085,-0.531], [0.085,-0.446], [0.085,-0.361], [0.085,-0.276], [0.085,-0.191], [0.085,-0.106], [0.085,-0.021], [0.085,0.064], [0.085,-0.021], [0.085,-0.106], [0.085,-0.191], [0.085,-0.276], [0.085,-0.361], [0.085,-0.446], [0.085,-0.531], [0.085,-0.616], [0.102,-0.701], [0.153,-0.727], [0.255,-0.752], [0.323,-0.769], [0.391,-0.786], [0.459,-0.769], [0.527,-0.752], [0.629,-0.727], [0.680,-0.701], [0.697,-0.701], [0.697,-0.616], [0.697,-0.531], [0.697,-0.446], [0.697,-0.361], [0.697,-0.276], [0.697,-0.191], [0.697,-0.106], [0.697,-0.021], [0.697,0.064], [0.697,-0.021], [0.697,-0.106], [0.697,-0.191], [0.697,-0.276], [0.697,-0.361], [0.697,-0.446], [0.697,-0.531], [0.697,-0.616], [0.697,-0.701], [0.697,-0.786], [0.782,-0.786], [1.122,-0.786],  ],\n  'v' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.468,-0.786], [0.429,-0.701], [0.391,-0.616], [0.353,-0.531], [0.315,-0.446], [0.276,-0.361], [0.238,-0.276], [0.200,-0.191], [0.162,-0.106], [0.123,-0.021], [0.085,0.064], [0.123,-0.021], [0.162,-0.106], [0.200,-0.191], [0.238,-0.276], [0.276,-0.361], [0.315,-0.446], [0.353,-0.531], [0.391,-0.616], [0.429,-0.701], [0.468,-0.786], [0.506,-0.701], [0.544,-0.616], [0.582,-0.531], [0.620,-0.446], [0.659,-0.361], [0.697,-0.276], [0.735,-0.191], [0.773,-0.106], [0.812,-0.021], [0.850,0.064], [0.812,-0.021], [0.773,-0.106], [0.735,-0.191], [0.697,-0.276], [0.659,-0.361], [0.620,-0.446], [0.582,-0.531], [0.544,-0.616], [0.506,-0.701], [0.468,-0.786], [0.552,-0.786], [0.663,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'w' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.315,-0.701], [0.289,-0.616], [0.264,-0.531], [0.238,-0.446], [0.213,-0.361], [0.187,-0.276], [0.162,-0.191], [0.136,-0.106], [0.111,-0.021], [0.085,0.064], [0.111,-0.021], [0.136,-0.106], [0.162,-0.191], [0.187,-0.276], [0.213,-0.361], [0.238,-0.446], [0.264,-0.531], [0.289,-0.616], [0.315,-0.701], [0.340,-0.786], [0.365,-0.701], [0.391,-0.616], [0.417,-0.531], [0.442,-0.446], [0.468,-0.361], [0.493,-0.276], [0.518,-0.191], [0.544,-0.106], [0.570,-0.021], [0.595,0.064], [0.620,-0.021], [0.646,-0.106], [0.671,-0.191], [0.697,-0.276], [0.723,-0.361], [0.748,-0.446], [0.773,-0.531], [0.799,-0.616], [0.825,-0.701], [0.850,-0.786], [0.875,-0.701], [0.901,-0.616], [0.926,-0.531], [0.952,-0.446], [0.978,-0.361], [1.003,-0.276], [1.028,-0.191], [1.054,-0.106], [1.079,-0.021], [1.105,0.064], [1.079,-0.021], [1.054,-0.106], [1.028,-0.191], [1.003,-0.276], [0.978,-0.361], [0.952,-0.446], [0.926,-0.531], [0.901,-0.616], [0.875,-0.701], [0.850,-0.786], [0.935,-0.786], [1.020,-0.786], [1.105,-0.786], [1.190,-0.786], [1.530,-0.786],  ],\n  'x' : [ [0.076,-0.701], [0.153,-0.616], [0.230,-0.531], [0.306,-0.446], [0.383,-0.361], [0.459,-0.276], [0.535,-0.191], [0.612,-0.106], [0.689,-0.021], [0.765,0.064], [0.689,-0.021], [0.612,-0.106], [0.535,-0.191], [0.459,-0.276], [0.383,-0.361], [0.306,-0.276], [0.230,-0.191], [0.153,-0.106], [0.076,-0.021], [0.000,0.064], [0.076,-0.021], [0.153,-0.106], [0.230,-0.191], [0.306,-0.276], [0.383,-0.361], [0.459,-0.446], [0.535,-0.531], [0.612,-0.616], [0.689,-0.701], [0.765,-0.786], [1.105,-0.786],  ],\n  'y' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.468,-0.786], [0.429,-0.701], [0.391,-0.616], [0.353,-0.531], [0.315,-0.446], [0.276,-0.361], [0.238,-0.276], [0.200,-0.191], [0.162,-0.106], [0.123,-0.021], [0.085,0.064], [0.123,-0.021], [0.162,-0.106], [0.200,-0.191], [0.238,-0.276], [0.276,-0.361], [0.315,-0.446], [0.353,-0.531], [0.391,-0.616], [0.429,-0.701], [0.468,-0.786], [0.506,-0.701], [0.544,-0.616], [0.582,-0.531], [0.620,-0.446], [0.659,-0.361], [0.697,-0.276], [0.735,-0.191], [0.773,-0.106], [0.812,-0.021], [0.850,0.064], [0.812,-0.021], [0.773,-0.106], [0.735,-0.191], [0.697,-0.276], [0.659,-0.361], [0.620,-0.446], [0.582,-0.531], [0.544,-0.616], [0.506,-0.701], [0.468,-0.786], [0.429,-0.871], [0.391,-0.956], [0.353,-1.041], [0.315,-1.126], [0.276,-1.211], [0.238,-1.296], [0.200,-1.381], [0.238,-1.296], [0.276,-1.211], [0.315,-1.126], [0.353,-1.041], [0.391,-0.956], [0.429,-0.871], [0.468,-0.786], [0.552,-0.786], [0.637,-0.786], [0.723,-0.786], [0.807,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'z' : [ [0.085,-0.786], [0.162,-0.701], [0.238,-0.616], [0.315,-0.531], [0.391,-0.446], [0.468,-0.361], [0.544,-0.276], [0.620,-0.191], [0.697,-0.106], [0.773,-0.021], [0.850,0.064], [0.765,0.064], [0.680,0.064], [0.595,0.064], [0.510,0.064], [0.425,0.064], [0.340,0.064], [0.255,0.064], [0.170,0.064], [0.085,0.064], [0.170,0.064], [0.255,0.064], [0.340,0.064], [0.425,0.064], [0.510,0.064], [0.595,0.064], [0.680,0.064], [0.765,0.064], [0.850,0.064], [0.773,-0.021], [0.697,-0.106], [0.620,-0.191], [0.544,-0.276], [0.468,-0.361], [0.391,-0.446], [0.315,-0.531], [0.238,-0.616], [0.162,-0.701], [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [0.765,-0.786], [0.850,-0.786], [0.935,-0.786], [1.275,-0.786],  ],\n  'a*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'b*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'c*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'd*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'e*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'f*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'g*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'h*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'i*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'j*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'k*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'l*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'm*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'n*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'o*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'p*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'q*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'r*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  's*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  't*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'u*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'v*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'w*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'x*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'y*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  'z*' : [ [0.085,-0.786], [0.170,-0.786], [0.510,-0.786],  ],\n  ',' : [ [0.085,-0.786], [0.170,-0.786], [0.187,-0.701], [0.221,-0.616], [0.289,-0.701], [0.306,-0.786], [0.323,-0.871], [0.323,-0.956], [0.289,-1.041], [0.255,-1.126], [0.187,-1.211], [0.085,-1.296], [0.187,-1.211], [0.255,-1.126], [0.289,-1.041], [0.323,-0.956], [0.323,-0.871], [0.306,-0.786], [0.289,-0.701], [0.221,-0.616], [0.289,-0.701], [0.306,-0.786], [0.425,-0.786], [0.765,-0.786],  ],\n  '?' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.340,-0.786], [0.425,-0.786], [0.425,-0.701], [0.425,-0.616], [0.425,-0.531], [0.425,-0.446], [0.425,-0.361], [0.425,-0.276], [0.425,-0.191], [0.425,-0.106], [0.425,-0.081], [0.452,-0.038], [0.476,0.004], [0.510,0.072], [0.544,0.149], [0.578,0.208], [0.612,0.276], [0.629,0.319], [0.646,0.361], [0.654,0.404], [0.660,0.472], [0.663,0.531], [0.654,0.574], [0.637,0.616], [0.620,0.659], [0.587,0.701], [0.561,0.735], [0.527,0.752], [0.485,0.773], [0.451,0.782], [0.417,0.786], [0.383,0.786], [0.340,0.783], [0.315,0.782], [0.272,0.769], [0.238,0.752], [0.204,0.731], [0.179,0.701], [0.150,0.659], [0.128,0.616], [0.102,0.574], [0.085,0.531], [0.102,0.574], [0.128,0.616], [0.150,0.659], [0.179,0.701], [0.204,0.731], [0.238,0.752], [0.272,0.769], [0.315,0.782], [0.340,0.783], [0.383,0.786], [0.417,0.786], [0.451,0.782], [0.485,0.773], [0.527,0.752], [0.561,0.735], [0.587,0.701], [0.620,0.659], [0.637,0.616], [0.654,0.574], [0.663,0.531], [0.660,0.472], [0.654,0.404], [0.646,0.361], [0.629,0.319], [0.612,0.276], [0.578,0.208], [0.544,0.149], [0.510,0.072], [0.476,0.004], [0.452,-0.038], [0.425,-0.081], [0.425,-0.106], [0.425,-0.149], [0.425,-0.191], [0.425,-0.234], [0.425,-0.276], [0.425,-0.319], [0.425,-0.361], [0.425,-0.404], [0.425,-0.446], [0.425,-0.489], [0.425,-0.531], [0.425,-0.574], [0.425,-0.616], [0.425,-0.659], [0.425,-0.701], [0.425,-0.744], [0.425,-0.786], [0.340,-0.786], [0.425,-0.786], [0.612,-0.786], [0.561,-0.659], [0.425,-0.574], [0.289,-0.659], [0.238,-0.786], [0.289,-0.914], [0.425,-0.999], [0.561,-0.914], [0.612,-0.786], [0.425,-0.786], [0.510,-0.786], [0.595,-0.786], [0.680,-0.786], [1.020,-0.786],  ],\n  '&' : [ [0.085,-0.786], [0.174,-0.778], [0.255,-0.774], [0.332,-0.774], [0.460,-0.761], [0.561,-0.748], [0.646,-0.684], [0.731,-0.574], [0.799,-0.506], [0.850,-0.440], [0.935,-0.319], [1.037,-0.191], [0.935,-0.319], [0.850,-0.440], [0.799,-0.506], [0.731,-0.574], [0.646,-0.684], [0.561,-0.748], [0.460,-0.761], [0.332,-0.774], [0.255,-0.774], [0.174,-0.778], [0.128,-0.718], [0.102,-0.676], [0.085,-0.599], [0.076,-0.497], [0.085,-0.327], [0.136,-0.191], [0.238,-0.064], [0.323,0.004], [0.374,0.047], [0.493,0.089], [0.587,0.154], [0.629,0.234], [0.672,0.335], [0.706,0.429], [0.715,0.520], [0.718,0.614], [0.701,0.690], [0.667,0.749], [0.620,0.777], [0.535,0.786], [0.468,0.786], [0.400,0.777], [0.329,0.760], [0.294,0.734], [0.270,0.681], [0.259,0.605], [0.252,0.548], [0.254,0.463], [0.262,0.404], [0.289,0.306], [0.332,0.174], [0.408,0.064], [0.476,-0.106], [0.544,-0.276], [0.595,-0.446], [0.646,-0.616], [0.697,-0.786], [0.765,-0.829], [0.850,-0.829], [0.926,-0.803], [1.021,-0.786], [1.120,-0.786], [1.460,-0.786],  ],\n  '$' : [ [0.102,-0.786], [0.221,-0.786], [0.306,-0.786], [0.391,-0.786], [0.476,-0.786], [0.476,-0.786], [0.476,-1.126], [0.476,-0.786], [0.476,-0.531], [0.476,-0.276], [0.476,-0.021], [0.476,0.234], [0.476,0.489], [0.476,0.829], [0.510,0.829], [0.510,0.489], [0.510,0.234], [0.510,-0.021], [0.510,-0.276], [0.510,-0.531], [0.510,-0.786], [0.510,-1.126], [0.510,-0.786], [0.476,-0.786], [0.476,-0.871], [0.595,-0.910], [0.671,-0.880], [0.731,-0.829], [0.782,-0.744], [0.807,-0.659], [0.799,-0.531], [0.756,-0.404], [0.663,-0.276], [0.476,-0.149], [0.289,-0.021], [0.196,0.106], [0.153,0.234], [0.145,0.361], [0.170,0.446], [0.221,0.531], [0.281,0.582], [0.357,0.612], [0.476,0.616], [0.595,0.612], [0.671,0.582], [0.731,0.531], [0.782,0.446], [0.825,0.361], [0.782,0.446], [0.731,0.531], [0.671,0.582], [0.595,0.612], [0.476,0.616], [0.357,0.612], [0.281,0.582], [0.221,0.531], [0.170,0.446], [0.145,0.361], [0.153,0.234], [0.196,0.106], [0.289,-0.021], [0.476,-0.149], [0.663,-0.276], [0.756,-0.404], [0.799,-0.531], [0.807,-0.659], [0.782,-0.744], [0.731,-0.829], [0.671,-0.880], [0.595,-0.910], [0.476,-0.914], [0.357,-0.910], [0.281,-0.880], [0.221,-0.829], [0.170,-0.744], [0.128,-0.659], [0.085,-0.565], [0.128,-0.659], [0.170,-0.744], [0.221,-0.829], [0.281,-0.880], [0.357,-0.910], [0.476,-0.914], [0.476,-0.786], [0.561,-0.786], [0.646,-0.786], [0.731,-0.786], [0.816,-0.786], [0.901,-0.786], [1.241,-0.786],  ],\n  '!' : [ [0.085,-0.786], [0.170,-0.786], [0.255,-0.786], [0.255,-0.531], [0.255,-0.276], [0.255,-0.021], [0.255,0.234], [0.255,0.489], [0.255,0.786], [0.255,0.489], [0.255,0.234], [0.255,-0.021], [0.255,-0.276], [0.255,-0.531], [0.255,-0.786], [0.442,-0.786], [0.391,-0.659], [0.255,-0.574], [0.119,-0.659], [0.068,-0.786], [0.119,-0.914], [0.255,-0.999], [0.391,-0.914], [0.442,-0.786], [0.255,-0.786], [0.425,-0.786], [0.510,-0.786], [0.850,-0.786],  ],\n}\n","import Victor from 'victor'\nimport { raysol_cursive } from './raysol_cursive'\nimport { raysol_sanserif } from './raysol_sanserif'\n\nconst fontSpacing = 1.5\n\n// Format for vertices: [x,y,b] where in a 0:7(8) by -1:7 grid defining x,y and b defines the line or curve.\n// Bulge directions could be represented by a 0:4 list starting at none, then NE and going clockwise.\n// 4  1\n// 3  2\nlet billsey = {\n  ' ': [ [8,-1,0] ],\n  'A': [ [0,0,0], [3.5,7,0], [7,0,0], [5,3.5,0], [2,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'B': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [0,3.5,0], [3.5,3.5,0], [7,1.75,1], [3.5,0,2], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'C': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,3.5,4], [3.5,0,3], [7,1.75,2], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'D': [ [0,0,0], [0,7,0], [3.5,7,0], [7,3.5,1], [3.5,0,2], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'E': [ [0,0,0], [0,7,0], [7,7,0], [0,7,0], [0,3.5,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [7,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'F': [ [0,0,0], [0,7,0], [7,7,0], [0,7,0], [0,3.5,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'G': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,3.5,4], [3.5,0,3], [7,1.75,2], [5.25,1.75,0], [7,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'H': [ [0,0,0], [0,7,0], [0,3.5,0], [7,3.5,0], [7,7,0], [7,0,0], [7,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'I': [ [3.5,-1,0], [3.5,7,0], [0,7,0], [7,7,0], [3.5,7,0], [3.5,0,0], [0,0,0], [7,0,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'J': [ [3.5,-1,0], [3.5,0,0], [0,1.75,3], [3.5,0,3], [7,1.75,2], [7,7,0], [7,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'K': [ [0,0,0], [0,7,0], [0,1.75,0], [3.5,3.5,0], [7,7,0], [3.5,3.5,0], [7,0,0], [3.5,3.5,0], [0,1.75,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'L': [ [0,0,0], [0,7,0], [0,0,0], [7,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'M': [ [0,0,0], [0,7,0], [3.5,0,0], [7,7,0], [7,0,0], [7,7,0], [3.5,0,0], [0,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'N': [ [0,0,0], [0,7,0], [7,0,0], [7,7,0], [7,0,0], [0,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'O': [ [3.5,-1,0], [3.5, 0, 0], [0, 3.5, 3], [3.5, 7, 4], [7.0, 3.5, 1], [3.5, 0, 2], [3.5, -1, 0], [8, -1, 0] ],\n  'P': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'Q': [ [3.5,-1,0], [3.5, 0, 0], [0, 3.5, 3], [3.5, 7, 4], [7.0, 3.5, 1], [3.5, 0, 2], [4.325,0.5,4], [6.075,0,0], [7,0.5,2], [6.075,0,2], [4.325,0.5,0], [3.5,0,4], [3.5, -1, 0], [8, -1, 0] ],\n  'R': [ [0,0,0], [0,7,0], [3.5,7,0], [7,5.25,1], [3.5,3.5,2], [7,0,0], [3.5,3.5,0], [0,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'S': [ [3.5,-1,0], [3.5,0,0], [0,1.75,3], [3.5,0,3], [7,1.75,2], [3.5,3.5,1], [0,5.25,3], [3.5,7,4], [7,5.25,1], [3.5,7,1], [0,5.25,4], [3.5,3.5,3], [7,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'T': [ [3.5,-1,0], [3.5,7,0], [0,7,0], [7,7,0], [3.5,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'U': [ [3.5,-1,0], [3.5,0,0], [0,3.5,3], [0,7,0], [0,3.5,0], [3.5,0,3], [7,3.5,2], [7,7,0], [7,3.5,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  'V': [ [3.5,-1,0], [3.5,0,0], [0,7,0], [3.5,0,0], [7,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  'W': [ [1.75,-1,0], [1.75,0,0], [0,7,0], [1.75,0,0], [3.5,7,0], [5.25,0,0], [7,7,0], [5.25,0,0], [3.5,7,0], [1.75,0,0], [1.75,-1,0], [8,-1,0] ],\n  'X': [ [0,0,0], [7,7,0], [3.5,3.5,0], [0,7,0], [7,0,0], [3.5,3.5,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  'Y': [ [3.5,-1,0], [3.5,3.5,0], [0,7,0], [3.5,3.5,0], [7,7,0], [3.5,3.5,0], [3.5,-1,0], [8,-1,0] ],\n  'Z': [ [0,0,0], [7,0,0], [0,0,0], [7,7,0], [0,7,0], [7,7,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  '0': [ [3.5,-1,0], [3.5,0,0], [6,3.5,2], [3.5,7,1], [1,3.5,4], [3.5,0,3], [3.5,-1,0], [8,-1,0] ],\n  '1': [ [0,-1,0], [0,0,0], [0,0,0], [7,0,0], [3.5,0,0], [3.5,7,0], [1.5,6,2], [3.5,7,2], [3.5,0,0], [0,0,0], [0,-1,0], [8,-1,0] ],\n  '2': [ [1,-1,0], [1,0,0], [6,5.25,0], [3.5,7,1], [1,5.25,4], [3.5,7,4], [6,5.25,1], [1,0,0], [6,0,0], [1,0,0], [1,-1,0], [8,-1,0] ],\n  '3': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [3.5,0,3], [6,1.75,2], [3.5,3.5,1], [6,5.25,2], [3.5,7,1], [1,5.25,4], [3.5,7,4], [6,5.25,1], [3.5,3.5,2], [6,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '4': [ [3.5,-1,0], [3.5,0,0], [3.5,7,0], [1,3.5,0], [6,3.5,0], [3.5,3.5,0], [3.5,-1,0], [8,-1,0] ],\n  '5': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [3.5,0,3], [6,1.75,2], [3.5,3.5,1],[1,3.5,0], [1,7,0], [6,7,0], [1,7,0], [1,3.5,0], [3.5,3.5,0], [6,1.75,1], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '6': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [5.25,7,4], [1,1.75,4], [3.5,0,3],[6,1.75,2], [3.5,3.5,1], [1,1.75,4], [3.5,0,3], [3.5,-1,0], [8,-1,0] ],\n  '7': [ [3.5,-1,0], [3.5,0,0], [6,7,0], [1,7,0], [6,7,0], [3.5,0,0], [3.5,-1,0], [8,-1,0] ],\n  '8': [ [3.5,-1,0], [3.5,0,0], [1,1.75,3], [6,5.25,0], [3.5,7,1], [1,5.25,4], [6,1.75,0], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '9': [ [3.5,-1,0], [3.5,0,0], [6,5.25,2], [3.5,7,1], [1,5.25,4], [3.5,3.5,3], [6,5.25,2], [3.5,0,2], [3.5,-1,0], [8,-1,0] ],\n  '$': [ [3.5,-1,0], [3.5,0.5,0], [0,2.00,3], [3.5,0.5,3], [7,2.00,2], [3.5,3.5,1], [0,5.00,3], [3.5,6.5,4], [7,5.00,1], [3.5,6.5,1], [3.5, 7, 0], [3.5, 0, 0], [3.5,-1,0], [8,-1,0] ],\n  '.': [ [3.5,-1,0], [3.5,0.5,0], [3,1,3], [3.5,1.5,4], [4,1,1], [3.5,0.5,2], [3.5,-1,0], [8,-1,0] ],\n}\n\n// This is a clever way to create a range from 0..32, and then compute an x,y for each of those\n// points on the unit circle from zero to pi/2.\nconst curve = [...Array(32).keys()].map((index) => {\n  let angle = (index+1) * Math.PI/2.0/32.0\n  return new Victor(Math.cos(angle), Math.sin(angle))\n})\n\nconst billseyConverter = (vertices) => {\n  let newVertices = []\n  let prevPoint = new Victor(0,0)\n  vertices.forEach( (vertex) => {\n    switch (vertex[2]) {\n    case 0:\n    default:\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 1: // NE\n      if (vertex[1] < prevPoint[1]) { // clockwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      } else { // ccwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 2: // SE\n      if (vertex[1] < prevPoint[1]) { // clockwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      } else { // ccwise\n        let width = Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 3: // SW\n      if (vertex[1] > prevPoint[1]) { // clockwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      } else { // ccwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = -Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    case 4: // NW\n      if (vertex[1] > prevPoint[1]) { // clockwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + vertex[0] / 8.0, cv.y * height + prevPoint[1] / 4.0)))\n      } else { // ccwise\n        let width = -Math.abs(vertex[0] - prevPoint[0]) / 8.0\n        let height = Math.abs(vertex[1] - prevPoint[1]) / 4.0\n        newVertices = newVertices.concat(curve.map( cv => new Victor(cv.x * width + prevPoint[0] / 8.0, cv.y * height + vertex[1] / 4.0)).reverse())\n      }\n      newVertices.push(new Victor(vertex[0] / 8.0, vertex[1] / 4.0))\n      break\n    }\n    prevPoint = vertex\n  })\n\n  const scale = 0.6;\n  const offset_y = -0.5\n  const scaledVertices = newVertices.map( vertex => {\n    return new Victor(scale * vertex.x, scale * vertex.y + offset_y)\n  })\n  return {\n    maxX: fontSpacing,\n    vertices: scaledVertices,\n  }\n}\n\nconst raysolConverter = (vertices) => {\n  let newVertices = []\n  vertices.forEach( (vertex) => {\n    newVertices.push(new Victor(vertex[0], vertex[1]))\n  })\n\n  return {\n    maxX: fontSpacing,\n    vertices: newVertices,\n  }\n}\n\nexport const MonospaceFont = (ch) => {\n  let upper = ch.toUpperCase()\n  if (billsey.hasOwnProperty(upper)) {\n    return billseyConverter(billsey[upper])\n  } else {\n    return billseyConverter(billsey[' '])\n  }\n}\n\nexport const CursiveFont = (ch) => {\n  if (raysol_cursive.hasOwnProperty(ch)) {\n    return raysolConverter(raysol_cursive[ch])\n  } else {\n    return raysolConverter(raysol_cursive[' '])\n  }\n}\n\nexport const SansSerifFont = (ch) => {\n  if (raysol_cursive.hasOwnProperty(ch)) {\n    return raysolConverter(raysol_sanserif[ch])\n  } else {\n    return raysolConverter(raysol_sanserif[' '])\n  }\n}\n","import Victor from 'victor'\nimport { roundP } from './util'\n\n// convert degrees to radians\nexport const degToRad = (deg) => {\n  return deg / 180.0 * Math.PI\n}\n\n// convert radians to degrees\nexport const radToDeg = (rad) => {\n  return rad * 180.0 / Math.PI\n}\n\nexport const distance = (v1, v2) => {\n  return Math.sqrt(Math.pow(v1.x - v2.x, 2.0) + Math.pow(v1.y - v2.y, 2.0))\n}\n\n// calculate the coterminal angle (0..2*PI) of a given angle\nexport const coterminal = (angle) => {\n  return angle - Math.floor(angle / (Math.PI * 2)) * Math.PI * 2\n}\n\nexport const angle = (point) => {\n  return Math.atan2(point.y, point.x)\n}\n\n// returns whether a point is on the segment defined by start and end\nexport const onSegment = (start, end, point) => {\n  return start.distance(point) + end.distance(point) - start.distance(end) < 0.001\n}\n\nexport const slope = (v1, v2) => {\n  let d = v2.x - v1.x\n  let n = v2.y - v1.y\n  return d === 0 ? undefined : n / d\n}\n\n// computes a bounding box from a set of points.\nexport const findBounds = (vertices) => {\n  let n = vertices.length\n\n  if (n === 0) {\n    return []\n  }\n\n  let loX = vertices[0].x\n  let hiX = vertices[0].x\n  let loY = vertices[0].y\n  let hiY = vertices[0].y\n\n  for(let i=1; i<n; ++i) {\n    let p = vertices[i]\n    loX = Math.min(loX, p.x)\n    hiX = Math.max(hiX, p.x)\n    loY = Math.min(loY, p.y)\n    hiY = Math.max(hiY, p.y)\n  }\n\n  return [new Victor(loX, loY), new Victor(hiX, hiY)]\n}\n\n// resizes each vertex in a list to the specified dimensions. Will not stretch the shape.\nexport const resizeVertices = (vertices, sizeX, sizeY) => {\n  let size = Math.max(sizeX, sizeY)\n  let bounds = findBounds(vertices)\n  let curveSize = Math.max(bounds[1].y - bounds[0].y, bounds[1].x - bounds[0].x)\n  let scale = size/curveSize\n\n  let scaledBounds = [bounds[0].multiply({x: scale, y: scale}), bounds[1].multiply({x: scale, y: scale})]\n  let deltaX = scaledBounds[1].x - (scaledBounds[1].x - scaledBounds[0].x)/2\n  let deltaY = scaledBounds[1].y - (scaledBounds[1].y - scaledBounds[0].y)/2\n\n  return vertices.map(vertex => vertex.clone().multiply({x: scale, y: scale}).add({x: -deltaX, y: -deltaY}))\n}\n\n// returns a vertex with x and y rounded to p number of digits\nexport const vertexRoundP = (v, p) => {\n  return new Victor(roundP(v.x, p), roundP(v.y, p))\n}\n\n// Transform functions\nexport const rotate = (vertex, angleDeg) => {\n  const angle = Math.PI / 180.0 * angleDeg\n  return new Victor(\n   vertex.x * Math.cos(angle) - vertex.y * Math.sin(angle),\n   vertex.x * Math.sin(angle) + vertex.y * Math.cos(angle)\n  )\n}\n\nexport const scale = (vertex, scalePerc) => {\n  const scale = scalePerc / 100.0\n  return new Victor(\n    vertex.x * scale,\n    vertex.y * scale\n  )\n}\n\nexport const offset = (vertex, offsetX, offsetY) => {\n  return new Victor(\n    vertex.x + offsetX,\n    vertex.y + offsetY\n  )\n}\n\n// given a set of vertices and a slider value, returns the start and end vertices\n// representing a preview slider moving through them.\nexport const getSliderBounds = (vertices, sliderValue) => {\n  const slideSize = 10.0\n  const beginFraction = sliderValue / 100.0\n  const endFraction = (slideSize + sliderValue) / 100.0\n  let start = Math.round(vertices.length * beginFraction)\n  let end = Math.round(vertices.length * endFraction) - 1\n\n  if (start === end) {\n    if (start > 1) start = start - 2\n  } else if (start === end - 1) {\n    if (start > 0) start = start - 1\n  }\n\n  if (end >= vertices.length) {\n    end = vertices.length - 1\n  }\n\n  return { start: start, end: end }\n}\n","import { vertexRoundP } from '../../common/geometry'\n\n// base machine class\nexport default class Machine {\n  polish() {\n    this.enforceLimits()\n      .cleanVertices()\n      .limitPrecision()\n      .optimizePerimeter()\n\n    if (this.layerInfo.start) this.addStartPoint()\n    if (this.layerInfo.end) this.addEndPoint()\n    \n    return this\n  }\n\n  // clean the list of vertices and remove duplicate points\n  cleanVertices() {\n    let previous = null\n    let cleanVertices = []\n\n    for (let i=0; i<this.vertices.length; i++) {\n      if (previous) {\n        let start = this.vertices[i]\n        let end = previous\n\n        if (start.distance(end) > 0.001) {\n          cleanVertices.push(this.nearestVertex(this.vertices[i]))\n        }\n      } else {\n        cleanVertices.push(this.nearestVertex(this.vertices[i]))\n      }\n      previous = this.vertices[i]\n    }\n\n    this.vertices = cleanVertices\n    return this\n  }\n\n  // walk the given vertices, clipping as needed along the circle perimeter\n  enforceLimits() {\n    let cleanVertices = []\n    let previous = null\n\n    for (let next=0; next<this.vertices.length; next++) {\n      const vertex = this.vertices[next]\n\n      if (previous) {\n        const line = this.clipLine(previous, vertex)\n\n        for (let pt=0; pt<line.length; pt++) {\n          if (line[pt] !== previous) {\n            cleanVertices.push(line[pt])\n          }\n        }\n      } else {\n        cleanVertices.push(this.nearestVertex(vertex))\n      }\n\n      previous = vertex\n    }\n\n    this.vertices = cleanVertices\n    return this\n  }\n\n  // strip out unnecessary/redundant perimeter moves\n  optimizePerimeter() {\n    let segments = this.stripExtraPerimeterVertices()\n\n    if (this.settings.minimizeMoves) {\n      segments = this.minimizePerimeterMoves(segments)\n    }\n\n    // connect the segments together\n    let connectedVertices = []\n    for (let j=0; j<segments.length; j++) {\n      const current = segments[j]\n\n      if (j > 0) {\n        // connect the two segments along the circle perimeter\n        const prev = segments[j-1]\n        connectedVertices.push(this.tracePerimeter(prev[prev.length-1], current[0]))\n      }\n      connectedVertices.push(current)\n    }\n\n    this.vertices = connectedVertices.flat()\n    return this\n  }\n\n  // remove all non-essential perimeter vertices. returns a list of segments\n  // involving non-perimeter paths\n  stripExtraPerimeterVertices() {\n    let segments = []\n    let segment = []\n    let perimeter = null\n\n    for (let i=0; i<this.vertices.length; i++) {\n      const curr = this.vertices[i]\n      const prev = this.vertices[i-1]\n\n      if (!prev || !this.onPerimeter(curr, prev)) {\n        if (perimeter) { segment.push(perimeter) }\n        segment.push(curr)\n        perimeter = null\n      } else {\n        if (!perimeter) {\n          segments.push(segment)\n          segment = []\n        }\n        perimeter = curr\n      }\n    }\n\n    if (segment.length > 0) {\n      segments.push(segment)\n    }\n\n    return segments\n  }\n\n  // primitive O(n^2) algorithm that orders segments to try to minimize the distance traveled\n  minimizePerimeterMoves(segments) {\n    let walked = []\n    let current = segments.shift()\n    let currentIndex\n    let lastSegment\n\n    if (segments.length > 0) {\n      // reserve the last segment to ensure we don't draw an invalid line connecting\n      // to it\n      lastSegment = segments.pop()\n    }\n\n    walked.push(current)\n    while (segments.length > 0) {\n      // find segment that is the shortest distance from our current one\n      let minDist = Number.MAX_SAFE_INTEGER\n      let prev = current\n\n      /* eslint-disable no-loop-func */\n      segments.forEach((segment, index) => {\n        const dist = Math.min(\n          this.perimeterDistance(current[current.length-1], segment[0]),\n          this.perimeterDistance(current[current.length-1], segment[segment.length-1])\n        )\n\n        if (dist < minDist) {\n          currentIndex = index\n          minDist = dist\n        }\n      })\n      /* eslint-enable no-loop-func */\n\n      // reverse if needed to connect\n      current = segments.splice(currentIndex, 1)[0]\n      if (this.perimeterDistance(prev[prev.length-1], current[0]) > this.perimeterDistance(prev[prev.length-1], current[current.length-1])) {\n        current = current.reverse()\n      }\n      walked.push(current)\n    }\n\n    if (lastSegment) {\n      walked.push(lastSegment)\n    }\n\n    return walked\n  }\n\n  // round each vertex to the nearest .001. This eliminates floating point\n  // math errors and allows us to do accurate equality comparisons.\n  limitPrecision() {\n    this.vertices = this.vertices.map(vertex => vertexRoundP(vertex, 3))\n    return this\n  }\n}\n","import { angle, onSegment } from '../../common/geometry'\nimport Machine from './Machine'\nimport Victor from 'victor'\n\nexport const traceCircle = (startAngle, endAngle, size) => {\n  let resolution = (Math.PI*2.0) / 128.0 // 128 segments per circle. Enough?\n  let deltaAngle = ((endAngle - startAngle) + 2.0 * Math.PI) % (2.0 * Math.PI)\n\n  if (deltaAngle > Math.PI) {\n    deltaAngle -= 2.0 * Math.PI\n  }\n  if (deltaAngle < 0.0) {\n    resolution *= -1.0\n  }\n\n  let tracePoints = []\n  for (let step = 0; step < (deltaAngle/resolution) ; step++) {\n    tracePoints.push(Victor(size * Math.cos(resolution * step + startAngle),\n                            size * Math.sin(resolution * step + startAngle)))\n  }\n  return tracePoints\n}\n\nexport default class PolarMachine extends Machine {\n  constructor(vertices, settings, layerInfo) {\n    super()\n    this.vertices = vertices\n    this.settings = settings\n    this.layerInfo = layerInfo\n  }\n\n  addStartPoint() {\n    const maxRadius = this.settings.maxRadius\n\n    if (this.settings.polarStartPoint !== 'none') {\n      if (this.settings.polarStartPoint === 'center') {\n        this.vertices.unshift(new Victor(0.0, 0.0))\n      } else {\n        const first = this.vertices[0]\n        const scale = maxRadius / first.magnitude()\n        const startPoint = Victor.fromObject(first).multiply(new Victor(scale, scale))\n        this.vertices.unshift(new Victor(startPoint.x, startPoint.y))\n      }\n    }\n  }\n\n  addEndPoint() {\n    const maxRadius = this.settings.maxRadius\n\n    if (this.settings.polarEndPoint !== 'none') {\n      if (this.settings.polarEndPoint === 'center') {\n        this.vertices.push(new Victor(0.0, 0.0))\n      } else {\n        const last = this.vertices[this.vertices.length-1]\n        const scale = maxRadius / last.magnitude()\n        const endPoint =  Victor.fromObject(last).multiply(new Victor(scale, scale))\n        this.vertices.push(new Victor(endPoint.x, endPoint.y))\n      }\n    }\n  }\n\n  // Finds the nearest vertex that is in the bounds of the circle. This will change the\n  // shape. i.e. this doesn't care about the line segment, only about the point.\n  nearestVertex(vertex) {\n    const size = this.settings.maxRadius\n\n    if ( vertex.length() > size) {\n      const scale = size / vertex.length()\n      return vertex.multiply(new Victor(scale, scale))\n    } else {\n      return vertex\n    }\n  }\n\n  // Returns the distance along the perimeter between two points.\n  perimeterDistance(v1, v2) {\n    const startAngle = angle(v1)\n    const endAngle = angle(v2)\n    let deltaAngle = Math.abs(endAngle - startAngle)\n\n    if (deltaAngle > Math.PI) {\n      deltaAngle -= 2.0 * Math.PI\n    }\n\n    return Math.abs(deltaAngle) * this.settings.maxRadius\n  }\n\n  // Returns points along the circle from the start to the end, tracing a circle of radius size.\n  tracePerimeter(start, end) {\n    return traceCircle(start.angle(), end.angle(), this.settings.maxRadius)\n  }\n\n  // Returns whether a given path lies on the perimeter of the circle.\n  onPerimeter(v1, v2, delta=1) {\n    let rm = Math.pow(this.settings.maxRadius, 2)\n    let r1 = Math.pow(v1.x, 2) + Math.pow(v1.y, 2)\n    let r2 = Math.pow(v2.x, 2) + Math.pow(v2.y, 2)\n    let d = this.perimeterDistance(v1, v2)\n\n    // Delta is purposefully large to accommodate the squaring of the compared values.\n    // Setting delta too small will result in perimeter moves being miscategorized.\n    // d is used to guard against the case where there is a straight line connecting two\n    // perimeter points directly. In this case, we want to register that as a non-perimeter\n    // move, or it will be incorrectly optimized out of the final vertices. The 3/50\n    // ratio could likely be refined further (relative to maxRadius), but it seems to produce\n    // accurate results at various machine sizes.\n    return Math.abs(r1 - rm) < delta && Math.abs(r2 - rm) < delta && d < 3*this.settings.maxRadius/50\n  }\n\n  // The guts of logic for this limits enforcer. It will take a single line (defined by\n  // start and end) and if the line goes out of bounds, returns the vertices around the\n  // outside edge to follow around without messing up the shape of the vertices.\n  clipLine(start, end) {\n    // Cases:\n    // 1 - Entire line is inside\n    //     return start, end\n    // 2 - Entire line is outside\n    //     trace from start to end\n    // 3 - only start is inside\n    //     find the intersection\n    //     include start\n    //     include intersection\n    //     trace from intersection to closest to end point\n    // 4 - only end is inside\n    //     do reverse of 3\n    // 4 - Neither end is inside, but there is some line segment inside\n    //     find both intersections\n    //     trace from start to first intersction\n    //     trace from second intersection to end\n    const size = this.settings.maxRadius\n    const radStart = start.magnitude()\n    const radEnd = end.magnitude()\n\n    if (radStart <= size && radEnd <= size) {\n      // The whole segment is inside\n      return [start, end]\n    }\n\n    // Check for the odd case of coincident points\n    if (start.distance(end) < 0.00001) {\n       return [this.nearestVertex(start)]\n    }\n\n    let intersections = this.getIntersections(start, end)\n    if (!intersections.intersection) {\n      // The whole line is outside, just trace.\n      return this.tracePerimeter(start, end)\n    }\n\n    // if neither point is on the segment, then it should just be a trace\n    if (!intersections.points[0].on && !intersections.points[1].on) {\n      return this.tracePerimeter(start, end)\n    }\n\n    // If both points are outside, but there's an intersection\n    if (radStart > size + 1.0e-9 && radEnd > size + 1.0e-9) {\n      let point = intersections.points[0].point\n      let otherPoint = intersections.points[1].point\n\n      return [\n        ...this.tracePerimeter(start, point),\n        point,\n        ...this.tracePerimeter(otherPoint, end)\n      ]\n    }\n\n    // If we're here, then one point is still in the circle.\n    if (radStart <= size) {\n      let point1 = (intersections.points[0].on && Math.abs(intersections.points[0].point - start) > 0.0001) ? intersections.points[0].point : intersections.points[1].point\n\n      return [\n        start,\n        ...this.tracePerimeter(point1, end),\n        end\n      ]\n    } else {\n      const point1 = intersections.points[0].on ? intersections.points[0].point : intersections.points[1].point\n\n      return [\n        ...this.tracePerimeter(start, point1),\n        point1,\n        end\n      ]\n    }\n  }\n\n  getIntersections(start, end) {\n    const size = this.settings.maxRadius\n    let direction = end.clone().subtract(start).clone().normalize()\n    let t = direction.x * -1.0 * start.x + direction.y * -1.0 * start.y\n    let e = direction.clone().multiply(Victor(t,t)).add(start)\n    let distanceToLine = e.magnitude()\n\n    if (distanceToLine >= size) {\n      return {\n        intersection: false,\n        points: [],\n      }\n    }\n\n    let dt = Math.sqrt(size*size - distanceToLine*distanceToLine)\n    let point1 = direction.clone().multiply(Victor(t - dt,t - dt)).add(start)\n    let point2 = direction.clone().multiply(Victor(t + dt,t + dt)).add(start)\n\n    return {\n      intersection: true,\n      points: [\n        {\n          point: point1,\n          on: onSegment(start, end, point1),\n        },\n        {\n          point: point2,\n          on: onSegment(start, end, point2),\n        }\n      ]}\n  }\n}\n","import { CursiveFont, SansSerifFont, MonospaceFont } from './Fonts'\nimport Victor from 'victor'\nimport Shape, { shapeOptions } from '../Shape'\nimport { traceCircle } from '../../features/machine/PolarMachine'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    inputText: {\n      title: 'Text',\n      type: 'textarea',\n    },\n    inputFont: {\n      title: 'Font',\n      type: 'dropdown',\n      choices: ['Cursive', 'Sans Serif', 'Monospace'],\n    },\n    rotateDir: {\n      title: 'Rotate',\n      type: 'dropdown',\n      choices: ['Top', 'Center', 'Bottom'],\n    },\n  }\n}\n\nfunction getMaxX(points) {\n  // Measure the width of the line\n  let maxX = 0\n  points.forEach( (point) => {\n    if (point.x > maxX) {\n      maxX = point.x\n    }\n  })\n  return maxX\n}\n\nexport default class InputText extends Shape {\n  constructor() {\n    super('Text')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'inputText',\n        inputText: 'Sandify',\n        inputFont: 'Cursive',\n        rotateDir: 'Center',\n        repeatEnabled: false\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let prevLetter = ''\n    let x = 0.0\n    let lines = []\n    let textPoints = []\n\n    for (let chi = 0; chi < state.shape.inputText.length; chi++) {\n      var nextLetter = state.shape.inputText[chi]\n      if (prevLetter === 'b' || prevLetter === 'v' || prevLetter === 'o' || prevLetter === 'w') {\n        // Save this letter before we possibly add in a '*'\n        prevLetter = nextLetter\n        if (nextLetter.search('[a-z]+') !== -1 && state.shape.inputFont === 'Cursive')\n        {\n          nextLetter = nextLetter + '*'\n        }\n      }\n      else {\n        prevLetter = nextLetter\n      }\n\n      if (nextLetter === '\\n') {\n        // New line\n        lines.push(points)\n        points = []\n        x = 0.0\n        continue\n      }\n\n      var shape = undefined\n      if (state.shape.inputFont === 'Cursive') {\n        shape = CursiveFont(nextLetter)\n      } else if (state.shape.inputFont === 'Sans Serif') {\n        shape = SansSerifFont(nextLetter)\n      } else if (state.shape.inputFont === 'Monospace') {\n        shape = MonospaceFont(nextLetter)\n      } else {\n        // Internal error, but I'm going to just recover\n        shape = CursiveFont(nextLetter)\n      }\n\n      // TODO add in the \"Kern\" here.\n      for (let vi = 0; vi < shape.vertices.length; vi++) {\n        points.push(new Victor(shape.vertices[vi].x + x, shape.vertices[vi].y))\n      }\n      x += shape.vertices[shape.vertices.length-1].x\n    }\n    // Save the last line we were working on.\n    lines.push(points)\n\n    // The height of a row of text, including the space above.\n    const maxY = 2.4\n\n    if (state.shape.rotateDir === 'Center') {\n      // Starting Y offset\n      let y = (lines.length - 1) * maxY / 2.0\n\n      // Capture some wrap around points, to connect the lines.\n      let connectorPoints = []\n      lines.forEach( (points) => {\n        let maxX = getMaxX(points)\n        let widthOffset = maxX / 2.0\n\n        // Add in the connector points (if we have any)\n        textPoints = [...textPoints, ...connectorPoints]\n        connectorPoints = []\n\n        // offset the line's vertices\n        textPoints = [...textPoints, ...points.map( (point) => {\n          return new Victor(point.x - widthOffset, point.y + y)\n        })]\n\n        // Add in some points way off, so to wrap around for this line.\n        connectorPoints.push(new Victor(1e9, y))\n        connectorPoints.push(new Victor(1e9, -1e9))\n        connectorPoints.push(new Victor(-1e9, -1e9))\n        y -= maxY\n        connectorPoints.push(new Victor(-1e9, y))\n      })\n    } else {\n      // This variable controls \"Top\" vs. \"Bottom\"\n      let direction = 1.0\n      if (state.shape.rotateDir === 'Bottom') {\n        direction = -1.0\n        lines.reverse()\n      }\n\n      // Some constants to rotate the letters.\n      //\n      // The \"lines\" object contains lines of words, in vertices.\n      // The vertices are in X, Y, the X starts at 0, the Y goes between -something and +something.\n      // The middle of the word is about at Y=0.\n      //\n      // We want the words to follow around a circle. We want them to stay about the same size, as\n      // if they were plotted in a line. We want them to be centered.\n      //\n      // r is the radius, theta is the angle.\n      // rPerY is the multiplier to get from Y to r.\n      // thetaPerX is the multiplier to get from X to theta.\n      //\n      // The Max is based on how far away from the center we start.\n      //\n      // Offset is because we want to start the row far away from the center.\n      //\n      // thetaCenter is how far off from the theta=0 we start the words.\n      //\n      const maxRPerY = 0.8\n      let rPerY = direction * maxRPerY\n      let thetaCenter = direction * Math.PI / 2.0\n      const maxROffset = maxY * 2.0\n      let rOffset = maxROffset\n      const rOffsetPerLine = rOffset / lines.length\n      let thetaPerX = -rPerY / rOffset\n\n      // This captures the previous angle, so we can track around for the next line.\n      let lastTheta\n\n      lines.forEach( (points) => {\n\n        let maxX = getMaxX(points)\n        // This widthOffset is in X.\n        let widthOffset = maxX / 2.0\n\n        // Scale the size of the words to fit within one circle.\n        if (Math.PI * 2.0 < Math.abs(thetaPerX * maxX)) {\n          // We are going to roll all the way around\n          thetaPerX = direction * -Math.PI * 2.0 / maxX\n          rPerY = -thetaPerX * rOffset\n        }\n\n        // Add in the connector points (if we have any)\n        if (lastTheta) {\n          let endTheta = thetaCenter + thetaPerX * -widthOffset\n\n          // Get the Y value of the first point in the next (this) line.\n          let r = rOffset + rPerY * 0.0\n          if (points.length > 0) {\n            r = rOffset + rPerY * points[0].y\n          }\n\n          textPoints = [...textPoints, ...traceCircle(lastTheta, endTheta, r)]\n        }\n\n        // Transform the points and add them to textPoints.\n        textPoints = [...textPoints, ...points.map( (point) => {\n          const r = rOffset + rPerY * point.y\n          lastTheta = thetaCenter + thetaPerX * (point.x - widthOffset)\n          return new Victor(r * Math.cos(lastTheta), r * Math.sin(lastTheta))\n        })]\n\n        // Set up for the next line.\n        rOffset -= rOffsetPerLine\n        rPerY = direction * Math.sqrt(maxRPerY * rOffset / maxROffset)\n        thetaPerX = -rPerY / rOffset\n      })\n    }\n\n    const scale = 2.5 // to normalize starting size\n    textPoints.forEach(point => point.multiply({x: scale, y: scale }))\n    return textPoints\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport { vertexRoundP } from './geometry'\n\nexport const onSubtypeChange = (subtype, changes, attrs) => {\n  // if we switch back with too many iterations, the code\n  // will crash from recursion, so we'll set a ceiling where needed\n  if (subtype) {\n    let max = subtype.maxIterations\n    let min = subtype.minIterations\n    let iterations = attrs.iterations || 1\n\n    if (max) {\n      iterations = Math.min(iterations, max)\n    }\n\n    if (min) {\n      iterations = Math.max(iterations, min)\n    }\n\n    changes.iterations = iterations\n  }\n\n  return changes\n}\n\nexport const onMinIterations = (subtype, state) => {\n  return (subtype && subtype.minIterations) || 1\n}\n\nexport const onMaxIterations = (subtype, state) => {\n  return (subtype && subtype.maxIterations) || 7\n}\n\n// Implements a Lindenmayer system (L-system). See https://en.wikipedia.org/wiki/L-system.\n// Adapted from http://bl.ocks.org/nitaku/ce638f8bd5e70cb809e1\nexport const lsystem = (config) => {\n  let input = config.axiom\n  let output\n\n  for (let i=0; i<config.iterations; i++) {\n    output = ''\n\n    for (let j=0; j<input.length; j++) {\n      let char = input[j]\n\n      if (config.rules[char] !== undefined) {\n        output += config.rules[char]\n      } else {\n        output += char\n      }\n    }\n    input = output\n  }\n  return output\n}\n\nconst lsystemDraw = (vertex, angle, config) => {\n  return vertexRoundP(vertex.clone().add({x: -config.side * Math.cos(angle), y: -config.side * Math.sin(angle)}), 2)\n}\n\nexport const lsystemPath = (instructions, config) => {\n  let vertex = new Victor(0, 0)\n  let currVertices = [vertex]\n  let angle = -Math.PI/2\n\n  if (config.startingAngle) {\n    angle = typeof config.startingAngle === 'function' ?\n      config.startingAngle(config.iterations) :\n      config.startingAngle\n  }\n\n  // This will store the previous return paths we are not working on.\n  let returnPaths = []\n  for (let i=0; i<instructions.length; i++) {\n    let char = instructions[i]\n\n    if (char === '+') {\n      angle += config.angle\n      if (returnPaths.length) {\n        returnPaths.slice(-1)[0].push('-')\n      }\n    } else if (char === '-') {\n      angle -= config.angle\n      if (returnPaths.length) {\n        returnPaths.slice(-1)[0].push('+')\n      }\n    } else if (config.draw.includes(char)) {\n      vertex = lsystemDraw(vertex, angle, config)\n      currVertices.push(vertex)\n      if (returnPaths.length) {\n        returnPaths.slice(-1)[0].push('B')\n      }\n    } else if (char === '[') {\n      // open a branch\n      returnPaths.push([])\n\n    } else if (char === ']') {\n      // Return to the beginning of the branch\n      let returnPath = returnPaths.pop().reverse()\n\n      for (let j=0; j<returnPath.length; j++) {\n        let revChar = returnPath[j]\n\n        if (revChar === '+') {\n          angle += config.angle\n        } else if (revChar === '-') {\n          angle -= config.angle\n        } else if (revChar === 'B') {\n          // Reverse Draw\n          vertex = lsystemDraw(vertex, angle + Math.PI, config)\n          currVertices.push(vertex)\n        }\n      }\n    }\n  }\n\n  return currVertices\n}\n","// L-system instructions for space filling curves\nexport const subtypes = {\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  '32-segment': {\n    axiom: 'F+F+F+F',\n    draw: ['F'],\n    rules:  {\n      F: '-F+F-F-F+F+FF-F+F+FF+F-F-FF+FF-FF+F+F-FF-F-F+FF-F-F+F+F-F+'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 2\n  },\n  // http://www.kevs3d.co.uk/dev/lsystems/\n  'Cog Triangle': {\n    axiom: 'W----W----W',\n    draw: ['F'],\n    rules:  {\n      W: '+++X--F--ZFX+',\n      X: '---W++F++YFW-',\n      Y: '+ZFX--F--Z+++',\n      Z: '-YFW++F++Y---'\n    },\n    angle: Math.PI/6,\n    minIterations: 1,\n    maxIterations: 8\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Fractal Tree': {\n    axiom: 'F',\n    draw: ['F'],\n    rules:  {\n      F: 'F[+FF][-FF]F[-F][+F]F',\n    },\n    angle: Math.PI/5,\n    maxIterations: 5\n  },\n  // https://www.vexlio.com/blog/drawing-simple-organics-with-l-systems/\n  'Fractal Tree 2': {\n    axiom: 'F',\n    draw: ['F'],\n    rules:  {\n      F: 'F[-F][+F]',\n    },\n    angle: 10*Math.PI/72,\n    maxIterations: 9\n  },\n  // https://www.vexlio.com/blog/drawing-simple-organics-with-l-systems/\n  'Fractal Tree 3': {\n    axiom: 'X',\n    draw: ['F'],\n    rules:  {\n      F: 'FF',\n      X: 'F+[-F-XF-X][+FF][--XF[+X]][++F-X]'\n    },\n    angle: Math.PI/8,\n    maxIterations: 6\n  },\n  // https://www.vexlio.com/blog/drawing-simple-organics-with-l-systems/\n  'Fractal Tree 4': {\n    axiom: 'X',\n    draw: ['F'],\n    rules:  {\n      F: 'FX[FX[+XF]]',\n      X: 'FF[+XZ++X-F[+ZX]][-X++F-X]',\n      Z: '[+F-X-F][++ZX]'\n    },\n    angle: Math.PI/8,\n    maxIterations: 5\n  },\n  // http://algorithmicbotany.org/papers/abop/abop-ch1.pdf\n  'Fractal Tree 5': {\n    axiom: 'X',\n    draw: ['F'],\n    rules:  {\n      X: 'F[+X]F[-X]+X',\n      F: 'FF'\n    },\n    angle: Math.PI/9,\n    maxIterations: 8\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Gosper (flowsnake)': {\n    axiom: 'A',\n    draw: ['A', 'B'],\n    rules:  {\n      A: 'A-B--B+A++AA+B-',\n      B: '+A-BB--B-A++A+B'\n    },\n    angle: Math.PI / 3,\n    maxIterations: 5\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Ice': {\n    axiom: 'F+F+F+F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF+F++F+F'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 6\n  },\n  // https://fronkonstin.com/2017/06/26/a-shiny-app-to-draw-curves-based-on-l-systems/\n  'Koch Cube 1': {\n    axiom: 'F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF-F-F-F-FF',\n    },\n    maxIterations: 5\n  },\n  // http://algorithmicbotany.org/papers/abop/abop-ch1.pdf\n  'Koch Cube 2': {\n    axiom: 'F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF-F+F-F-FF',\n    },\n    maxIterations: 5\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Koch Curve': {\n    axiom: 'F',\n    draw: ['F'],\n    rules:  {\n      F: 'F+F--F+F'\n    },\n    angle: 4*Math.PI/9,\n    startingAngle: Math.PI,\n    maxIterations: 7\n  },\n  // https://fronkonstin.com/2017/06/26/a-shiny-app-to-draw-curves-based-on-l-systems/\n  'Koch Flower': {\n    axiom: 'F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'FF-F-F-F-F-F+F',\n    },\n    maxIterations: 4\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Koch Island': {\n    axiom: 'F+F+F+F',\n    draw: ['F'],\n    rules:  {\n      F: 'F+F-F-FF+F+F-F'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 4\n  },\n  'Koch Snowflake': {\n    axiom: 'F--F--F--',\n    draw: ['F'],\n    rules:  {\n      F: 'F+F--F+F'\n    },\n    angle: Math.PI / 3,\n    startingAngle: -Math.PI / 3,\n    maxIterations: 5\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'McWorter\\'s Pentadendrite': {\n    axiom: 'F-F-F-F-F',\n    draw: ['F'],\n    rules:  {\n      F: 'F-F-F++F+F-F',\n    },\n    angle: 2*Math.PI/5,\n    maxIterations: 5\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Penrose Tile': {\n     axiom: '[7]++[7]++[7]++[7]++[7]',\n     draw: ['6', '7', '8', '9'],\n    rules: {\n      6: '8++9----7[-8----6]++',\n      7: '+8--9[---6--7]+',\n      8: '-6++7[+++8++9]-',\n      9: '--8++++6[+9++++7]--7'\n    },\n    angle: Math.PI/5,\n    maxIterations: 6\n  },\n  'Plusses': {\n    axiom: 'XYXYXYX+XYXYXYX+XYXYXYX+XYXYXYX',\n    draw: ['F'],\n    rules:  {\n      X: 'FX+FX+FXFY-FY-',\n      Y: '+FX+FXFY-FY-FY'\n    },\n    maxIterations: 4\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Red Dragon': {\n    axiom: 'FA',\n    draw: ['F'],\n    rules:  {\n      A: 'A+BF+',\n      B: '-FA-B'\n    },\n    minIterations: 9,\n    maxIterations: 15,\n    startingAngle: Math.PI\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Sierpinski Triangle (arrowhead)': {\n    axiom: 'X',\n    draw: ['X', 'Y'],\n    rules:  {\n      X: 'Y+X+Y',\n      Y: 'X-Y-X'\n    },\n    angle: Math.PI / 3,\n    startingAngle: (i) => {\n      if (i % 2 === 0) {\n        return 0\n      } else {\n        return -Math.PI/3\n      }\n    },\n    maxIterations: 8\n  },\n}\n","import Shape, { shapeOptions } from '../Shape'\nimport {\n  lsystem,\n  lsystemPath,\n  onSubtypeChange,\n  onMinIterations,\n  onMaxIterations\n} from '../../common/lindenmayer'\nimport { subtypes } from './subtypes'\nimport { resizeVertices } from '../../common/geometry'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    subtype: {\n      title: 'Type',\n      type: 'dropdown',\n      choices: Object.keys(subtypes),\n      onChange: (changes, attrs) => {\n        return onSubtypeChange(subtypes[changes.subtype], changes, attrs)\n      }\n    },\n    iterations: {\n      title: 'Iterations',\n      min: (state) => {\n        return onMinIterations(subtypes[state.subtype], state)\n      },\n      max: (state) => {\n        return onMaxIterations(subtypes[state.subtype], state)\n      }\n    },\n  }\n}\n\nexport default class LSystem extends Shape {\n  constructor() {\n    super('Fractal Line Writer')\n    this.link = 'https://en.wikipedia.org/wiki/L-system'\n    this.linkText = 'L-systems on Wikipedia'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'lsystem',\n        iterations: 3,\n        subtype: 'McWorter\\'s Pentadendrite',\n        repeatEnabled: false\n      }\n    }\n  }\n\n  getVertices(state) {\n    const shape = state.shape\n    const iterations = shape.iterations || 1\n\n    // generate our vertices using a set of l-system rules\n    let config = subtypes[shape.subtype]\n    config.iterations = iterations\n    config.side = 5\n\n    if (config.angle === undefined) { config.angle = Math.PI/2 }\n\n    let curve = lsystemPath(lsystem(config), config)\n    const scale = 18.0 // to normalize starting size\n    return resizeVertices(curve, scale, scale)\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape from './Shape'\n\nexport default class Point extends Shape {\n  constructor() {\n    super('Point')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'point',\n        canTransform: false,\n        shouldCache: false,\n        canChangeSize: false,\n        repeatEnabled: false,\n      }\n    }\n  }\n\n  getVertices(state) {\n    return [new Victor(0.0, 0.0), new Victor(0.0, 0.1)]\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    polygonSides: {\n      title: 'Number of sides',\n      min: 3\n    },\n    roundCorners: {\n      title: 'Round corners',\n      type: 'checkbox',\n    },\n    roundFraction: {\n      title: 'Round fraction',\n      min: 0.05,\n      max: 0.5,\n      step: 0.025,\n      isVisible: (state) => { return state.roundCorners }\n    },\n  }\n}\n\nexport default class Polygon extends Shape {\n  constructor() {\n    super('Polygon')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'polygon',\n        polygonSides: 4,\n        roundCorners: false,\n        roundFraction: 0.25,\n      }\n    }\n  }\n\n  // Returns a list of points from (start, end] along the line.\n  getLineVertices(startPoint, endPoint, numberOfPoints) {\n    const resolution = 1.0/numberOfPoints\n    let points = []\n    for (let d=resolution; d<=1.0; d+=resolution) {\n      points.push(new Victor(startPoint.x + (endPoint.x - startPoint.x)*d,\n                             startPoint.y + (endPoint.y - startPoint.y)*d))\n    }\n    return points\n  }\n\n  getVertices(state) {\n    // beta is the fraction to have rounded.\n    const beta = state.shape.roundFraction\n    // alpha is the fration to have straight.\n    const alpha = (1.0-beta)\n    let points = []\n    for (let i=0; i<=state.shape.polygonSides; i++) {\n      const angle = Math.PI * 2.0 / state.shape.polygonSides * (0.5 + i)\n      if (state.shape.roundCorners && beta !== 0.0) {\n        // angles that make up the arc.\n        const angleStart = Math.PI * 2.0 / state.shape.polygonSides * i\n        const angleEnd = Math.PI * 2.0 / state.shape.polygonSides * (i + 1)\n        const angleResolution = 0.10\n        if (points.length > 0) {\n          // Start with a line. We use a bunch of points for this, so they get stretch about evenly\n          // as the curves do.\n          const numberOfLinePoints = (angleEnd - angleStart)/angleResolution/beta\n          points = points.concat(this.getLineVertices(points[points.length-1],\n                                                      new Victor(alpha * Math.cos(angle) + beta * Math.cos(angleStart),\n                                                                 alpha * Math.sin(angle) + beta * Math.sin(angleStart)),\n                                                      numberOfLinePoints))\n        }\n        if (i !== state.shape.polygonSides) {\n          // Create the arc.\n          for (let arcAngle=angleStart + angleResolution; arcAngle<=angleEnd; arcAngle += angleResolution) {\n            points.push(new Victor(alpha * Math.cos(angle) + beta * Math.cos(arcAngle), alpha * Math.sin(angle) + beta * Math.sin(arcAngle)))\n          }\n        }\n      } else {\n        // Not rounded corners.\n        points.push(new Victor(Math.cos(angle), Math.sin(angle)))\n      }\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    reuleauxSides: {\n      title: 'Number of sides',\n      step: 1,\n      min: 2\n    },\n  }\n}\n\nexport default class Reuleaux extends Shape {\n  constructor() {\n    super('Reuleaux')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'reuleaux',\n        reuleauxSides: 3\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    // Construct an equalateral triangle\n    let corners = []\n    // Initial location at PI/2\n    let angle = Math.PI/2.0\n    // How much of the circle in one side?\n    let coverageAngle = Math.PI/state.shape.reuleauxSides\n    let halfCoverageAngle = 0.5 * coverageAngle\n    for (let c=0; c<state.shape.reuleauxSides; c++) {\n      let startAngle = angle + Math.PI - halfCoverageAngle\n      corners.push( [new Victor(Math.cos(angle), Math.sin(angle)), startAngle] )\n      angle += 2.0 * Math.PI / state.shape.reuleauxSides\n    }\n    let length = 0.5 / Math.cos(Math.PI/2.0/state.shape.reuleauxSides)\n    const scale = 1.7\n    for (let corn=0; corn < corners.length; corn++) {\n      for (let i=0; i<128; i++) {\n        let angle = coverageAngle  * (i / 128.0) + corners[corn][1]\n        points.push(new Victor(scale * (length * corners[corn][0].x + Math.cos(angle)),\n                           scale * (length * corners[corn][0].y + Math.sin(angle))))\n      }\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    roseN: {\n      title: 'Numerator',\n      step: 1,\n      min: 1\n    },\n    roseD: {\n      title: 'Denominator',\n      step: 1,\n      min: 1\n    },\n  }\n}\n\nexport default class Rose extends Shape {\n  constructor() {\n    super('Rose')\n    this.link = 'http://mathworld.wolfram.com/Rose.html'\n    this.linkText = 'Wolfram Mathworld'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'rose',\n        roseN: 3,\n        roseD: 2,\n        transformMethod: 'intact', \n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    let a = 2\n    let n = parseInt(state.shape.roseN)\n    let d = parseInt(state.shape.roseD)\n    let p = (n * d % 2 === 0) ? 2 : 1\n    let thetaClose = d * p * 32 * n\n    let resolution = 64 * n\n\n    for (let i=0; i<thetaClose+1; i++) {\n      let theta = Math.PI * 2.0 / (resolution) * i\n      let r = 0.5 * a * Math.sin((n / d) * theta)\n      points.push(new Victor(r * Math.cos(theta), r * Math.sin(theta)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","// L-system instructions for space filling curves\nexport const subtypes = {\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Gosper (flowsnake)': {\n    axiom: 'A',\n    draw: ['A', 'B'],\n    rules:  {\n      A: 'A-B--B+A++AA+B-',\n      B: '+A-BB--B-A++A+B'\n    },\n    angle: Math.PI / 3,\n    iterationsGrow: (config) => {\n      return config.iterations\n    },\n    maxIterations: 6\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Hilbert': {\n    axiom: 'L',\n    draw: 'F',\n    rules: {\n      L: '+RF-LFL-FR+',\n      R: '-LF+RFR+FL-'\n    },\n    startingAngle: Math.PI,\n    minIterations: 2\n  },\n  // http://mathforum.org/advanced/robertd/lsys2d.html\n  'Hilbert 2': {\n    axiom: 'X',\n    draw: 'F',\n    rules: {\n      X: 'XFYFX+F+YFXFY-F-XFYFX',\n      Y: 'YFXFY-F-XFYFX+F+YFXFY'\n    },\n    startingAngle: Math.PI,\n    maxIterations: 4\n  },\n  // https://en.wikipedia.org/wiki/Sierpi%C5%84ski_curve\n  'Sierpinski': {\n    axiom: 'F--XF--F--XF',\n    draw: ['F', 'G'],\n    rules: {\n      X: 'XF+G+XF--F--XF+G+X'\n    },\n    startingAngle: Math.PI/4,\n    angle: Math.PI/4,\n    maxIterations: 6\n  },\n  // https://onlinemathtools.com/l-system-generator\n  'Penrose Tile': {\n     axiom: '[7]++[7]++[7]++[7]++[7]',\n     draw: ['6', '7', '8', '9'],\n    rules: {\n      6: '8++9----7[-8----6]++',\n      7: '+8--9[---6--7]+',\n      8: '-6++7[+++8++9]-',\n      9: '--8++++6[+9++++7]--7'\n    },\n    angle: Math.PI/5,\n    maxIterations: 6,\n    iterationsGrow: (config) => {\n      return 1 + Math.max(1, 3/config.iterations)\n    }\n  },\n  // https://en.wikipedia.org/wiki/Sierpi%C5%84ski_curve\n  'Sierpinski Square': {\n    axiom: 'F+XF+F+XF',\n    draw: 'F',\n    rules: {\n      X: 'XF-F+F-XF+F+XF-F+F-X'\n    },\n    startingAngle: Math.PI/4,\n    maxIterations: 6\n  },\n}\n","import Shape, { shapeOptions } from '../Shape'\nimport {\n  lsystem,\n  lsystemPath,\n  onSubtypeChange,\n  onMinIterations,\n  onMaxIterations\n} from '../../common/lindenmayer'\nimport { resizeVertices } from '../../common/geometry'\nimport { subtypes } from './subtypes'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    fillerSubtype: {\n      title: 'Type',\n      type: 'dropdown',\n      choices: Object.keys(subtypes),\n      onChange: (changes, attrs) => {\n        return onSubtypeChange(subtypes[changes.fillerSubtype], changes, attrs)\n      }\n    },\n    iterations: {\n      title: 'Iterations',\n      min: (state) => {\n        return onMinIterations(subtypes[state.fillerSubtype], state)\n      },\n      max: (state) => {\n        return onMaxIterations(subtypes[state.fillerSubtype], state)\n      }\n    }\n  }\n}\n\nexport default class SpaceFiller extends Shape {\n  constructor() {\n    super('Space Filler')\n    this.linkText = 'Fractal charm: space filling curves'\n    this.link = 'https://www.youtube.com/watch?v=RU0wScIj36o'\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'space_filler',\n        selectGroup: 'Erasers',\n        canTransform: false,\n        iterations: 6,\n        fillerSubtype: 'Hilbert',\n        repeatEnabled: false,\n        canChangeSize: false,\n        usesMachine: true,\n      }\n    }\n  }\n\n  getVertices(state) {\n    const machine = state.machine\n    const iterations = state.shape.iterations || 1\n\n    let sizeX, sizeY\n    if (machine.rectangular) {\n      sizeX = machine.maxX - machine.minX\n      sizeY = machine.maxY - machine.minY\n    } else {\n      sizeX = sizeY = machine.maxRadius * 2.0\n    }\n\n    // generate our vertices using a set of l-system rules\n    let config = subtypes[state.shape.fillerSubtype]\n    config.iterations = iterations\n\n    if (config.side === undefined) { config.side = 5 }\n    if (config.angle === undefined) { config.angle = Math.PI/2 }\n\n    let curve = lsystemPath(lsystem(config), config)\n    let scale = 1\n\n    if (config.iterationsGrow) {\n      scale = (typeof config.iterationsGrow === 'function') ? config.iterationsGrow(config) : config.iterationsGrow\n    }\n\n    return resizeVertices(curve, sizeX*scale, sizeY*scale)\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    points: {\n      title: 'Number of points',\n      min: 2\n    },\n    starRatio: {\n      title: 'Size of points',\n      step: 0.05,\n      min: 0.05\n    },\n  }\n}\n\nexport default class Star extends Shape {\n  constructor() {\n    super('Star')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'star',\n        points: 5,\n        starRatio: 0.5\n      }\n    }\n  }\n\n  getVertices(state) {\n    let points = []\n    for (let i=0; i<=state.shape.points * 2; i++) {\n      let angle = Math.PI * 2.0 / (2.0 * state.shape.points) * i\n      let star_scale = 1.0\n      if (i % 2 === 0) {\n        star_scale *= state.shape.starRatio\n      }\n      points.push(new Victor(star_scale * Math.cos(angle), star_scale * Math.sin(angle)))\n    }\n    return points\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","export class PriorityQueue {\n  constructor() {\n    this.collection = []\n  }\n\n  enqueue(element) {\n    if (this.isEmpty()) {\n      this.collection.push(element)\n    } else {\n      let added = false\n      for (let i = 1; i <= this.collection.length; i++) {\n        if (element[1] < this.collection[i-1][1]){\n          this.collection.splice(i-1, 0, element)\n          added = true\n          break\n        }\n      }\n\n      if (!added) {\n        this.collection.push(element)\n      }\n    }\n  }\n\n  dequeue() {\n    let value = this.collection.shift()\n    return value\n  }\n\n  isEmpty() {\n    return (this.collection.length === 0)\n  }\n}\n","import { PriorityQueue } from './PriorityQueue.js'\nimport Victor from 'victor'\n\nexport const mix = (v1, v2, s) => {\n  let u = [v1.x, v1.y]\n  let v = [v2.x, v2.y]\n  var result = []\n\n  for (var i = 0; i < u.length; ++i ) {\n    result.push((1.0 - s) * u[i] + s * v[i])\n  }\n\n  return new Victor(result[0], result[1])\n}\n\n// note: requires string-based nodes to work properly\nexport default class Graph {\n  constructor() {\n    this.nodeMap = {}\n    this.nodeKeys = new Set()\n    this.adjacencyList = {}\n    this.edgeMap = {}\n    this.edgeKeys = new Set()\n    this.clearCachedPaths()\n  }\n\n  addNode(node) {\n    let key = node.toString()\n\n    if (!this.nodeKeys.has(key)) {\n      this.nodeKeys.add(key)\n      this.nodeMap[key] = node\n      this.adjacencyList[key] = []\n      this.clearCachedPaths()\n    }\n  }\n\n  addEdge(node1, node2, weight=1) {\n    let node1Key = node1.toString()\n    let node2Key = node2.toString()\n    let edgeKey = [node1Key, node2Key].sort().toString()\n\n    if (!this.edgeKeys.has(edgeKey)) {\n      this.adjacencyList[node1Key].push({node: node2, weight: weight})\n      this.adjacencyList[node2Key].push({node: node1, weight: weight})\n      this.edgeKeys.add(edgeKey)\n      this.edgeMap[edgeKey] = [node1.toString(), node2.toString()]\n      this.clearCachedPaths()\n    }\n  }\n\n  hasEdge(ekey1, ekey2) {\n    let edgeKey = [ekey1, ekey2].sort().toString()\n    return this.edgeMap[edgeKey]\n  }\n\n  dijkstraShortestPath(startNode, endNode) {\n    let shortest = this.getCachedShortestPath(startNode, endNode)\n\n    if (shortest === undefined) {\n      let times = {}\n      let backtrace = {}\n      let pq = new PriorityQueue()\n      let nodes = this.nodeKeys\n\n      times[startNode] = 0\n\n      nodes.forEach(node => {\n        if (node !== startNode) {\n          times[node] = Infinity\n        }\n      })\n\n      pq.enqueue([startNode, 0])\n\n      while (!pq.isEmpty()) {\n        let shortestStep = pq.dequeue()\n        let currentNode = shortestStep[0]\n        this.adjacencyList[currentNode.toString()].forEach(neighbor => {\n          let time = times[currentNode] + neighbor.weight\n\n          if (time < times[neighbor.node]) {\n            times[neighbor.node] = time\n            backtrace[neighbor.node] = currentNode\n            pq.enqueue([neighbor.node, time])\n          }\n        })\n      }\n\n      let path = [endNode.toString()]\n      let lastStep = endNode\n\n      while(lastStep !== startNode) {\n        path.unshift(backtrace[lastStep].toString())\n        lastStep = backtrace[lastStep]\n      }\n\n      shortest = path.map(node => this.nodeMap[node])\n      this.cacheShortestPath(startNode, endNode, shortest)\n    }\n\n    return shortest\n  }\n\n  clearCachedPaths() {\n    this.cachedPaths = {}\n  }\n\n  cacheShortestPath(node1, node2, path) {\n    this.cachedPaths[this.getPairedKey(node1, node2)] = [...path]\n    this.cachedPaths[this.getPairedKey(node2, node1)] = [...path].reverse()\n  }\n\n  getCachedShortestPath(node1, node2) {\n    let shortest = this.cachedPaths[this.getPairedKey(node1, node2)]\n    return shortest === undefined ? undefined : [...shortest]\n  }\n\n  getPairedKey(node1, node2) {\n    return node1.toString() + '-' + node2.toString()\n  }\n}\n","import Victor from 'victor'\nimport Graph, { mix } from '../../common/Graph'\nimport eulerianTrail from '../../common/eulerianTrail'\nimport { difference } from '../../common/util'\nimport Shape, { shapeOptions } from '../Shape'\n\nconst vecTriangle = [\n  new Victor(-0.85, -0.4907477295),\n  new Victor(0.85, -0.4907477295),\n  new Victor(0.0,  0.9814954573),\n]\n\nconst vecSquare = [\n  new Victor(-0.7, -0.7),\n  new Victor( 0.7,  0.7),\n  new Victor(-0.7,  0.7),\n\n  new Victor(-0.7, -0.7),\n  new Victor(0.7,  0.7),\n  new Victor(0.7, -0.7)\n]\n\nfunction getEdges(edges, a, b, c, count, settings) {\n  let da, db, dc\n\n  if (count === 0) {\n    if (settings.rotate > 0) {\n      da = Math.sqrt(Math.pow(a.x, 2) + Math.pow(a.y, 2)) * (settings.rotate * Math.PI / 180.0)\n      db = Math.sqrt(Math.pow(b.x, 2) + Math.pow(b.y, 2)) * (settings.rotate * Math.PI / 180.0)\n      dc = Math.sqrt(Math.pow(c.x, 2) + Math.pow(c.y, 2)) * (settings.rotate * Math.PI / 180.0)\n    } else {\n      da = (settings.rotate * Math.PI / 180.0)\n      db = (settings.rotate * Math.PI / 180.0)\n      dc = (settings.rotate * Math.PI / 180.0)\n    }\n\n    let ap = new Victor(\n      (a.x * Math.cos(da)) - (a.y * Math.sin(da)),\n      (a.x * Math.sin(da)) + (a.y * Math.cos(da)))\n    let bp = new Victor(\n      (b.x * Math.cos(db)) - (b.y * Math.sin(db)),\n      (b.x * Math.sin(db)) + (b.y * Math.cos(db)))\n    let cp = new Victor(\n      (c.x * Math.cos(dc)) - (c.y * Math.sin(dc)),\n      (c.x * Math.sin(dc)) + (c.y * Math.cos(dc)))\n\n    edges.push([ap, bp], [ap, cp], [bp, cp])\n    return\n  }\n\n  let ab = mix(a, b, 0.5)\n  let ac = mix(a, c, 0.5)\n  let bc = mix(b, c, 0.5)\n\n  getEdges(edges, ab, ac, bc, count - 1, settings)\n  getEdges(edges, c, ac, bc, count - 1, settings)\n  getEdges(edges, b, bc, ab, count - 1, settings)\n  getEdges(edges, a, ab, ac, count - 1, settings)\n}\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    tessellationTwistNumSides: {\n      title: \"Number of sides\",\n      min: 3\n    },\n    tessellationTwistIterations: {\n      title: \"Iterations\",\n      min: 0,\n      max: 4\n    },\n    tessellationTwistRotate: {\n      title: \"Rotate and twist\",\n      step: 5,\n      min: 0\n    }\n  }\n}\n\n// Adapted from https://codepen.io/rafaelpascoalrodrigues/pen/KpBJve.\nexport default class TessellationTwist extends Shape {\n  constructor() {\n    super('Tessellation Twist')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'tessellation_twist',\n        tessellationTwistNumSides: 5,\n        tessellationTwistIterations: 2,\n        tessellationTwistRotate: 0,\n        repeatEnabled: false,\n      }\n    }\n  }\n\n  getShapeVertices(numSides) {\n    let vertices = []\n    for (let i=0; i<=numSides; i++) {\n      let angle = Math.PI * 2.0 / numSides * (0.5 + i)\n      let angle2 = Math.PI * 2.0 / numSides * (0.5 + ((i + 1) % numSides))\n\n      vertices.push(new Victor(0, 0))\n      vertices.push(new Victor(Math.cos(angle), Math.sin(angle)))\n      vertices.push(new Victor(Math.cos(angle2), Math.sin(angle2)))\n    }\n    return vertices\n  }\n\n  getVertices(state) {\n    let vertices\n    let edges = []\n    const tessellation = parseInt(state.shape.tessellationTwistIterations)\n    const sides = parseInt(state.shape.tessellationTwistNumSides)\n\n    switch (sides) {\n      case 3:\n        vertices = vecTriangle.slice(0)\n        break\n      case 4:\n        vertices = vecSquare.slice(0)\n        break\n      default:\n        vertices = this.getShapeVertices(sides)\n        break\n    }\n\n    // build our tessellations\n    for (var i = 0; i < vertices.length; i += 3) {\n      getEdges(edges, vertices[i + 0], vertices[i + 1], vertices[i + 2],\n        tessellation, { rotate: parseInt(state.shape.tessellationTwistRotate) })\n    }\n\n    // build edge and adjacency maps; this serves to ensure unique\n    // vertices and edges, and give us a string-based key to access and run\n    // algorithms on them.\n    let graph = new Graph()\n\n    edges.forEach((edge) => {\n      let v1 = edge[0]\n      let v2 = edge[1]\n\n      graph.addNode(v1)\n      graph.addNode(v2)\n      graph.addEdge(v1, v2)\n    })\n\n    // build a graph\n    // find the eulerian trail that efficiently visits all of the vertices\n    let trail = eulerianTrail({edges: Object.values(graph.edgeMap)})\n\n    let prevKey\n    let walkedVertices = []\n    var walkedEdges = []\n\n    // if there are nodes with an odd number of edges (as in pentagon and hexagon)\n    // there is not a eulerian trail that visits all of the nodes. So we need to identify\n    // the missing nodes and create edges for them. There is a complex algorithm\n    // (chinese postman) that can be used to do this for the general case, but\n    // it's computationally expensive and overkill for our situation.\n    for (i = 0; i < trail.length-1; i++) {\n      let edge = [trail[i], trail[i+1]].sort().toString()\n      walkedEdges.push(edge)\n    }\n    walkedEdges = new Set(walkedEdges)\n\n    let missingEdges = Array.from(difference(walkedEdges, graph.edgeKeys)).reduce((hash, d) => {\n      d = d.split(',')\n      hash[d[0] + ',' + d[1]] = d[2] + ',' + d[3]\n      return hash\n    }, {})\n\n    trail.forEach((key, index) => {\n      let vertex = graph.nodeMap[key]\n\n      if (prevKey) {\n        if (!graph.hasEdge(key, prevKey)) {\n          // non-eulerian move, so we'll walk the shortest valid path between them\n          let path = graph.dijkstraShortestPath(prevKey, key)\n          path.shift()\n          path.forEach(node => walkedVertices.push(node))\n          walkedVertices.push(vertex)\n        } else {\n          walkedVertices.push(vertex)\n        }\n      } else {\n        walkedVertices.push(vertex)\n      }\n\n      // add any missing edges\n      if (missingEdges[key]) {\n        let missingVertex = graph.nodeMap[missingEdges[key]]\n        let edgeKey = [key, missingEdges[key]].sort().toString()\n\n        if (graph.edgeMap[edgeKey]) {\n          // only add valid edges\n          walkedVertices.push(missingVertex)\n          walkedVertices.push(vertex)\n        }\n        delete missingEdges[key]\n      }\n\n      prevKey = key\n    })\n\n    const scale = 10.5 // to normalize starting size\n    walkedVertices.forEach(point => {\n      if (!point.visited) {\n        point.multiply({x: scale, y: scale })\n        point.visited = true\n      }\n    })\n    return walkedVertices\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","// adapted from https://github.com/mauriciopoppe/eulerian-trail/blob/master/lib/eulerian-trail.js\n// commented out thrown exceptions to return non-optimal eulerian paths\nexport default function(options) {\n  var g = []\n  var i\n  var edgePointer = []\n  var edgeUsed = []\n  var trail = []\n\n  var id = {}\n  var idReverse = []\n  var idCount = 0\n\n  function getId(x) {\n    if (!id.hasOwnProperty(x)) {\n      edgePointer[idCount] = 0\n      idReverse[idCount] = x\n      id[x] = idCount++\n    }\n    return id[x]\n  }\n\n  function dfs(v) {\n    for (; edgePointer[v] < g[v].length; edgePointer[v] += 1) {\n      var edge = g[v][edgePointer[v]]\n      var to = edge[0]\n      var id = edge[1]\n      if (!edgeUsed[id]) {\n        edgeUsed[id] = true\n        dfs(to)\n      }\n    }\n    trail.push(v)\n  }\n\n  function pushEdge(u, v, id) {\n    g[u] = g[u] || []\n    g[v] = g[v] || []\n    g[u].push([v, id])\n  }\n\n  var deg = []\n  var inDeg = [], outDeg = []\n\n  for (i = 0; i < options.edges.length; i += 1) {\n    var edge = options.edges[i]\n    var u = getId(edge[0])\n    var v = getId(edge[1])\n\n    pushEdge(u, v, i)\n    if (!options.directed) {\n      pushEdge(v, u, i)\n    }\n\n    if (options.directed) {\n      outDeg[u] = outDeg[u] || 0\n      inDeg[u] = inDeg[u] || 0\n      outDeg[v] = outDeg[v] || 0\n      inDeg[v] = inDeg[v] || 0\n      outDeg[u] += 1\n      inDeg[v] += 1\n    } else {\n      deg[u] = deg[u] || 0\n      deg[v] = deg[v] || 0\n      deg[u] += 1\n      deg[v] += 1\n    }\n  }\n\n  function checkDirected() {\n    var oddVertex = 0\n    var start = 0\n\n    for (i = 0; i < idCount; i += 1) {\n      if (outDeg[i] - inDeg[i] !== 0) {\n        if (outDeg[i] > inDeg[i]) {\n          start = i\n        }\n        oddVertex += 1\n      }\n    }\n    return {odd: oddVertex, start: start}\n  }\n\n  function checkUndirected() {\n    var oddVertex = 0\n    var start = 0\n\n    for (i = 0; i < idCount; i += 1) {\n      if (deg[i] % 2 !== 0) {\n        start = i\n        oddVertex += 1\n      }\n    }\n    return {odd: oddVertex, start: start}\n  }\n\n  var check = options.directed ? checkDirected() : checkUndirected()\n  if (check.odd % 2 !== 0 || check.odd > 2) {\n//    throw Error('the graph does not have an eulerian trail')\n  }\n  dfs(check.start)\n\n  if (trail.length !== options.edges.length + 1) {\n//    throw Error('the graph does not have an eulerian trail')\n  }\n\n  trail.reverse()\n\n  // id to input\n  return trail.map(function (id) {\n    return idReverse[id]\n  })\n}\n","import Victor from 'victor'\n\nlet Vicious1Vertices = () => {\n  return [\n    new Victor(-0.745613252629, 0.342139688058),\n    new Victor(-0.722681883112, 0.350763810109),\n    new Victor(-0.700286039815, 0.359363989838),\n    new Victor(-0.683380317501, 0.365945196632),\n    new Victor(-0.666520036737, 0.372640251609),\n    new Victor(-0.649705686141, 0.379449643388),\n    new Victor(-0.632937754332, 0.386372394731),\n    new Victor(-0.61621672993, 0.393408994259),\n    new Victor(-0.59954407879, 0.400558464732),\n    new Victor(-0.582920289531, 0.40782080615),\n    new Victor(-0.566345850773, 0.415195529896),\n    new Victor(-0.549821739752, 0.42268214735),\n    new Victor(-0.533348933706, 0.430280658513),\n    new Victor(-0.516927921255, 0.437990574764),\n    new Victor(-0.500559191017, 0.445811896105),\n    new Victor(-0.484244208848, 0.453743645298),\n    new Victor(-0.467982974749, 0.461785822342),\n    new Victor(-0.451776954575, 0.46993793862),\n    new Victor(-0.435626636946, 0.478199505511),\n    new Victor(-0.417042020391, 0.487809171708),\n    new Victor(-0.398529230801, 0.497557117029),\n    new Victor(-0.380089734033, 0.507441875618),\n    new Victor(-0.361724018706, 0.517463936093),\n    new Victor(-0.343433550675, 0.527621343979),\n    new Victor(-0.325218818561, 0.537915076515),\n    new Victor(-0.307080799601, 0.548343667842),\n    new Victor(-0.289020959651, 0.558906629343),\n    new Victor(-0.271040275948, 0.569603472399),\n    new Victor(-0.253139237112, 0.580433708391),\n    new Victor(-0.235319797618, 0.591396360082),\n    new Victor(-0.217581468846, 0.60249142747),\n    new Victor(-0.199926693892, 0.61371793332),\n    new Victor(-0.182355472755, 0.625075389011),\n    new Victor(-0.164869271291, 0.636562817306),\n    new Victor(-0.147469066739, 0.648180218206),\n    new Victor(-0.130155347716, 0.659926125854),\n    new Victor(-0.112929580079, 0.671800540249),\n    new Victor(-0.0957922524482, 0.683802484155),\n    new Victor(-0.0787448306786, 0.695931957571),\n    new Victor(-0.0617878033894, 0.708187006022),\n    new Victor(-0.0449226364371, 0.720568118127),\n    new Victor(-0.0281493298216, 0.733074316648),\n    new Victor(-0.0114698380183, 0.745704624347),\n    new Victor(0.00511535035415, 0.758458552606),\n    new Victor(0.021605258058, 0.771335124187),\n    new Victor(0.0379993964745, 0.78433433909),\n    new Victor(0.0542962997473, 0.79745424284),\n    new Victor(0.0689143087782, 0.809362371934),\n    new Victor(0.0834609794625, 0.821357963795),\n    new Victor(0.0979358231812, 0.833440041186),\n    new Victor(0.112337862697, 0.845608604107),\n    new Victor(0.12666660939, 0.857863652558),\n    new Victor(0.140921574643, 0.870203720682),\n    new Victor(0.155102758455, 0.882629297099),\n    new Victor(0.169209183589, 0.895138915952),\n    new Victor(0.181539967956, 0.906207597924),\n    new Victor(0.193955771996, 0.91718051061),\n    new Victor(0.206455618473, 0.928057165389),\n    new Victor(0.219038530147, 0.938837562262),\n    new Victor(0.22146207946, 0.940840899396),\n    new Victor(0.223916411758, 0.942806124262),\n    new Victor(0.226401527041, 0.944732748242),\n    new Victor(0.228916936691, 0.946620282717),\n    new Victor(0.230887047745, 0.948104706671),\n    new Victor(0.232926054052, 0.949493361338),\n    new Victor(0.235029069424, 0.950783803623),\n    new Victor(0.237191207672, 0.951972124576),\n    new Victor(0.239407582608, 0.953055881104),\n    new Victor(0.241672819425, 0.954032630111),\n    new Victor(0.243982520555, 0.954900417123),\n    new Victor(0.246330822571, 0.955656799046),\n    new Victor(0.248847209458, 0.956426373676),\n    new Victor(0.251395845187, 0.957082100124),\n    new Victor(0.253971354951, 0.957622512531),\n    new Victor(0.256568363942, 0.958047610898),\n    new Victor(0.259181985973, 0.958355440751),\n    new Victor(0.261806846237, 0.958546002088),\n    new Victor(0.264437081308, 0.958618806291),\n    new Victor(0.267068293617, 0.958573364741),\n    new Victor(0.269695108356, 0.958410166058),\n    new Victor(0.2723116621, 0.95812921024),\n    new Victor(0.274913068661, 0.957731474526),\n    new Victor(0.277493953231, 0.957217447535),\n    new Victor(0.280048941005, 0.956588595122),\n    new Victor(0.282573634412, 0.955845405908),\n    new Victor(0.285062170027, 0.954989834366),\n    new Victor(0.287510150281, 0.954023834973),\n    new Victor(0.289695253613, 0.953107674698),\n    new Victor(0.291880845564, 0.952108937844),\n    new Victor(0.301388879047, 0.947138218659),\n    new Victor(0.310845118937, 0.942069775711),\n    new Victor(0.320249076614, 0.936904097619),\n    new Victor(0.329599286221, 0.931642650239),\n    new Victor(0.363485000908, 0.912453612212),\n    new Victor(0.397329182996, 0.8931922586),\n    new Victor(0.431132321104, 0.873858589404),\n    new Victor(0.464893926612, 0.854453093243),\n    new Victor(0.498613999522, 0.834975281497),\n    new Victor(0.532292539832, 0.815425642786),\n    new Victor(0.565929058925, 0.795804177109),\n    new Victor(0.599524045418, 0.776110884466),\n    new Victor(0.614195802519, 0.767461354237),\n    new Victor(0.628780096852, 0.758665238364),\n    new Victor(0.643274973942, 0.749722536847),\n    new Victor(0.657679456551, 0.740634715542),\n    new Victor(0.663100193664, 0.737124966608),\n    new Victor(0.668459853424, 0.733522380099),\n    new Victor(0.673756481358, 0.729827933253),\n    new Victor(0.678988611609, 0.72604211469),\n    new Victor(0.681833350338, 0.72394251965),\n    new Victor(0.684601864533, 0.721743246372),\n    new Victor(0.687290245243, 0.719446737951),\n    new Victor(0.689896049373, 0.717056903336),\n    new Victor(0.692415367973, 0.714576674241),\n    new Victor(0.694845269331, 0.71200800514),\n    new Victor(0.697182821733, 0.709355293604),\n    new Victor(0.699425093466, 0.706621471345),\n    new Victor(0.70031242523, 0.705263599663),\n    new Victor(0.70110301047, 0.703846605105),\n    new Victor(0.701792940234, 0.702378794191),\n    new Victor(0.702378794191, 0.700866030346),\n    new Victor(0.702858129247, 0.699316131471),\n    new Victor(0.703228502307, 0.697736426848),\n    new Victor(0.703487470278, 0.696135222997),\n    new Victor(0.703634544541, 0.694519360583),\n    new Victor(0.703808492838, 0.692484263226),\n    new Victor(0.704005894839, 0.688243540547),\n    new Victor(0.704113390977, 0.683999886156),\n    new Victor(0.704130981255, 0.679754765908),\n    new Victor(0.704059154289, 0.675510622897),\n    new Victor(0.703896932843, 0.671268434362),\n    new Victor(0.703645294154, 0.667031132015),\n    new Victor(0.703303749604, 0.662799693094),\n    new Victor(0.702872787811, 0.658576560692),\n    new Victor(0.701225165173, 0.648144060414),\n    new Victor(0.699422161753, 0.637737456933),\n    new Victor(0.697463288931, 0.627358704724),\n    new Victor(0.695350012565, 0.617010735501),\n    new Victor(0.693864122754, 0.60962184181),\n    new Victor(0.691242194203, 0.596705692105),\n    new Victor(0.688638833167, 0.58378514483),\n    new Victor(0.686055016884, 0.570860688605),\n    new Victor(0.683489768115, 0.557932812049),\n    new Victor(0.679173798139, 0.53578860744),\n    new Victor(0.675031287842, 0.513610688133),\n    new Victor(0.671063214461, 0.491401008603),\n    new Victor(0.667269089377, 0.469161523326),\n    new Victor(0.663649889828, 0.446892232301),\n    new Victor(0.660205127196, 0.424595578622),\n    new Victor(0.65693480148, 0.402273028147),\n    new Victor(0.653839889918, 0.379925069493),\n    new Victor(0.65092039251, 0.357553168517),\n    new Victor(0.648176309256, 0.335159768314),\n    new Victor(0.645608128774, 0.312745357501),\n    new Victor(0.643215362447, 0.290311401936),\n    new Victor(0.641387928086, 0.272862824121),\n    new Victor(0.640313455316, 0.262524627274),\n    new Victor(0.639318138793, 0.252178123907),\n    new Victor(0.638402467138, 0.241824779876),\n    new Victor(0.637566440349, 0.231464595183),\n    new Victor(0.636809569807, 0.221098058444),\n    new Victor(0.636132344132, 0.210726146899),\n    new Victor(0.635534763324, 0.200349349165),\n    new Victor(0.635016338763, 0.189968153863),\n    new Victor(0.634136336281, 0.166283334136),\n    new Victor(0.633371647838, 0.14259411684),\n    new Victor(0.632722273436, 0.118901479213),\n    new Victor(0.632187724454, 0.0952059098725),\n    new Victor(0.631768489513, 0.0715078974381),\n    new Victor(0.631464568611, 0.0478084191472),\n    new Victor(0.63127547313, 0.0241079636186),\n    new Victor(0.631201691689, 0.000406530852484),\n    new Victor(0.631270098323, -0.0222394852774),\n    new Victor(0.631441114908, -0.0448845241697),\n    new Victor(0.631715230062, -0.0675285858243),\n    new Victor(0.632092443786, -0.0901711816225),\n    new Victor(0.63257226746, -0.112811822945),\n    new Victor(0.633154701085, -0.135450021174),\n    new Victor(0.63384023328, -0.158085776309),\n    new Victor(0.634628864044, -0.180717622493),\n    new Victor(0.635306089719, -0.195449968327),\n    new Victor(0.636126969325, -0.210174984878),\n    new Victor(0.637091014243, -0.22489120629),\n    new Victor(0.638198713093, -0.239597655326),\n    new Victor(0.639449577254, -0.254292377511),\n    new Victor(0.640843606728, -0.268974395606),\n    new Victor(0.642380801514, -0.283642243756),\n    new Victor(0.644060672993, -0.298293967485),\n    new Victor(0.64612020129, -0.31581290641),\n    new Victor(0.6482320118, -0.333325493289),\n    new Victor(0.65039757038, -0.350831239505),\n    new Victor(0.652615411173, -0.368331122296),\n    new Victor(0.654741880247, -0.384873800832),\n    new Victor(0.656970959272, -0.401402798041),\n    new Victor(0.659303625486, -0.417918113923),\n    new Victor(0.661739390269, -0.434418282622),\n    new Victor(0.664278253622, -0.450902815519),\n    new Victor(0.666919726926, -0.467371223995),\n    new Victor(0.66966381018, -0.483822530812),\n    new Victor(0.672510992004, -0.500256735972),\n    new Victor(0.675460295159, -0.516672862235),\n    new Victor(0.678512696885, -0.533069932364),\n    new Victor(0.681666731323, -0.54944794636),\n    new Victor(0.684923375712, -0.565805926984),\n    new Victor(0.688253801542, -0.582478578124),\n    new Victor(0.691624294115, -0.599143411363),\n    new Victor(0.695033876193, -0.615799938082),\n    new Victor(0.698483036394, -0.632448158282),\n    new Victor(0.700362264349, -0.641257466863),\n    new Victor(0.702110053844, -0.650093649478),\n    new Victor(0.703725916259, -0.658955240272),\n    new Victor(0.705209362975, -0.667839796151),\n    new Victor(0.705560191283, -0.670609776202),\n    new Victor(0.705811829972, -0.673129583421),\n    new Victor(0.705988709982, -0.675296119238),\n    new Victor(0.706054184903, -0.677469495719),\n    new Victor(0.706007766116, -0.679642872199),\n    new Victor(0.70584945362, -0.681811362492),\n    new Victor(0.705579736035, -0.683968614552),\n    new Victor(0.705199590599, -0.686109253572),\n    new Victor(0.704709505929, -0.688227904745),\n    new Victor(0.704111436502, -0.690317727409),\n    new Victor(0.702891355326, -0.694066410943),\n    new Victor(0.701505632372, -0.697756460219),\n    new Victor(0.699955733497, -0.701380545956),\n    new Victor(0.698245567651, -0.704932316108),\n    new Victor(0.696378555166, -0.708403464156),\n    new Victor(0.694358116374, -0.711788126674),\n    new Victor(0.692188648844, -0.715079462999),\n    new Victor(0.689874061527, -0.718270143849),\n    new Victor(0.688711148751, -0.719521985248),\n    new Victor(0.687505237521, -0.720732294048),\n    new Victor(0.686256816453, -0.721899115774),\n    new Victor(0.684968817262, -0.723021473187),\n    new Victor(0.683641728566, -0.724097900432),\n    new Victor(0.68227750484, -0.725126443034),\n    new Victor(0.68087761194, -0.726106612373),\n    new Victor(0.679444492961, -0.727036942593),\n    new Victor(0.669607619016, -0.733287843069),\n    new Victor(0.659707713245, -0.739438576688),\n    new Victor(0.649746730121, -0.745489632069),\n    new Victor(0.639724669646, -0.751439054737),\n    new Victor(0.626066307964, -0.75960143201),\n    new Victor(0.588245257356, -0.781929357292),\n    new Victor(0.550379253818, -0.804180569421),\n    new Victor(0.512467808729, -0.826354091159),\n    new Victor(0.474510922092, -0.848449922505),\n    new Victor(0.436509082523, -0.87046806346),\n    new Victor(0.398462290023, -0.892408514024),\n    new Victor(0.360370544593, -0.914271274197),\n    new Victor(0.322234334851, -0.936056343978),\n    new Victor(0.311636192795, -0.942000391839),\n    new Victor(0.303639945919, -0.946411153865),\n    new Victor(0.301535464691, -0.947610713051),\n    new Victor(0.299393848434, -0.94874333146),\n    new Victor(0.29721754024, -0.949807054616),\n    new Victor(0.295008494586, -0.9508013939),\n    new Victor(0.292769154566, -0.951725372076),\n    new Victor(0.290501474654, -0.952577523286),\n    new Victor(0.288207897946, -0.95335784753),\n    new Victor(0.285890867534, -0.954064878953),\n    new Victor(0.282197886545, -0.955003515693),\n    new Victor(0.278465327432, -0.955768692754),\n    new Victor(0.274700519477, -0.956358455661),\n    new Victor(0.270912257819, -0.956772315796),\n    new Victor(0.267109337597, -0.957008318683),\n    new Victor(0.263299088092, -0.957066464322),\n    new Victor(0.259490304444, -0.956946752712),\n    new Victor(0.255691781792, -0.956649183855),\n    new Victor(0.251910849416, -0.956174246369),\n    new Victor(0.248156302456, -0.95552340611),\n    new Victor(0.244436447432, -0.954697640316),\n    new Victor(0.240758613626, -0.953699392081),\n    new Victor(0.240319833932, -0.953534238922),\n    new Victor(0.238502171947, -0.952568728147),\n    new Victor(0.236709918141, -0.951555821348),\n    new Victor(0.234945026988, -0.950496007142),\n    new Victor(0.233208964345, -0.949390262768),\n    new Victor(0.23150270745, -0.948239076844),\n    new Victor(0.22982723354, -0.94704293799),\n    new Victor(0.228184008471, -0.945803312061),\n    new Victor(0.226574009482, -0.944520687677),\n    new Victor(0.224074235635, -0.942570121375),\n    new Victor(0.212583875626, -0.933021043911),\n    new Victor(0.201218113415, -0.923323914947),\n    new Victor(0.189977926239, -0.913481666195),\n    new Victor(0.178866245811, -0.903494297655),\n    new Victor(0.161323853183, -0.887790577622),\n    new Victor(0.143655885521, -0.872228557044),\n    new Victor(0.125862831443, -0.856809213159),\n    new Victor(0.107946156805, -0.841533523206),\n    new Victor(0.0899073274635, -0.82640295304),\n    new Victor(0.0717468320377, -0.811418479899),\n    new Victor(0.0534666250026, -0.796580103784),\n    new Victor(0.0350671949772, -0.781890267787),\n    new Victor(0.0165500078179, -0.767348483291),\n    new Victor(-0.00208395923779, -0.752956704771),\n    new Victor(-0.0208327517145, -0.738715420845),\n    new Victor(-0.0396958809936, -0.724625608751),\n    new Victor(-0.0586718812184, -0.710688245726),\n    new Victor(-0.0777597751514, -0.69690382039),\n    new Victor(-0.0969580969362, -0.683274287218),\n    new Victor(-0.116265380716, -0.66979964621),\n    new Victor(-0.135680649254, -0.656480874603),\n    new Victor(-0.155202436693, -0.643318949635),\n    new Victor(-0.174829765796, -0.630314359925),\n    new Victor(-0.194561170706, -0.617469059948),\n    new Victor(-0.214395674185, -0.604782561085),\n    new Victor(-0.234331321759, -0.592256329193),\n    new Victor(-0.254367624808, -0.579891341509),\n    new Victor(-0.274502628858, -0.567688086652),\n    new Victor(-0.29394086248, -0.556123456584),\n    new Victor(-0.313469979201, -0.54471371868),\n    new Victor(-0.333088513165, -0.533458384321),\n    new Victor(-0.352795975753, -0.522359407981),\n    new Victor(-0.372590901108, -0.511416789662),\n    new Victor(-0.392471334756, -0.500631017982),\n    new Victor(-0.412437276696, -0.490003070179),\n    new Victor(-0.432486283835, -0.47953392349),\n    new Victor(-0.452617867553, -0.469224066534),\n    new Victor(-0.472830073375, -0.459073499311),\n    new Victor(-0.493122412682, -0.449083687678),\n    new Victor(-0.513493419618, -0.439255120252),\n    new Victor(-0.533941628327, -0.429588285654),\n    new Victor(-0.554465572951, -0.420083183884),\n    new Victor(-0.575064276254, -0.410741769415),\n    new Victor(-0.595736272379, -0.401563065011),\n    new Victor(-0.61648009547, -0.392549025148),\n    new Victor(-0.637294768288, -0.383699161205),\n    new Victor(-0.658179313597, -0.37501493904),\n    new Victor(-0.679131776921, -0.366496358653),\n    new Victor(-0.698898362385, -0.3585812225),\n    new Victor(-0.718729934152, -0.350830262268),\n    new Victor(-0.738624537745, -0.34324250072),\n    new Victor(-0.758581195928, -0.33581989233),\n    new Victor(-0.778598442844, -0.32856194848),\n    new Victor(-0.798674812635, -0.32146915779),\n    new Victor(-0.818809328066, -0.314542497496),\n    new Victor(-0.83900003466, -0.307782456217),\n    new Victor(-0.849647527216, -0.304229708827),\n    new Victor(-0.859482935305, -0.301024369413),\n    new Victor(-0.86930319621, -0.297772122593),\n    new Victor(-0.879107821313, -0.294472968367),\n    new Victor(-0.888896810615, -0.291126906735),\n    new Victor(-0.898669186876, -0.287733937697),\n    new Victor(-0.908425927336, -0.284294061253),\n    new Victor(-0.918165566137, -0.28080825464),\n    new Victor(-0.927888591898, -0.277275540622),\n    new Victor(-0.931015263683, -0.276110673371),\n    new Victor(-0.934077437785, -0.27478553915),\n    new Victor(-0.937066807683, -0.273304046909),\n    new Victor(-0.939975066859, -0.271669128361),\n    new Victor(-0.942794886029, -0.269885669693),\n    new Victor(-0.945518447293, -0.267958557094),\n    new Victor(-0.948138909988, -0.265892676752),\n    new Victor(-0.950648456212, -0.263693892093),\n    new Victor(-0.953040245302, -0.261368066543),\n    new Victor(-0.955308902451, -0.258921063527),\n    new Victor(-0.957447586996, -0.256360212328),\n    new Victor(-0.959450435511, -0.25369186499),\n    new Victor(-0.961260768213, -0.251131991028),\n    new Victor(-0.962993410524, -0.248518368997),\n    new Victor(-0.96464591935, -0.245853930609),\n    new Victor(-0.966217317453, -0.24314063034),\n    new Victor(-0.972878657732, -0.231316055063),\n    new Victor(-0.972926053757, -0.0130031238537),\n    new Victor(-0.972925565138, 0.00628803550555),\n    new Victor(-0.97291628138, 0.0249869888634),\n    new Victor(-0.972898202484, 0.0430570898088),\n    new Victor(-0.972858135742, 0.0776097691758),\n    new Victor(-0.972741844464, 0.112162448543),\n    new Victor(-0.972548351414, 0.146714639291),\n    new Victor(-0.972277656592, 0.181266341421),\n    new Victor(-0.972203875151, 0.189501034277),\n    new Victor(-0.972085629398, 0.197735727134),\n    new Victor(-0.971922919333, 0.205968954135),\n    new Victor(-0.971715256338, 0.214201692516),\n    new Victor(-0.971568670694, 0.217132916776),\n    new Victor(-0.971310679961, 0.220056811754),\n    new Victor(-0.970942749994, 0.222968491261),\n    new Victor(-0.970464880795, 0.225864534966),\n    new Victor(-0.969878049601, 0.228740056681),\n    new Victor(-0.96918274503, 0.231591636074),\n    new Victor(-0.968380432939, 0.234414875576),\n    new Victor(-0.967472090565, 0.237205866236),\n    new Victor(-0.966500716365, 0.23992551855),\n    new Victor(-0.965406210223, 0.242597774839),\n    new Victor(-0.964191015235, 0.245217260296),\n    new Victor(-0.962857085875, 0.247778600114),\n    new Victor(-0.961408331095, 0.250276908105),\n    new Victor(-0.959846705368, 0.252705832225),\n    new Victor(-0.958176117646, 0.255061463523),\n    new Victor(-0.956399499642, 0.257337938573),\n    new Victor(-0.954520760305, 0.259531348425),\n    new Victor(-0.952544297207, 0.261636318272),\n    new Victor(-0.950473530677, 0.263649427781),\n    new Victor(-0.948313346904, 0.265565790766),\n    new Victor(-0.946067654839, 0.267381009657),\n    new Victor(-0.94374134067, 0.269092641359),\n    new Victor(-0.941339779204, 0.270695799685),\n    new Victor(-0.93886736801, 0.27218804154),\n    new Victor(-0.936329481894, 0.273565946593),\n    new Victor(-0.933731007046, 0.274826094512),\n    new Victor(-0.93107829551, 0.27596701944),\n    new Victor(-0.928375744855, 0.276985301047),\n    new Victor(-0.913861323012, 0.282438287001),\n    new Victor(-0.899294130338, 0.287750550737),\n    new Victor(-0.884676121307, 0.292920137779),\n    new Victor(-0.870008761776, 0.297948025366),\n    new Victor(-0.854391527272, 0.303278856616),\n    new Victor(-0.838793348902, 0.308665390412),\n    new Victor(-0.823214226666, 0.314107138133),\n    new Victor(-0.807654649182, 0.319603611161),\n    new Victor(-0.792114127832, 0.325155298116),\n    new Victor(-0.776593639853, 0.330761710377),\n    new Victor(-0.761093185246, 0.336423336564),\n    new Victor(-0.745613252629, 0.342139688058),\n  ];\n}\n\nexport default Vicious1Vertices;\n","import Vicious1Vertices from './Vicious1Vertices'\nimport Shape from '../Shape'\n\nexport default class V1Engineering extends Shape {\n  constructor() {\n    super('V1Engineering')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'v1Engineering',\n      }\n    }\n  }\n\n  getVertices(state) {\n    return Vicious1Vertices()\n  }\n}\n","import { degToRad } from '../common/geometry'\nimport Victor from 'victor'\nimport Shape, { shapeOptions } from './Shape'\n\nconst options = {\n  ...shapeOptions,\n  ...{\n    wiperType: {\n      title: 'Type',\n      type: 'dropdown',\n      choices: ['Lines', 'Spiral'],\n    },\n    wiperSize: {\n      title: 'Wiper size',\n      min: 1\n    },\n    wiperAngleDeg: {\n      title: 'Wiper angle',\n      isVisible: (state) => { return state.wiperType === 'Lines' },\n    },\n  }\n}\n\nconst outOfBounds = (point, width, height) => {\n  if (point.x < -width/2.0) {\n    return true\n  }\n  if (point.y < -height/2.0) {\n    return true\n  }\n  if (point.x > width/2.0) {\n    return true\n  }\n  if (point.y > height/2.0) {\n    return true\n  }\n  return false\n}\n\n// Intersect the line with the boundary, and return the point exactly on the boundary.\n// This will keep the shape. i.e. It will follow the line segment, and return the point on that line\n// segment.\nfunction boundPoint(good, bad, size_x, size_y) {\n  var dx = good.x - bad.x\n  var dy = good.y - bad.y\n\n  var fixed = Victor(bad.x, bad.y)\n  var distance = 0\n  if (bad.x < -size_x || bad.x > size_x) {\n    if (bad.x < -size_x) {\n      // we are leaving the left\n      fixed.x = -size_x\n    } else {\n      // we are leaving the right\n      fixed.x = size_x\n    }\n    distance = (fixed.x - good.x) / dx\n    fixed.y = good.y + distance * dy\n    // We fixed x, but y might have the same problem, so we'll rerun this, with different points.\n    return boundPoint(good, fixed, size_x, size_y)\n  }\n  if (bad.y < -size_y || bad.y > size_y) {\n    if (bad.y < -size_y) {\n      // we are leaving the bottom\n      fixed.y = -size_y\n    } else {\n      // we are leaving the top\n      fixed.y = size_y\n    }\n    distance = (fixed.y - good.y) / dy\n    fixed.x = good.x + distance * dx\n  }\n  return fixed\n}\n\nfunction nearEnough(end, point) {\n  if (point.clone().subtract(end).length() < 0.01) {\n    return true\n  }\n  return false\n}\n\nfunction spiralVertices(state) {\n  // Determine the max radius\n  let maxRadius = state.machine.maxRadius\n  if (state.machine.rectangular) {\n    const halfHeight = (state.machine.maxY - state.machine.minY)/2.0\n    const halfWidth = (state.machine.maxX - state.machine.minX)/2.0\n    maxRadius = Math.sqrt(Math.pow(halfHeight, 2.0) + Math.pow(halfWidth, 2.0))\n  }\n\n  var vertices = []\n\n  let emergencyBreak = 0\n  let radius = 0.1\n  let angle = 0\n  const arcLength = 1.0\n  const radiusPerAngle = state.shape.wiperSize / (2.0 * Math.PI)\n  while (radius <= maxRadius) {\n    // Save where we are right now.\n    vertices.push(new Victor(radius * Math.cos(angle), radius * Math.sin(angle)))\n\n    // We want to have the next point be about the right arc length.\n    let deltaAngle = arcLength / radius * 2.0 * Math.PI\n\n    // Limit this at small radii\n    deltaAngle = Math.min(deltaAngle, 0.1)\n\n    // Update for the next point.\n    angle += deltaAngle\n    radius += deltaAngle * radiusPerAngle\n\n    emergencyBreak += 1\n    if (emergencyBreak > 1e9) {\n      // If we get to this point: bail. We did something terrible.\n      break\n    }\n  }\n\n  return vertices\n}\n\nfunction linearVertices(state) {\n  var outputVertices = []\n\n  // Get the angle between 0,180\n  let angle = (180.0 - (state.shape.wiperAngleDeg % 360)) % 180.0\n  if (angle < 0.0) {\n    angle += 180.0\n  }\n  angle = degToRad(angle)\n\n  // Start with the defaults for 0,45\n  let height = 1\n  let width = 1\n  let machine = state.machine\n  if (machine.rectangular) {\n    height = machine.maxY - machine.minY\n    width = machine.maxX - machine.minX\n  } else {\n    height = machine.maxRadius * 2.0\n    width = height\n  }\n\n  let startLocation = Victor(-width/2.0, height/2.0)\n  let cosa = Math.cos(angle)\n  let sina = Math.sin(angle)\n\n  // These can be zero, but infinity isn't great for out math, so let's just clip it.\n  if (Math.abs(cosa) < 1.0e-10) {\n    cosa = 1.0e-10\n  }\n  if (Math.abs(sina) < 1.0e-10) {\n    sina = 1.0e-10\n  }\n  let orig_delta_w = Victor(state.shape.wiperSize / cosa, 0.0)\n  let orig_delta_h = Victor(0.0, -state.shape.wiperSize / sina)\n\n  if (angle > Math.PI/4.0 && angle < 0.75 * Math.PI) {\n    // flip the logic of x,y\n    let temp = orig_delta_w.clone()\n    orig_delta_w = orig_delta_h.clone()\n    orig_delta_h = temp\n  }\n  if (angle > Math.PI/2.0) {\n    startLocation = Victor(-width/2.0, -height/2.0)\n    orig_delta_w = orig_delta_w.clone().multiply(Victor(-1.0, -1.0))\n    orig_delta_h = orig_delta_h.clone().multiply(Victor(-1.0, -1.0))\n  }\n  let delta_w = orig_delta_w\n  let delta_h = orig_delta_h\n  let endLocation = startLocation.clone().multiply(Victor(-1.0, -1.0))\n  outputVertices.push(startLocation)\n  let nextWidthPoint = startLocation\n  let nextHeightPoint = startLocation\n\n  let emergency_break = 0\n  while (emergency_break < 1000) {\n    emergency_break += 1\n\n    // \"right\"\n    nextWidthPoint = nextWidthPoint.clone().add(delta_w)\n    if (outOfBounds(nextWidthPoint, width, height)) {\n      let corner = boundPoint(nextWidthPoint.clone().subtract(delta_w), nextWidthPoint, width/2.0, height/2.0)\n      outputVertices.push(corner)\n      if (nearEnough(endLocation, corner)) {\n        break\n      }\n      nextWidthPoint = boundPoint(nextHeightPoint, nextWidthPoint, width/2.0, height/2.0)\n      delta_w = orig_delta_h\n    }\n    outputVertices.push(nextWidthPoint)\n    if (nearEnough(endLocation, nextWidthPoint)) {\n      break\n    }\n\n    // \"down-left\"\n    nextHeightPoint = nextHeightPoint.clone().add(delta_h)\n    if (outOfBounds(nextHeightPoint, width, height)) {\n      nextHeightPoint = boundPoint(nextWidthPoint, nextHeightPoint, width/2.0, height/2.0)\n      delta_h = orig_delta_w\n    }\n    outputVertices.push(nextHeightPoint)\n    if (nearEnough(endLocation, nextHeightPoint)) {\n      break\n    }\n\n    // \"down\"\n    nextHeightPoint = nextHeightPoint.clone().add(delta_h)\n    outputVertices.push(nextHeightPoint)\n    if (nearEnough(endLocation, nextHeightPoint)) {\n      break\n    }\n    if (outOfBounds(nextHeightPoint, width, height)) {\n      let corner = boundPoint(nextHeightPoint.clone().subtract(delta_h), nextHeightPoint, width/2.0, height/2.0)\n      outputVertices.push(corner)\n      if (nearEnough(endLocation, corner)) {\n        break\n      }\n      nextHeightPoint = boundPoint(nextWidthPoint, nextHeightPoint, width/2.0, height/2.0)\n      delta_h = orig_delta_w\n    }\n    outputVertices.push(nextHeightPoint)\n    if (nearEnough(endLocation, nextHeightPoint)) {\n      break\n    }\n\n    // \"up-right\"\n    nextWidthPoint = nextWidthPoint.clone().add(delta_w)\n    outputVertices.push(nextWidthPoint)\n    if (nearEnough(endLocation, nextWidthPoint)) {\n      break\n    }\n    if (outOfBounds(nextWidthPoint, width, height)) {\n      nextWidthPoint = boundPoint(nextHeightPoint, nextWidthPoint, width/2.0, height/2.0)\n      delta_w = orig_delta_h\n    }\n  }\n  return outputVertices\n}\n\nexport default class Wiper extends Shape {\n  constructor() {\n    super('Wiper')\n  }\n\n  getInitialState() {\n    return {\n      ...super.getInitialState(),\n      ...{\n        type: 'wiper',\n        wiperAngleDeg: 15,\n        wiperSize: 12,\n        wiperType: 'Lines',\n        selectGroup: 'Erasers',\n        canTransform: false,\n        shouldCache: false,\n        canChangeSize: false,\n        usesMachine: true,\n        repeatEnabled: false,\n      }\n    }\n  }\n\n  getVertices(state) {\n    if (state.shape.wiperType === 'Lines') {\n      return linearVertices(state)\n    } else {\n      return spiralVertices(state)\n    }\n  }\n\n  getOptions() {\n    return options\n  }\n}\n","import Circle from '../models/Circle'\nimport Epicycloid from '../models/Epicycloid'\nimport FileImport from '../models/FileImport'\nimport FractalSpirograph from '../models/fractal_spirograph/FractalSpirograph'\nimport Heart from '../models/Heart'\nimport Hypocycloid from '../models/Hypocycloid'\nimport InputText from '../models/input_text/InputText'\nimport LSystem from '../models/lsystem/LSystem'\nimport Point from '../models/Point'\nimport Polygon from '../models/Polygon'\nimport Reuleaux from '../models/Reuleaux'\nimport Rose from '../models/Rose'\nimport SpaceFiller from '../models/space_filler/SpaceFiller'\nimport Star from '../models/Star'\nimport TessellationTwist from '../models/tessellation_twist/TessellationTwist'\nimport V1Engineering from '../models/v1_engineering/V1Engineering'\nimport Wiper from '../models/Wiper'\n\n/*----------------------------------------------\nSupported input shapes\n-----------------------------------------------*/\nexport const registeredShapes = {\n  polygon: new Polygon(),\n  star: new Star(),\n  circle: new Circle(),\n  heart: new Heart(),\n  reuleaux: new Reuleaux(),\n  epicycloid: new Epicycloid(),\n  hypocycloid: new Hypocycloid(),\n  rose: new Rose(),\n  inputText: new InputText(),\n  v1Engineering: new V1Engineering(),\n  lsystem: new LSystem(),\n  fractal_spirograph: new FractalSpirograph(),\n  tessellation_twist: new TessellationTwist(),\n  point: new Point(),\n  wiper: new Wiper(),\n  space_filler: new SpaceFiller(),\n  file_import: new FileImport()\n}\n\nexport const getShape = (layer) => {\n  return registeredShapes[layer.type]\n}\n\nexport const getShapeDefaults = () => {\n  return Object.keys(registeredShapes).map(id => {\n    const state = registeredShapes[id].getInitialState()\n    state.name = registeredShapes[id].name\n    state.id = id\n    return state\n  })\n}\n\nexport const getShapeSelectOptions = () => {\n  const groupOptions = []\n  const shapes = getShapeDefaults()\n\n  for (const shape of shapes) {\n    const optionLabel = { value: shape.id, label: shape.name }\n    var found = false\n    for (const group of groupOptions) {\n      if (group.label === shape.selectGroup) {\n        found = true\n        group.options.push(optionLabel)\n      }\n    }\n    if (!found) {\n      if (shape.selectGroup === \"import\") {\n        // Users can't manually select this group.\n        continue\n      }\n      const newOptions = [ optionLabel ]\n      groupOptions.push( { label: shape.selectGroup, options: newOptions } )\n    }\n  }\n\n  return groupOptions\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport uniqueId from 'lodash/uniqueId'\nimport arrayMove from 'array-move'\nimport { getShape } from '../../models/shapes'\n\nconst protectedAttrs = ['repeatEnabled', 'canTransform', 'selectGroup', 'canChangeSize', 'usesMachine', 'shouldCache']\nconst newLayerType = localStorage.getItem('currentShape') || 'polygon'\nconst newLayerName = getShape({type: newLayerType}).name.toLowerCase()\n\nconst layersSlice = createSlice({\n  name: 'layer',\n  initialState: {\n    current: null,\n    selected: null,\n    newLayerType: newLayerType,\n    newLayerName: newLayerName,\n    newLayerNameOverride: false,\n    copyLayerName: null,\n    byId: {},\n    allIds: []\n  },\n  reducers: {\n    addLayer(state, action) {\n      let layer = { ...action.payload }\n      layer.id = uniqueId('layer-')\n      layer.name = layer.name || state.newLayerName\n      state.byId[layer.id] = layer\n      state.allIds.push(layer.id)\n      state.current = layer.id\n      state.selected = layer.id\n      state.newLayerNameOverride = false\n      state.newLayerName = layer.name\n      if (layer.type !== 'file_import') {\n        localStorage.setItem('currentShape', layer.type)\n      }\n    },\n    moveLayer(state, action) {\n      const { oldIndex, newIndex } = action.payload\n      state.allIds = arrayMove(state.allIds, oldIndex, newIndex)\n    },\n    copyLayer(state, action) {\n      const source = state.byId[action.payload]\n      const layer = { ...source, name: state.copyLayerName }\n      layer.id = uniqueId('layer-')\n      state.byId[layer.id] = layer\n      state.allIds.push(layer.id)\n      state.current = layer.id\n      state.selected = layer.id\n    },\n    removeLayer(state, action) {\n      const deleteId = action.payload\n      const idx = state.allIds.findIndex(id => id === deleteId)\n      state.allIds.splice(idx, 1)\n      delete state.byId[deleteId]\n\n      if (deleteId === state.current) {\n        if (idx === state.allIds.length) {\n          state.current = state.allIds[idx-1]\n          state.selected = state.allIds[idx-1]\n        } else {\n          state.current = state.allIds[idx]\n          state.selected = state.allIds[idx]\n        }\n      }\n    },\n    restoreDefaults(state, action) {\n      const id = action.payload\n      const layer = state.byId[id]\n      const defaults = getShape(layer).getInitialState(layer)\n\n      state.byId[layer.id] = {\n        id: layer.id,\n        name: layer.name,\n        ...defaults\n      }\n    },\n    setCurrentLayer(state, action) {\n      const current = state.byId[action.payload]\n\n      if (current) {\n        state.current = current.id\n        state.selected = current.id\n        state.copyLayerName = current.name\n      }\n    },\n    setSelectedLayer(state, action) {\n      state.selected = action.payload\n    },\n    setShapeType(state, action) {\n      const changes = action.payload\n      const defaults = getShape(changes).getInitialState()\n      const layer = state.byId[changes.id]\n\n      layer.type = changes.type\n      Object.keys(defaults).forEach(attr => {\n        if (layer[attr] === undefined) {\n          layer[attr] = defaults[attr]\n        }\n      })\n\n      protectedAttrs.forEach(attr => {\n        layer[attr] = defaults[attr]\n      })\n\n      state.byId[layer.id] = layer\n    },\n    setNewLayerType(state, action) {\n      let attrs = { newLayerType: action.payload }\n      if (!state.newLayerNameOverride) {\n        const shape = getShape({type: action.payload})\n        attrs.newLayerName = shape.name.toLowerCase()\n      }\n      Object.assign(state, attrs)\n    },\n    updateLayer(state, action) {\n      const layer = action.payload\n      state.byId[layer.id] = {...state.byId[layer.id], ...layer}\n    },\n    updateLayers(state, action) {\n      Object.assign(state, action.payload)\n    },\n    toggleRepeat(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].repeatEnabled = !state.byId[transform.id].repeatEnabled\n    },\n    toggleGrow(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].growEnabled = !state.byId[transform.id].growEnabled\n    },\n    toggleSpin(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].spinEnabled = !state.byId[transform.id].spinEnabled\n    },\n    toggleTrack(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].trackEnabled = !state.byId[transform.id].trackEnabled\n    },\n    toggleTrackGrow(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].trackGrowEnabled = !state.byId[transform.id].trackGrowEnabled\n    },\n    toggleVisible(state, action) {\n      const transform = action.payload\n      state.byId[transform.id].visible = !state.byId[transform.id].visible\n    },\n  }\n})\n\nexport const {\n  addLayer,\n  copyLayer,\n  moveLayer,\n  removeLayer,\n  restoreDefaults,\n  setCurrentLayer,\n  setSelectedLayer,\n  setShapeType,\n  setNewLayerType,\n  updateLayer,\n  updateLayers,\n  toggleRepeat,\n  toggleSpin,\n  toggleGrow,\n  toggleTrack,\n  toggleTrackGrow,\n  toggleVisible\n} = layersSlice.actions\n\nexport default layersSlice.reducer\n","import { createSelector } from 'reselect'\n\nconst getLayers = state => state.layers\nconst getCurrentLayerId = state => state.layers.current\n\nexport const getCurrentLayer = createSelector(\n  [ getCurrentLayerId, getLayers ],\n  (id, layers) => layers.byId[id]\n)\n\nexport const makeGetLayer = layerId => {\n  return createSelector(\n    getLayers,\n    (layers) => {\n      return layers.byId[layerId]\n    }\n  )\n}\n\nexport const makeGetLayerIndex = layerId => {\n  return createSelector(\n    getVisibleLayerIds,\n    (visibleLayerIds) => {\n      return visibleLayerIds.findIndex(id => id === layerId)\n    }\n  )\n}\n\n// puts the current layer last in the list to ensure it can be rotated; else\n// the handle will not rotate\nexport const getKonvaLayerIds = createSelector(\n  [ getLayers, getCurrentLayer ],\n  (layers, layer) => {\n      const kIds = layers.allIds.filter(id => id !== layer.id)\n      kIds.push(layer.id)\n      return kIds\n  }\n)\n\nexport const getLayerInfo = createSelector(\n  getLayers,\n  (layers) => {\n      return layers.allIds.map(id => layers.byId[id])\n  }\n)\n\nexport const getNumLayers = createSelector(\n  getLayers,\n  (layers) => {\n    return layers.allIds.length\n  }\n)\n\nexport const getVisibleLayerIds = createSelector(\n  getLayers,\n  (layers) => {\n    return layers.allIds.filter(id => layers.byId[id].visible)\n  }\n)\n\nexport const isDragging = createSelector(\n  [ getLayers, getVisibleLayerIds ],\n  (layers, visibleIds) => {\n    return visibleIds.filter(id => layers.byId[id].dragging).length > 0\n  }\n)\n\nexport const getNumVisibleLayers = createSelector(\n  getVisibleLayerIds,\n  (layers) => {\n    return layers.length\n  }\n)\n","const transformOptions = {\n  startingSize: {\n    title: 'Starting size',\n    min: 1,\n    isVisible: (state) => { return state.canChangeSize },\n  },\n  offsetX: {\n    title: 'X offset',\n  },\n  offsetY: {\n    title: 'Y offset',\n  },\n  rotation: {\n    title: 'Rotate (degrees)'\n  },\n  reverse: {\n    title: 'Reverse path',\n    type: 'checkbox'\n  },\n  numLoops: {\n    title: 'Number of loops',\n    min: 1\n  },\n  transformMethod: {\n    title: 'When transforming shape',\n    type: 'dropdown',\n    choices: ['smear', 'intact'],\n  },\n  growEnabled: {\n    title: 'Grow'\n  },\n  growValue: {\n    title: 'Scale (+/-)',\n  },\n  growMethod: {\n    title: 'Scale by',\n    type: 'dropdown',\n    choices: ['constant', 'function']\n  },\n  growMathInput: {\n    title: 'Scale function (i)',\n    type: 'text',\n    isVisible: state => { return state.growMethod === 'function' },\n  },\n  growMath: {\n  },\n  spinEnabled: {\n    title: 'Spin',\n    isVisible: state => { return state.growMethod === 'constant'},\n  },\n  spinValue: {\n    title: 'Spin (+/-)',\n    step: 0.1,\n  },\n  spinMethod: {\n    title: 'Spin by',\n    type: 'dropdown',\n    choices: ['constant', 'function']\n  },\n  spinMathInput: {\n    title: 'Spin function (i)',\n    type: 'text',\n    isVisible: state => { return state.spinMethod === 'function' },\n  },\n  spinMath: {\n  },\n  spinSwitchbacks: {\n    title: 'Switchbacks',\n    isVisible: state => { return state.spinMethod === 'constant'},\n  },\n  trackEnabled: {\n    title: 'Track'\n  },\n  trackGrowEnabled: {\n    title: 'Track grow'\n  },\n  trackValue: {\n    title: 'Track size',\n  },\n  trackNumLoops: {\n    title: 'Number of loops at each track position',\n    min: 1\n  },\n  trackLength: {\n    title: 'Track length',\n    step: 0.05\n  },\n  trackGrow: {\n    title: 'Scale step (+/-)',\n  },\n}\n\n// used as a way to keep a shape's transform settings separate. Actual state\n// is stored on Shape.\nexport default class Transform {\n  getOptions() {\n    return transformOptions\n  }\n}\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card,\n  Col,\n  Form,\n  Row,\n  ToggleButton,\n  ToggleButtonGroup,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport { updateLayer, toggleGrow } from '../layers/layersSlice'\nimport { getCurrentLayer } from '../layers/selectors'\nimport Transform from '../../models/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const layer = getCurrentLayer(state)\n\n  return {\n    layer: layer,\n    active: layer.growEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateLayer(attrs))\n    },\n    onGrowMethodChange: (value) => {\n      dispatch(updateLayer({ growMethod: value, id: id}))\n    },\n    onGrow: () => {\n      dispatch(toggleGrow({id: id}))\n    },\n  }\n}\n\nclass ScaleTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 1 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={`${activeClassName} overflow-auto`}>\n          <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.onGrow}>\n            <h3>Scale</h3>\n            Grows or shrinks the shape\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={1}>\n            <Card.Body>\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"growValue\"\n                optionKey=\"growValue\"\n                index={2}\n                model={this.props.layer} />\n              <Row className=\"align-items-center pb-2\">\n                <Col sm={5}>\n                  <Form.Label htmlFor=\"growMethod\">\n                    Scale by\n                  </Form.Label>\n                </Col>\n                <Col sm={7}>\n                  <ToggleButtonGroup id=\"growMethod\" type=\"radio\" name=\"growMethod\" value={this.props.layer.growMethod} onChange={this.props.onGrowMethodChange}>\n                    <ToggleButton variant=\"light\" value=\"constant\">constant</ToggleButton>\n                    <ToggleButton variant=\"light\" value=\"function\">function</ToggleButton>\n                  </ToggleButtonGroup>\n                </Col>\n              </Row>\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"growMathInput\"\n                optionKey=\"growMathInput\"\n                delayKey=\"growMath\"\n                index={1}\n                model={this.props.layer} />\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ScaleTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card,\n  Col,\n  Form,\n  Row,\n  ToggleButton,\n  ToggleButtonGroup,\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport { toggleSpin, updateLayer } from '../layers/layersSlice'\nimport { getCurrentLayer } from '../layers/selectors'\nimport Transform from '../../models/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const layer = getCurrentLayer(state)\n\n  return {\n    layer: layer,\n    active: layer.spinEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateLayer(attrs))\n    },\n    onSpinMethodChange: (value) => {\n      dispatch(updateLayer({ spinMethod: value, id: id}))\n    },\n    onSpin: () => {\n      dispatch(toggleSpin({id: id}))\n    },\n  }\n}\n\nclass RotationTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 1 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={`${activeClassName} overflow-auto`}>\n          <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.onSpin}>\n            <h3>Spin</h3>\n            Spins the shape\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={1}>\n            <Card.Body>\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"spinValue\"\n                optionKey=\"spinValue\"\n                index={0}\n                model={this.props.layer} />\n\n              <Row className=\"align-items-center pb-2\">\n                <Col sm={5}>\n                  <Form.Label htmlFor=\"spinMethod\">\n                    Scale by\n                  </Form.Label>\n                </Col>\n\n                <Col sm={7}>\n                  <ToggleButtonGroup id=\"spinMethod\" type=\"radio\" name=\"spinMethod\" value={this.props.layer.spinMethod} onChange={this.props.onSpinMethodChange}>\n                    <ToggleButton variant=\"light\" value=\"constant\">constant</ToggleButton>\n                    <ToggleButton variant=\"light\" value=\"function\">function</ToggleButton>\n                  </ToggleButtonGroup>\n                </Col>\n              </Row>\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"spinMathInput\"\n                optionKey=\"spinMathInput\"\n                delayKey=\"spinMath\"\n                index={1}\n                model={this.props.layer} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"spinSwitchbacks\"\n                optionKey=\"spinSwitchbacks\"\n                index={0}\n                model={this.props.layer} />\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RotationTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport {\n  toggleTrack,\n  toggleTrackGrow,\n  updateLayer\n} from '../layers/layersSlice'\nimport { getCurrentLayer } from '../layers/selectors'\nimport Transform from '../../models/Transform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const layer = getCurrentLayer(state)\n\n  return {\n    layer: layer,\n    active: layer.trackEnabled,\n    activeGrow: layer.trackGrowEnabled,\n    options: new Transform().getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateLayer(attrs))\n    },\n    onTrack: () => {\n      dispatch(toggleTrack({id: id}))\n    },\n    onTrackGrow: () => {\n      dispatch(toggleTrackGrow({id: id}))\n    },\n  }\n}\n\nclass TrackTransform extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 1 : null\n    const activeGrowClassName = this.props.activeGrow ? 'active' : ''\n    const activeGrowKey = this.props.activeGrow ? 1 : null\n\n    return (\n      <Accordion defaultActiveKey={activeKey} activeKey={activeKey}>\n        <Card className={activeClassName}>\n          <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.onTrack}>\n            <h3>Track</h3>\n            Moves the shape along a track (shown in green)\n          </Accordion.Toggle>\n\n          <Accordion.Collapse eventKey={1}>\n            <Card.Body>\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackValue\"\n                optionKey=\"trackValue\"\n                index={0}\n                model={this.props.layer} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackLength\"\n                optionKey=\"trackLength\"\n                index={0}\n                step={0.05}\n                model={this.props.layer} />\n\n              <InputOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                key=\"trackNumLoops\"\n                optionKey=\"trackNumLoops\"\n                index={0}\n                model={this.props.layer} />\n\n              <Accordion defaultActiveKey={activeGrowKey} className=\"mt-3\">\n                <Card className={activeGrowClassName}>\n                  <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.onTrackGrow}>\n                    <h3>Scale track</h3>\n                    Grows or shrinks the track\n                  </Accordion.Toggle>\n\n                  <Accordion.Collapse eventKey={1}>\n                    <Card.Body>\n                      <InputOption\n                        onChange={this.props.onChange}\n                        options={this.props.options}\n                        key=\"trackGrow\"\n                        optionKey=\"trackGrow\"\n                        index={0}\n                        model={this.props.layer} />\n                    </Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              </Accordion>\n            </Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      </Accordion>\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TrackTransform)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport {\n  Accordion,\n  Card,\n  Row,\n  Col,\n  Form,\n  ToggleButton,\n  ToggleButtonGroup\n} from 'react-bootstrap'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport { updateLayer, toggleRepeat } from '../layers/layersSlice'\nimport { getCurrentLayer } from '../layers/selectors'\nimport Transform from '../../models/Transform'\nimport ScaleTransform from './ScaleTransform'\nimport RotationTransform from './RotationTransform'\nimport TrackTransform from './TrackTransform'\n\nconst mapStateToProps = (state, ownProps) => {\n  const layer = getCurrentLayer(state)\n\n  return {\n    layer: layer,\n    active: layer.repeatEnabled,\n    options: (new Transform()).getOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateLayer(attrs))\n    },\n    onRepeat: () => {\n      dispatch(toggleRepeat({id: id}))\n    },\n    ontransformMethodChange: (value) => {\n      dispatch(updateLayer({ transformMethod: value, id: id}))\n    }\n  }\n}\n\nclass Transforms extends Component {\n  render() {\n    const activeClassName = this.props.active ? 'active' : ''\n    const activeKey = this.props.active ? 1 : null\n\n    return (\n      <div className=\"transforms\">\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"startingSize\"\n          optionKey=\"startingSize\"\n          index={0}\n          model={this.props.layer} />\n\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"offsetX\"\n          optionKey=\"offsetX\"\n          index={0}\n          model={this.props.layer} />\n\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"offsetY\"\n          optionKey=\"offsetY\"\n          index={0}\n          model={this.props.layer} />\n\n        <InputOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"rotation\"\n          optionKey=\"rotation\"\n          index={0}\n          model={this.props.layer} />\n\n        <CheckboxOption\n          onChange={this.props.onChange}\n          options={this.props.options}\n          key=\"reverse\"\n          optionKey=\"reverse\"\n          index={0}\n          model={this.props.layer} />\n\n        <Accordion className=\"mt-3\" defaultActiveKey={activeKey} activeKey={activeKey}>\n          <Card className={activeClassName}>\n            <Accordion.Toggle as={Card.Header} eventKey={1} onClick={this.props.onRepeat}>\n              <h3>Loop and transform</h3>\n              Draws the shape multiple times, transforming it each time.\n            </Accordion.Toggle>\n\n            <Accordion.Collapse eventKey={1}>\n              <Card.Body>\n                <InputOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  key=\"numLoops\"\n                  optionKey=\"numLoops\"\n                  index={0}\n                  model={this.props.layer} />\n\n                  <Row className=\"align-items-center pb-2\">\n                    <Col sm={5}>\n                      <Form.Label htmlFor=\"transformMethod\">\n                        When transforming shape\n                      </Form.Label>\n                    </Col>\n\n                    <Col sm={7}>\n                      <ToggleButtonGroup id=\"transformMethod\" type=\"radio\" name=\"transformMethod\" value={this.props.layer.transformMethod} onChange={this.props.ontransformMethodChange}>\n                        <ToggleButton variant=\"light\" value=\"smear\">smear</ToggleButton>\n                        <ToggleButton variant=\"light\" value=\"intact\">keep intact</ToggleButton>\n                      </ToggleButtonGroup>\n                    </Col>\n                  </Row>\n\n                  <Accordion className=\"mt-3\">\n                    <ScaleTransform id={this.props.layer.id} />\n                    <RotationTransform id={this.props.layer.id} />\n                    <TrackTransform id={this.props.layer.id} />\n                  </Accordion>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transforms)\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\nimport { Button, Card, Row, Col } from 'react-bootstrap'\nimport Select from 'react-select'\nimport CommentsBox from '../../components/CommentsBox'\nimport InputOption from '../../components/InputOption'\nimport DropdownOption from '../../components/DropdownOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport Transforms from '../transforms/Transforms'\nimport { updateLayer, setShapeType, restoreDefaults } from '../layers/layersSlice'\nimport { getCurrentLayer } from './selectors'\nimport { getShape, getShapeSelectOptions } from '../../models/shapes'\nimport './Layer.scss'\n\nconst mapStateToProps = (state, ownProps) => {\n  const layer = getCurrentLayer(state)\n  const shape = getShape(layer)\n\n  return {\n    layer: layer,\n    shape: shape,\n    options: shape.getOptions(),\n    selectOptions: getShapeSelectOptions(),\n    showShapeSelectRender: layer.selectGroup !== \"import\",\n    link: shape.link,\n    linkText: shape.linkText\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps\n\n  return {\n    onChange: (attrs) => {\n      attrs.id = id\n      dispatch(updateLayer(attrs))\n    },\n    onChangeType: (selected) => {\n      dispatch(setShapeType({id: id, type: selected.value}))\n    },\n    onRestoreDefaults: (event) => {\n      dispatch(restoreDefaults(id))\n    }\n  }\n}\n\nclass Layer extends Component {\n  render() {\n    const selectedOption = { value: this.props.shape.id, label: this.props.shape.name }\n    const optionsRender = Object.keys(this.props.options).map((key, index) => {\n      const option = this.props.options[key]\n\n      if (option.type === 'dropdown') {\n        return  <DropdownOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.layer} />\n      } else if (option.type === 'checkbox') {\n        return <CheckboxOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.layer} />\n      } else if (option.type === 'comments') {\n        return <CommentsBox\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  comments={this.props.layer.comments} />\n      } else {\n        return  <InputOption\n                  onChange={this.props.onChange}\n                  options={this.props.options}\n                  optionKey={key}\n                  key={key}\n                  index={index}\n                  model={this.props.layer} />\n      }\n    })\n\n    const linkText = this.props.linkText || this.props.link\n    const linkRender = this.props.link ? <Row><Col sm={5}></Col><Col sm={7}><p className=\"mt-2\">See <a target=\"_blank\" rel=\"noopener noreferrer\" href={this.props.link}>{linkText}</a> for ideas.</p></Col></Row> : undefined\n    let optionsListRender = undefined\n\n    if (Object.entries(this.props.options).length > 0) {\n      optionsListRender =\n        <div className=\"m-0\">\n          {optionsRender}\n        </div>\n    }\n\n    let shapeSelectRender = undefined\n\n    if (this.props.showShapeSelectRender) {\n      shapeSelectRender =\n        <Row className=\"align-items-center\">\n          <Col sm={5}>\n            Shape\n          </Col>\n\n          <Col sm={7}>\n            <Select\n              value={selectedOption}\n              onChange={this.props.onChangeType}\n              maxMenuHeight={305}\n              options={this.props.selectOptions} />\n          </Col>\n        </Row>\n    }\n\n    return (\n      <Card className=\"p-3 overflow-auto flex-grow-1\" style={{borderTop: \"1px solid #aaa\", borderBottom: \"none\"}}>\n        <Row className=\"align-items-center mb-2\">\n          <Col sm={5}>\n            <h2 className=\"panel m-0\">Properties</h2>\n          </Col>\n          <Col sm={7}>\n            <Button className=\"ml-auto\" variant=\"outline-primary\" size=\"sm\" onClick={this.props.onRestoreDefaults}>Restore defaults</Button>\n          </Col>\n        </Row>\n\n        { shapeSelectRender }\n\n        { linkRender }\n\n        <div className=\"pt-1\">\n          { optionsListRender }\n          { this.props.layer.canTransform && <Transforms id={this.props.layer.id} />}\n        </div>\n      </Card>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layer)\n","export default class Importer {\n  constructor(fileName, text) {\n    this.fileName = fileName\n    this.text = text\n  }\n}\n","import Importer from './Importer'\n\nexport default class ThetaRhoImporter extends Importer {\n  constructor(fileName, text) {\n    super(fileName, text)\n    this.label = 'ThetaRho'\n  }\n\n  // calls callback, returning an object containing relevant properties\n  import(callback) {\n    let hasVertex = false\n    let props = {\n      comments: [],\n      originalAspectRatio: 1.0,\n      fileName: this.fileName\n    }\n\n    let lines = this.text.split('\\n')\n    let thetaRhos = []\n\n    for (let ii = 0; ii < lines.length; ii++) {\n      var line = lines[ii].trim()\n\n      if (line.length === 0) {\n        // blank lines\n        continue\n      }\n\n      if (line.indexOf(\"#\") === 0 && !hasVertex) {\n        props.comments.push(lines[ii])\n      }\n\n      if (line.indexOf(\"#\") !== 0) {\n        hasVertex = true\n\n        // This is a point, let's try to read it.\n        var pointStrings = line.split(/\\s+/)\n        if (pointStrings.length !== 2) {\n          continue\n        }\n\n        thetaRhos.push([parseFloat(pointStrings[0]), parseFloat(pointStrings[1])])\n      }\n    }\n\n    props.vertices = this.convertToXY(thetaRhos)\n    callback(this, props)\n  }\n\n  convertToXY(thetaRhos) {\n    var vertices = []\n    var previous = undefined\n    var max_angle = Math.PI / 64.0\n    for (let ii = 0; ii < thetaRhos.length; ii++) {\n      var next = thetaRhos[ii]\n      if (previous) {\n        if (Math.abs(next[0] - previous[0]) < max_angle) {\n          // These sin, cos elements are inverted. I'm not sure why\n          vertices.push({\n                        x: previous[1] * Math.sin(previous[0]),\n                        y: previous[1] * Math.cos(previous[0])\n          })\n        } else {\n          // We need to do some interpolating.\n          let deltaAngle = next[0] - previous[0]\n          let rhoStep = max_angle / Math.abs(deltaAngle) * (next[1] - previous[1])\n          var rho = previous[1]\n          if (deltaAngle > 0.0) {\n            var emergency_break = 0\n            for (let angle = previous[0]; angle < next[0]; angle += max_angle, rho += rhoStep) {\n              vertices.push({\n                            x: rho * Math.sin(angle),\n                            y: rho * Math.cos(angle)\n              })\n              if (emergency_break++ > 100000) {\n                break\n              }\n            }\n          } else {\n            for (let angle = previous[0]; angle > next[0]; angle -= max_angle, rho += rhoStep) {\n              vertices.push({\n                            x: rho * Math.sin(angle),\n                            y: rho * Math.cos(angle)\n              })\n              if (emergency_break++ > 100000) {\n                break\n              }\n            }\n          }\n        }\n      }\n      previous = next\n    }\n    return vertices\n  }\n}\n","import Importer from './Importer'\nimport Toolpath from 'gcode-toolpath';\n\nexport default class GCodeImporter extends Importer {\n  constructor(fileName, text) {\n    super(fileName, text)\n    this.label = 'Gcode'\n  }\n\n  // calls callback, returning an object containing relevant properties\n  import(callback) {\n    let props = {\n      comments: [],\n      vertices: [],\n      fileName: this.fileName\n    }\n    let lines = this.text.split('\\n')\n\n    // This assumes the line is already trimmed and not empty.\n    // The paranthesis isn't perfect, since it usually has a match, but I don't think anyone will\n    // care. I think there are firmwares that do this same kind of hack.\n    const isComment = (line) => {\n      return (line.indexOf(\";\") === 0) || (line.indexOf('(') === 0)\n    }\n\n    const addVertex = (x, y) => {\n      props.vertices.push({x: x,y: y})\n    }\n\n    // Read the initial comments\n    for (let ii = 0; ii < lines.length; ii++) {\n      let line = lines[ii].trim()\n      if (line.length === 0) {\n        // blank lines\n        continue\n      }\n      if (isComment(line)) {\n        props.comments.push(lines[ii])\n      } else {\n        break\n      }\n    }\n\n    // GCode reader object. More info here:\n    // https://github.com/cncjs/gcode-toolpath/blob/master/README.md\n    const toolpath = new Toolpath({\n      // @param {object} modal The modal object.\n      // @param {object} v1 A 3D vector of the start point.\n      // @param {object} v2 A 3D vector of the end point.\n      addLine: (modal, v1, v2) => {\n        if (v1.x !== v2.x || v1.y !== v2.y) {\n          addVertex(v2.x, v2.y)\n        }\n      },\n      // @param {object} modal The modal object.\n      // @param {object} v1 A 3D vector of the start point.\n      // @param {object} v2 A 3D vector of the end point.\n      // @param {object} v0 A 3D vector of the fixed point.\n      addArcCurve: (modal, v1, v2, v0) => {\n        if (v1.x !== v2.x || v1.y !== v2.y) {\n          // We can't use traceCircle, we have to go a specific direction (not the shortest path).\n          let startTheta = Math.atan2(v1.y-v0.y, v1.x-v0.x)\n          let endTheta   = Math.atan2(v2.y-v0.y, v2.x-v0.x)\n          let deltaTheta = endTheta - startTheta\n          const radius   = Math.sqrt(Math.pow(v2.x-v0.x, 2.0) + Math.pow(v2.y-v0.y, 2.0))\n          let direction  = 1.0 // Positive, so anticlockwise.\n\n          // Clockwise\n          if (modal.motion === 'G2') {\n            if (deltaTheta > 0.0) {\n              endTheta -= 2.0*Math.PI\n              deltaTheta -= 2.0*Math.PI\n            }\n            direction = -1.0\n          } else if (modal.motion === 'G3') {\n            // Anti-clockwise\n            if (deltaTheta < 0.0) {\n              endTheta += 2.0*Math.PI\n              deltaTheta += 2.0*Math.PI\n            }\n          }\n\n          // What angle do we need to have a resolution of approx. 0.5mm?\n          const arcResolution = 0.5\n          const arcLength = Math.abs(deltaTheta) * radius\n          const thetaStep = deltaTheta * arcResolution/arcLength\n          for (let theta = startTheta;\n               direction * theta <= direction * endTheta;\n               theta += thetaStep) {\n            addVertex(v0.x + radius * Math.cos(theta), v0.y + radius * Math.sin(theta))\n          }\n          // Save the final point, in case our math didn't quite get there.\n          addVertex(v2.x, v2.y)\n        }\n      }\n    });\n\n    toolpath.loadFromString(this.text, (err, results) => {\n      callback(this, this.normalizeCoords(props))\n    })\n  }\n\n  normalizeCoords(props) {\n    const vertices = props.vertices\n    let minX = 1e9\n    let minY = 1e9\n    let maxX = -1e9\n    let maxY = -1e9\n\n    vertices.forEach( (vertex) => {\n      minX = Math.min(vertex.x, minX)\n      minY = Math.min(vertex.y, minY)\n      maxX = Math.max(vertex.x, maxX)\n      maxY = Math.max(vertex.y, maxY)\n    })\n\n    const offsetX = (maxX + minX)/2.0\n    const offsetY = (maxY + minY)/2.0\n    const scaleX = 1.0/(maxX - offsetX)\n    const scaleY = 1.0/(maxY - offsetY)\n\n    props.originalAspectRatio = scaleX/scaleY\n    props.vertices = vertices.map(vertex => {\n      return {\n        x: scaleX * (vertex.x - offsetX),\n        y: scaleY * (vertex.y - offsetY)\n      }\n    })\n\n    return props\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Accordion, Button, Card, ListGroup, Modal, Row, Col, Form } from 'react-bootstrap'\nimport Select from 'react-select'\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc'\nimport { FaTrash, FaEye, FaEyeSlash, FaCopy } from 'react-icons/fa';\nimport { getLayerInfo, getCurrentLayer, getNumLayers } from '../layers/selectors'\nimport { setCurrentLayer, addLayer, copyLayer, updateLayers, removeLayer, moveLayer, toggleVisible, setNewLayerType } from '../layers/layersSlice'\nimport { registeredShapes, getShapeSelectOptions, getShape } from '../../models/shapes'\nimport ReactGA from 'react-ga'\nimport ThetaRhoImporter from '../importer/ThetaRhoImporter'\nimport GCodeImporter from '../importer/GCodeImporter'\nimport './Playlist.scss'\n\nconst mapStateToProps = (state, ownProps) => {\n  const layer = getCurrentLayer(state)\n  const shape = getShape(layer)\n\n  return {\n    layers: getLayerInfo(state),\n    numLayers: getNumLayers(state),\n    currentLayer: layer,\n    shape: shape,\n    newLayerType: state.layers.newLayerType,\n    newLayerName: state.layers.newLayerName,\n    newLayerNameOverride: state.layers.newLayerNameOverride,\n    copyLayerName: state.layers.copyLayerName,\n    selectOptions: getShapeSelectOptions()\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onLayerSelected: (event) => {\n      const id = event.target.closest('.list-group-item').id\n      dispatch(setCurrentLayer(id))\n    },\n    onLayerAdded: (type) => {\n      const attrs = registeredShapes[type].getInitialState()\n      dispatch(addLayer(attrs))\n    },\n    onLayerImport: (importProps) => {\n      const attrs = {\n        ...registeredShapes[\"file_import\"].getInitialState(importProps),\n        name: importProps.fileName\n      }\n      dispatch(addLayer(attrs))\n    },\n    onLayerCopied: (id) => {\n      dispatch(copyLayer(id))\n    },\n    onLayerRemoved: (event) => {\n      dispatch(removeLayer(event.target.closest('button').dataset.id))\n    },\n    onChangeNewType: (selected) => {\n      dispatch(setNewLayerType(selected.value))\n    },\n    onChangeNewName: (event) => {\n      dispatch(updateLayers({ newLayerName: event.target.value, newLayerNameOverride: true }))\n    },\n    onChangeCopyName: (event) => {\n      dispatch(updateLayers({ copyLayerName: event.target.value }))\n    },\n    onLayerMoved: ({oldIndex, newIndex}) => {\n      dispatch(moveLayer({oldIndex: oldIndex, newIndex: newIndex}))\n    },\n    onToggleLayerVisible: (event) => {\n      const id = event.target.closest('.list-group-item').id\n      dispatch(toggleVisible({id: id}))\n    }\n  }\n}\n\nconst customStyles = {\n  control: base => ({\n    ...base,\n    height: 55,\n    minHeight: 55\n  })\n}\n\nconst SortableItem = SortableElement(({id, name, active, canRemove, visible, onCopyLayer, onLayerRemoved, onLayerSelected, onToggleLayerVisible}) => {\n  const activeClass = active ? 'active' : ''\n  const dragClass = canRemove ? 'cursor-move' : ''\n  return <ListGroup.Item className={[activeClass, dragClass, 'd-flex align-items-center'].join(' ')} key={id} id={id} onClick={onLayerSelected}>\n    <Button className=\"layer-button\" variant=\"link\" data-id={id} onClick={onToggleLayerVisible}>\n      {visible && <FaEye />}\n      {!visible && <FaEyeSlash />}\n    </Button>\n    <div className=\"no-select\">{name}</div>\n    <Button className=\"ml-auto layer-button\" variant=\"link\" data-id={id} onClick={onCopyLayer}>\n      <FaCopy />\n    </Button>\n    {canRemove && <Button className=\"layer-button\" variant=\"link\" data-id={id} onClick={onLayerRemoved}>\n      <FaTrash />\n    </Button>}\n  </ListGroup.Item>\n})\n\nconst SortableList = SortableContainer(({layers, currentLayer, numLayers, onCopyLayer, onLayerSelected, onLayerRemoved, onToggleLayerVisible}) => {\n  return (\n    <ListGroup variant=\"flush\" style={{maxHeight: \"200px\"}} className=\"border overflow-auto\" id=\"playlist-group\">\n      {layers.map((layer, index) => {\n        return (\n          <SortableItem\n            key={layer.id}\n            id={layer.id}\n            name={layer.name}\n            index={index}\n            active={currentLayer.id === layer.id}\n            visible={layer.visible}\n            canRemove={numLayers > 1}\n            onCopyLayer={onCopyLayer}\n            onLayerSelected={onLayerSelected}\n            onLayerRemoved={onLayerRemoved}\n            onToggleLayerVisible={onToggleLayerVisible}\n            />\n        )\n      })}\n    </ListGroup>\n  )\n})\n\nclass Playlist extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      showNewLayer: false,\n      showImportLayer: false,\n      showCopyLayer: false\n    }\n  }\n\n  scrollToBottom() {\n    // we're not supposed to directly access DOM with React, with instead use a ref. That said, I can't figure\n    // out how to get the nested ref in an elegant way.\n    const el = document.getElementById('playlist-group')\n    el.scrollTop = el.scrollHeight\n  }\n\n  toggleNewModal() {\n    this.setState({showNewLayer: !this.state.showNewLayer})\n  }\n\n  toggleImportModal() {\n    this.setState({showImportLayer: !this.state.showImportLayer})\n  }\n\n  onFileSelected(event) {\n    let file = event.target.files[0]\n    let reader = new FileReader()\n\n    reader.onload = (event) => {\n      this.startTime = performance.now()\n      var text = reader.result\n\n      let importer\n      if (file.name.toLowerCase().endsWith('.thr')) {\n        importer = new ThetaRhoImporter(file.name, text)\n      } else if (file.name.toLowerCase().endsWith('.gcode') || file.name.toLowerCase().endsWith('.nc')) {\n        importer = new GCodeImporter(file.name, text)\n      }\n\n      importer.import(this.onFileImported.bind(this))\n      this.toggleImportModal.bind(this)();\n    }\n\n    reader.readAsText(file)\n  }\n\n  onFileImported(importer, importerProps) {\n    this.props.onLayerImport(importerProps)\n\n    this.endTime = performance.now()\n    ReactGA.timing({\n      category: 'PatternImport',\n      variable: 'read' + importer.label,\n      value: this.endTime - this.startTime // in milliseconds\n    })\n  }\n\n  toggleCopyModal() {\n    this.setState({showCopyLayer: !this.state.showCopyLayer})\n  }\n\n  handleNameFocus(event) {\n    event.target.select()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.numLayers > prevProps.numLayers) {\n      // new layer added; make sure we scroll down to it\n      this.scrollToBottom()\n    }\n  }\n\n  render() {\n    const selectedShape = getShape({type: this.props.newLayerType})\n    const selectedOption = { value: selectedShape.id, label: selectedShape.name }\n    const namedInputRef = React.createRef()\n\n    return (\n      <div>\n        <Modal show={this.state.showNewLayer} onHide={this.toggleNewModal.bind(this)}>\n          <Modal.Header closeButton>\n            <Modal.Title>Create new layer</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <Row className=\"align-items-center\">\n              <Col sm={5}>\n                Shape\n              </Col>\n              <Col sm={7}>\n                <Select\n                  value={selectedOption}\n                  onChange={this.props.onChangeNewType}\n                  styles={customStyles}\n                  maxMenuHeight={305}\n                  options={this.props.selectOptions} />\n              </Col>\n            </Row>\n            <Row className=\"align-items-center mt-2\">\n              <Col sm={5}>\n                Name\n              </Col>\n              <Col sm={7}>\n                <Form.Control\n                  value={this.props.newLayerName}\n                  onFocus={this.handleNameFocus}\n                  onChange={this.props.onChangeNewName}\n                />\n              </Col>\n            </Row>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button id=\"new-layer-close\" variant=\"link\" onClick={this.toggleNewModal.bind(this)}>Cancel</Button>\n            <Button id=\"new-layer-add\" variant=\"primary\" onClick={() => { this.props.onLayerAdded(this.props.newLayerType || this.props.currentLayer.type); this.toggleNewModal()}}>Create</Button>\n          </Modal.Footer>\n        </Modal>\n\n        <Modal size=\"lg\" show={this.state.showImportLayer} onHide={this.toggleImportModal.bind(this)}>\n          <Modal.Header closeButton>\n            <Modal.Title>Import new layer</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <Accordion className=\"mb-4\">\n              <Card className=\"active mt-2\">\n                <Card.Header as={Form.Label} htmlFor=\"fileUpload\" style={{ cursor: \"pointer\" }}>\n                  <h3>Import</h3>\n                  Imports a pattern file as a new layer. Supported formats are .thr, .gcode, and .nc.\n                  <Form.Control\n                      id=\"fileUpload\"\n                      type=\"file\"\n                      accept=\".thr,.gcode,.nc\"\n                      onChange={this.onFileSelected.bind(this)}\n                      style={{ display: \"none\" }} />\n                </Card.Header>\n              </Card>\n            </Accordion>\n            <div className=\"mt-2\">\n              <h3>Where to get .thr files</h3>\n              Sisyphus machines use theta rho (.thr) files. There is a large community sharing them.\n              <div className=\"row mt-2\">\n                <div className=\"col-6\">\n                  <ul className=\"list-unstyled\">\n                    <li><a href=\"https://reddit.com/u/markyland\">Markyland on Reddit</a></li>\n                    <li><a href=\"https://github.com/Dithermaster/sisyphus/\">Dithermaster's github</a></li>\n                    <li><a href=\"https://github.com/SlightlyLoony/JSisyphus\">JSisyphus by Slightly Loony</a></li>\n                  </ul>\n                </div>\n                <div className=\"col-6\">\n                  <ul className=\"list-unstyled\">\n                    <li><a href=\"https://reddit.com/r/SisyphusIndustries\">Sisyphus on Reddit</a></li>\n                    <li><a href=\"https://sisyphus-industries.com/community/community-tracks\">Sisyphus Community</a></li>\n                    <li><a href=\"http://thejuggler.net/sisyphus/\">The Juggler</a></li>\n                  </ul>\n                </div>\n              </div>\n\n              <h3 className=\"mt-3\">About copyrights</h3>\n              <p>Be careful and respectful. Understand that the original author put their labor, intensity, and ideas into this art. The creators have a right to own it (and they have a copyright, even if it doesn't say so). If you don't have permisson (a license) to use their art, then you shouldn't be. If you do have permission to use their art, then you should be thankful, and I'm sure they would appreciate you sending them a note of thanks. A picture of your table creating their shared art would probably make them smile.</p>\n              <p>Someone posting the .thr file to a forum or subreddit probably wants it to be shared, and drawing it on your home table is probably OK. Just be careful if you want to use them for something significant without explicit permission.</p>\n              <p>P.S. I am not a lawyer.</p>\n            </div>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button id=\"new-layer-close\" variant=\"primary\" onClick={this.toggleImportModal.bind(this)}>Done</Button>\n          </Modal.Footer>\n        </Modal>\n\n        <Modal show={this.state.showCopyLayer}\n          onHide={this.toggleCopyModal.bind(this)}\n          onEntered={() => namedInputRef.current.focus()}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Copy {this.props.currentLayer.name}</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <Row className=\"align-items-center\">\n              <Col sm={5}>\n                Name\n              </Col>\n              <Col sm={7}>\n                <Form.Control\n                  ref={namedInputRef}\n                  value={this.props.copyLayerName}\n                  onFocus={this.handleNameFocus}\n                  onChange={this.props.onChangeCopyName}\n                />\n              </Col>\n            </Row>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button id=\"copy-layer-close\" variant=\"link\" onClick={this.toggleCopyModal.bind(this)}>Cancel</Button>\n            <Button id=\"copy-layer-copy\" variant=\"primary\" onClick={() => { this.props.onLayerCopied(this.props.currentLayer.id); this.toggleCopyModal(); }}>Copy</Button>\n          </Modal.Footer>\n        </Modal>\n\n        <div className=\"p-3\">\n          <h2 className=\"panel\">Layers ({this.props.numLayers})</h2>\n          <SortableList\n            pressDelay={150}\n            layers={this.props.layers}\n            currentLayer={this.props.currentLayer}\n            numLayers={this.props.numLayers}\n            onLayerSelected={this.props.onLayerSelected}\n            onCopyLayer={this.toggleCopyModal.bind(this)}\n            onLayerRemoved={this.props.onLayerRemoved.bind(this)}\n            onSortEnd={this.props.onLayerMoved}\n            onToggleLayerVisible={this.props.onToggleLayerVisible}\n          />\n          <Button className=\"mt-2 mr-1\" variant=\"outline-primary\" size=\"sm\" onClick={this.toggleNewModal.bind(this)}>New</Button>\n          <Button className=\"mt-2\" variant=\"outline-primary\" size=\"sm\" onClick={this.toggleImportModal.bind(this)}>Import</Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Playlist)\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    sandifyVersion: '0.2.4', // Also change the version in package.json.\n    input: 'shape',\n  },\n  reducers: {\n    chooseInput(state, action) {\n      state.input = action.payload\n    },\n  }\n})\n\nexport const {\n  chooseInput\n} = appSlice.actions\n\nexport default appSlice.reducer\n","import React, { Component } from 'react'\nimport ReactGA from 'react-ga'\nimport { Tab, Tabs } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport MachineSettings from '../machine/MachineSettings'\nimport Footer from './Footer'\nimport Layer from '../layers/Layer'\nimport Playlist from '../layers/Playlist'\nimport { chooseInput } from '../app/appSlice'\nimport { getCurrentLayer } from '../layers/selectors'\n\nconst mapStateToProps = (state, ownProps) => {\n  const layer = getCurrentLayer(state)\n\n  return {\n    layer: layer\n  }\n}\n\nclass InputTabs extends Component {\n  handleSelect(key) {\n    ReactGA.event({\n      category: 'InputTabs',\n      action: 'handleSelect: ' + key,\n    })\n    this.props.dispatch(chooseInput(key))\n  }\n\n  render() {\n    return (\n       <Tabs defaultActiveKey=\"shape\" onSelect={this.handleSelect.bind(this)} id=\"input-tabs\">\n         <Tab eventKey=\"shape\" title=\"Draw\" className=\"full-page-tab\">\n           <div className=\"d-flex flex-column h-100\">\n             <Playlist />\n             <Layer key={this.props.layer.id} id={this.props.layer.id} />\n            </div>\n         </Tab>\n\n         <Tab eventKey=\"machine\" title=\"Machine\" className=\"full-page-tab\">\n           <MachineSettings />\n         </Tab>\n\n         <Tab eventKey=\"about\" title=\"About\" className=\"full-page-tab\">\n           <Footer />\n         </Tab>\n       </Tabs>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, null)(InputTabs)\n","import { createSlice } from \"@reduxjs/toolkit\"\n\nconst previewSlice = createSlice({\n  name: 'preview',\n  initialState: {\n    canvasWidth: 600,\n    canvasHeight: 600,\n    sliderValue: 0.0\n  },\n  reducers: {\n    updatePreview(state, action) {\n      Object.assign(state, action.payload)\n    },\n    setPreviewSize(state, action) {\n      state.canvasHeight = action.payload.height\n      state.canvasWidth = action.payload.width\n    },\n  }\n})\n\nexport const {\n  updatePreview,\n  setPreviewSize,\n} = previewSlice.actions\n\nexport default previewSlice.reducer\n","import Victor from 'victor'\nimport Machine from './Machine'\nimport { distance } from '../../common/geometry'\n\nexport default class RectMachine extends Machine {\n  constructor(vertices, settings, layerInfo) {\n    super()\n    this.vertices = vertices\n    this.settings = settings\n    this.layerInfo = layerInfo\n    this.sizeX = Math.abs((settings.maxX - settings.minX) / 2.0)\n    this.sizeY = Math.abs((settings.maxY - settings.minY) / 2.0)\n  }\n\n  addStartPoint() {\n    return this\n  }\n\n  addEndPoint() {\n    if (this.settings.rectOrigin.length === 1) {\n      // OK, let's assign corners indices:\n      // [1]   [2]\n      //\n      //\n      // [0]   [3]\n      const corner = this.settings.rectOrigin[0]\n      const corners = [\n        new Victor(-this.sizeX, -this.sizeY),\n        new Victor(-this.sizeX, this.sizeY),\n        new Victor(this.sizeX, this.sizeY),\n        new Victor(this.sizeX, -this.sizeY)\n      ]\n\n      const first = this.vertices[0]\n      const last = this.vertices[this.vertices.length-1]\n      const maxRadius = Math.sqrt(Math.pow(2.0*this.sizeX, 2.0) + Math.pow(2.0*this.sizeY, 2.0)) / 2.0\n      let scale, outPoint\n\n      if (first.magnitude() <= last.magnitude()) {\n        // It's going outward\n        scale = maxRadius / last.magnitude()\n        outPoint = last\n      } else {\n        scale = maxRadius / first.magnitude()\n        outPoint = first\n      }\n\n      let clipped = this.clipLine(\n        outPoint,\n        Victor.fromObject(outPoint).multiply(new Victor(scale, scale))\n      )\n      const newPoint = clipped[clipped.length - 1]\n      if (outPoint === last) {\n        this.vertices = [this.vertices, this.tracePerimeter(newPoint, corners[corner], true)].flat()\n      } else {\n        this.vertices = [this.tracePerimeter(corners[corner], newPoint, true), this.vertices].flat()\n      }\n    }\n\n    return this\n  }\n\n  // Returns the distance along the perimeter between two points\n  perimeterDistance(v1, v2) {\n    return this.distance(this.tracePerimeter(v1, v2, true))\n  }\n\n  // Returns whether a given path lies on the perimeter of the rectangle\n  onPerimeter(v1, v2, delta=.0001) {\n    const dx = Math.abs(Math.abs(v1.x) - this.sizeX)\n    const dy = Math.abs(Math.abs(v1.y) - this.sizeY)\n    const rDx = Math.abs(v1.x - v2.x)\n    const rDy = Math.abs(v1.y - v2.y)\n\n    return (rDx < delta && dx < delta) || (rDy < delta && dy < delta)\n  }\n\n  // Given two perimeter points, traces the shortest valid path between them (stays on\n  // perimeter). Returns a list of intermediate points on that path (if any).\n  // On further consideration, this could be redone using Dijsktra's algorithm, I believe,\n  // but this works and is, I believe, reasonably efficient.\n  tracePerimeter(p1, p2, includeOriginalPoints=false) {\n    let points\n\n    if ((p1.x === p2.x && Math.abs(p1.x) === this.sizeX) || (p1.y === p2.y && (Math.abs(p1.y) === this.sizeY))) {\n      // on the same line; no connecting points needed\n      points = []\n    } else {\n      // horizontal or vertical orientation\n      let o1 = Math.abs(p1.x) === this.sizeX ? 'v' : 'h'\n      let o2 = Math.abs(p2.x) === this.sizeX ? 'v' : 'h'\n\n      if (o1 !== o2) {\n        // connects via a single corner\n        points = (o1 === 'h') ?\n          [new Victor(p2.x, p1.y)] :\n          [new Victor(p1.x, p2.y)]\n      } else {\n        // connects via two corners; find the shortest way around\n        if (o1 === 'h') {\n          let d1 = -2*this.sizeX - p1.x - p2.x\n          let d2 = 2*this.sizeX - p1.x - p2.x\n          let xSign = Math.abs(d1) > Math.abs(d2) ? 1 : -1\n\n          points = [\n            new Victor(Math.sign(xSign)*this.sizeX, Math.sign(p1.y)*this.sizeY),\n            new Victor(Math.sign(xSign)*this.sizeX, -Math.sign(p1.y)*this.sizeY)\n          ]\n        } else {\n          let d1 = -2*this.sizeY - p1.y - p2.y\n          let d2 = 2*this.sizeY - p1.y - p2.y\n          let ySign = Math.abs(d1) > Math.abs(d2) ? 1 : -1\n\n          points = [\n            new Victor(Math.sign(p1.x)*this.sizeX, Math.sign(ySign)*this.sizeY),\n            new Victor(-Math.sign(p1.x)*this.sizeX, Math.sign(ySign)*this.sizeY),\n          ]\n        }\n      }\n    }\n\n    if (includeOriginalPoints) {\n      points.unshift(p1)\n      points.push(p2)\n    }\n\n    return points\n  }\n\n  // Finds the nearest vertex that is in the bounds. This will change the shape. i.e. this\n  // doesn't care about the line segment, only about the point.\n  nearestVertex(vertex) {\n    return new Victor(\n      Math.min(this.sizeX, Math.max(-this.sizeX, vertex.x)),\n      Math.min(this.sizeY, Math.max(-this.sizeY, vertex.y))\n    )\n  }\n\n  // The guts of logic for this limits enforcer. It will take a single line (defined by\n  // start and end) and if the line goes out of bounds, returns the vertices around the\n  // outside edge to follow around without messing up the shape of the vertices.\n  clipLine(lineStart, lineEnd) {\n    var quadrantStart = this.pointLocation(lineStart)\n    var quadrantEnd = this.pointLocation(lineEnd)\n\n    if (quadrantStart === 0b0000 && quadrantEnd === 0b0000) {\n      // The line is inside the boundaries\n      return [lineStart, lineEnd]\n    }\n\n    if (quadrantStart === quadrantEnd) {\n      // We are in the same box, and we are out of bounds.\n      return [this.nearestVertex(lineStart), this.nearestVertex(lineEnd)]\n    }\n\n    if (quadrantStart & quadrantEnd) {\n      // These points are all on one side of the box.\n      return [this.nearestVertex(lineStart), this.nearestVertex(lineEnd)]\n    }\n\n    if (quadrantStart === 0b000) {\n      // We are exiting the box. Return the start, the intersection with the boundary, and the closest\n      // boundary point to the exited point.\n      var line = [lineStart]\n      line.push(this.boundPoint(lineStart, lineEnd))\n      line.push(this.nearestVertex(lineEnd))\n      return line\n    }\n\n    if (quadrantEnd === 0b000) {\n      // We are re-entering the box.\n      return [this.boundPoint(lineEnd, lineStart), lineEnd]\n    }\n\n    // We have reached a terrible place, where both points are oob, but it might intersect with the\n    // work area. First, define the boundaries as lines.\n    const sides = [\n      // left\n      [Victor(-this.sizeX, -this.sizeY), new Victor(-this.sizeX, this.sizeY)],\n      // right\n      [new Victor(this.sizeX, -this.sizeY), new Victor(this.sizeX, this.sizeY)],\n      // bottom\n      [new Victor(-this.sizeX, -this.sizeY), new Victor(this.sizeX, -this.sizeY)],\n      // top\n      [new Victor(-this.sizeX, this.sizeY), new Victor(this.sizeX, this.sizeY)],\n    ]\n\n    // Count up the number of boundary lines intersect with our line segment.\n    var intersections = []\n    for (var s=0; s<sides.length; s++) {\n      var intPoint = this.intersection(lineStart,\n                                   lineEnd,\n                                   sides[s][0],\n                                   sides[s][1])\n      if (intPoint) {\n        intersections.push(new Victor(intPoint.x, intPoint.y))\n      }\n    }\n\n    if (intersections.length !== 0) {\n      if (intersections.length !== 2) {\n        // We should never get here. How would we have something other than 2 or 0 intersections with\n        // a box?\n        console.log(intersections)\n        throw Error(\"Software Geometry Error\")\n      }\n\n      // The intersections are tested in some normal order, but the line could be going through them\n      // in any direction. This check will flip the intersections if they are reversed somehow.\n      if (Victor.fromObject(intersections[0]).subtract(lineStart).lengthSq() >\n          Victor.fromObject(intersections[1]).subtract(lineStart).lengthSq()) {\n        var temp = intersections[0]\n        intersections[0] = intersections[1]\n        intersections[1] = temp\n      }\n\n      return [...intersections, this.nearestVertex(lineEnd)]\n    }\n\n    // Damn. We got here because we have a start and end that are failing different boundary checks,\n    // and the line segment doesn't intersect the box. We have to crawl around the outside of the\n    // box until we reach the other point.\n    // Here, I'm going to split this line into two parts, and send each half line segment back\n    // through the clipLine algorithm. Eventually, that should result in only one of the other cases.\n    var midpoint = Victor.fromObject(lineStart).add(lineEnd).multiply(new Victor(0.5, 0.5))\n\n    // recurse, and find smaller segments until we don't end up in this place again.\n    return [...this.clipLine(lineStart, midpoint),\n            ...this.clipLine(midpoint, lineEnd)]\n  }\n\n  // Intersect the line with the boundary, and return the point exactly on the boundary.\n  // This will keep the shape. i.e. It will follow the line segment, and return the point on that line\n  // segment.\n  boundPoint(good, bad) {\n    const dx = good.x - bad.x\n    const dy = good.y - bad.y\n    const fixed = new Victor(bad.x, bad.y)\n    let distance = 0\n\n    if (bad.x < -this.sizeX || bad.x > this.sizeX) {\n      if (bad.x < -this.sizeX) {\n        // we are leaving the left\n        fixed.x = -this.sizeX\n      } else {\n        // we are leaving the right\n        fixed.x = this.sizeX\n      }\n\n      distance = (fixed.x - good.x) / dx\n      fixed.y = good.y + distance * dy\n\n      // We fixed x, but y might have the same problem, so we'll rerun this, with different points.\n      return this.boundPoint(good, fixed)\n    }\n\n    if (bad.y < -this.sizeY || bad.y > this.sizeY) {\n      if (bad.y < -this.sizeY) {\n        // we are leaving the bottom\n        fixed.y = -this.sizeY\n      } else {\n        // we are leaving the top\n        fixed.y = this.sizeY\n      }\n\n      distance = (fixed.y - good.y) / dy\n      fixed.x = good.x + distance * dx\n    }\n\n    return fixed\n  }\n\n  // Returns the distance walked from the first vertex to the last vertex.\n  distance(vertices) {\n    let d = 0\n    for(let i=0; i<vertices.length; i++) {\n      if (i > 0) d = d + distance(vertices[i], vertices[i-1])\n    }\n\n    return d\n  }\n\n  // Determines which of 8 neighbor areas the point is in:\n  //   https://stackoverflow.com/questions/3746274/line-intersection-with-aabb-rectangle\n  //           |          |\n  //   0b1001  |  0b0001  |  0b0101\n  //           |          |\n  // ------------------------------ y_max\n  //           |          |\n  //   0b1000  |  0b0000  |  0b0100\n  //           |          |\n  // ------------------------------ y_min\n  //           |          |\n  //   0b1010  |  0b0010  |  0b0110\n  //           |          |\n  //         x_min      x_max\n  //\n  pointLocation(point) {\n    let location = 0b0\n\n    if (point.x < -this.sizeX) {\n      location += 0b1000\n    } else if (point.x > this.sizeX) {\n      location += 0b0100\n    }\n\n    if (point.y < -this.sizeY) {\n      location += 0b0001\n    } else if (point.y > this.sizeY) {\n      location += 0b0010\n    }\n\n    return location\n  }\n\n  // Determines intersection with one of the sides.\n  intersection(lineStart, lineEnd, sideStart, sideEnd) {\n    let line = lineEnd.clone().subtract(lineStart)\n    let side = sideEnd.clone().subtract(sideStart)\n    let lineCrossSidePerp = line.x * side.y - line.y * side.x\n\n    // if line Cross side === 0, it means the lines are parallel so have infinite intersection points\n    if (lineCrossSidePerp === 0) {\n      return null\n    }\n\n    const diff = sideStart.clone().subtract(lineStart)\n    let t = (diff.x * side.y - diff.y * side.x) / lineCrossSidePerp\n    if (t < 0 || t >= 1) {\n      return null\n    }\n\n    const u = (diff.x * line.y - diff.y * line.x) / lineCrossSidePerp\n    if (u < 0 || u >= 1) {\n      return null\n    }\n\n    return lineStart.clone().add(line.clone().multiply(new Victor(t, t)))\n  }\n}\n","import ReactGA from 'react-ga'\nimport throttle from 'lodash/throttle'\nimport { evaluate } from 'mathjs'\nimport { distance, scale, rotate } from '../../common/geometry'\nimport PolarMachine from './PolarMachine'\nimport RectMachine from './RectMachine'\nimport Victor from 'victor'\n\nfunction track(vertex, data, loopIndex) {\n  const angle = data.trackLength * loopIndex / 16 * 2.0 * Math.PI\n  let radius = 1.0\n\n  if (data.trackGrowEnabled) {\n    radius = 1.0 + loopIndex / 10.0 * data.trackGrow / 100.0\n  }\n  return new Victor(\n    vertex.x + radius * data.trackValue * Math.cos(angle),\n    vertex.y + radius * data.trackValue * Math.sin(angle)\n  )\n}\n\nexport const transformShape = (data, vertex, amount, trackIndex=0, numLoops) => {\n  numLoops = numLoops || data.numLoops\n  let transformedVertex = vertex\n\n  if (data.repeatEnabled && data.growEnabled) {\n    let growAmount = 100\n    if (data.growMethod === 'function') {\n      try {\n        growAmount = data.growValue * evaluate(data.growMath, {i: amount})\n      }\n      catch (err) {\n        console.log(\"Error parsing grow function: \" + err)\n        growAmount = 200\n      }\n    } else {\n      growAmount = 100.0 + (data.growValue * amount)\n    }\n    transformedVertex = scale(transformedVertex, growAmount)\n  }\n\n  if (data.repeatEnabled && data.spinEnabled) {\n    let spinAmount = 0\n    if (data.spinMethod === 'function') {\n      try {\n        spinAmount = data.spinValue * evaluate(data.spinMath, {i: amount})\n      }\n      catch (err) {\n        console.log(\"Error parsing spin function: \" + err)\n        spinAmount = 0\n      }\n    } else {\n      const loopPeriod = numLoops / (parseInt(data.spinSwitchbacks) + 1)\n      const stage = amount/loopPeriod\n      const direction = (stage % 2 < 1 ? 1.0 : -1.0)\n      spinAmount = direction * (amount % loopPeriod) * data.spinValue\n      // Add in the amount it goes positive to the negatives, so they start at the same place.\n      if (direction < 0.0) {\n        spinAmount += loopPeriod * data.spinValue\n      }\n    }\n    transformedVertex = rotate(transformedVertex, spinAmount)\n  }\n\n  if (data.repeatEnabled && data.trackEnabled) {\n    transformedVertex = track(transformedVertex, data, trackIndex)\n  }\n\n  transformedVertex.rotateDeg(-data.rotation)\n  transformedVertex.addX({x: data.offsetX || 0}).addY({y: data.offsetY || 0})\n\n  return transformedVertex\n}\n\nfunction buildTrackLoop(vertices, transform, i, t) {\n  const numTrackLoops = transform.repeatEnabled ? transform.trackNumLoops : 1\n  const nextTrackVertex = transformShape(transform, vertices[0], 0, i + 1, numTrackLoops)\n  const backtrack = numTrackLoops > 1 && t === numTrackLoops - 1\n  let numVertices = vertices.length\n  let trackVertices = []\n  let trackDistances = []\n\n  for (var j=0; j<numVertices; j++) {\n    const amount = transform.transformMethod === 'smear' ? i + t + j/vertices.length : i + t\n    const trackVertex = transformShape(transform, vertices[j], amount, i, numTrackLoops)\n    trackVertices.push(trackVertex)\n\n    if (backtrack) {\n      trackDistances.push(distance(nextTrackVertex, trackVertex))\n    }\n  }\n\n  // backtrack to the vertex with the shortest distance to the first vertex in\n  // the next track loop; this minimizes the amount our shape draws over the\n  // previous shape, which is not visually appealing.\n  if (backtrack) {\n    let minIdx = 0\n    let minD = Number.MAX_SAFE_INTEGER\n\n    trackDistances.forEach((d, idx) => {\n      if (d <= minD) {\n        minD = d\n        minIdx = idx\n      }\n    })\n\n    if (minIdx !== 0) {\n      trackVertices = trackVertices.concat(trackVertices.slice(minIdx, trackVertices.length-1).reverse())\n    }\n  }\n\n  return trackVertices\n}\n\n// ensure vertices do not exceed machine boundary limits, and endpoints as needed\nexport const polishVertices = (vertices, machine, layerInfo) => {\n  vertices = vertices.map(vertex => Victor.fromObject(vertex))\n  const machineClass = machine.rectangular ? RectMachine : PolarMachine\n\n  if (vertices.length > 0) {\n    vertices = new machineClass(vertices, machine, layerInfo).polish().vertices\n  }\n\n  return vertices\n}\n\nfunction reportTiming(time) {\n  time = Math.max(time, 0.01)\n  ReactGA.timing({\n    category: 'Compute',\n    variable: 'transformShapes',\n    value: time, // in milliseconds\n  });\n}\n\nconst throttledReportTiming = throttle(reportTiming, 1000, {trailing: true })\n\nexport const transformShapes = (vertices, transform) => {\n  const startTime = performance.now()\n  const numLoops = transform.repeatEnabled ? transform.numLoops : 1\n  const numTrackLoops = transform.repeatEnabled ? transform.trackNumLoops : 1\n  let outputVertices = []\n\n  if (transform.canChangeSize) {\n    vertices = vertices.map(vertex => {\n      return scale(vertex, 100.0 * transform.startingSize)\n    })\n  }\n\n  if (transform.transformMethod === 'smear' && transform.repeatEnabled) {\n    // remove last vertex; we don't want to return to our starting point when completing the shape\n    vertices.pop()\n  }\n\n  if (transform.trackEnabled && numTrackLoops > 1) {\n    for (var i=0; i<numLoops; i++) {\n      for (var t=0; t<numTrackLoops; t++) {\n        outputVertices = outputVertices.concat(buildTrackLoop(vertices, transform, i, t))\n      }\n    }\n  } else {\n    for (i=0; i<numLoops; i++) {\n      for (var j=0; j<vertices.length; j++) {\n        let amount = transform.transformMethod === 'smear' ? i + j/vertices.length : i\n        outputVertices.push(transformShape(transform, vertices[j], amount, amount))\n      }\n    }\n  }\n\n  if (transform.reverse) {\n    outputVertices = outputVertices.reverse()\n  }\n\n  const endTime = performance.now()\n  throttledReportTiming(endTime - startTime)\n\n  return outputVertices\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\n// Determine default file type; this is a little fussy because we want to ensure\n// that if the user has a rectangular table, but somehow wants to export theta\n// rho (or vice versa), we'll save that setting.\nlet fileType\nif (localStorage.getItem('export_fileType')) {\n  fileType = localStorage.getItem('export_fileType')\n} else if (localStorage.getItem('machine_rect_active')) {\n  fileType = localStorage.getItem('machine_rect_active') ? 'GCode (.gcode)' : 'Theta Rho (.thr)'\n} else {\n  fileType = 'GCode (.gcode)'\n}\n\nconst exporterSlice = createSlice({\n  name: 'exporter',\n  initialState: {\n    fileName: 'sandify',\n    fileType: fileType,\n    pre: localStorage.getItem('export_pre') ? localStorage.getItem('export_pre') : '',\n    post: localStorage.getItem('export_post') ? localStorage.getItem('export_post') : '',\n    reverse: false,\n    show: false\n  },\n  reducers: {\n    updateExporter(state, action) {\n      Object.assign(state, action.payload)\n      Object.keys(action.payload).forEach(key => {\n        localStorage.setItem(\"export_\" + key, action.payload[key])\n      })\n    },\n  }\n})\n\nexport const {\n  updateExporter\n} = exporterSlice.actions\n\nexport default exporterSlice.reducer\n","import LRUCache from 'lru-cache'\nimport { createSelector } from 'reselect'\nimport Victor from 'victor'\nimport Color from 'color'\nimport {\n  transformShapes,\n  transformShape,\n  polishVertices\n} from './computer'\nimport { getShape } from '../../models/shapes'\nimport { makeGetLayer, makeGetLayerIndex, getNumVisibleLayers, getVisibleLayerIds } from '../layers/selectors'\nimport { rotate, offset, getSliderBounds } from '../../common/geometry'\n\nconst cache = new LRUCache({\n  length: (n, key) => { return n.length },\n  max: 500000\n})\n\nconst getCacheKey = (state) => {\n  return JSON.stringify(state)\n}\n\nconst getState = state => state\nconst getLayers = state => state.layers\nconst getMachine = state => state.machine\nconst getPreview = state => state.preview\n\n// the make selector functions below are patterned after the comment here:\n// https://github.com/reduxjs/reselect/issues/74#issuecomment-472442728\nconst cachedSelectors = {}\n\n// by returning null for shapes which don't use machine settings, this selector will ensure\n// transformed vertices are not redrawn when machine settings change\nconst makeGetLayerMachine = layerId => {\n  return createSelector(\n    [ getLayers, getMachine ],\n    (layers, machine) => {\n      const layer = layers.byId[layerId]\n      return layer.usesMachine ? machine : null\n    }\n  )\n}\n\n// creates a selector that returns shape vertices for a given layer\nconst makeGetLayerVertices = layerId => {\n  return createSelector(\n    [ getCachedSelector(makeGetLayer, layerId), getCachedSelector(makeGetLayerMachine, layerId) ],\n    (layer, machine) => {\n      const state = {\n        shape: layer,\n        machine: machine\n      }\n      const metashape = getShape(layer)\n      if (layer.shouldCache) {\n        const key = getCacheKey(state)\n        let vertices = cache.get(key)\n\n        if (!vertices) {\n          vertices = metashape.getVertices(state)\n          cache.set(key, vertices)\n          // for debugging purposes\n          // console.log('caching shape...' + cache.length + ' ' + cache.itemCount)\n        }\n\n        return vertices\n      } else {\n        return metashape.getVertices(state)\n      }\n    }\n  )\n}\n\n// creates a selector that returns transformed vertices for a given layer\nconst makeGetTransformedVertices = layerId => {\n  return createSelector(\n    [\n      getCachedSelector(makeGetLayerVertices, layerId),\n      getCachedSelector(makeGetLayer, layerId)\n    ],\n    (vertices, layer) => {\n      return transformShapes(vertices, layer)\n    }\n  )\n}\n\n// creates a selector that returns computed (machine-bound) vertices for a given layer\nconst makeGetComputedVertices = layerId => {\n  return createSelector(\n    [\n      getCachedSelector(makeGetTransformedVertices, layerId),\n      getCachedSelector(makeGetLayerIndex, layerId),\n      getNumVisibleLayers,\n      getMachine\n    ],\n    (vertices, layerIndex, numLayers, machine) => {\n      return polishVertices(vertices, machine, {\n        start: layerIndex === 0,\n        end: layerIndex === numLayers - 1\n      })\n    }\n  )\n}\n\n// creates a selector that returns previewable vertices for a given layer\nexport const makeGetPreviewVertices = layerId => {\n  return createSelector(\n    [\n        getLayers,\n        getVisibleLayerIds,\n        getMachine,\n    ],\n    (layers, visibleLayerIds, machine) => {\n      const state = {\n        layers: layers,\n        machine: machine\n      }\n\n      let vertices\n      const layer = layers.byId[layerId]\n      const index = getCachedSelector(makeGetLayerIndex, layerId)(state)\n      const numLayers = getNumVisibleLayers(state)\n\n      if (layer.dragging) {\n        vertices = getCachedSelector(makeGetTransformedVertices, layerId)(state)\n      } else {\n        vertices = getCachedSelector(makeGetComputedVertices, layerId)(state)\n        if (index < numLayers - 1) {\n          const nextLayerId = visibleLayerIds[index + 1]\n          const nextLayer = layers.byId[nextLayerId]\n\n          if (!nextLayer.dragging && nextLayer.visible) {\n            // draw the stitch between the two layers\n            const nextVertices = getCachedSelector(makeGetComputedVertices, nextLayerId)(state)\n            if (nextVertices[0]) {\n              vertices = vertices.concat(nextVertices[0])\n            }\n          }\n        }\n      }\n\n      const konvaScale = 5 // our transformer is 5 times bigger than the actual starting shape\n      const konvaDelta = (konvaScale - 1)/2 * layer.startingSize\n\n      return vertices.map(vertex => {\n        return offset(rotate(offset(vertex, -layer.offsetX, -layer.offsetY), layer.rotation), konvaDelta, -konvaDelta)\n      })\n    }\n  )\n}\n\n// ensures we only create a single selector for a given layer\nexport const getCachedSelector = (fn, layerId) => {\n  if (!cachedSelectors[fn.name]) {\n    cachedSelectors[fn.name] = {}\n  }\n\n  if (!cachedSelectors[fn.name][layerId]) {\n    cachedSelectors[fn.name][layerId] = fn(layerId)\n  }\n\n  return cachedSelectors[fn.name][layerId]\n}\n\n// returns a flattened list of all visible computed vertices (across layers)\nexport const getAllComputedVertices = createSelector(\n  [getState, getVisibleLayerIds],\n  (state, visibleLayerIds) => {\n    return visibleLayerIds.map(id => getCachedSelector(makeGetComputedVertices, id)(state)).flat()\n  }\n)\n\n// returns a flattened list of all visible preview vertices (across layers)\nexport const getAllPreviewVertices = createSelector(\n  [getState, getVisibleLayerIds],\n  (state, visibleLayerIds) => {\n    return visibleLayerIds.map(id => getCachedSelector(makeGetPreviewVertices, id)(state)).flat()\n  }\n)\n\n// returns the starting offset for each layer, given previous layers\nexport const getVertexOffsets = createSelector(\n  [getState, getVisibleLayerIds],\n  (state, visibleLayerIds) => {\n    let offsets = {}\n    let offset = 0\n    visibleLayerIds.forEach((id) => {\n      const vertices = getCachedSelector(makeGetComputedVertices, id)(state)\n\n      offsets[id] = offset\n      offset += vertices.length + 1\n    })\n    return offsets\n  }\n)\n\n// statistics across all layers\nexport const getVerticesStats = createSelector(\n  getAllComputedVertices,\n  (vertices) => {\n    let distance = 0.0\n    let previous = null\n\n    vertices.forEach((vertex) => {\n      if (previous) {\n        distance += Math.sqrt(Math.pow(vertex.x - previous.x, 2.0) +\n                              Math.pow(vertex.y - previous.y, 2.0))\n      }\n      previous = vertex\n    })\n\n    return {\n      numPoints: vertices.length,\n      distance: Math.floor(distance)\n    }\n  }\n)\n\nexport const getSliderColors = createSelector(\n  [getAllPreviewVertices, getPreview],\n  (vertices, preview) => {\n    const sliderValue = preview.sliderValue\n    const colors = {}\n\n    if (sliderValue !== 0) {\n      let { start, end } = getSliderBounds(vertices, sliderValue)\n      let startColor = Color('yellow')\n      const colorStep = 3.0 / 8 / (end - start)\n\n      for(let i=end; i>=start; i--) {\n        colors[i] = startColor.darken(colorStep * (end-i)).hex()\n      }\n    }\n\n    return colors\n  }\n)\n\n// used by the preview window; reverses rotation and offsets because they are\n// re-added by Konva transformer.\nexport const makeGetPreviewTrackVertices = layerId => {\n  return createSelector(\n    getLayers,\n    (layers) => {\n      const layer = layers.byId[layerId]\n      const numLoops = layer.numLoops\n      const konvaScale = 5 // our transformer is 5 times bigger than the actual starting shape\n      const konvaDelta = (konvaScale - 1)/2 * layer.startingSize\n      let trackVertices = []\n\n      for (var i=0; i<numLoops; i++) {\n        if (layer.trackEnabled) {\n          trackVertices.push(transformShape(layer, new Victor(0.0, 0.0), i, i))\n        }\n      }\n\n      return trackVertices.map(vertex => {\n        return offset(rotate(offset(vertex, -layer.offsetX, -layer.offsetY), layer.rotation), konvaDelta, -konvaDelta)\n      })\n    }\n  )}\n","import React from 'react'\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux'\nimport { Shape, Transformer } from 'react-konva'\nimport Victor from 'victor'\nimport { makeGetPreviewTrackVertices, getCachedSelector, makeGetPreviewVertices, getSliderColors, getVertexOffsets, getAllPreviewVertices } from '../machine/selectors'\nimport { updateLayer, setSelectedLayer } from '../layers/layersSlice'\nimport { getCurrentLayer, makeGetLayerIndex, getNumVisibleLayers } from '../layers/selectors'\nimport { roundP } from '../../common/util'\nimport { getSliderBounds } from '../../common/geometry'\n\n// Renders the shapes in the preview window and allows the user to interact with the shape.\nconst PreviewLayer = (ownProps) => {\n  const mapStateToProps = (state) => {\n    // if a layer matching this shape's id does not exist, we have a zombie\n    // child. It has to do with a child (preview shape) subscribing to the store\n    // before its parent (preview window), and trying to render first after a\n    // layer is removed. This is a tangled, but well-known problem with React-Redux\n    // hooks, and the solution for now is to render the current layer instead.\n    // https://react-redux.js.org/api/hooks#stale-props-and-zombie-children\n    // It's quite likely there is a more elegant/proper way around this.\n    const layer = state.layers.byId[ownProps.id] || getCurrentLayer(state)\n    const index = getCachedSelector(makeGetLayerIndex, layer.id)(state)\n    const numLayers = getNumVisibleLayers(state)\n\n    return {\n      layer: layer,\n      start: index === 0,\n      end: index === numLayers - 1,\n      currentLayer: getCurrentLayer(state),\n      trackVertices: getCachedSelector(makeGetPreviewTrackVertices, layer.id)(state),\n      vertices: getCachedSelector(makeGetPreviewVertices, layer.id)(state),\n      allVertices: getAllPreviewVertices(state),\n      selected: state.layers.selected,\n      sliderValue: state.preview.sliderValue,\n      showTrack: true,\n      colors: getSliderColors(state),\n      offsets: getVertexOffsets(state)\n    }\n  }\n\n  const props = useSelector(mapStateToProps, shallowEqual)\n  const dispatch = useDispatch()\n  const startingSize = props.layer.startingSize\n  const selectedColor = 'yellow'\n  const unselectedColor = 'rgba(195, 214, 230, 0.65)'\n  const backgroundSelectedColor = '#6E6E00'\n  const backgroundUnselectedColor = 'rgba(195, 214, 230, 0.4)'\n\n  // our transformer is 5 times bigger than the actual starting shape, so we need\n  // to account for it when drawing the preview; if you change this value, be sure\n  // to change it in machine/selectors#getPreviewVertices,getPreviewTrackVertices\n  const konvaScale = 5\n  const konvaSize = startingSize * konvaScale\n  const isSelected = props.selected === ownProps.id\n  const isSliding = props.sliderValue !== 0\n\n  function mmToPixels(vertex) {\n    // y for pixels starts at the top, and goes down.\n    return new Victor(vertex.x + startingSize/2, -vertex.y + startingSize/2)\n  }\n\n  function moveTo_mm(context, vertex) {\n    var in_mm = mmToPixels(vertex)\n    context.moveTo(in_mm.x, in_mm.y)\n  }\n\n  function lineTo_mm(context, vertex) {\n    var in_mm = mmToPixels(vertex)\n    context.lineTo(in_mm.x, in_mm.y)\n  }\n\n  function dot_mm(context, vertex, radius=4) {\n    var in_mm = mmToPixels(vertex)\n    context.arc(in_mm.x, in_mm.y, radius, 0, 2 * Math.PI, true)\n    context.fillStyle = context.strokeStyle\n    context.fill()\n    context.lineWidth = 1\n    context.strokeStyle = isSelected ? 'yellow' : unselectedColor\n    context.stroke()\n  }\n\n  // draws a colored path when user is using slider\n  function drawLayerVertices(context) {\n    const { end } = getSliderBounds(props.allVertices, props.sliderValue)\n    const stationaryColor = isSelected ? selectedColor : unselectedColor\n    const defaultColor = isSliding ? backgroundUnselectedColor : stationaryColor\n    let oldColor = defaultColor\n    let currentColor = defaultColor\n\n    context.beginPath()\n    context.lineWidth = 1\n    context.strokeStyle = currentColor\n    moveTo_mm(context, props.vertices[0])\n    context.stroke()\n\n    context.beginPath()\n    for (let i=1; i<props.vertices.length; i++) {\n      let absoluteI = i + props.offsets[props.layer.id]\n      let pathColor = isSliding ? (absoluteI <= end ? backgroundSelectedColor : backgroundUnselectedColor) : stationaryColor\n\n      currentColor = props.colors[absoluteI] || pathColor\n\n      if (currentColor !== oldColor) {\n        context.stroke()\n        context.strokeStyle = currentColor\n        oldColor = currentColor\n        context.beginPath()\n      }\n\n      moveTo_mm(context, props.vertices[i-1])\n      lineTo_mm(context, props.vertices[i])\n    }\n    context.stroke()\n  }\n\n  function drawStartAndEndPoints(context) {\n    context.beginPath()\n    context.strokeStyle = 'green'\n    dot_mm(context, props.vertices[0], props.start ? 5 : 3)\n    context.stroke()\n\n    let endOffset = (props.currentLayer.dragging || props.end) ? 1 : 2\n    context.beginPath()\n    context.strokeStyle = 'red'\n    dot_mm(context, props.vertices[props.vertices.length - endOffset], props.end ? 5 : 3)\n    context.stroke()\n  }\n\n  // draws the line representing the track the path follows\n  function drawTrackVertices(context) {\n    context.beginPath()\n    context.lineWidth = 4.0\n    context.strokeStyle = 'green'\n    moveTo_mm(context, props.trackVertices[0])\n    for (let i=0; i<props.trackVertices.length; i++) {\n      lineTo_mm(context, props.trackVertices[i])\n    }\n    context.stroke()\n  }\n\n  function drawSliderEndPoint(context) {\n    const { end } = getSliderBounds(props.allVertices, props.sliderValue)\n\n    // Draw a slider path end point if sliding\n    if (isSliding) {\n      let absoluteEnd = props.vertices.length + props.offsets[props.layer.id] - 1\n      let absoluteStart = props.offsets[props.layer.id]\n\n      if (end >= absoluteStart && end <= absoluteEnd) {\n        // end point is in this layer\n        const sliderEnd = props.allVertices[end]\n        context.beginPath()\n        context.strokeStyle = backgroundSelectedColor\n\n        moveTo_mm(context, sliderEnd)\n        context.strokeStyle = selectedColor\n        dot_mm(context, sliderEnd)\n      }\n\n      // START: uncomment these lines to show slider end point coordinates\n      // context.font = '20px Arial'\n      // context.fillText('(' + sliderEndPoint.x.toFixed(2) + ', ' + sliderEndPoint.y.toFixed(2) + ')', 10, 50)\n      // END\n      context.stroke()\n    }\n  }\n\n  // used by Konva to draw our custom shape\n  function sceneFunc(context, shape) {\n    if (props.vertices && props.vertices.length > 0) {\n      if (props.trackVertices && props.trackVertices.length > 0 && props.showTrack) {\n        drawTrackVertices(context)\n      }\n\n      drawLayerVertices(context)\n      drawStartAndEndPoints(context)\n      drawSliderEndPoint(context)\n    }\n\n    context.fillStrokeShape(shape)\n  }\n\n  // used by Konva to mark boundaries of shape\n  function hitFunc(context) {\n    const vertices = props.vertices\n    if (vertices && vertices.length > 0) {\n      moveTo_mm(context, vertices[0])\n\n      for (let i=1; i<vertices.length; i++) {\n        moveTo_mm(context, vertices[i-1])\n        lineTo_mm(context, vertices[i])\n      }\n    }\n\n    context.fillStrokeShape(this)\n  }\n\n  function onChange(attrs) {\n    attrs.id = props.layer.id\n    dispatch(updateLayer(attrs))\n  }\n\n  function onSelect() {\n    dispatch(setSelectedLayer(props.selected == null ? props.currentLayer.id : null))\n  }\n\n  const shapeRef = React.createRef()\n  const trRef = React.createRef()\n\n  React.useEffect(() => {\n    if (props.layer.visible && isSelected && props.layer.canChangeSize && props.showTrack) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current])\n      trRef.current.getLayer().batchDraw()\n    }\n  }, [isSelected, props.layer, props.showTrack, shapeRef, trRef])\n\n  return (\n    <React.Fragment>\n      {props.layer.visible && <Shape\n        draggable={props.showTrack && props.layer.id === props.currentLayer.id}\n        width={konvaSize}\n        height={konvaSize}\n        offsetY={konvaSize/2}\n        offsetX={konvaSize/2}\n        x={(props.showTrack && props.layer.offsetX) || 0}\n        y={(props.showTrack && -props.layer.offsetY) || 0}\n        onClick={onSelect}\n        onTap={onSelect}\n        ref={shapeRef}\n        {...props}\n        strokeWidth={1}\n        rotation={(props.showTrack && props.layer.rotation) || 0}\n        sceneFunc={sceneFunc}\n        hitFunc={hitFunc}\n        onDragStart={e => {\n          onChange({dragging: true})\n        }}\n        onDragEnd={e => {\n          onChange({\n            dragging: false,\n            offsetX: roundP(e.target.x(), 0),\n            offsetY: roundP(-e.target.y(), 0)\n          })\n        }}\n        onTransformStart={e => {\n          onChange({dragging: true})\n        }}\n        onTransformEnd={e => {\n          const node = shapeRef.current\n          const scaleX = node.scaleX()\n          // const scaleY = node.scaleY()\n\n          // we will reset it back\n          node.scaleX(1)\n          node.scaleY(1)\n\n          onChange({\n            dragging: false,\n            startingSize: roundP(Math.max(5, props.layer.startingSize * scaleX), 0),\n            rotation: roundP(node.rotation(), 0)\n          })\n        }}\n      />}\n      {props.layer.visible && isSelected && props.layer.canChangeSize && props.showTrack && (\n        <Transformer\n          ref={trRef}\n          centeredScaling={true}\n          resizeEnabled={!props.layer.trackEnabled}\n          rotationSnaps={[0, 90, 180, 270]}\n          enabledAnchors={['top-left', 'top-right', 'bottom-left', 'bottom-right']}\n        />\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default PreviewLayer\n","import React, { Component } from 'react'\nimport { connect, ReactReduxContext, Provider } from 'react-redux'\nimport { Stage, Layer, Circle, Rect } from 'react-konva'\nimport throttle from 'lodash/throttle'\nimport { setPreviewSize, updatePreview } from './previewSlice'\nimport { updateLayer } from '../layers/layersSlice'\nimport { getCurrentLayer, getKonvaLayerIds, isDragging } from '../layers/selectors'\nimport { roundP } from '../../common/util'\nimport PreviewLayer from './PreviewLayer'\n\nexport const relativeScale = (props) => {\n  let width, height\n\n  if (props.use_rect) {\n    width = props.maxX - props.minX\n    height = props.maxY - props.minY\n  } else {\n    width = height = props.maxRadius * 2.0\n  }\n\n  return Math.min(props.canvasWidth / width, props.canvasHeight / height)\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    layers: state.layers,\n    currentLayer: getCurrentLayer(state),\n    selectedId: state.layers.selected,\n    konvaIds: getKonvaLayerIds(state),\n    use_rect: state.machine.rectangular,\n    dragging: isDragging(state),\n    minX: state.machine.minX,\n    maxX: state.machine.maxX,\n    minY: state.machine.minY,\n    maxY: state.machine.maxY,\n    maxRadius: state.machine.maxRadius,\n    canvasWidth: state.preview.canvasWidth,\n    canvasHeight: state.preview.canvasHeight,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onResize: (size) => {\n      dispatch(setPreviewSize(size))\n    },\n    onChange: (attrs) => {\n      dispatch(updatePreview(attrs))\n    },\n    onLayerChange: (attrs) => {\n      dispatch(updateLayer(attrs))\n    }\n  }\n}\n\n// Contains the preview window, and any parameters for the machine.\nclass PreviewWindow extends Component {\n  componentDidMount() {\n    const wrapper = document.getElementById('preview-wrapper')\n\n    this.throttledResize = throttle(this.resize, 200, {trailing: true}).bind(this)\n    window.addEventListener('resize', () => { this.throttledResize(wrapper) }, false)\n    setTimeout(() => {\n      this.visible = true\n      this.resize(wrapper)\n    }, 250)\n  }\n\n  resize(wrapper) {\n    const width = parseInt(getComputedStyle(wrapper).getPropertyValue('width'))\n    const height = parseInt(getComputedStyle(wrapper).getPropertyValue('height'))\n\n    if (this.props.canvasWidth !== width || this.props.canvasHeight !== height) {\n      this.props.onResize({width: width, height: height})\n    }\n  }\n\n  render() {\n    const {minX, minY, maxX, maxY} = this.props\n    const radius = this.props.maxRadius\n    const scale = relativeScale(this.props)\n    const reduceScale = 0.95\n    const width = this.props.use_rect ? maxX - minX : radius * 2\n    const height = this.props.use_rect ? maxY - minY : radius * 2\n    const visibilityClass = `preview-wrapper ${this.visible ? 'd-flex align-items-center' : 'd-none'}`\n\n    const checkDeselect = e => {\n      // deselect when clicked on empty area\n      if (e.target.className !== undefined && e.target.className !== 'Rect') {\n        this.props.onChange({selectedId: null})\n      }\n     }\n\n     // define Konva clip functions that will let us clip vertices not bound by\n     // machine limits when dragging, and produce a visually seamless experience.\n     const clipCircle = ctx => {\n       ctx.arc(0, 0, radius, 0, Math.PI * 2, false)\n     }\n     const clipRect = ctx => {\n       ctx.rect(-width/2, -height/2, width, height)\n     }\n\n    const scaleByWheel = (size, deltaY) => {\n      const sign = Math.sign(deltaY)\n      const scale = 1 + Math.log(Math.abs(deltaY))/30 * sign\n      let newSize = Math.max(roundP(size * scale, 0), 1)\n      if (newSize === size) {\n        // If the log scaled value isn't big enough to move the scale.\n        newSize = Math.max(sign+size, 1)\n      }\n      return newSize\n    }\n\n    const clipFunc = this.props.dragging ? (this.props.use_rect ? clipRect : clipCircle) : null\n\n    return (\n      // the consumer wrapper is needed to pass the store down to our shape\n      // which is not our usual React Component\n      <ReactReduxContext.Consumer>\n        {({store}) => (\n          <Stage className={visibilityClass}\n            scaleX={scale * reduceScale}\n            scaleY={scale * reduceScale}\n            height={height * scale}\n            width={width * scale}\n            onMouseDown={checkDeselect}\n            onTouchStart={checkDeselect}\n            offsetX={-width/2*(1/reduceScale)}\n            offsetY={-height/2*(1/reduceScale)}\n            onWheel={e => {\n              e.evt.preventDefault()\n              if (Math.abs(e.evt.deltaY) > 0) {\n                this.props.onLayerChange({\n                  startingSize: scaleByWheel(this.props.currentLayer.startingSize, e.evt.deltaY),\n                  id: this.props.currentLayer.id\n                })\n              }\n            }}\n            >\n            <Provider store={store}>\n              <Layer clipFunc={clipFunc}>\n                {!this.props.use_rect && <Circle x={0} y={0} radius={radius}\n                  fill=\"transparent\"\n                  stroke=\"gray\"\n                />}\n                {this.props.use_rect && <Rect x={0} y={0} width={width} height={height}\n                  fill=\"transparent\"\n                  stroke=\"gray\"\n                  offsetX={width/2}\n                  offsetY={height/2}\n                />}\n                {this.props.konvaIds.map((id, i) => {\n                  return (\n                    <PreviewLayer id={id} key={i} index={i} />\n                  )\n                })}\n              </Layer>\n            </Provider>\n          </Stage>\n        )}\n      </ReactReduxContext.Consumer>\n    )\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(PreviewWindow)\n","export default class Exporter {\n  constructor(props) {\n    this.props = props\n    this.lines = []\n    this.indentLevel = 0    \n  }\n\n  export() {\n    this.pre = this.props.pre\n    this.post = this.props.post\n    let vertices = this.props.vertices\n\n    if (this.props.reverse) {\n      vertices = vertices.reverse()\n    }\n    this.computeOutputVertices(vertices)\n    this.header()\n    this.startComments()\n    this.props.comments.forEach(comment => this.line(comment))\n    this.line()\n    this.keyValueLine('File name', \"'\" + this.props.fileName + \"'\")\n    this.line()\n    this.endComments()\n\n    if (this.pre !== '') {\n      this.startComments()\n      this.line('BEGIN PRE')\n      this.endComments()\n      this.line(this.pre, this.pre !== '')\n      this.startComments()\n      this.line('END PRE')\n      this.endComments()\n    }\n\n    this.line()\n    this.exportCode(this.vertices)\n    this.line()\n\n    if (this.post !== '') {\n      this.startComments()\n      this.line('BEGIN POST')\n      this.endComments()\n      this.line(this.post, this.post !== '')\n      this.startComments()\n      this.line('END POST')\n      this.endComments()\n    }\n    this.footer()\n    this.line()\n\n    return this.lines\n  }\n\n  header() {\n    // default does nothing\n  }\n\n  footer() {\n    // default does nothing\n  }\n\n  computeOutputVertices(vertices) {\n    // default does nothing\n    this.vertices = vertices\n  }\n\n  line(content='', add=true) {\n    if (add) {\n      let padding = ''\n      if (this.commenting) {\n        padding = this.commentChar + (content.length > 0 ? ' ' : '')\n        for (let i=0; i<this.indentLevel; i++) {\n          padding += '  '\n        }\n      }\n      this.lines.push(padding + content)\n    }\n  }\n\n  keyValueLine(key, value, add=true) {\n    this.line(key + ': ' + value, add)\n  }\n\n  optionLine(metamodel, instance, option, add=true) {\n    this.line(metamodel.getOptions()[option].title + ': ' + instance[option], add)\n  }\n\n  optionLines(metamodel, instance, options, add=true) {\n    options.forEach(option => {\n      this.optionLine(metamodel, instance, option, add)\n    })\n  }\n\n  indent() {\n    this.indentLevel++\n  }\n\n  dedent() {\n    this.indentLevel--\n  }\n\n  startComments() {\n    this.commenting = true\n  }\n\n  endComments() {\n    this.commenting = false\n  }\n}\n","import { getShape } from '../../models/shapes'\nimport { getLayerInfo } from '../layers/selectors'\nimport Machine from '../../models/Machine'\nimport Transform from '../../models/Transform'\nimport Exporter from './Exporter'\n\nexport default class CommentExporter extends Exporter {\n  constructor(props) {\n    super(props)\n    this.indentLevel = 0\n    this.startComments()\n    this.commentChar = ''\n  }\n\n  export() {\n    const state = this.props\n    const machine = new Machine()\n    const transform = new Transform()\n    let instance = state.machine\n\n    this.line('Created by Sandify')\n    this.line('https://sandify.org')\n    this.keyValueLine('Version', state.app.sandifyVersion)\n    this.line()\n\n    this.keyValueLine('Machine type', state.machine.rectangular ? 'Rectangular' : 'Polar')\n    this.indent()\n    this.optionLines(machine, instance, ['minX', 'maxX', 'minY', 'maxY'], state.machine.rectangular)\n    this.optionLines(machine, instance,  ['maxRadius', 'polarStartPoint', 'polarEndPoint'], !state.machine.rectangular)\n    this.dedent()\n\n    this.keyValueLine('Content type', state.app.input)\n\n    switch (state.app.input) {\n      case 'shape': // shapes\n        const layers = getLayerInfo(state)\n        layers.forEach(layer => {\n          const shape = getShape(layer)\n          const options = shape.getOptions()\n\n          this.line('Layer:')\n          this.indent()\n          this.keyValueLine('Shape', shape.name)\n          this.optionLines(shape, layer, Object.keys(options))\n          this.keyValueLine('Visible', layer.visible)\n          this.optionLines(transform, layer, ['offsetX', 'offsetY'])\n          this.optionLines(transform, layer, ['numLoops', 'transformMethod', 'spinEnabled'], layer.repeatEnabled)\n          this.indent()\n          this.optionLines(transform, layer, ['spinValue', 'spinMethod'], layer.repeatEnabled && layer.spinEnabled)\n          this.indent()\n          this.optionLine(transform, layer, 'spinMath', layer.repeatEnabled && layer.spinEnabled && layer.spinMethod === 'function')\n          this.optionLine(transform, layer, 'spinSwitchbacks', layer.repeatEnabled && layer.spinEnabled && layer.spinMethod === 'constant')\n          this.dedent()\n          this.dedent()\n          this.optionLine(transform, layer, 'growEnabled', layer.repeatEnabled)\n          this.indent()\n          this.optionLine(transform, layer, 'growValue', layer.repeatEnabled && layer.growEnabled)\n          this.optionLine(transform, layer, 'growMethod', layer.repeatEnabled && layer.growEnabled)\n          this.indent()\n          this.optionLine(transform, layer, 'growMath', layer.repeatEnabled && layer.growEnabled && layer.growMethod === 'function')\n          this.dedent()\n          this.dedent()\n          this.optionLine(transform, layer, 'trackEnabled', layer.repeatEnabled)\n          this.indent()\n          this.optionLines(transform, layer, ['trackValue', 'trackLength', 'trackNumLoops'], layer.repeatEnabled && layer.trackEnabled)\n          this.optionLine(transform, layer, 'trackGrowEnabled', layer.repeatEnabled && layer.trackEnabled)\n          this.indent()\n          this.optionLine(transform, layer, 'trackGrow', layer.repeatEnabled && layer.trackGrowEnabled)\n          this.dedent()\n          this.dedent()\n          this.dedent()\n        })\n        break\n\n      default:\n        break\n    }\n\n    this.dedent()\n    this.keyValueLine('Path reversed', state.exporter.reverse)\n    return this.lines\n  }\n}\n","import { createSelector } from 'reselect'\nimport CommentExporter from './CommentExporter'\n\nconst getApp = state => state.app\nconst getLayers = state => state.layers\nconst getCurrentLayer = state => state.layers.byId[state.layers.current]\nconst getExporter = state => state.exporter\nconst getMachine = state => state.machine\n\nexport const getComments = createSelector(\n  [\n      getApp,\n      getLayers,\n      getCurrentLayer,\n      getExporter,\n      getMachine,\n  ],\n  (app, layers, layer, exporter, machine) => {\n    const state = {\n      app: app,\n      layers: layers,\n      layer: layer,\n      exporter: exporter,\n      machine: machine\n    }\n\n    return new CommentExporter(state).export()\n  }\n)\n","import Victor from 'victor'\nimport Exporter from './Exporter'\n\nfunction thetarho(vertex) {\n  return '' + vertex.x.toFixed(5) + ' ' + vertex.y.toFixed(5)\n}\n\nexport default class ThetaRhoExporter extends Exporter {\n  constructor(props) {\n    super(props)\n    this.fileExtension = '.thr'\n    this.label = 'ThetaRho'\n    this.commentChar = '#'\n  }\n\n  // computes vertices compatible with the theta rho format, and replaces\n  // placeholder variables in pre/post blocks.\n  computeOutputVertices(vertices) {\n    // First, downsample larger lines into smaller ones.\n    const maxLength = 2.0\n    let subsampledVertices = []\n    let previous = undefined\n    let next\n\n    for (next = 0; next < vertices.length; next++) {\n      if (previous !== undefined) {\n        const start = Victor.fromObject(vertices[previous])\n        const end = Victor.fromObject(vertices[next])\n\n        const delta = end.clone().subtract(start)\n        const deltaSegment = end.clone().subtract(start).normalize().multiply(Victor(maxLength, maxLength))\n\n        // This loads up (start, end].\n        for (let step = 0; step < (delta.magnitude() / maxLength) ; step++) {\n          subsampledVertices.push(\n            new Victor(start.x + step * deltaSegment.x,\n                       start.y + step * deltaSegment.y))\n        }\n\n      }\n      previous = next\n    }\n\n    // Add in the end\n    if (previous !== undefined) {\n      subsampledVertices.push(vertices[vertices.length - 1])\n    }\n\n    // Convert to theta, rho\n    this.vertices = []\n    let previousTheta = 0\n    let previousRawTheta = 0\n    let mintheta = 1e9\n    let minrho   = 1e9\n    let maxtheta = -1e9\n    let maxrho   = -1e9\n    for (next = 0; next < subsampledVertices.length; ++next) {\n      // Normalize the radius\n      const rho = Victor.fromObject(subsampledVertices[next]).magnitude() / this.props.maxRadius\n      minrho = Math.min(rho, minrho)\n      maxrho = Math.max(rho, maxrho)\n\n      // What is the basic theta for this point?\n      let rawTheta = Math.atan2(subsampledVertices[next].x,\n                                subsampledVertices[next].y)\n      // Convert to [0, 2pi]\n      rawTheta = (rawTheta + 2.0 * Math.PI) % (2.0 * Math.PI)\n\n      // Compute the difference to the last point.\n      let deltaTheta = rawTheta - previousRawTheta\n\n      // Convert to [-pi,pi]\n      if (deltaTheta < -Math.PI) {\n        deltaTheta += 2.0 * Math.PI\n      }\n      if (deltaTheta > Math.PI) {\n        deltaTheta -= 2.0 * Math.PI\n      }\n\n      const theta = previousTheta + deltaTheta\n      mintheta = Math.min(theta, mintheta)\n      maxtheta = Math.max(theta, maxtheta)\n      previousRawTheta = rawTheta\n      previousTheta = theta\n      this.vertices.push(new Victor(theta, rho))\n    }\n\n    let starttheta = this.vertices[0].x\n    let startrho   = this.vertices[0].y\n    let endtheta   = this.vertices[this.vertices.length-1].x\n    let endrho     = this.vertices[this.vertices.length-1].y\n\n    // Replace pre/post placeholder variables\n    this.pre  =  this.pre.replace(/{starttheta}/gi, starttheta.toFixed(3))\n    this.pre  =  this.pre.replace(/{startrho}/gi,   startrho.toFixed(3))\n    this.pre  =  this.pre.replace(/{endtheta}/gi,   endtheta.toFixed(3))\n    this.pre  =  this.pre.replace(/{endrho}/gi,     endrho.toFixed(3))\n    this.pre  =  this.pre.replace(/{mintheta}/gi,   mintheta.toFixed(3))\n    this.pre  =  this.pre.replace(/{minrho}/gi,     minrho.toFixed(3))\n    this.pre  =  this.pre.replace(/{maxtheta}/gi,   maxtheta.toFixed(3))\n    this.pre  =  this.pre.replace(/{maxrho}/gi,     maxrho.toFixed(3))\n    this.post = this.post.replace(/{starttheta}/gi, starttheta.toFixed(3))\n    this.post = this.post.replace(/{startrho}/gi,   startrho.toFixed(3))\n    this.post = this.post.replace(/{endtheta}/gi,   endtheta.toFixed(3))\n    this.post = this.post.replace(/{endrho}/gi,     endrho.toFixed(3))\n    this.post = this.post.replace(/{mintheta}/gi,   mintheta.toFixed(3))\n    this.post = this.post.replace(/{minrho}/gi,     minrho.toFixed(3))\n    this.post = this.post.replace(/{maxtheta}/gi,   maxtheta.toFixed(3))\n    this.post = this.post.replace(/{maxrho}/gi,     maxrho.toFixed(3))\n  }\n\n  exportCode(vertices) {\n    vertices.map(thetarho).forEach(line => this.line(line))\n  }\n}\n","import Exporter from './Exporter'\n\nexport default class GCodeExporter extends Exporter {\n  constructor(props) {\n    super(props)\n    this.fileExtension = '.gcode'\n    this.label = 'Gcode'\n    this.commentChar = ';'\n  }\n\n  exportCode(vertices) {\n    vertices.map(this.gcode).forEach(line => this.line(line))\n  }\n\n  // computes vertices compatible with the gcode format, and replaces\n  // placeholder variables in pre/post blocks.\n  computeOutputVertices(vertices) {\n    // Collect some statistics about these vertices.\n    let minx = 1e9\n    let miny = 1e9\n    let maxx = -1e9\n    let maxy = -1e9\n    this.vertices = vertices.map(vertex => {\n      const x = vertex.x + this.props.offsetX\n      const y = vertex.y + this.props.offsetY\n      minx = Math.min(x, minx)\n      miny = Math.min(y, miny)\n      maxx = Math.max(x, maxx)\n      maxy = Math.max(y, maxy)\n\n      return {\n        ...vertex,\n        x: x,\n        y: y,\n      }\n    })\n    let startx = this.vertices[0].x\n    let starty = this.vertices[0].y\n    let endx = this.vertices[this.vertices.length-1].x\n    let endy = this.vertices[this.vertices.length-1].y\n\n    // Replace pre/post placeholder variables\n    this.pre  =  this.pre.replace(/{startx}/gi, startx.toFixed(3))\n    this.pre  =  this.pre.replace(/{starty}/gi, starty.toFixed(3))\n    this.pre  =  this.pre.replace(/{endx}/gi,   endx.toFixed(3))\n    this.pre  =  this.pre.replace(/{endy}/gi,   endy.toFixed(3))\n    this.pre  =  this.pre.replace(/{minx}/gi,   minx.toFixed(3))\n    this.pre  =  this.pre.replace(/{miny}/gi,   miny.toFixed(3))\n    this.pre  =  this.pre.replace(/{maxx}/gi,   maxx.toFixed(3))\n    this.pre  =  this.pre.replace(/{maxy}/gi,   maxy.toFixed(3))\n    this.post = this.post.replace(/{startx}/gi, startx.toFixed(3))\n    this.post = this.post.replace(/{starty}/gi, starty.toFixed(3))\n    this.post = this.post.replace(/{endx}/gi,   endx.toFixed(3))\n    this.post = this.post.replace(/{endy}/gi,   endy.toFixed(3))\n    this.post = this.post.replace(/{minx}/gi,   minx.toFixed(3))\n    this.post = this.post.replace(/{miny}/gi,   miny.toFixed(3))\n    this.post = this.post.replace(/{maxx}/gi,   maxx.toFixed(3))\n    this.post = this.post.replace(/{maxy}/gi,   maxy.toFixed(3))\n  }\n\n  gcode(vertex) {\n    let command = 'G01' +\n      ' X' + vertex.x.toFixed(3) +\n      ' Y' + vertex.y.toFixed(3)\n    return command\n  }\n}\n","import Exporter from './Exporter'\nimport { path } from 'd3'\n\nconst svgTrim = (svgString) => {\n  // Based on the svg trim method from msurguy (MIT):\n  //    https://github.com/msurguy/svg-file-downloader/blob/7d3409f60ca58fef90003f24bae2a85fdf324eb3/svg-file-downloader.js#L9\n  svgString = svgString.replace(/([+]?\\d*\\.\\d{3,}([eE][+]?\\d+)?)/g, function (x) {\n    return (+x).toFixed(2)\n  })\n  return svgString\n}\n\nexport default class SvgExporter extends Exporter {\n  constructor(props) {\n    super(props)\n    this.fileExtension = '.svg'\n    this.label = 'SVG'\n    this.indentLevel = 2\n  }\n\n  exportCode(vertices) {\n    var centeredVertices = vertices.map( (vertex) => {\n      return {\n        ...vertex,\n        x: vertex.x + this.props.width / 2,\n        y: this.props.height - (vertex.y + this.props.height / 2),\n      }\n    })\n\n    let svg = path()\n    if (centeredVertices.length > 0) {\n      const firstPoint = centeredVertices[0]\n      svg.moveTo(firstPoint.x, firstPoint.y)\n    }\n    centeredVertices.forEach(vertex => svg.lineTo(vertex.x, vertex.y))\n    this.line(\"    <desc>pwidth:\" + this.props.width + \";pheight:\" + this.props.height + \";</desc>\")\n    this.line(\"    <path\")\n    this.line(\"       stroke=\\\"#000000\\\"\")\n    this.line(\"       stroke-width=\\\"0.4mm\\\"\")\n    this.line(\"       fill=\\\"none\\\"\")\n    this.line(\"       d=\\\"\" + svgTrim(svg.toString()) + \"\\\"/>\")\n  }\n\n  header() {\n    this.line(\"<?xml version=\\\"1.0\\\" standalone=\\\"no\\\"?>\")\n    this.line(\"<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\">\")\n    this.line(\"<svg width=\\\"\" + this.props.width + \"\\\"\" +\n                  \" height=\\\"\" + this.props.height + \"\\\"\" +\n                  \" title=\\\"polygons\\\"\" +\n                  \" version=\\\"1.1\\\"\" +\n                  \" viewBox=\\\"0 0 \" + this.props.width + \" \" + this.props.height + \"\\\"\" +\n                  \" xmlns=\\\"http://www.w3.org/2000/svg\\\"\" +\n                  \" class=\\\"svg-paper\\\">\")\n\n    this.line(\"  <g>\")\n  }\n\n  footer() {\n    this.line(\"  </g>\")\n    this.line(\"</svg>\")\n  }\n\n  line(content='', add=true) {\n    if (add) {\n      let padding = ''\n      if (this.commenting) {\n        padding = ''\n        for (let i=0; i<this.indentLevel; i++) {\n          padding += '  '\n        }\n        if (content) {\n          this.lines.push(padding + \"<!-- \" + content + \" -->\")\n        } else {\n          this.lines.push(\"\")\n        }\n      } else {\n        this.lines.push(content)\n      }\n    }\n  }\n}\n","\nexport const gcodeTypeName = 'GCode (.gcode)'\nexport const thrTypeName = 'Theta Rho (.thr)'\nexport const svgTypeName = 'SVG (.svg)'\n\nconst exporterOptions = {\n  fileName: {\n    title: 'File name',\n    type: 'string'\n  },\n  fileType: {\n    title: 'Export as',\n    type: 'dropdown',\n    choices: [gcodeTypeName, thrTypeName, svgTypeName]\n  },\n  post: {\n    title: 'Program end code',\n    type: 'textarea',\n    isVisible: (state) => { return state.fileType !== svgTypeName },\n  },\n  pre: {\n    title: 'Program start code',\n    type: 'textarea',\n    isVisible: (state) => { return state.fileType !== svgTypeName },\n  },\n  reverse: {\n    title: 'Reverse path in the code',\n  },\n}\n\nexport class Exporter {\n  getOptions() {\n    return exporterOptions\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, Modal, Col, Row } from 'react-bootstrap'\nimport DropdownOption from '../../components/DropdownOption'\nimport InputOption from '../../components/InputOption'\nimport CheckboxOption from '../../components/CheckboxOption'\nimport { updateExporter } from './exporterSlice'\nimport { getComments } from './selectors'\nimport { getAllComputedVertices } from '../machine/selectors'\nimport ReactGA from 'react-ga'\nimport ThetaRhoExporter from './ThetaRhoExporter'\nimport GCodeExporter from './GCodeExporter'\nimport SvgExporter from './SvgExporter'\nimport {\n  gcodeTypeName,\n  thrTypeName,\n  svgTypeName,\n  Exporter,\n} from '../../models/Exporter'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    reverse: state.exporter.reverse,\n    show: state.exporter.show,\n    vertices: getAllComputedVertices(state),\n    comments: getComments(state),\n    input: state.app.input,\n    layer: state.layers.current,\n    offsetX: (state.machine.rectangular ? (state.machine.minX + state.machine.maxX) / 2.0 : state.machine.maxRadius),\n    offsetY: (state.machine.rectangular ? (state.machine.minY + state.machine.maxY) / 2.0 : state.machine.maxRadius),\n    width:   (state.machine.rectangular ? (state.machine.maxX - state.machine.minX) : (2.0 * state.machine.maxRadius)),\n    height:  (state.machine.rectangular ? (state.machine.maxY - state.machine.minY) : (2.0 * state.machine.maxRadius)),\n    maxRadius: (state.machine.rectangular ?\n      Math.sqrt(Math.pow(state.machine.maxX - state.machine.minX, 2.0) +\n                Math.pow(state.machine.maxY - state.machine.minY, 2.0)) :\n      state.machine.maxRadius),\n    fileName: state.exporter.fileName,\n    fileType: state.exporter.fileType,\n    pre: (state.exporter.fileType !== svgTypeName ? state.exporter.pre : ''),\n    post: (state.exporter.fileType !== svgTypeName ? state.exporter.post : ''),\n    options: new Exporter().getOptions()\n  }\n}\n\nconst exporters = {\n  [gcodeTypeName]: GCodeExporter,\n  [thrTypeName]: ThetaRhoExporter,\n  [svgTypeName]: SvgExporter,\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    open: () => {\n      dispatch(updateExporter({show: true}))\n    },\n    close: () => {\n      dispatch(updateExporter({show: false}))\n    },\n    onChange: (attrs) => {\n      dispatch(updateExporter(attrs))\n    },\n  }\n}\n\nclass Downloader extends Component {\n  // Record this event to google analytics.\n  gaRecord(fileType) {\n    let savedCode = 'Saved: ' + this.props.input\n    if (this.props.input === 'shape' || this.props.input === 'Shape') {\n      savedCode = savedCode + ': ' + this.props.layer\n    }\n    ReactGA.event({\n      category: fileType,\n      action: savedCode,\n    })\n  }\n\n  download() {\n    let exporter = new exporters[this.props.fileType](this.props)\n    let startTime = performance.now()\n    let fileName = this.props.fileName\n\n    exporter.export()\n\n    if (!fileName.includes('.')) {\n      fileName += exporter.fileExtension\n    }\n\n    this.gaRecord(exporter.label)\n    this.downloadFile(fileName, exporter.lines.join(\"\\n\"))\n    this.props.close()\n\n    let endTime = performance.now()\n    ReactGA.timing({\n      category: exporter.label,\n      variable: 'Save Code',\n      value: endTime - startTime, // in milliseconds\n    })\n  }\n\n  // Helper function to take a string and make the user download a text file with that text as the\n  // content. I don't really understand this, but I took it from here, and it seems to work:\n  // https://stackoverflow.com/a/18197511\n  downloadFile(fileName, text) {\n    let link = document.createElement('a')\n    link.download = fileName\n\n    let fileType = 'text/plain;charset=utf-8'\n    if (this.props.fileType === svgTypeName) {\n      fileType = 'image/svg+xml;charset=utf-8'\n    }\n    let blob = new Blob([text],{type: fileType})\n\n    // Windows Edge fix\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      window.navigator.msSaveOrOpenBlob(blob, fileName)\n    } else {\n      link.href = URL.createObjectURL(blob)\n      if (document.createEvent) {\n        var event = document.createEvent('MouseEvents')\n        event.initEvent('click', true, true)\n        link.dispatchEvent(event)\n      } else {\n        link.click()\n      }\n      URL.revokeObjectURL(link.href)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Button className=\"ml-2 mr-3\" variant=\"primary\" onClick={this.props.open}>Export</Button>\n        <Modal size=\"lg\" show={this.props.show} onHide={this.props.close}>\n          <Modal.Header closeButton>\n            <Modal.Title>Export to a file</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <DropdownOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              optionKey=\"fileType\"\n              key=\"fileType\"\n              index={0}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"fileName\"\n              optionKey=\"fileName\"\n              index={1}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"pre\"\n              optionKey=\"pre\"\n              index={2}\n              model={this.props} />\n\n            <InputOption\n              onChange={this.props.onChange}\n              options={this.props.options}\n              key=\"post\"\n              optionKey=\"post\"\n              index={3}\n              model={this.props} />\n\n            <Row>\n              <Col sm={5}>\n              </Col>\n              <Col sm={7}>\n                See <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/jeffeb3/sandify/wiki#export-variables\"> the wiki </a> for details on available program export variables.\n              </Col>\n            </Row>\n\n            <div className=\"mt-2\">\n              <CheckboxOption\n                onChange={this.props.onChange}\n                options={this.props.options}\n                optionKey=\"reverse\"\n                key=\"reverse\"\n                index={4}\n                model={this.props} />\n            </div>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button id=\"code-close\" variant=\"link\" onClick={this.props.close}>Close</Button>\n            <Button id=\"code-download\" variant=\"primary\" onClick={this.download.bind(this)}>Download</Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Downloader)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Slider from 'rc-slider'\nimport 'rc-slider/assets/index.css'\nimport PreviewWindow from './PreviewWindow'\nimport Downloader from '../exporter/Downloader'\nimport { updatePreview } from './previewSlice'\nimport { getVerticesStats } from '../machine/selectors'\nimport './MachinePreview.scss'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    sliderValue: state.preview.sliderValue,\n    verticesStats: getVerticesStats(state),\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onSlider: (value) => {\n      dispatch(updatePreview({sliderValue: value}))\n    },\n  }\n}\n\nclass MachinePreview extends Component {\n  render() {\n    return (\n      <div className=\"machine-preview d-flex flex-grow-1 flex-column\" id=\"machine-preview\">\n        <div className=\"flex-grow-1 d-flex flex-column\">\n          <div id=\"preview-wrapper\" className=\"preview-wrapper d-flex flex-column align-items-center\">\n            <PreviewWindow />\n          </div>\n\n          <div className=\"mt-auto pt-2 bg-white d-flex align-items-center\">\n            <div className=\"flex-grow-1\">\n              <div className=\"mx-2\">\n                Points: {this.props.verticesStats.numPoints}, Distance: {this.props.verticesStats.distance}\n              </div>\n\n              <div className=\"p-3\">\n                  <Slider\n                    value={this.props.sliderValue}\n                    step={0.1}\n                    min={0.0}\n                    max={100.0}\n                    onChange={this.props.onSlider}\n                  />\n              </div>\n            </div>\n            <Downloader />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MachinePreview)\n","import { configureStore } from \"@reduxjs/toolkit\"\nimport { combineReducers } from 'redux'\nimport appReducer from './appSlice'\nimport machineReducer from '../machine/machineSlice'\nimport exporterReducer from '../exporter/exporterSlice'\nimport previewReducer from '../preview/previewSlice'\nimport { registeredShapes } from '../../models/shapes'\nimport { loadState, saveState } from '../../common/localStorage'\nimport layersReducer, { setCurrentLayer, addLayer } from '../layers/layersSlice'\n\n//const customizedMiddleware = getDefaultMiddleware({\n//  immutableCheck: {\n//    ignoredPaths: ['importer.vertices']\n//  },\n//  serializableCheck: {\n//    ignoredPaths: ['importer.vertices']\n//  }\n//})\n\nconst store = configureStore({\n  reducer: combineReducers({\n    app: appReducer,\n    layers: layersReducer,\n    exporter: exporterReducer,\n    machine: machineReducer,\n    preview: previewReducer\n  })\n})\n\n// set to true when running locally if you want to preserve your shape\n// settings across page loads; don't forget to toggle false when done testing!\nconst persistState = false\n\nif (persistState) {\n  // override default values with saved ones\n  const persistedState = loadState()\n\n  if (persistedState) {\n    persistedState.layers.allIds.forEach((id) => {\n      let layer = persistedState.layers.byId[id]\n      store.dispatch(addLayer(layer))\n    })\n    store.dispatch(setCurrentLayer(persistedState.layers.current))\n  }\n} else {\n  const storedShape = localStorage.getItem('currentShape')\n  const currentShape = storedShape && registeredShapes[storedShape] ? storedShape : 'polygon'\n  const layer = registeredShapes[currentShape].getInitialState()\n\n  store.dispatch(addLayer(layer))\n\n  const state = store.getState()\n  store.dispatch(setCurrentLayer(state.layers.byId[state.layers.allIds[0]].id))\n}\n\nif (persistState) {\n  store.subscribe(() => {\n    const state = store.getState()\n\n    saveState({\n      layers: state.layers\n    })\n  })\n}\n\nexport default store\n","import React, { Component } from 'react'\nimport { Col, Row } from 'react-bootstrap'\nimport { Provider } from 'react-redux'\nimport Header from './Header'\nimport InputTabs from './InputTabs'\nimport MachinePreview from '../preview/MachinePreview'\nimport store from './store'\nimport './App.scss'\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Header />\n\n          <main>\n            <Row className=\"no-gutters\">\n              <Col className=\"full-page d-flex flex-column\">\n                <MachinePreview />\n              </Col>\n\n              <div id=\"sidebar\">\n                <InputTabs />\n              </div>\n            </Row>\n          </main>\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './features/app/reactGA'\nimport App from './features/app/App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}